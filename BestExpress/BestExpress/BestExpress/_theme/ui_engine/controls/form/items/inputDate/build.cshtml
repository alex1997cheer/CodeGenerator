@using SyntacticSugar;
@using Best.Entities.Common;
@using Best.Entities.UiEngine;
@using Best.Site.Areas.BestPalace.Controllers;
@using RazorEngine;
@using RazorEngine.Templating;
@{
    Dictionary<string, string> attrList = Model.attrList;
    Dictionary<string, string> eventList = Model.eventList;
    var specialEvents = new string[] { "callBack", "preinit", "setValue", "getValue" };
    var id = attrList["name"];
    var name = attrList["name"];
    var height = PubControlHelper.GetControlAttributeByBuild(attrList, "height");
    var width = PubControlHelper.GetControlAttributeByBuild(attrList, "width");
    var formatString = PubControlHelper.GetControlAttributeByBuild(attrList, "formatString");
    var language = PubControlHelper.GetControlAttributeByBuild(attrList, "language");
    if (formatString == "")
    {
        formatString = "d";
    }
    if (language == "")
    {
        language = "zh";
    }

    @PubUiEngineGet.GetElementStatusNetObj(Model.elementId + "", Model.addressId, Model.elementId)
    string showClass = PubUiEngineGet.IIF("isHide" + Model.elementId, "hide", "");
    string onlyClass = PubUiEngineGet.IIF("isReadOnly" + Model.elementId, ",readonly:true", ",readonly:false");
    string finallyThisIsMyParsedTemplate =RazorEngineExtension.RazorPars(PubUiEngineGet.GetUiEngineBuildCodePvControlEventDir, FileSugar.FileToString(PubUiEngineGet.GetUiEngineBuildCodePvControlEventDir), new { key = "getsetdate", name = name });
}
@using Best.Entities.UiEngine
@using SyntacticSugar
<!------------------@(name) BEGIN------------------>
<div name="@name"  id="@name"  class="@showClass" ></div>
<script type="text/javascript">
    $("#@name").jqxDateTimeInput({ value:null,formatString: '@formatString',culture:"@language"@GetAttrByNameValue("width",@width)@GetAttrByNameValue("height", @height) @onlyClass  });
</script>
<script>
   $(function () {

        @foreach (var item in EventManager.GetInstance.GetEeventList) {
            var isSpecialEvent=item.Name.IsIn(specialEvents);
            if (isSpecialEvent){
                switch (item.Name)
                {
                    case "callBack":
                        @: @(GetEvent(item.Name,eventList)) 
                        break;
                    case "preinit":
                        @: @(GetEvent(item.Name,eventList)) 
                        break;
                }
            }
            else {
                @: $("#@name").on("@item.Name", function () {
                @: @(GetEvent(item.Name, eventList)) 
                @:
                @:});

            }
        }




    })
   
    @finallyThisIsMyParsedTemplate
</script>

@helper GetId(string eventName, string id)
{
    @: @eventName@("_")@id
}

@helper GetEvent(string eventName, Dictionary<string, string> eventList)
{
if (eventList.ContainsKey(eventName))
{
        @: @eventList[eventName].ToHtmlDecode()
  }
}
@helper GetAttrByNameValue(string name, string value)
{
if (value!=null&&value != "")
{ 
        @: ,@name:@(value) 
 }
}
<!------------------@(name) END------------------>