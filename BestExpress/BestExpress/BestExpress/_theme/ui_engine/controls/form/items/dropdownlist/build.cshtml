@using Best.Site.Areas.BestPalace.Controllers;
@{
    Dictionary<string, string> attrList = Model.attrList;
    Dictionary<string, string> eventList = Model.eventList;
    var specialEvents = new string[] { "callBack", "preinit" };
    var id = attrList["name"];
    var name = attrList["name"];
    @PubUiEngineGet.GetElementStatusNetObj(Model.elementId + "", Model.addressId, Model.elementId)
    string onlyattr = PubUiEngineGet.IIF("isReadOnly" + Model.elementId, "readonly=readonly", "");
    var apiKey = PubControlHelper.GetControlAttributeByBuild(attrList, "apiKey");
    var apiValue = PubControlHelper.GetControlAttributeByBuild(attrList, "apiValue");
    var width = PubControlHelper.GetControlAttributeByBuild(attrList, "width");
    var height = PubControlHelper.GetControlAttributeByBuild(attrList, "height");
    var class_ = PubControlHelper.GetControlAttributeByBuild(attrList, "class");
    var style = PubControlHelper.GetControlAttributeByBuild(attrList, "style");
    var defaultValue = PubControlHelper.GetControlAttributeByBuild(attrList, "defaultValue");
    var searchMode = PubControlHelper.GetControlAttributeByBuild(attrList, "searchMode");
    var filterable = PubControlHelper.GetControlAttributeByBuild(attrList, "filterable", "true");
    var selectedIndex = PubControlHelper.GetControlAttributeByBuild(attrList, "selectedIndex");
    string showClass = PubUiEngineGet.IIF("isHide" + Model.elementId, "hide", "");
    string onlyClass = PubUiEngineGet.IIF("isReadOnly" + Model.elementId, ",disabled:true", ",disabled:false");
    string finallyThisIsMyParsedTemplate = RazorEngineExtension.RazorPars(PubUiEngineGet.GetUiEngineBuildCodePvControlEventDir, FileSugar.FileToString(PubUiEngineGet.GetUiEngineBuildCodePvControlEventDir), new { key = "getset", name = name });
}
@using RazorEngine;
@using RazorEngine.Templating;
@using Best.Site.Areas.BestPalace.Controllers
@using Best.Entities.UiEngine
@using SyntacticSugar
<!------------------@(name) BEGIN------------------>
<div id="@id" name="@name" @onlyattr class="@class_.AppendString(showClass," ",false)" style="@style"></div>

<script>
    $(function () {
        var url = "@Model.api";
        // prepare the data
        var source =
        {
            datatype: "json",
            datafields: [
                { name: '@apiKey' },
                { name: '@apiValue' }
            ],
            url: url,
            async: true
        };
        var dataAdapter = new $.jqx.dataAdapter(source);
        // Create a jqxDropDownList
        $("#@name").jqxDropDownList({
            searchMode: "@searchMode", filterable: @filterable, filterPlaceHolder: '', selectedIndex: @selectedIndex, source: dataAdapter, placeHolder: "@defaultValue", displayMember: "@apiValue", valueMember: "@apiKey", width: "@width", height: "@height"
        });


        @foreach (var item in EventManager.GetInstance.GetEeventList) {
            var isSpecialEvent=item.Name.IsIn(specialEvents);
            if (isSpecialEvent){
                switch (item.Name)
                {
                    case "preinit":
                        @: @(GetEvent(item.Name,eventList))
                                                break;
                    case "callBack":
                         @: @(GetEvent(item.Name,eventList))
                                        break;
                }
            }
            else {
                @: $("#@name").on("@item.Name", function () {
                                                    @: @(GetEvent(item.Name, eventList))
                                                    @:
                                                    @:});

            }
        }
    })
    @finallyThisIsMyParsedTemplate
</script>

@helper GetId(string eventName, string id)
{
    @: @eventName@("_")@id
}

@helper GetEvent(string eventName, Dictionary<string, string> eventList)
{
if (eventList.ContainsKey(eventName))
{
        @: @eventList[eventName]
  }
}
<!------------------@(name) END------------------>