(function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof require == "function" && require;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e)
            }, l, l.exports, e, t, n, r)
        }
        return n[o].exports
    }
    var i = typeof require == "function" && require;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s
})({
    1: [function(require, module, exports) {
        "use strict";
        (function(global, factory) {
            if (typeof module === "object" && typeof module.exports === "object") {
                module.exports = global.document ? factory(global, true) : function(w) {
                    if (!w.document) {
                        throw new Error("jQuery requires a window with a document")
                    }
                    return factory(w)
                }
            } else {
                factory(global)
            }
        })(typeof window !== "undefined" ? window : undefined, function(window, noGlobal) {
            var arr = [];
            var _slice = arr.slice;
            var concat = arr.concat;
            var push = arr.push;
            var indexOf = arr.indexOf;
            var class2type = {};
            var toString = class2type.toString;
            var hasOwn = class2type.hasOwnProperty;
            var support = {};
            var document = window.document,
                version = "2.1.3",
                jQuery = function jQuery(selector, context) {
                    return new jQuery.fn.init(selector, context)
                },
                rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
                rmsPrefix = /^-ms-/,
                rdashAlpha = /-([\da-z])/gi,
                fcamelCase = function fcamelCase(all, letter) {
                    return letter.toUpperCase()
                };
            jQuery.fn = jQuery.prototype = {
                jquery: version,
                constructor: jQuery,
                selector: "",
                length: 0,
                toArray: function toArray() {
                    return _slice.call(this)
                },
                get: function get(num) {
                    return num != null ? num < 0 ? this[num + this.length] : this[num] : _slice.call(this)
                },
                pushStack: function pushStack(elems) {
                    var ret = jQuery.merge(this.constructor(), elems);
                    ret.prevObject = this;
                    ret.context = this.context;
                    return ret
                },
                each: function each(callback, args) {
                    return jQuery.each(this, callback, args)
                },
                map: function map(callback) {
                    return this.pushStack(jQuery.map(this, function(elem, i) {
                        return callback.call(elem, i, elem)
                    }))
                },
                slice: function slice() {
                    return this.pushStack(_slice.apply(this, arguments))
                },
                first: function first() {
                    return this.eq(0)
                },
                last: function last() {
                    return this.eq(-1)
                },
                eq: function eq(i) {
                    var len = this.length,
                        j = +i + (i < 0 ? len : 0);
                    return this.pushStack(j >= 0 && j < len ? [this[j]] : [])
                },
                end: function end() {
                    return this.prevObject || this.constructor(null)
                },
                push: push,
                sort: arr.sort,
                splice: arr.splice
            };
            jQuery.extend = jQuery.fn.extend = function() {
                var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {},
                    i = 1,
                    length = arguments.length,
                    deep = false;
                if (typeof target === "boolean") {
                    deep = target;
                    target = arguments[i] || {};
                    i++
                }
                if (typeof target !== "object" && !jQuery.isFunction(target)) {
                    target = {}
                }
                if (i === length) {
                    target = this;
                    i--
                }
                for (; i < length; i++) {
                    if ((options = arguments[i]) != null) {
                        for (name in options) {
                            src = target[name];
                            copy = options[name];
                            if (target === copy) {
                                continue
                            }
                            if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                                if (copyIsArray) {
                                    copyIsArray = false;
                                    clone = src && jQuery.isArray(src) ? src : []
                                } else {
                                    clone = src && jQuery.isPlainObject(src) ? src : {}
                                }
                                target[name] = jQuery.extend(deep, clone, copy)
                            } else if (copy !== undefined) {
                                target[name] = copy
                            }
                        }
                    }
                }
                return target
            };
            jQuery.extend({
                expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
                isReady: true,
                error: function error(msg) {
                    throw new Error(msg)
                },
                noop: function noop() {},
                isFunction: function isFunction(obj) {
                    return jQuery.type(obj) === "function"
                },
                isArray: Array.isArray,
                isWindow: function isWindow(obj) {
                    return obj != null && obj === obj.window
                },
                isNumeric: function isNumeric(obj) {
                    return !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0
                },
                isPlainObject: function isPlainObject(obj) {
                    if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                        return false
                    }
                    if (obj.constructor && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                        return false
                    }
                    return true
                },
                isEmptyObject: function isEmptyObject(obj) {
                    var name;
                    for (name in obj) {
                        return false
                    }
                    return true
                },
                type: function type(obj) {
                    if (obj == null) {
                        return obj + ""
                    }
                    return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj
                },
                globalEval: function globalEval(code) {
                    var script, indirect = eval;
                    code = jQuery.trim(code);
                    if (code) {
                        if (code.indexOf("use strict") === 1) {
                            script = document.createElement("script");
                            script.text = code;
                            document.head.appendChild(script).parentNode.removeChild(script)
                        } else {
                            indirect(code)
                        }
                    }
                },
                camelCase: function camelCase(string) {
                    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase)
                },
                nodeName: function nodeName(elem, name) {
                    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase()
                },
                each: function each(obj, callback, args) {
                    var value, i = 0,
                        length = obj.length,
                        isArray = isArraylike(obj);
                    if (args) {
                        if (isArray) {
                            for (; i < length; i++) {
                                value = callback.apply(obj[i], args);
                                if (value === false) {
                                    break
                                }
                            }
                        } else {
                            for (i in obj) {
                                value = callback.apply(obj[i], args);
                                if (value === false) {
                                    break
                                }
                            }
                        }
                    } else {
                        if (isArray) {
                            for (; i < length; i++) {
                                value = callback.call(obj[i], i, obj[i]);
                                if (value === false) {
                                    break
                                }
                            }
                        } else {
                            for (i in obj) {
                                value = callback.call(obj[i], i, obj[i]);
                                if (value === false) {
                                    break
                                }
                            }
                        }
                    }
                    return obj
                },
                trim: function trim(text) {
                    return text == null ? "" : (text + "").replace(rtrim, "")
                },
                makeArray: function makeArray(arr, results) {
                    var ret = results || [];
                    if (arr != null) {
                        if (isArraylike(Object(arr))) {
                            jQuery.merge(ret, typeof arr === "string" ? [arr] : arr)
                        } else {
                            push.call(ret, arr)
                        }
                    }
                    return ret
                },
                inArray: function inArray(elem, arr, i) {
                    return arr == null ? -1 : indexOf.call(arr, elem, i)
                },
                merge: function merge(first, second) {
                    var len = +second.length,
                        j = 0,
                        i = first.length;
                    for (; j < len; j++) {
                        first[i++] = second[j]
                    }
                    first.length = i;
                    return first
                },
                grep: function grep(elems, callback, invert) {
                    var callbackInverse, matches = [],
                        i = 0,
                        length = elems.length,
                        callbackExpect = !invert;
                    for (; i < length; i++) {
                        callbackInverse = !callback(elems[i], i);
                        if (callbackInverse !== callbackExpect) {
                            matches.push(elems[i])
                        }
                    }
                    return matches
                },
                map: function map(elems, callback, arg) {
                    var value, i = 0,
                        length = elems.length,
                        isArray = isArraylike(elems),
                        ret = [];
                    if (isArray) {
                        for (; i < length; i++) {
                            value = callback(elems[i], i, arg);
                            if (value != null) {
                                ret.push(value)
                            }
                        }
                    } else {
                        for (i in elems) {
                            value = callback(elems[i], i, arg);
                            if (value != null) {
                                ret.push(value)
                            }
                        }
                    }
                    return concat.apply([], ret)
                },
                guid: 1,
                proxy: function proxy(fn, context) {
                    var tmp, args, proxy;
                    if (typeof context === "string") {
                        tmp = fn[context];
                        context = fn;
                        fn = tmp
                    }
                    if (!jQuery.isFunction(fn)) {
                        return undefined
                    }
                    args = _slice.call(arguments, 2);
                    proxy = function() {
                        return fn.apply(context || this, args.concat(_slice.call(arguments)))
                    };
                    proxy.guid = fn.guid = fn.guid || jQuery.guid++;
                    return proxy
                },
                now: Date.now,
                support: support
            });
            jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
                class2type["[object " + name + "]"] = name.toLowerCase()
            });

            function isArraylike(obj) {
                var length = obj.length,
                    type = jQuery.type(obj);
                if (type === "function" || jQuery.isWindow(obj)) {
                    return false
                }
                if (obj.nodeType === 1 && length) {
                    return true
                }
                return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj
            }
            var Sizzle = function(window) {
                var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + 1 * new Date,
                    preferredDoc = window.document,
                    dirruns = 0,
                    done = 0,
                    classCache = createCache(),
                    tokenCache = createCache(),
                    compilerCache = createCache(),
                    sortOrder = function sortOrder(a, b) {
                        if (a === b) {
                            hasDuplicate = true
                        }
                        return 0
                    },
                    MAX_NEGATIVE = 1 << 31,
                    hasOwn = {}.hasOwnProperty,
                    arr = [],
                    pop = arr.pop,
                    push_native = arr.push,
                    push = arr.push,
                    slice = arr.slice,
                    indexOf = function indexOf(list, elem) {
                        var i = 0,
                            len = list.length;
                        for (; i < len; i++) {
                            if (list[i] === elem) {
                                return i
                            }
                        }
                        return -1
                    },
                    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
                    whitespace = "[\\x20\\t\\r\\n\\f]",
                    characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
                    identifier = characterEncoding.replace("w", "w#"),
                    attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace + "*([*^$|!~]?=)" + whitespace + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
                    pseudos = ":(" + characterEncoding + ")(?:\\((" + "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + ".*" + ")\\)|)",
                    rwhitespace = new RegExp(whitespace + "+", "g"),
                    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
                    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
                    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
                    rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
                    rpseudo = new RegExp(pseudos),
                    ridentifier = new RegExp("^" + identifier + "$"),
                    matchExpr = {
                        ID: new RegExp("^#(" + characterEncoding + ")"),
                        CLASS: new RegExp("^\\.(" + characterEncoding + ")"),
                        TAG: new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
                        ATTR: new RegExp("^" + attributes),
                        PSEUDO: new RegExp("^" + pseudos),
                        CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
                        bool: new RegExp("^(?:" + booleans + ")$", "i"),
                        needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
                    },
                    rinputs = /^(?:input|select|textarea|button)$/i,
                    rheader = /^h\d$/i,
                    rnative = /^[^{]+\{\s*\[native \w/,
                    rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
                    rsibling = /[+~]/,
                    rescape = /'|\\/g,
                    runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
                    funescape = function funescape(_, escaped, escapedWhitespace) {
                        var high = "0x" + escaped - 65536;
                        return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320)
                    },
                    unloadHandler = function unloadHandler() {
                        setDocument()
                    };
                try {
                    push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
                    arr[preferredDoc.childNodes.length].nodeType
                } catch (e) {
                    push = {
                        apply: arr.length ? function(target, els) {
                            push_native.apply(target, slice.call(els))
                        } : function(target, els) {
                            var j = target.length,
                                i = 0;
                            while (target[j++] = els[i++]) {}
                            target.length = j - 1
                        }
                    }
                }

                function Sizzle(selector, context, results, seed) {
                    var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
                    if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                        setDocument(context)
                    }
                    context = context || document;
                    results = results || [];
                    nodeType = context.nodeType;
                    if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
                        return results
                    }
                    if (!seed && documentIsHTML) {
                        if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
                            if (m = match[1]) {
                                if (nodeType === 9) {
                                    elem = context.getElementById(m);
                                    if (elem && elem.parentNode) {
                                        if (elem.id === m) {
                                            results.push(elem);
                                            return results
                                        }
                                    } else {
                                        return results
                                    }
                                } else {
                                    if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                        results.push(elem);
                                        return results
                                    }
                                }
                            } else if (match[2]) {
                                push.apply(results, context.getElementsByTagName(selector));
                                return results
                            } else if ((m = match[3]) && support.getElementsByClassName) {
                                push.apply(results, context.getElementsByClassName(m));
                                return results
                            }
                        }
                        if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                            nid = old = expando;
                            newContext = context;
                            newSelector = nodeType !== 1 && selector;
                            if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                                groups = tokenize(selector);
                                if (old = context.getAttribute("id")) {
                                    nid = old.replace(rescape, "\\$&")
                                } else {
                                    context.setAttribute("id", nid)
                                }
                                nid = "[id='" + nid + "'] ";
                                i = groups.length;
                                while (i--) {
                                    groups[i] = nid + toSelector(groups[i])
                                }
                                newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
                                newSelector = groups.join(",")
                            }
                            if (newSelector) {
                                try {
                                    push.apply(results, newContext.querySelectorAll(newSelector));
                                    return results
                                } catch (qsaError) {} finally {
                                    if (!old) {
                                        context.removeAttribute("id")
                                    }
                                }
                            }
                        }
                    }
                    return select(selector.replace(rtrim, "$1"), context, results, seed)
                }

                function createCache() {
                    var keys = [];

                    function cache(key, value) {
                        if (keys.push(key + " ") > Expr.cacheLength) {
                            delete cache[keys.shift()]
                        }
                        return cache[key + " "] = value
                    }
                    return cache
                }

                function markFunction(fn) {
                    fn[expando] = true;
                    return fn
                }

                function assert(fn) {
                    var div = document.createElement("div");
                    try {
                        return !!fn(div)
                    } catch (e) {
                        return false
                    } finally {
                        if (div.parentNode) {
                            div.parentNode.removeChild(div)
                        }
                        div = null
                    }
                }

                function addHandle(attrs, handler) {
                    var arr = attrs.split("|"),
                        i = attrs.length;
                    while (i--) {
                        Expr.attrHandle[arr[i]] = handler
                    }
                }

                function siblingCheck(a, b) {
                    var cur = b && a,
                        diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
                    if (diff) {
                        return diff
                    }
                    if (cur) {
                        while (cur = cur.nextSibling) {
                            if (cur === b) {
                                return -1
                            }
                        }
                    }
                    return a ? 1 : -1
                }

                function createInputPseudo(type) {
                    return function(elem) {
                        var name = elem.nodeName.toLowerCase();
                        return name === "input" && elem.type === type
                    }
                }

                function createButtonPseudo(type) {
                    return function(elem) {
                        var name = elem.nodeName.toLowerCase();
                        return (name === "input" || name === "button") && elem.type === type
                    }
                }

                function createPositionalPseudo(fn) {
                    return markFunction(function(argument) {
                        argument = +argument;
                        return markFunction(function(seed, matches) {
                            var j, matchIndexes = fn([], seed.length, argument),
                                i = matchIndexes.length;
                            while (i--) {
                                if (seed[j = matchIndexes[i]]) {
                                    seed[j] = !(matches[j] = seed[j])
                                }
                            }
                        })
                    })
                }

                function testContext(context) {
                    return context && typeof context.getElementsByTagName !== "undefined" && context
                }
                support = Sizzle.support = {};
                isXML = Sizzle.isXML = function(elem) {
                    var documentElement = elem && (elem.ownerDocument || elem).documentElement;
                    return documentElement ? documentElement.nodeName !== "HTML" : false
                };
                setDocument = Sizzle.setDocument = function(node) {
                    var hasCompare, parent, doc = node ? node.ownerDocument || node : preferredDoc;
                    if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                        return document
                    }
                    document = doc;
                    docElem = doc.documentElement;
                    parent = doc.defaultView;
                    if (parent && parent !== parent.top) {
                        if (parent.addEventListener) {
                            parent.addEventListener("unload", unloadHandler, false)
                        } else if (parent.attachEvent) {
                            parent.attachEvent("onunload", unloadHandler)
                        }
                    }
                    documentIsHTML = !isXML(doc);
                    support.attributes = assert(function(div) {
                        div.className = "i";
                        return !div.getAttribute("className")
                    });
                    support.getElementsByTagName = assert(function(div) {
                        div.appendChild(doc.createComment(""));
                        return !div.getElementsByTagName("*").length
                    });
                    support.getElementsByClassName = rnative.test(doc.getElementsByClassName);
                    support.getById = assert(function(div) {
                        docElem.appendChild(div).id = expando;
                        return !doc.getElementsByName || !doc.getElementsByName(expando).length
                    });
                    if (support.getById) {
                        Expr.find["ID"] = function(id, context) {
                            if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                                var m = context.getElementById(id);
                                return m && m.parentNode ? [m] : []
                            }
                        };
                        Expr.filter["ID"] = function(id) {
                            var attrId = id.replace(runescape, funescape);
                            return function(elem) {
                                return elem.getAttribute("id") === attrId
                            }
                        }
                    } else {
                        delete Expr.find["ID"];
                        Expr.filter["ID"] = function(id) {
                            var attrId = id.replace(runescape, funescape);
                            return function(elem) {
                                var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                                return node && node.value === attrId
                            }
                        }
                    }
                    Expr.find["TAG"] = support.getElementsByTagName ? function(tag, context) {
                        if (typeof context.getElementsByTagName !== "undefined") {
                            return context.getElementsByTagName(tag)
                        } else if (support.qsa) {
                            return context.querySelectorAll(tag)
                        }
                    } : function(tag, context) {
                        var elem, tmp = [],
                            i = 0,
                            results = context.getElementsByTagName(tag);
                        if (tag === "*") {
                            while (elem = results[i++]) {
                                if (elem.nodeType === 1) {
                                    tmp.push(elem)
                                }
                            }
                            return tmp
                        }
                        return results
                    };
                    Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
                        if (documentIsHTML) {
                            return context.getElementsByClassName(className)
                        }
                    };
                    rbuggyMatches = [];
                    rbuggyQSA = [];
                    if (support.qsa = rnative.test(doc.querySelectorAll)) {
                        assert(function(div) {
                            docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\f]' msallowcapture=''>" + "<option selected=''></option></select>";
                            if (div.querySelectorAll("[msallowcapture^='']").length) {
                                rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")")
                            }
                            if (!div.querySelectorAll("[selected]").length) {
                                rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")")
                            }
                            if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
                                rbuggyQSA.push("~=")
                            }
                            if (!div.querySelectorAll(":checked").length) {
                                rbuggyQSA.push(":checked")
                            }
                            if (!div.querySelectorAll("a#" + expando + "+*").length) {
                                rbuggyQSA.push(".#.+[+~]")
                            }
                        });
                        assert(function(div) {
                            var input = doc.createElement("input");
                            input.setAttribute("type", "hidden");
                            div.appendChild(input).setAttribute("name", "D");
                            if (div.querySelectorAll("[name=d]").length) {
                                rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=")
                            }
                            if (!div.querySelectorAll(":enabled").length) {
                                rbuggyQSA.push(":enabled", ":disabled")
                            }
                            div.querySelectorAll("*,:x");
                            rbuggyQSA.push(",.*:")
                        })
                    }
                    if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                        assert(function(div) {
                            support.disconnectedMatch = matches.call(div, "div");
                            matches.call(div, "[s!='']:x");
                            rbuggyMatches.push("!=", pseudos)
                        })
                    }
                    rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
                    rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
                    hasCompare = rnative.test(docElem.compareDocumentPosition);
                    contains = hasCompare || rnative.test(docElem.contains) ? function(a, b) {
                        var adown = a.nodeType === 9 ? a.documentElement : a,
                            bup = b && b.parentNode;
                        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16))
                    } : function(a, b) {
                        if (b) {
                            while (b = b.parentNode) {
                                if (b === a) {
                                    return true
                                }
                            }
                        }
                        return false
                    };
                    sortOrder = hasCompare ? function(a, b) {
                        if (a === b) {
                            hasDuplicate = true;
                            return 0
                        }
                        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                        if (compare) {
                            return compare
                        }
                        compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
                        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
                            if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                                return -1
                            }
                            if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                                return 1
                            }
                            return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0
                        }
                        return compare & 4 ? -1 : 1
                    } : function(a, b) {
                        if (a === b) {
                            hasDuplicate = true;
                            return 0
                        }
                        var cur, i = 0,
                            aup = a.parentNode,
                            bup = b.parentNode,
                            ap = [a],
                            bp = [b];
                        if (!aup || !bup) {
                            return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0
                        } else if (aup === bup) {
                            return siblingCheck(a, b)
                        }
                        cur = a;
                        while (cur = cur.parentNode) {
                            ap.unshift(cur)
                        }
                        cur = b;
                        while (cur = cur.parentNode) {
                            bp.unshift(cur)
                        }
                        while (ap[i] === bp[i]) {
                            i++
                        }
                        return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0
                    };
                    return doc
                };
                Sizzle.matches = function(expr, elements) {
                    return Sizzle(expr, null, null, elements)
                };
                Sizzle.matchesSelector = function(elem, expr) {
                    if ((elem.ownerDocument || elem) !== document) {
                        setDocument(elem)
                    }
                    expr = expr.replace(rattributeQuotes, "='$1']");
                    if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                        try {
                            var ret = matches.call(elem, expr);
                            if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                                return ret
                            }
                        } catch (e) {}
                    }
                    return Sizzle(expr, document, null, [elem]).length > 0
                };
                Sizzle.contains = function(context, elem) {
                    if ((context.ownerDocument || context) !== document) {
                        setDocument(context)
                    }
                    return contains(context, elem)
                };
                Sizzle.attr = function(elem, name) {
                    if ((elem.ownerDocument || elem) !== document) {
                        setDocument(elem)
                    }
                    var fn = Expr.attrHandle[name.toLowerCase()],
                        val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
                    return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null
                };
                Sizzle.error = function(msg) {
                    throw new Error("Syntax error, unrecognized expression: " + msg)
                };
                Sizzle.uniqueSort = function(results) {
                    var elem, duplicates = [],
                        j = 0,
                        i = 0;
                    hasDuplicate = !support.detectDuplicates;
                    sortInput = !support.sortStable && results.slice(0);
                    results.sort(sortOrder);
                    if (hasDuplicate) {
                        while (elem = results[i++]) {
                            if (elem === results[i]) {
                                j = duplicates.push(i)
                            }
                        }
                        while (j--) {
                            results.splice(duplicates[j], 1)
                        }
                    }
                    sortInput = null;
                    return results
                };
                getText = Sizzle.getText = function(elem) {
                    var node, ret = "",
                        i = 0,
                        nodeType = elem.nodeType;
                    if (!nodeType) {
                        while (node = elem[i++]) {
                            ret += getText(node)
                        }
                    } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                        if (typeof elem.textContent === "string") {
                            return elem.textContent
                        } else {
                            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                                ret += getText(elem)
                            }
                        }
                    } else if (nodeType === 3 || nodeType === 4) {
                        return elem.nodeValue
                    }
                    return ret
                };
                Expr = Sizzle.selectors = {
                    cacheLength: 50,
                    createPseudo: markFunction,
                    match: matchExpr,
                    attrHandle: {},
                    find: {},
                    relative: {
                        ">": {
                            dir: "parentNode",
                            first: true
                        },
                        " ": {
                            dir: "parentNode"
                        },
                        "+": {
                            dir: "previousSibling",
                            first: true
                        },
                        "~": {
                            dir: "previousSibling"
                        }
                    },
                    preFilter: {
                        ATTR: function ATTR(match) {
                            match[1] = match[1].replace(runescape, funescape);
                            match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);
                            if (match[2] === "~=") {
                                match[3] = " " + match[3] + " "
                            }
                            return match.slice(0, 4)
                        },
                        CHILD: function CHILD(match) {
                            match[1] = match[1].toLowerCase();
                            if (match[1].slice(0, 3) === "nth") {
                                if (!match[3]) {
                                    Sizzle.error(match[0])
                                }
                                match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                                match[5] = +(match[7] + match[8] || match[3] === "odd")
                            } else if (match[3]) {
                                Sizzle.error(match[0])
                            }
                            return match
                        },
                        PSEUDO: function PSEUDO(match) {
                            var excess, unquoted = !match[6] && match[2];
                            if (matchExpr["CHILD"].test(match[0])) {
                                return null
                            }
                            if (match[3]) {
                                match[2] = match[4] || match[5] || ""
                            } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                                match[0] = match[0].slice(0, excess);
                                match[2] = unquoted.slice(0, excess)
                            }
                            return match.slice(0, 3)
                        }
                    },
                    filter: {
                        TAG: function TAG(nodeNameSelector) {
                            var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                            return nodeNameSelector === "*" ? function() {
                                return true
                            } : function(elem) {
                                return elem.nodeName && elem.nodeName.toLowerCase() === nodeName
                            }
                        },
                        CLASS: function CLASS(className) {
                            var pattern = classCache[className + " "];
                            return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function(elem) {
                                return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "")
                            })
                        },
                        ATTR: function ATTR(name, operator, check) {
                            return function(elem) {
                                var result = Sizzle.attr(elem, name);
                                if (result == null) {
                                    return operator === "!="
                                }
                                if (!operator) {
                                    return true
                                }
                                result += "";
                                return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false
                            }
                        },
                        CHILD: function CHILD(type, what, argument, first, last) {
                            var simple = type.slice(0, 3) !== "nth",
                                forward = type.slice(-4) !== "last",
                                ofType = what === "of-type";
                            return first === 1 && last === 0 ? function(elem) {
                                return !!elem.parentNode
                            } : function(elem, context, xml) {
                                var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling",
                                    parent = elem.parentNode,
                                    name = ofType && elem.nodeName.toLowerCase(),
                                    useCache = !xml && !ofType;
                                if (parent) {
                                    if (simple) {
                                        while (dir) {
                                            node = elem;
                                            while (node = node[dir]) {
                                                if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                                    return false
                                                }
                                            }
                                            start = dir = type === "only" && !start && "nextSibling"
                                        }
                                        return true
                                    }
                                    start = [forward ? parent.firstChild : parent.lastChild];
                                    if (forward && useCache) {
                                        outerCache = parent[expando] || (parent[expando] = {});
                                        cache = outerCache[type] || [];
                                        nodeIndex = cache[0] === dirruns && cache[1];
                                        diff = cache[0] === dirruns && cache[2];
                                        node = nodeIndex && parent.childNodes[nodeIndex];
                                        while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                            if (node.nodeType === 1 && ++diff && node === elem) {
                                                outerCache[type] = [dirruns, nodeIndex, diff];
                                                break
                                            }
                                        }
                                    } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                                        diff = cache[1]
                                    } else {
                                        while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                            if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                                if (useCache) {
                                                    (node[expando] || (node[expando] = {}))[type] = [dirruns, diff]
                                                }
                                                if (node === elem) {
                                                    break
                                                }
                                            }
                                        }
                                    }
                                    diff -= last;
                                    return diff === first || diff % first === 0 && diff / first >= 0
                                }
                            }
                        },
                        PSEUDO: function PSEUDO(pseudo, argument) {
                            var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                            if (fn[expando]) {
                                return fn(argument)
                            }
                            if (fn.length > 1) {
                                args = [pseudo, pseudo, "", argument];
                                return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function(seed, matches) {
                                    var idx, matched = fn(seed, argument),
                                        i = matched.length;
                                    while (i--) {
                                        idx = indexOf(seed, matched[i]);
                                        seed[idx] = !(matches[idx] = matched[i])
                                    }
                                }) : function(elem) {
                                    return fn(elem, 0, args)
                                }
                            }
                            return fn
                        }
                    },
                    pseudos: {
                        not: markFunction(function(selector) {
                            var input = [],
                                results = [],
                                matcher = compile(selector.replace(rtrim, "$1"));
                            return matcher[expando] ? markFunction(function(seed, matches, context, xml) {
                                var elem, unmatched = matcher(seed, null, xml, []),
                                    i = seed.length;
                                while (i--) {
                                    if (elem = unmatched[i]) {
                                        seed[i] = !(matches[i] = elem)
                                    }
                                }
                            }) : function(elem, context, xml) {
                                input[0] = elem;
                                matcher(input, null, xml, results);
                                input[0] = null;
                                return !results.pop()
                            }
                        }),
                        has: markFunction(function(selector) {
                            return function(elem) {
                                return Sizzle(selector, elem).length > 0
                            }
                        }),
                        contains: markFunction(function(text) {
                            text = text.replace(runescape, funescape);
                            return function(elem) {
                                return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1
                            }
                        }),
                        lang: markFunction(function(lang) {
                            if (!ridentifier.test(lang || "")) {
                                Sizzle.error("unsupported lang: " + lang)
                            }
                            lang = lang.replace(runescape, funescape).toLowerCase();
                            return function(elem) {
                                var elemLang;
                                do {
                                    if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                                        elemLang = elemLang.toLowerCase();
                                        return elemLang === lang || elemLang.indexOf(lang + "-") === 0
                                    }
                                } while ((elem = elem.parentNode) && elem.nodeType === 1);
                                return false
                            }
                        }),
                        target: function target(elem) {
                            var hash = window.location && window.location.hash;
                            return hash && hash.slice(1) === elem.id
                        },
                        root: function root(elem) {
                            return elem === docElem
                        },
                        focus: function focus(elem) {
                            return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex)
                        },
                        enabled: function enabled(elem) {
                            return elem.disabled === false
                        },
                        disabled: function disabled(elem) {
                            return elem.disabled === true
                        },
                        checked: function checked(elem) {
                            var nodeName = elem.nodeName.toLowerCase();
                            return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected
                        },
                        selected: function selected(elem) {
                            if (elem.parentNode) {
                                elem.parentNode.selectedIndex
                            }
                            return elem.selected === true
                        },
                        empty: function empty(elem) {
                            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                                if (elem.nodeType < 6) {
                                    return false
                                }
                            }
                            return true
                        },
                        parent: function parent(elem) {
                            return !Expr.pseudos["empty"](elem)
                        },
                        header: function header(elem) {
                            return rheader.test(elem.nodeName)
                        },
                        input: function input(elem) {
                            return rinputs.test(elem.nodeName)
                        },
                        button: function button(elem) {
                            var name = elem.nodeName.toLowerCase();
                            return name === "input" && elem.type === "button" || name === "button"
                        },
                        text: function text(elem) {
                            var attr;
                            return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text")
                        },
                        first: createPositionalPseudo(function() {
                            return [0]
                        }),
                        last: createPositionalPseudo(function(matchIndexes, length) {
                            return [length - 1]
                        }),
                        eq: createPositionalPseudo(function(matchIndexes, length, argument) {
                            return [argument < 0 ? argument + length : argument]
                        }),
                        even: createPositionalPseudo(function(matchIndexes, length) {
                            var i = 0;
                            for (; i < length; i += 2) {
                                matchIndexes.push(i)
                            }
                            return matchIndexes
                        }),
                        odd: createPositionalPseudo(function(matchIndexes, length) {
                            var i = 1;
                            for (; i < length; i += 2) {
                                matchIndexes.push(i)
                            }
                            return matchIndexes
                        }),
                        lt: createPositionalPseudo(function(matchIndexes, length, argument) {
                            var i = argument < 0 ? argument + length : argument;
                            for (; --i >= 0;) {
                                matchIndexes.push(i)
                            }
                            return matchIndexes
                        }),
                        gt: createPositionalPseudo(function(matchIndexes, length, argument) {
                            var i = argument < 0 ? argument + length : argument;
                            for (; ++i < length;) {
                                matchIndexes.push(i)
                            }
                            return matchIndexes
                        })
                    }
                };
                Expr.pseudos["nth"] = Expr.pseudos["eq"];
                for (i in {
                        radio: true,
                        checkbox: true,
                        file: true,
                        password: true,
                        image: true
                    }) {
                    Expr.pseudos[i] = createInputPseudo(i)
                }
                for (i in {
                        submit: true,
                        reset: true
                    }) {
                    Expr.pseudos[i] = createButtonPseudo(i)
                }

                function setFilters() {}
                setFilters.prototype = Expr.filters = Expr.pseudos;
                Expr.setFilters = new setFilters;
                tokenize = Sizzle.tokenize = function(selector, parseOnly) {
                    var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
                    if (cached) {
                        return parseOnly ? 0 : cached.slice(0)
                    }
                    soFar = selector;
                    groups = [];
                    preFilters = Expr.preFilter;
                    while (soFar) {
                        if (!matched || (match = rcomma.exec(soFar))) {
                            if (match) {
                                soFar = soFar.slice(match[0].length) || soFar
                            }
                            groups.push(tokens = [])
                        }
                        matched = false;
                        if (match = rcombinators.exec(soFar)) {
                            matched = match.shift();
                            tokens.push({
                                value: matched,
                                type: match[0].replace(rtrim, " ")
                            });
                            soFar = soFar.slice(matched.length)
                        }
                        for (type in Expr.filter) {
                            if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                                matched = match.shift();
                                tokens.push({
                                    value: matched,
                                    type: type,
                                    matches: match
                                });
                                soFar = soFar.slice(matched.length)
                            }
                        }
                        if (!matched) {
                            break
                        }
                    }
                    return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0)
                };

                function toSelector(tokens) {
                    var i = 0,
                        len = tokens.length,
                        selector = "";
                    for (; i < len; i++) {
                        selector += tokens[i].value
                    }
                    return selector
                }

                function addCombinator(matcher, combinator, base) {
                    var dir = combinator.dir,
                        checkNonElements = base && dir === "parentNode",
                        doneName = done++;
                    return combinator.first ? function(elem, context, xml) {
                        while (elem = elem[dir]) {
                            if (elem.nodeType === 1 || checkNonElements) {
                                return matcher(elem, context, xml)
                            }
                        }
                    } : function(elem, context, xml) {
                        var oldCache, outerCache, newCache = [dirruns, doneName];
                        if (xml) {
                            while (elem = elem[dir]) {
                                if (elem.nodeType === 1 || checkNonElements) {
                                    if (matcher(elem, context, xml)) {
                                        return true
                                    }
                                }
                            }
                        } else {
                            while (elem = elem[dir]) {
                                if (elem.nodeType === 1 || checkNonElements) {
                                    outerCache = elem[expando] || (elem[expando] = {});
                                    if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                                        return newCache[2] = oldCache[2]
                                    } else {
                                        outerCache[dir] = newCache;
                                        if (newCache[2] = matcher(elem, context, xml)) {
                                            return true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                function elementMatcher(matchers) {
                    return matchers.length > 1 ? function(elem, context, xml) {
                        var i = matchers.length;
                        while (i--) {
                            if (!matchers[i](elem, context, xml)) {
                                return false
                            }
                        }
                        return true
                    } : matchers[0]
                }

                function multipleContexts(selector, contexts, results) {
                    var i = 0,
                        len = contexts.length;
                    for (; i < len; i++) {
                        Sizzle(selector, contexts[i], results)
                    }
                    return results
                }

                function condense(unmatched, map, filter, context, xml) {
                    var elem, newUnmatched = [],
                        i = 0,
                        len = unmatched.length,
                        mapped = map != null;
                    for (; i < len; i++) {
                        if (elem = unmatched[i]) {
                            if (!filter || filter(elem, context, xml)) {
                                newUnmatched.push(elem);
                                if (mapped) {
                                    map.push(i)
                                }
                            }
                        }
                    }
                    return newUnmatched
                }

                function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
                    if (postFilter && !postFilter[expando]) {
                        postFilter = setMatcher(postFilter)
                    }
                    if (postFinder && !postFinder[expando]) {
                        postFinder = setMatcher(postFinder, postSelector)
                    }
                    return markFunction(function(seed, results, context, xml) {
                        var temp, i, elem, preMap = [],
                            postMap = [],
                            preexisting = results.length,
                            elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
                            matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
                            matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                        if (matcher) {
                            matcher(matcherIn, matcherOut, context, xml)
                        }
                        if (postFilter) {
                            temp = condense(matcherOut, postMap);
                            postFilter(temp, [], context, xml);
                            i = temp.length;
                            while (i--) {
                                if (elem = temp[i]) {
                                    matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem)
                                }
                            }
                        }
                        if (seed) {
                            if (postFinder || preFilter) {
                                if (postFinder) {
                                    temp = [];
                                    i = matcherOut.length;
                                    while (i--) {
                                        if (elem = matcherOut[i]) {
                                            temp.push(matcherIn[i] = elem)
                                        }
                                    }
                                    postFinder(null, matcherOut = [], temp, xml)
                                }
                                i = matcherOut.length;
                                while (i--) {
                                    if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                                        seed[temp] = !(results[temp] = elem)
                                    }
                                }
                            }
                        } else {
                            matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                            if (postFinder) {
                                postFinder(null, results, matcherOut, xml)
                            } else {
                                push.apply(results, matcherOut)
                            }
                        }
                    })
                }

                function matcherFromTokens(tokens) {
                    var checkContext, matcher, j, len = tokens.length,
                        leadingRelative = Expr.relative[tokens[0].type],
                        implicitRelative = leadingRelative || Expr.relative[" "],
                        i = leadingRelative ? 1 : 0,
                        matchContext = addCombinator(function(elem) {
                            return elem === checkContext
                        }, implicitRelative, true),
                        matchAnyContext = addCombinator(function(elem) {
                            return indexOf(checkContext, elem) > -1
                        }, implicitRelative, true),
                        matchers = [function(elem, context, xml) {
                            var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                            checkContext = null;
                            return ret
                        }];
                    for (; i < len; i++) {
                        if (matcher = Expr.relative[tokens[i].type]) {
                            matchers = [addCombinator(elementMatcher(matchers), matcher)]
                        } else {
                            matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                            if (matcher[expando]) {
                                j = ++i;
                                for (; j < len; j++) {
                                    if (Expr.relative[tokens[j].type]) {
                                        break
                                    }
                                }
                                return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({
                                    value: tokens[i - 2].type === " " ? "*" : ""
                                })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens))
                            }
                            matchers.push(matcher)
                        }
                    }
                    return elementMatcher(matchers)
                }

                function matcherFromGroupMatchers(elementMatchers, setMatchers) {
                    var bySet = setMatchers.length > 0,
                        byElement = elementMatchers.length > 0,
                        superMatcher = function superMatcher(seed, context, xml, results, outermost) {
                            var elem, j, matcher, matchedCount = 0,
                                i = "0",
                                unmatched = seed && [],
                                setMatched = [],
                                contextBackup = outermostContext,
                                elems = seed || byElement && Expr.find["TAG"]("*", outermost),
                                dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || .1,
                                len = elems.length;
                            if (outermost) {
                                outermostContext = context !== document && context
                            }
                            for (; i !== len && (elem = elems[i]) != null; i++) {
                                if (byElement && elem) {
                                    j = 0;
                                    while (matcher = elementMatchers[j++]) {
                                        if (matcher(elem, context, xml)) {
                                            results.push(elem);
                                            break
                                        }
                                    }
                                    if (outermost) {
                                        dirruns = dirrunsUnique
                                    }
                                }
                                if (bySet) {
                                    if (elem = !matcher && elem) {
                                        matchedCount--
                                    }
                                    if (seed) {
                                        unmatched.push(elem)
                                    }
                                }
                            }
                            matchedCount += i;
                            if (bySet && i !== matchedCount) {
                                j = 0;
                                while (matcher = setMatchers[j++]) {
                                    matcher(unmatched, setMatched, context, xml)
                                }
                                if (seed) {
                                    if (matchedCount > 0) {
                                        while (i--) {
                                            if (!(unmatched[i] || setMatched[i])) {
                                                setMatched[i] = pop.call(results)
                                            }
                                        }
                                    }
                                    setMatched = condense(setMatched)
                                }
                                push.apply(results, setMatched);
                                if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                                    Sizzle.uniqueSort(results)
                                }
                            }
                            if (outermost) {
                                dirruns = dirrunsUnique;
                                outermostContext = contextBackup
                            }
                            return unmatched
                        };
                    return bySet ? markFunction(superMatcher) : superMatcher
                }
                compile = Sizzle.compile = function(selector, match) {
                    var i, setMatchers = [],
                        elementMatchers = [],
                        cached = compilerCache[selector + " "];
                    if (!cached) {
                        if (!match) {
                            match = tokenize(selector)
                        }
                        i = match.length;
                        while (i--) {
                            cached = matcherFromTokens(match[i]);
                            if (cached[expando]) {
                                setMatchers.push(cached)
                            } else {
                                elementMatchers.push(cached)
                            }
                        }
                        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
                        cached.selector = selector
                    }
                    return cached
                };
                select = Sizzle.select = function(selector, context, results, seed) {
                    var i, tokens, token, type, find, compiled = typeof selector === "function" && selector,
                        match = !seed && tokenize(selector = compiled.selector || selector);
                    results = results || [];
                    if (match.length === 1) {
                        tokens = match[0] = match[0].slice(0);
                        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                            context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                            if (!context) {
                                return results
                            } else if (compiled) {
                                context = context.parentNode
                            }
                            selector = selector.slice(tokens.shift().value.length)
                        }
                        i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                        while (i--) {
                            token = tokens[i];
                            if (Expr.relative[type = token.type]) {
                                break
                            }
                            if (find = Expr.find[type]) {
                                if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                                    tokens.splice(i, 1);
                                    selector = seed.length && toSelector(tokens);
                                    if (!selector) {
                                        push.apply(results, seed);
                                        return results
                                    }
                                    break
                                }
                            }
                        }
                    }(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
                    return results
                };
                support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
                support.detectDuplicates = !!hasDuplicate;
                setDocument();
                support.sortDetached = assert(function(div1) {
                    return div1.compareDocumentPosition(document.createElement("div")) & 1
                });
                if (!assert(function(div) {
                        div.innerHTML = "<a href='#'></a>";
                        return div.firstChild.getAttribute("href") === "#"
                    })) {
                    addHandle("type|href|height|width", function(elem, name, isXML) {
                        if (!isXML) {
                            return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2)
                        }
                    })
                }
                if (!support.attributes || !assert(function(div) {
                        div.innerHTML = "<input/>";
                        div.firstChild.setAttribute("value", "");
                        return div.firstChild.getAttribute("value") === ""
                    })) {
                    addHandle("value", function(elem, name, isXML) {
                        if (!isXML && elem.nodeName.toLowerCase() === "input") {
                            return elem.defaultValue
                        }
                    })
                }
                if (!assert(function(div) {
                        return div.getAttribute("disabled") == null
                    })) {
                    addHandle(booleans, function(elem, name, isXML) {
                        var val;
                        if (!isXML) {
                            return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null
                        }
                    })
                }
                return Sizzle
            }(window);
            jQuery.find = Sizzle;
            jQuery.expr = Sizzle.selectors;
            jQuery.expr[":"] = jQuery.expr.pseudos;
            jQuery.unique = Sizzle.uniqueSort;
            jQuery.text = Sizzle.getText;
            jQuery.isXMLDoc = Sizzle.isXML;
            jQuery.contains = Sizzle.contains;
            var rneedsContext = jQuery.expr.match.needsContext;
            var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
            var risSimple = /^.[^:#\[\.,]*$/;

            function winnow(elements, qualifier, not) {
                if (jQuery.isFunction(qualifier)) {
                    return jQuery.grep(elements, function(elem, i) {
                        return !!qualifier.call(elem, i, elem) !== not
                    })
                }
                if (qualifier.nodeType) {
                    return jQuery.grep(elements, function(elem) {
                        return elem === qualifier !== not
                    })
                }
                if (typeof qualifier === "string") {
                    if (risSimple.test(qualifier)) {
                        return jQuery.filter(qualifier, elements, not)
                    }
                    qualifier = jQuery.filter(qualifier, elements)
                }
                return jQuery.grep(elements, function(elem) {
                    return indexOf.call(qualifier, elem) >= 0 !== not
                })
            }
            jQuery.filter = function(expr, elems, not) {
                var elem = elems[0];
                if (not) {
                    expr = ":not(" + expr + ")"
                }
                return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
                    return elem.nodeType === 1
                }))
            };
            jQuery.fn.extend({
                find: function find(selector) {
                    var i, len = this.length,
                        ret = [],
                        self = this;
                    if (typeof selector !== "string") {
                        return this.pushStack(jQuery(selector).filter(function() {
                            for (i = 0; i < len; i++) {
                                if (jQuery.contains(self[i], this)) {
                                    return true
                                }
                            }
                        }))
                    }
                    for (i = 0; i < len; i++) {
                        jQuery.find(selector, self[i], ret)
                    }
                    ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
                    ret.selector = this.selector ? this.selector + " " + selector : selector;
                    return ret
                },
                filter: function filter(selector) {
                    return this.pushStack(winnow(this, selector || [], false))
                },
                not: function not(selector) {
                    return this.pushStack(winnow(this, selector || [], true))
                },
                is: function is(selector) {
                    return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length
                }
            });
            var rootjQuery, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
                init = jQuery.fn.init = function(selector, context) {
                    var match, elem;
                    if (!selector) {
                        return this
                    }
                    if (typeof selector === "string") {
                        if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
                            match = [null, selector, null]
                        } else {
                            match = rquickExpr.exec(selector)
                        }
                        if (match && (match[1] || !context)) {
                            if (match[1]) {
                                context = context instanceof jQuery ? context[0] : context;
                                jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                                if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                                    for (match in context) {
                                        if (jQuery.isFunction(this[match])) {
                                            this[match](context[match])
                                        } else {
                                            this.attr(match, context[match])
                                        }
                                    }
                                }
                                return this
                            } else {
                                elem = document.getElementById(match[2]);
                                if (elem && elem.parentNode) {
                                    this.length = 1;
                                    this[0] = elem
                                }
                                this.context = document;
                                this.selector = selector;
                                return this
                            }
                        } else if (!context || context.jquery) {
                            return (context || rootjQuery).find(selector)
                        } else {
                            return this.constructor(context).find(selector)
                        }
                    } else if (selector.nodeType) {
                        this.context = this[0] = selector;
                        this.length = 1;
                        return this
                    } else if (jQuery.isFunction(selector)) {
                        return typeof rootjQuery.ready !== "undefined" ? rootjQuery.ready(selector) : selector(jQuery)
                    }
                    if (selector.selector !== undefined) {
                        this.selector = selector.selector;
                        this.context = selector.context
                    }
                    return jQuery.makeArray(selector, this)
                };
            init.prototype = jQuery.fn;
            rootjQuery = jQuery(document);
            var rparentsprev = /^(?:parents|prev(?:Until|All))/,
                guaranteedUnique = {
                    children: true,
                    contents: true,
                    next: true,
                    prev: true
                };
            jQuery.extend({
                dir: function dir(elem, _dir, until) {
                    var matched = [],
                        truncate = until !== undefined;
                    while ((elem = elem[_dir]) && elem.nodeType !== 9) {
                        if (elem.nodeType === 1) {
                            if (truncate && jQuery(elem).is(until)) {
                                break
                            }
                            matched.push(elem)
                        }
                    }
                    return matched
                },
                sibling: function sibling(n, elem) {
                    var matched = [];
                    for (; n; n = n.nextSibling) {
                        if (n.nodeType === 1 && n !== elem) {
                            matched.push(n)
                        }
                    }
                    return matched
                }
            });
            jQuery.fn.extend({
                has: function has(target) {
                    var targets = jQuery(target, this),
                        l = targets.length;
                    return this.filter(function() {
                        var i = 0;
                        for (; i < l; i++) {
                            if (jQuery.contains(this, targets[i])) {
                                return true
                            }
                        }
                    })
                },
                closest: function closest(selectors, context) {
                    var cur, i = 0,
                        l = this.length,
                        matched = [],
                        pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;
                    for (; i < l; i++) {
                        for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                            if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                                matched.push(cur);
                                break
                            }
                        }
                    }
                    return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched)
                },
                index: function index(elem) {
                    if (!elem) {
                        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1
                    }
                    if (typeof elem === "string") {
                        return indexOf.call(jQuery(elem), this[0])
                    }
                    return indexOf.call(this, elem.jquery ? elem[0] : elem)
                },
                add: function add(selector, context) {
                    return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))))
                },
                addBack: function addBack(selector) {
                    return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector))
                }
            });

            function sibling(cur, dir) {
                while ((cur = cur[dir]) && cur.nodeType !== 1) {}
                return cur
            }
            jQuery.each({
                parent: function parent(elem) {
                    var parent = elem.parentNode;
                    return parent && parent.nodeType !== 11 ? parent : null
                },
                parents: function parents(elem) {
                    return jQuery.dir(elem, "parentNode")
                },
                parentsUntil: function parentsUntil(elem, i, until) {
                    return jQuery.dir(elem, "parentNode", until)
                },
                next: function next(elem) {
                    return sibling(elem, "nextSibling")
                },
                prev: function prev(elem) {
                    return sibling(elem, "previousSibling")
                },
                nextAll: function nextAll(elem) {
                    return jQuery.dir(elem, "nextSibling")
                },
                prevAll: function prevAll(elem) {
                    return jQuery.dir(elem, "previousSibling")
                },
                nextUntil: function nextUntil(elem, i, until) {
                    return jQuery.dir(elem, "nextSibling", until)
                },
                prevUntil: function prevUntil(elem, i, until) {
                    return jQuery.dir(elem, "previousSibling", until)
                },
                siblings: function siblings(elem) {
                    return jQuery.sibling((elem.parentNode || {}).firstChild, elem)
                },
                children: function children(elem) {
                    return jQuery.sibling(elem.firstChild)
                },
                contents: function contents(elem) {
                    return elem.contentDocument || jQuery.merge([], elem.childNodes)
                }
            }, function(name, fn) {
                jQuery.fn[name] = function(until, selector) {
                    var matched = jQuery.map(this, fn, until);
                    if (name.slice(-5) !== "Until") {
                        selector = until
                    }
                    if (selector && typeof selector === "string") {
                        matched = jQuery.filter(selector, matched)
                    }
                    if (this.length > 1) {
                        if (!guaranteedUnique[name]) {
                            jQuery.unique(matched)
                        }
                        if (rparentsprev.test(name)) {
                            matched.reverse()
                        }
                    }
                    return this.pushStack(matched)
                }
            });
            var rnotwhite = /\S+/g;
            var optionsCache = {};

            function createOptions(options) {
                var object = optionsCache[options] = {};
                jQuery.each(options.match(rnotwhite) || [], function(_, flag) {
                    object[flag] = true
                });
                return object
            }
            jQuery.Callbacks = function(options) {
                options = typeof options === "string" ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
                var memory, _fired, firing, firingStart, firingLength, firingIndex, list = [],
                    stack = !options.once && [],
                    fire = function fire(data) {
                        memory = options.memory && data;
                        _fired = true;
                        firingIndex = firingStart || 0;
                        firingStart = 0;
                        firingLength = list.length;
                        firing = true;
                        for (; list && firingIndex < firingLength; firingIndex++) {
                            if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                                memory = false;
                                break
                            }
                        }
                        firing = false;
                        if (list) {
                            if (stack) {
                                if (stack.length) {
                                    fire(stack.shift())
                                }
                            } else if (memory) {
                                list = []
                            } else {
                                self.disable()
                            }
                        }
                    },
                    self = {
                        add: function add() {
                            if (list) {
                                var start = list.length;
                                (function add(args) {
                                    jQuery.each(args, function(_, arg) {
                                        var type = jQuery.type(arg);
                                        if (type === "function") {
                                            if (!options.unique || !self.has(arg)) {
                                                list.push(arg)
                                            }
                                        } else if (arg && arg.length && type !== "string") {
                                            add(arg)
                                        }
                                    })
                                })(arguments);
                                if (firing) {
                                    firingLength = list.length
                                } else if (memory) {
                                    firingStart = start;
                                    fire(memory)
                                }
                            }
                            return this
                        },
                        remove: function remove() {
                            if (list) {
                                jQuery.each(arguments, function(_, arg) {
                                    var index;
                                    while ((index = jQuery.inArray(arg, list, index)) > -1) {
                                        list.splice(index, 1);
                                        if (firing) {
                                            if (index <= firingLength) {
                                                firingLength--
                                            }
                                            if (index <= firingIndex) {
                                                firingIndex--
                                            }
                                        }
                                    }
                                })
                            }
                            return this
                        },
                        has: function has(fn) {
                            return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length)
                        },
                        empty: function empty() {
                            list = [];
                            firingLength = 0;
                            return this
                        },
                        disable: function disable() {
                            list = stack = memory = undefined;
                            return this
                        },
                        disabled: function disabled() {
                            return !list
                        },
                        lock: function lock() {
                            stack = undefined;
                            if (!memory) {
                                self.disable()
                            }
                            return this
                        },
                        locked: function locked() {
                            return !stack
                        },
                        fireWith: function fireWith(context, args) {
                            if (list && (!_fired || stack)) {
                                args = args || [];
                                args = [context, args.slice ? args.slice() : args];
                                if (firing) {
                                    stack.push(args)
                                } else {
                                    fire(args)
                                }
                            }
                            return this
                        },
                        fire: function fire() {
                            self.fireWith(this, arguments);
                            return this
                        },
                        fired: function fired() {
                            return !!_fired
                        }
                    };
                return self
            };
            jQuery.extend({
                Deferred: function Deferred(func) {
                    var tuples = [
                            ["resolve", "done", jQuery.Callbacks("once memory"), "resolved"],
                            ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"],
                            ["notify", "progress", jQuery.Callbacks("memory")]
                        ],
                        _state = "pending",
                        _promise = {
                            state: function state() {
                                return _state
                            },
                            always: function always() {
                                deferred.done(arguments).fail(arguments);
                                return this
                            },
                            then: function then() {
                                var fns = arguments;
                                return jQuery.Deferred(function(newDefer) {
                                    jQuery.each(tuples, function(i, tuple) {
                                        var fn = jQuery.isFunction(fns[i]) && fns[i];
                                        deferred[tuple[1]](function() {
                                            var returned = fn && fn.apply(this, arguments);
                                            if (returned && jQuery.isFunction(returned.promise)) {
                                                returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify)
                                            } else {
                                                newDefer[tuple[0] + "With"](this === _promise ? newDefer.promise() : this, fn ? [returned] : arguments)
                                            }
                                        })
                                    });
                                    fns = null
                                }).promise()
                            },
                            promise: function promise(obj) {
                                return obj != null ? jQuery.extend(obj, _promise) : _promise
                            }
                        },
                        deferred = {};
                    _promise.pipe = _promise.then;
                    jQuery.each(tuples, function(i, tuple) {
                        var list = tuple[2],
                            stateString = tuple[3];
                        _promise[tuple[1]] = list.add;
                        if (stateString) {
                            list.add(function() {
                                _state = stateString
                            }, tuples[i ^ 1][2].disable, tuples[2][2].lock)
                        }
                        deferred[tuple[0]] = function() {
                            deferred[tuple[0] + "With"](this === deferred ? _promise : this, arguments);
                            return this
                        };
                        deferred[tuple[0] + "With"] = list.fireWith
                    });
                    _promise.promise(deferred);
                    if (func) {
                        func.call(deferred, deferred)
                    }
                    return deferred
                },
                when: function when(subordinate) {
                    var i = 0,
                        resolveValues = _slice.call(arguments),
                        length = resolveValues.length,
                        remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,
                        deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
                        updateFunc = function updateFunc(i, contexts, values) {
                            return function(value) {
                                contexts[i] = this;
                                values[i] = arguments.length > 1 ? _slice.call(arguments) : value;
                                if (values === progressValues) {
                                    deferred.notifyWith(contexts, values)
                                } else if (!--remaining) {
                                    deferred.resolveWith(contexts, values)
                                }
                            }
                        },
                        progressValues, progressContexts, resolveContexts;
                    if (length > 1) {
                        progressValues = new Array(length);
                        progressContexts = new Array(length);
                        resolveContexts = new Array(length);
                        for (; i < length; i++) {
                            if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                                resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues))
                            } else {
                                --remaining
                            }
                        }
                    }
                    if (!remaining) {
                        deferred.resolveWith(resolveContexts, resolveValues)
                    }
                    return deferred.promise()
                }
            });
            var readyList;
            jQuery.fn.ready = function(fn) {
                jQuery.ready.promise().done(fn);
                return this
            };
            jQuery.extend({
                isReady: false,
                readyWait: 1,
                holdReady: function holdReady(hold) {
                    if (hold) {
                        jQuery.readyWait++
                    } else {
                        jQuery.ready(true)
                    }
                },
                ready: function ready(wait) {
                    if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                        return
                    }
                    jQuery.isReady = true;
                    if (wait !== true && --jQuery.readyWait > 0) {
                        return
                    }
                    readyList.resolveWith(document, [jQuery]);
                    if (jQuery.fn.triggerHandler) {
                        jQuery(document).triggerHandler("ready");
                        jQuery(document).off("ready")
                    }
                }
            });

            function completed() {
                document.removeEventListener("DOMContentLoaded", completed, false);
                window.removeEventListener("load", completed, false);
                jQuery.ready()
            }
            jQuery.ready.promise = function(obj) {
                if (!readyList) {
                    readyList = jQuery.Deferred();
                    if (document.readyState === "complete") {
                        setTimeout(jQuery.ready)
                    } else {
                        document.addEventListener("DOMContentLoaded", completed, false);
                        window.addEventListener("load", completed, false)
                    }
                }
                return readyList.promise(obj)
            };
            jQuery.ready.promise();
            var access = jQuery.access = function(elems, fn, key, value, chainable, emptyGet, raw) {
                var i = 0,
                    len = elems.length,
                    bulk = key == null;
                if (jQuery.type(key) === "object") {
                    chainable = true;
                    for (i in key) {
                        jQuery.access(elems, fn, i, key[i], true, emptyGet, raw)
                    }
                } else if (value !== undefined) {
                    chainable = true;
                    if (!jQuery.isFunction(value)) {
                        raw = true
                    }
                    if (bulk) {
                        if (raw) {
                            fn.call(elems, value);
                            fn = null
                        } else {
                            bulk = fn;
                            fn = function(elem, key, value) {
                                return bulk.call(jQuery(elem), value)
                            }
                        }
                    }
                    if (fn) {
                        for (; i < len; i++) {
                            fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)))
                        }
                    }
                }
                return chainable ? elems : bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet
            };
            jQuery.acceptData = function(owner) {
                return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType
            };

            function Data() {
                Object.defineProperty(this.cache = {}, 0, {
                    get: function get() {
                        return {}
                    }
                });
                this.expando = jQuery.expando + Data.uid++
            }
            Data.uid = 1;
            Data.accepts = jQuery.acceptData;
            Data.prototype = {
                key: function key(owner) {
                    if (!Data.accepts(owner)) {
                        return 0
                    }
                    var descriptor = {},
                        unlock = owner[this.expando];
                    if (!unlock) {
                        unlock = Data.uid++;
                        try {
                            descriptor[this.expando] = {
                                value: unlock
                            };
                            Object.defineProperties(owner, descriptor)
                        } catch (e) {
                            descriptor[this.expando] = unlock;
                            jQuery.extend(owner, descriptor)
                        }
                    }
                    if (!this.cache[unlock]) {
                        this.cache[unlock] = {}
                    }
                    return unlock
                },
                set: function set(owner, data, value) {
                    var prop, unlock = this.key(owner),
                        cache = this.cache[unlock];
                    if (typeof data === "string") {
                        cache[data] = value
                    } else {
                        if (jQuery.isEmptyObject(cache)) {
                            jQuery.extend(this.cache[unlock], data)
                        } else {
                            for (prop in data) {
                                cache[prop] = data[prop]
                            }
                        }
                    }
                    return cache
                },
                get: function get(owner, key) {
                    var cache = this.cache[this.key(owner)];
                    return key === undefined ? cache : cache[key]
                },
                access: function access(owner, key, value) {
                    var stored;
                    if (key === undefined || key && typeof key === "string" && value === undefined) {
                        stored = this.get(owner, key);
                        return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key))
                    }
                    this.set(owner, key, value);
                    return value !== undefined ? value : key
                },
                remove: function remove(owner, key) {
                    var i, name, camel, unlock = this.key(owner),
                        cache = this.cache[unlock];
                    if (key === undefined) {
                        this.cache[unlock] = {}
                    } else {
                        if (jQuery.isArray(key)) {
                            name = key.concat(key.map(jQuery.camelCase))
                        } else {
                            camel = jQuery.camelCase(key);
                            if (key in cache) {
                                name = [key, camel]
                            } else {
                                name = camel;
                                name = name in cache ? [name] : name.match(rnotwhite) || []
                            }
                        }
                        i = name.length;
                        while (i--) {
                            delete cache[name[i]]
                        }
                    }
                },
                hasData: function hasData(owner) {
                    return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {})
                },
                discard: function discard(owner) {
                    if (owner[this.expando]) {
                        delete this.cache[owner[this.expando]]
                    }
                }
            };
            var data_priv = new Data;
            var data_user = new Data;
            var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
                rmultiDash = /([A-Z])/g;

            function dataAttr(elem, key, data) {
                var name;
                if (data === undefined && elem.nodeType === 1) {
                    name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
                    data = elem.getAttribute(name);
                    if (typeof data === "string") {
                        try {
                            data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data
                        } catch (e) {}
                        data_user.set(elem, key, data)
                    } else {
                        data = undefined
                    }
                }
                return data
            }
            jQuery.extend({
                hasData: function hasData(elem) {
                    return data_user.hasData(elem) || data_priv.hasData(elem)
                },
                data: function data(elem, name, _data) {
                    return data_user.access(elem, name, _data)
                },
                removeData: function removeData(elem, name) {
                    data_user.remove(elem, name)
                },
                _data: function _data(elem, name, data) {
                    return data_priv.access(elem, name, data)
                },
                _removeData: function _removeData(elem, name) {
                    data_priv.remove(elem, name)
                }
            });
            jQuery.fn.extend({
                data: function data(key, value) {
                    var i, name, data, elem = this[0],
                        attrs = elem && elem.attributes;
                    if (key === undefined) {
                        if (this.length) {
                            data = data_user.get(elem);
                            if (elem.nodeType === 1 && !data_priv.get(elem, "hasDataAttrs")) {
                                i = attrs.length;
                                while (i--) {
                                    if (attrs[i]) {
                                        name = attrs[i].name;
                                        if (name.indexOf("data-") === 0) {
                                            name = jQuery.camelCase(name.slice(5));
                                            dataAttr(elem, name, data[name])
                                        }
                                    }
                                }
                                data_priv.set(elem, "hasDataAttrs", true)
                            }
                        }
                        return data
                    }
                    if (typeof key === "object") {
                        return this.each(function() {
                            data_user.set(this, key)
                        })
                    }
                    return access(this, function(value) {
                        var data, camelKey = jQuery.camelCase(key);
                        if (elem && value === undefined) {
                            data = data_user.get(elem, key);
                            if (data !== undefined) {
                                return data
                            }
                            data = data_user.get(elem, camelKey);
                            if (data !== undefined) {
                                return data
                            }
                            data = dataAttr(elem, camelKey, undefined);
                            if (data !== undefined) {
                                return data
                            }
                            return
                        }
                        this.each(function() {
                            var data = data_user.get(this, camelKey);
                            data_user.set(this, camelKey, value);
                            if (key.indexOf("-") !== -1 && data !== undefined) {
                                data_user.set(this, key, value)
                            }
                        })
                    }, null, value, arguments.length > 1, null, true)
                },
                removeData: function removeData(key) {
                    return this.each(function() {
                        data_user.remove(this, key)
                    })
                }
            });
            jQuery.extend({
                queue: function queue(elem, type, data) {
                    var queue;
                    if (elem) {
                        type = (type || "fx") + "queue";
                        queue = data_priv.get(elem, type);
                        if (data) {
                            if (!queue || jQuery.isArray(data)) {
                                queue = data_priv.access(elem, type, jQuery.makeArray(data))
                            } else {
                                queue.push(data)
                            }
                        }
                        return queue || []
                    }
                },
                dequeue: function dequeue(elem, type) {
                    type = type || "fx";
                    var queue = jQuery.queue(elem, type),
                        startLength = queue.length,
                        fn = queue.shift(),
                        hooks = jQuery._queueHooks(elem, type),
                        next = function next() {
                            jQuery.dequeue(elem, type)
                        };
                    if (fn === "inprogress") {
                        fn = queue.shift();
                        startLength--
                    }
                    if (fn) {
                        if (type === "fx") {
                            queue.unshift("inprogress")
                        }
                        delete hooks.stop;
                        fn.call(elem, next, hooks)
                    }
                    if (!startLength && hooks) {
                        hooks.empty.fire()
                    }
                },
                _queueHooks: function _queueHooks(elem, type) {
                    var key = type + "queueHooks";
                    return data_priv.get(elem, key) || data_priv.access(elem, key, {
                        empty: jQuery.Callbacks("once memory").add(function() {
                            data_priv.remove(elem, [type + "queue", key])
                        })
                    })
                }
            });
            jQuery.fn.extend({
                queue: function queue(type, data) {
                    var setter = 2;
                    if (typeof type !== "string") {
                        data = type;
                        type = "fx";
                        setter--
                    }
                    if (arguments.length < setter) {
                        return jQuery.queue(this[0], type)
                    }
                    return data === undefined ? this : this.each(function() {
                        var queue = jQuery.queue(this, type, data);
                        jQuery._queueHooks(this, type);
                        if (type === "fx" && queue[0] !== "inprogress") {
                            jQuery.dequeue(this, type)
                        }
                    })
                },
                dequeue: function dequeue(type) {
                    return this.each(function() {
                        jQuery.dequeue(this, type)
                    })
                },
                clearQueue: function clearQueue(type) {
                    return this.queue(type || "fx", [])
                },
                promise: function promise(type, obj) {
                    var tmp, count = 1,
                        defer = jQuery.Deferred(),
                        elements = this,
                        i = this.length,
                        resolve = function resolve() {
                            if (!--count) {
                                defer.resolveWith(elements, [elements])
                            }
                        };
                    if (typeof type !== "string") {
                        obj = type;
                        type = undefined
                    }
                    type = type || "fx";
                    while (i--) {
                        tmp = data_priv.get(elements[i], type + "queueHooks");
                        if (tmp && tmp.empty) {
                            count++;
                            tmp.empty.add(resolve)
                        }
                    }
                    resolve();
                    return defer.promise(obj)
                }
            });
            var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
            var cssExpand = ["Top", "Right", "Bottom", "Left"];
            var isHidden = function isHidden(elem, el) {
                elem = el || elem;
                return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem)
            };
            var rcheckableType = /^(?:checkbox|radio)$/i;
            (function() {
                var fragment = document.createDocumentFragment(),
                    div = fragment.appendChild(document.createElement("div")),
                    input = document.createElement("input");
                input.setAttribute("type", "radio");
                input.setAttribute("checked", "checked");
                input.setAttribute("name", "t");
                div.appendChild(input);
                support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
                div.innerHTML = "<textarea>x</textarea>";
                support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue
            })();
            var strundefined = typeof undefined;
            support.focusinBubbles = "onfocusin" in window;
            var rkeyEvent = /^key/,
                rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
                rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
                rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

            function returnTrue() {
                return true
            }

            function returnFalse() {
                return false
            }

            function safeActiveElement() {
                try {
                    return document.activeElement
                } catch (err) {}
            }
            jQuery.event = {
                global: {},
                add: function add(elem, types, handler, data, selector) {
                    var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.get(elem);
                    if (!elemData) {
                        return
                    }
                    if (handler.handler) {
                        handleObjIn = handler;
                        handler = handleObjIn.handler;
                        selector = handleObjIn.selector
                    }
                    if (!handler.guid) {
                        handler.guid = jQuery.guid++
                    }
                    if (!(events = elemData.events)) {
                        events = elemData.events = {}
                    }
                    if (!(eventHandle = elemData.handle)) {
                        eventHandle = elemData.handle = function(e) {
                            return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined
                        }
                    }
                    types = (types || "").match(rnotwhite) || [""];
                    t = types.length;
                    while (t--) {
                        tmp = rtypenamespace.exec(types[t]) || [];
                        type = origType = tmp[1];
                        namespaces = (tmp[2] || "").split(".").sort();
                        if (!type) {
                            continue
                        }
                        special = jQuery.event.special[type] || {};
                        type = (selector ? special.delegateType : special.bindType) || type;
                        special = jQuery.event.special[type] || {};
                        handleObj = jQuery.extend({
                            type: type,
                            origType: origType,
                            data: data,
                            handler: handler,
                            guid: handler.guid,
                            selector: selector,
                            needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                            namespace: namespaces.join(".")
                        }, handleObjIn);
                        if (!(handlers = events[type])) {
                            handlers = events[type] = [];
                            handlers.delegateCount = 0;
                            if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                                if (elem.addEventListener) {
                                    elem.addEventListener(type, eventHandle, false)
                                }
                            }
                        }
                        if (special.add) {
                            special.add.call(elem, handleObj);
                            if (!handleObj.handler.guid) {
                                handleObj.handler.guid = handler.guid
                            }
                        }
                        if (selector) {
                            handlers.splice(handlers.delegateCount++, 0, handleObj)
                        } else {
                            handlers.push(handleObj)
                        }
                        jQuery.event.global[type] = true
                    }
                },
                remove: function remove(elem, types, handler, selector, mappedTypes) {
                    var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.hasData(elem) && data_priv.get(elem);
                    if (!elemData || !(events = elemData.events)) {
                        return
                    }
                    types = (types || "").match(rnotwhite) || [""];
                    t = types.length;
                    while (t--) {
                        tmp = rtypenamespace.exec(types[t]) || [];
                        type = origType = tmp[1];
                        namespaces = (tmp[2] || "").split(".").sort();
                        if (!type) {
                            for (type in events) {
                                jQuery.event.remove(elem, type + types[t], handler, selector, true)
                            }
                            continue
                        }
                        special = jQuery.event.special[type] || {};
                        type = (selector ? special.delegateType : special.bindType) || type;
                        handlers = events[type] || [];
                        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                        origCount = j = handlers.length;
                        while (j--) {
                            handleObj = handlers[j];
                            if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                                handlers.splice(j, 1);
                                if (handleObj.selector) {
                                    handlers.delegateCount--
                                }
                                if (special.remove) {
                                    special.remove.call(elem, handleObj)
                                }
                            }
                        }
                        if (origCount && !handlers.length) {
                            if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                                jQuery.removeEvent(elem, type, elemData.handle)
                            }
                            delete events[type]
                        }
                    }
                    if (jQuery.isEmptyObject(events)) {
                        delete elemData.handle;
                        data_priv.remove(elem, "events")
                    }
                },
                trigger: function trigger(event, data, elem, onlyHandlers) {
                    var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document],
                        type = hasOwn.call(event, "type") ? event.type : event,
                        namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
                    cur = tmp = elem = elem || document;
                    if (elem.nodeType === 3 || elem.nodeType === 8) {
                        return
                    }
                    if (rfocusMorph.test(type + jQuery.event.triggered)) {
                        return
                    }
                    if (type.indexOf(".") >= 0) {
                        namespaces = type.split(".");
                        type = namespaces.shift();
                        namespaces.sort()
                    }
                    ontype = type.indexOf(":") < 0 && "on" + type;
                    event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
                    event.isTrigger = onlyHandlers ? 2 : 3;
                    event.namespace = namespaces.join(".");
                    event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
                    event.result = undefined;
                    if (!event.target) {
                        event.target = elem
                    }
                    data = data == null ? [event] : jQuery.makeArray(data, [event]);
                    special = jQuery.event.special[type] || {};
                    if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                        return
                    }
                    if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                        bubbleType = special.delegateType || type;
                        if (!rfocusMorph.test(bubbleType + type)) {
                            cur = cur.parentNode
                        }
                        for (; cur; cur = cur.parentNode) {
                            eventPath.push(cur);
                            tmp = cur
                        }
                        if (tmp === (elem.ownerDocument || document)) {
                            eventPath.push(tmp.defaultView || tmp.parentWindow || window)
                        }
                    }
                    i = 0;
                    while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                        event.type = i > 1 ? bubbleType : special.bindType || type;
                        handle = (data_priv.get(cur, "events") || {})[event.type] && data_priv.get(cur, "handle");
                        if (handle) {
                            handle.apply(cur, data)
                        }
                        handle = ontype && cur[ontype];
                        if (handle && handle.apply && jQuery.acceptData(cur)) {
                            event.result = handle.apply(cur, data);
                            if (event.result === false) {
                                event.preventDefault()
                            }
                        }
                    }
                    event.type = type;
                    if (!onlyHandlers && !event.isDefaultPrevented()) {
                        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
                            if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
                                tmp = elem[ontype];
                                if (tmp) {
                                    elem[ontype] = null
                                }
                                jQuery.event.triggered = type;
                                elem[type]();
                                jQuery.event.triggered = undefined;
                                if (tmp) {
                                    elem[ontype] = tmp
                                }
                            }
                        }
                    }
                    return event.result
                },
                dispatch: function dispatch(event) {
                    event = jQuery.event.fix(event);
                    var i, j, ret, matched, handleObj, handlerQueue = [],
                        args = _slice.call(arguments),
                        handlers = (data_priv.get(this, "events") || {})[event.type] || [],
                        special = jQuery.event.special[event.type] || {};
                    args[0] = event;
                    event.delegateTarget = this;
                    if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                        return
                    }
                    handlerQueue = jQuery.event.handlers.call(this, event, handlers);
                    i = 0;
                    while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                        event.currentTarget = matched.elem;
                        j = 0;
                        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                            if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                                event.handleObj = handleObj;
                                event.data = handleObj.data;
                                ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                                if (ret !== undefined) {
                                    if ((event.result = ret) === false) {
                                        event.preventDefault();
                                        event.stopPropagation()
                                    }
                                }
                            }
                        }
                    }
                    if (special.postDispatch) {
                        special.postDispatch.call(this, event)
                    }
                    return event.result
                },
                handlers: function handlers(event, _handlers) {
                    var i, matches, sel, handleObj, handlerQueue = [],
                        delegateCount = _handlers.delegateCount,
                        cur = event.target;
                    if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {
                        for (; cur !== this; cur = cur.parentNode || this) {
                            if (cur.disabled !== true || event.type !== "click") {
                                matches = [];
                                for (i = 0; i < delegateCount; i++) {
                                    handleObj = _handlers[i];
                                    sel = handleObj.selector + " ";
                                    if (matches[sel] === undefined) {
                                        matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length
                                    }
                                    if (matches[sel]) {
                                        matches.push(handleObj)
                                    }
                                }
                                if (matches.length) {
                                    handlerQueue.push({
                                        elem: cur,
                                        handlers: matches
                                    })
                                }
                            }
                        }
                    }
                    if (delegateCount < _handlers.length) {
                        handlerQueue.push({
                            elem: this,
                            handlers: _handlers.slice(delegateCount)
                        })
                    }
                    return handlerQueue
                },
                props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
                fixHooks: {},
                keyHooks: {
                    props: "char charCode key keyCode".split(" "),
                    filter: function filter(event, original) {
                        if (event.which == null) {
                            event.which = original.charCode != null ? original.charCode : original.keyCode
                        }
                        return event
                    }
                },
                mouseHooks: {
                    props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
                    filter: function filter(event, original) {
                        var eventDoc, doc, body, button = original.button;
                        if (event.pageX == null && original.clientX != null) {
                            eventDoc = event.target.ownerDocument || document;
                            doc = eventDoc.documentElement;
                            body = eventDoc.body;
                            event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                            event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)
                        }
                        if (!event.which && button !== undefined) {
                            event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0
                        }
                        return event
                    }
                },
                fix: function fix(event) {
                    if (event[jQuery.expando]) {
                        return event
                    }
                    var i, prop, copy, type = event.type,
                        originalEvent = event,
                        fixHook = this.fixHooks[type];
                    if (!fixHook) {
                        this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {}
                    }
                    copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
                    event = new jQuery.Event(originalEvent);
                    i = copy.length;
                    while (i--) {
                        prop = copy[i];
                        event[prop] = originalEvent[prop]
                    }
                    if (!event.target) {
                        event.target = document
                    }
                    if (event.target.nodeType === 3) {
                        event.target = event.target.parentNode
                    }
                    return fixHook.filter ? fixHook.filter(event, originalEvent) : event
                },
                special: {
                    load: {
                        noBubble: true
                    },
                    focus: {
                        trigger: function trigger() {
                            if (this !== safeActiveElement() && this.focus) {
                                this.focus();
                                return false
                            }
                        },
                        delegateType: "focusin"
                    },
                    blur: {
                        trigger: function trigger() {
                            if (this === safeActiveElement() && this.blur) {
                                this.blur();
                                return false
                            }
                        },
                        delegateType: "focusout"
                    },
                    click: {
                        trigger: function trigger() {
                            if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
                                this.click();
                                return false
                            }
                        },
                        _default: function _default(event) {
                            return jQuery.nodeName(event.target, "a")
                        }
                    },
                    beforeunload: {
                        postDispatch: function postDispatch(event) {
                            if (event.result !== undefined && event.originalEvent) {
                                event.originalEvent.returnValue = event.result
                            }
                        }
                    }
                },
                simulate: function simulate(type, elem, event, bubble) {
                    var e = jQuery.extend(new jQuery.Event, event, {
                        type: type,
                        isSimulated: true,
                        originalEvent: {}
                    });
                    if (bubble) {
                        jQuery.event.trigger(e, null, elem)
                    } else {
                        jQuery.event.dispatch.call(elem, e)
                    }
                    if (e.isDefaultPrevented()) {
                        event.preventDefault()
                    }
                }
            };
            jQuery.removeEvent = function(elem, type, handle) {
                if (elem.removeEventListener) {
                    elem.removeEventListener(type, handle, false)
                }
            };
            jQuery.Event = function(src, props) {
                if (!(this instanceof jQuery.Event)) {
                    return new jQuery.Event(src, props)
                }
                if (src && src.type) {
                    this.originalEvent = src;
                    this.type = src.type;
                    this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse
                } else {
                    this.type = src
                }
                if (props) {
                    jQuery.extend(this, props)
                }
                this.timeStamp = src && src.timeStamp || jQuery.now();
                this[jQuery.expando] = true
            };
            jQuery.Event.prototype = {
                isDefaultPrevented: returnFalse,
                isPropagationStopped: returnFalse,
                isImmediatePropagationStopped: returnFalse,
                preventDefault: function preventDefault() {
                    var e = this.originalEvent;
                    this.isDefaultPrevented = returnTrue;
                    if (e && e.preventDefault) {
                        e.preventDefault()
                    }
                },
                stopPropagation: function stopPropagation() {
                    var e = this.originalEvent;
                    this.isPropagationStopped = returnTrue;
                    if (e && e.stopPropagation) {
                        e.stopPropagation()
                    }
                },
                stopImmediatePropagation: function stopImmediatePropagation() {
                    var e = this.originalEvent;
                    this.isImmediatePropagationStopped = returnTrue;
                    if (e && e.stopImmediatePropagation) {
                        e.stopImmediatePropagation()
                    }
                    this.stopPropagation()
                }
            };
            jQuery.each({
                mouseenter: "mouseover",
                mouseleave: "mouseout",
                pointerenter: "pointerover",
                pointerleave: "pointerout"
            }, function(orig, fix) {
                jQuery.event.special[orig] = {
                    delegateType: fix,
                    bindType: fix,
                    handle: function handle(event) {
                        var ret, target = this,
                            related = event.relatedTarget,
                            handleObj = event.handleObj;
                        if (!related || related !== target && !jQuery.contains(target, related)) {
                            event.type = handleObj.origType;
                            ret = handleObj.handler.apply(this, arguments);
                            event.type = fix
                        }
                        return ret
                    }
                }
            });
            if (!support.focusinBubbles) {
                jQuery.each({
                    focus: "focusin",
                    blur: "focusout"
                }, function(orig, fix) {
                    var handler = function handler(event) {
                        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true)
                    };
                    jQuery.event.special[fix] = {
                        setup: function setup() {
                            var doc = this.ownerDocument || this,
                                attaches = data_priv.access(doc, fix);
                            if (!attaches) {
                                doc.addEventListener(orig, handler, true)
                            }
                            data_priv.access(doc, fix, (attaches || 0) + 1)
                        },
                        teardown: function teardown() {
                            var doc = this.ownerDocument || this,
                                attaches = data_priv.access(doc, fix) - 1;
                            if (!attaches) {
                                doc.removeEventListener(orig, handler, true);
                                data_priv.remove(doc, fix)
                            } else {
                                data_priv.access(doc, fix, attaches)
                            }
                        }
                    }
                })
            }
            jQuery.fn.extend({
                on: function on(types, selector, data, fn, one) {
                    var origFn, type;
                    if (typeof types === "object") {
                        if (typeof selector !== "string") {
                            data = data || selector;
                            selector = undefined
                        }
                        for (type in types) {
                            this.on(type, selector, data, types[type], one)
                        }
                        return this
                    }
                    if (data == null && fn == null) {
                        fn = selector;
                        data = selector = undefined
                    } else if (fn == null) {
                        if (typeof selector === "string") {
                            fn = data;
                            data = undefined
                        } else {
                            fn = data;
                            data = selector;
                            selector = undefined
                        }
                    }
                    if (fn === false) {
                        fn = returnFalse
                    } else if (!fn) {
                        return this
                    }
                    if (one === 1) {
                        origFn = fn;
                        fn = function(event) {
                            jQuery().off(event);
                            return origFn.apply(this, arguments)
                        };
                        fn.guid = origFn.guid || (origFn.guid = jQuery.guid++)
                    }
                    return this.each(function() {
                        jQuery.event.add(this, types, fn, data, selector)
                    })
                },
                one: function one(types, selector, data, fn) {
                    return this.on(types, selector, data, fn, 1)
                },
                off: function off(types, selector, fn) {
                    var handleObj, type;
                    if (types && types.preventDefault && types.handleObj) {
                        handleObj = types.handleObj;
                        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                        return this
                    }
                    if (typeof types === "object") {
                        for (type in types) {
                            this.off(type, selector, types[type])
                        }
                        return this
                    }
                    if (selector === false || typeof selector === "function") {
                        fn = selector;
                        selector = undefined
                    }
                    if (fn === false) {
                        fn = returnFalse
                    }
                    return this.each(function() {
                        jQuery.event.remove(this, types, fn, selector)
                    })
                },
                trigger: function trigger(type, data) {
                    return this.each(function() {
                        jQuery.event.trigger(type, data, this)
                    })
                },
                triggerHandler: function triggerHandler(type, data) {
                    var elem = this[0];
                    if (elem) {
                        return jQuery.event.trigger(type, data, elem, true)
                    }
                }
            });
            var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
                rtagName = /<([\w:]+)/,
                rhtml = /<|&#?\w+;/,
                rnoInnerhtml = /<(?:script|style|link)/i,
                rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
                rscriptType = /^$|\/(?:java|ecma)script/i,
                rscriptTypeMasked = /^true\/(.*)/,
                rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
                wrapMap = {
                    option: [1, "<select multiple='multiple'>", "</select>"],
                    thead: [1, "<table>", "</table>"],
                    col: [2, "<table><colgroup>", "</colgroup></table>"],
                    tr: [2, "<table><tbody>", "</tbody></table>"],
                    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
                    _default: [0, "", ""]
                };
            wrapMap.optgroup = wrapMap.option;
            wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
            wrapMap.th = wrapMap.td;

            function manipulationTarget(elem, content) {
                return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem
            }

            function disableScript(elem) {
                elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
                return elem
            }

            function restoreScript(elem) {
                var match = rscriptTypeMasked.exec(elem.type);
                if (match) {
                    elem.type = match[1]
                } else {
                    elem.removeAttribute("type")
                }
                return elem
            }

            function setGlobalEval(elems, refElements) {
                var i = 0,
                    l = elems.length;
                for (; i < l; i++) {
                    data_priv.set(elems[i], "globalEval", !refElements || data_priv.get(refElements[i], "globalEval"))
                }
            }

            function cloneCopyEvent(src, dest) {
                var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
                if (dest.nodeType !== 1) {
                    return
                }
                if (data_priv.hasData(src)) {
                    pdataOld = data_priv.access(src);
                    pdataCur = data_priv.set(dest, pdataOld);
                    events = pdataOld.events;
                    if (events) {
                        delete pdataCur.handle;
                        pdataCur.events = {};
                        for (type in events) {
                            for (i = 0, l = events[type].length; i < l; i++) {
                                jQuery.event.add(dest, type, events[type][i])
                            }
                        }
                    }
                }
                if (data_user.hasData(src)) {
                    udataOld = data_user.access(src);
                    udataCur = jQuery.extend({}, udataOld);
                    data_user.set(dest, udataCur)
                }
            }

            function getAll(context, tag) {
                var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || "*") : context.querySelectorAll ? context.querySelectorAll(tag || "*") : [];
                return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret
            }

            function fixInput(src, dest) {
                var nodeName = dest.nodeName.toLowerCase();
                if (nodeName === "input" && rcheckableType.test(src.type)) {
                    dest.checked = src.checked
                } else if (nodeName === "input" || nodeName === "textarea") {
                    dest.defaultValue = src.defaultValue
                }
            }
            jQuery.extend({
                clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
                    var i, l, srcElements, destElements, clone = elem.cloneNode(true),
                        inPage = jQuery.contains(elem.ownerDocument, elem);
                    if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                        destElements = getAll(clone);
                        srcElements = getAll(elem);
                        for (i = 0, l = srcElements.length; i < l; i++) {
                            fixInput(srcElements[i], destElements[i])
                        }
                    }
                    if (dataAndEvents) {
                        if (deepDataAndEvents) {
                            srcElements = srcElements || getAll(elem);
                            destElements = destElements || getAll(clone);
                            for (i = 0, l = srcElements.length; i < l; i++) {
                                cloneCopyEvent(srcElements[i], destElements[i])
                            }
                        } else {
                            cloneCopyEvent(elem, clone)
                        }
                    }
                    destElements = getAll(clone, "script");
                    if (destElements.length > 0) {
                        setGlobalEval(destElements, !inPage && getAll(elem, "script"))
                    }
                    return clone
                },
                buildFragment: function buildFragment(elems, context, scripts, selection) {
                    var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(),
                        nodes = [],
                        i = 0,
                        l = elems.length;
                    for (; i < l; i++) {
                        elem = elems[i];
                        if (elem || elem === 0) {
                            if (jQuery.type(elem) === "object") {
                                jQuery.merge(nodes, elem.nodeType ? [elem] : elem)
                            } else if (!rhtml.test(elem)) {
                                nodes.push(context.createTextNode(elem))
                            } else {
                                tmp = tmp || fragment.appendChild(context.createElement("div"));
                                tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                                wrap = wrapMap[tag] || wrapMap._default;
                                tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                                j = wrap[0];
                                while (j--) {
                                    tmp = tmp.lastChild
                                }
                                jQuery.merge(nodes, tmp.childNodes);
                                tmp = fragment.firstChild;
                                tmp.textContent = ""
                            }
                        }
                    }
                    fragment.textContent = "";
                    i = 0;
                    while (elem = nodes[i++]) {
                        if (selection && jQuery.inArray(elem, selection) !== -1) {
                            continue
                        }
                        contains = jQuery.contains(elem.ownerDocument, elem);
                        tmp = getAll(fragment.appendChild(elem), "script");
                        if (contains) {
                            setGlobalEval(tmp)
                        }
                        if (scripts) {
                            j = 0;
                            while (elem = tmp[j++]) {
                                if (rscriptType.test(elem.type || "")) {
                                    scripts.push(elem)
                                }
                            }
                        }
                    }
                    return fragment
                },
                cleanData: function cleanData(elems) {
                    var data, elem, type, key, special = jQuery.event.special,
                        i = 0;
                    for (;
                        (elem = elems[i]) !== undefined; i++) {
                        if (jQuery.acceptData(elem)) {
                            key = elem[data_priv.expando];
                            if (key && (data = data_priv.cache[key])) {
                                if (data.events) {
                                    for (type in data.events) {
                                        if (special[type]) {
                                            jQuery.event.remove(elem, type)
                                        } else {
                                            jQuery.removeEvent(elem, type, data.handle)
                                        }
                                    }
                                }
                                if (data_priv.cache[key]) {
                                    delete data_priv.cache[key]
                                }
                            }
                        }
                        delete data_user.cache[elem[data_user.expando]]
                    }
                }
            });
            jQuery.fn.extend({
                text: function text(value) {
                    return access(this, function(value) {
                        return value === undefined ? jQuery.text(this) : this.empty().each(function() {
                            if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                                this.textContent = value
                            }
                        })
                    }, null, value, arguments.length)
                },
                append: function append() {
                    return this.domManip(arguments, function(elem) {
                        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                            var target = manipulationTarget(this, elem);
                            target.appendChild(elem)
                        }
                    })
                },
                prepend: function prepend() {
                    return this.domManip(arguments, function(elem) {
                        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                            var target = manipulationTarget(this, elem);
                            target.insertBefore(elem, target.firstChild)
                        }
                    })
                },
                before: function before() {
                    return this.domManip(arguments, function(elem) {
                        if (this.parentNode) {
                            this.parentNode.insertBefore(elem, this)
                        }
                    })
                },
                after: function after() {
                    return this.domManip(arguments, function(elem) {
                        if (this.parentNode) {
                            this.parentNode.insertBefore(elem, this.nextSibling)
                        }
                    })
                },
                remove: function remove(selector, keepData) {
                    var elem, elems = selector ? jQuery.filter(selector, this) : this,
                        i = 0;
                    for (;
                        (elem = elems[i]) != null; i++) {
                        if (!keepData && elem.nodeType === 1) {
                            jQuery.cleanData(getAll(elem))
                        }
                        if (elem.parentNode) {
                            if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                                setGlobalEval(getAll(elem, "script"))
                            }
                            elem.parentNode.removeChild(elem)
                        }
                    }
                    return this
                },
                empty: function empty() {
                    var elem, i = 0;
                    for (;
                        (elem = this[i]) != null; i++) {
                        if (elem.nodeType === 1) {
                            jQuery.cleanData(getAll(elem, false));
                            elem.textContent = ""
                        }
                    }
                    return this
                },
                clone: function clone(dataAndEvents, deepDataAndEvents) {
                    dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
                    deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
                    return this.map(function() {
                        return jQuery.clone(this, dataAndEvents, deepDataAndEvents)
                    })
                },
                html: function html(value) {
                    return access(this, function(value) {
                        var elem = this[0] || {},
                            i = 0,
                            l = this.length;
                        if (value === undefined && elem.nodeType === 1) {
                            return elem.innerHTML
                        }
                        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
                            value = value.replace(rxhtmlTag, "<$1></$2>");
                            try {
                                for (; i < l; i++) {
                                    elem = this[i] || {};
                                    if (elem.nodeType === 1) {
                                        jQuery.cleanData(getAll(elem, false));
                                        elem.innerHTML = value
                                    }
                                }
                                elem = 0
                            } catch (e) {}
                        }
                        if (elem) {
                            this.empty().append(value)
                        }
                    }, null, value, arguments.length)
                },
                replaceWith: function replaceWith() {
                    var arg = arguments[0];
                    this.domManip(arguments, function(elem) {
                        arg = this.parentNode;
                        jQuery.cleanData(getAll(this));
                        if (arg) {
                            arg.replaceChild(elem, this)
                        }
                    });
                    return arg && (arg.length || arg.nodeType) ? this : this.remove()
                },
                detach: function detach(selector) {
                    return this.remove(selector, true)
                },
                domManip: function domManip(args, callback) {
                    args = concat.apply([], args);
                    var fragment, first, scripts, hasScripts, node, doc, i = 0,
                        l = this.length,
                        set = this,
                        iNoClone = l - 1,
                        value = args[0],
                        isFunction = jQuery.isFunction(value);
                    if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
                        return this.each(function(index) {
                            var self = set.eq(index);
                            if (isFunction) {
                                args[0] = value.call(this, index, self.html())
                            }
                            self.domManip(args, callback)
                        })
                    }
                    if (l) {
                        fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
                        first = fragment.firstChild;
                        if (fragment.childNodes.length === 1) {
                            fragment = first
                        }
                        if (first) {
                            scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                            hasScripts = scripts.length;
                            for (; i < l; i++) {
                                node = fragment;
                                if (i !== iNoClone) {
                                    node = jQuery.clone(node, true, true);
                                    if (hasScripts) {
                                        jQuery.merge(scripts, getAll(node, "script"))
                                    }
                                }
                                callback.call(this[i], node, i)
                            }
                            if (hasScripts) {
                                doc = scripts[scripts.length - 1].ownerDocument;
                                jQuery.map(scripts, restoreScript);
                                for (i = 0; i < hasScripts; i++) {
                                    node = scripts[i];
                                    if (rscriptType.test(node.type || "") && !data_priv.access(node, "globalEval") && jQuery.contains(doc, node)) {
                                        if (node.src) {
                                            if (jQuery._evalUrl) {
                                                jQuery._evalUrl(node.src)
                                            }
                                        } else {
                                            jQuery.globalEval(node.textContent.replace(rcleanScript, ""))
                                        }
                                    }
                                }
                            }
                        }
                    }
                    return this
                }
            });
            jQuery.each({
                appendTo: "append",
                prependTo: "prepend",
                insertBefore: "before",
                insertAfter: "after",
                replaceAll: "replaceWith"
            }, function(name, original) {
                jQuery.fn[name] = function(selector) {
                    var elems, ret = [],
                        insert = jQuery(selector),
                        last = insert.length - 1,
                        i = 0;
                    for (; i <= last; i++) {
                        elems = i === last ? this : this.clone(true);
                        jQuery(insert[i])[original](elems);
                        push.apply(ret, elems.get())
                    }
                    return this.pushStack(ret)
                }
            });
            var iframe, elemdisplay = {};

            function actualDisplay(name, doc) {
                var style, elem = jQuery(doc.createElement(name)).appendTo(doc.body),
                    display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? style.display : jQuery.css(elem[0], "display");
                elem.detach();
                return display
            }

            function defaultDisplay(nodeName) {
                var doc = document,
                    display = elemdisplay[nodeName];
                if (!display) {
                    display = actualDisplay(nodeName, doc);
                    if (display === "none" || !display) {
                        iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement);
                        doc = iframe[0].contentDocument;
                        doc.write();
                        doc.close();
                        display = actualDisplay(nodeName, doc);
                        iframe.detach()
                    }
                    elemdisplay[nodeName] = display
                }
                return display
            }
            var rmargin = /^margin/;
            var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");
            var getStyles = function getStyles(elem) {
                if (elem.ownerDocument.defaultView.opener) {
                    return elem.ownerDocument.defaultView.getComputedStyle(elem, null)
                }
                return window.getComputedStyle(elem, null)
            };

            function curCSS(elem, name, computed) {
                var width, minWidth, maxWidth, ret, style = elem.style;
                computed = computed || getStyles(elem);
                if (computed) {
                    ret = computed.getPropertyValue(name) || computed[name]
                }
                if (computed) {
                    if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                        ret = jQuery.style(elem, name)
                    }
                    if (rnumnonpx.test(ret) && rmargin.test(name)) {
                        width = style.width;
                        minWidth = style.minWidth;
                        maxWidth = style.maxWidth;
                        style.minWidth = style.maxWidth = style.width = ret;
                        ret = computed.width;
                        style.width = width;
                        style.minWidth = minWidth;
                        style.maxWidth = maxWidth
                    }
                }
                return ret !== undefined ? ret + "" : ret
            }

            function addGetHookIf(conditionFn, hookFn) {
                return {
                    get: function get() {
                        if (conditionFn()) {
                            delete this.get;
                            return
                        }
                        return (this.get = hookFn).apply(this, arguments)
                    }
                }
            }(function() {
                var pixelPositionVal, boxSizingReliableVal, docElem = document.documentElement,
                    container = document.createElement("div"),
                    div = document.createElement("div");
                if (!div.style) {
                    return
                }
                div.style.backgroundClip = "content-box";
                div.cloneNode(true).style.backgroundClip = "";
                support.clearCloneStyle = div.style.backgroundClip === "content-box";
                container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" + "position:absolute";
                container.appendChild(div);

                function computePixelPositionAndBoxSizingReliable() {
                    div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" + "box-sizing:border-box;display:block;margin-top:1%;top:1%;" + "border:1px;padding:1px;width:4px;position:absolute";
                    div.innerHTML = "";
                    docElem.appendChild(container);
                    var divStyle = window.getComputedStyle(div, null);
                    pixelPositionVal = divStyle.top !== "1%";
                    boxSizingReliableVal = divStyle.width === "4px";
                    docElem.removeChild(container)
                }
                if (window.getComputedStyle) {
                    jQuery.extend(support, {
                        pixelPosition: function pixelPosition() {
                            computePixelPositionAndBoxSizingReliable();
                            return pixelPositionVal
                        },
                        boxSizingReliable: function boxSizingReliable() {
                            if (boxSizingReliableVal == null) {
                                computePixelPositionAndBoxSizingReliable()
                            }
                            return boxSizingReliableVal
                        },
                        reliableMarginRight: function reliableMarginRight() {
                            var ret, marginDiv = div.appendChild(document.createElement("div"));
                            marginDiv.style.cssText = div.style.cssText = "-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0";
                            marginDiv.style.marginRight = marginDiv.style.width = "0";
                            div.style.width = "1px";
                            docElem.appendChild(container);
                            ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);
                            docElem.removeChild(container);
                            div.removeChild(marginDiv);
                            return ret
                        }
                    })
                }
            })();
            jQuery.swap = function(elem, options, callback, args) {
                var ret, name, old = {};
                for (name in options) {
                    old[name] = elem.style[name];
                    elem.style[name] = options[name]
                }
                ret = callback.apply(elem, args || []);
                for (name in options) {
                    elem.style[name] = old[name]
                }
                return ret
            };
            var rdisplayswap = /^(none|table(?!-c[ea]).+)/,
                rnumsplit = new RegExp("^(" + pnum + ")(.*)$", "i"),
                rrelNum = new RegExp("^([+-])=(" + pnum + ")", "i"),
                cssShow = {
                    position: "absolute",
                    visibility: "hidden",
                    display: "block"
                },
                cssNormalTransform = {
                    letterSpacing: "0",
                    fontWeight: "400"
                },
                cssPrefixes = ["Webkit", "O", "Moz", "ms"];

            function vendorPropName(style, name) {
                if (name in style) {
                    return name
                }
                var capName = name[0].toUpperCase() + name.slice(1),
                    origName = name,
                    i = cssPrefixes.length;
                while (i--) {
                    name = cssPrefixes[i] + capName;
                    if (name in style) {
                        return name
                    }
                }
                return origName
            }

            function setPositiveNumber(elem, value, subtract) {
                var matches = rnumsplit.exec(value);
                return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value
            }

            function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
                var i = extra === (isBorderBox ? "border" : "content") ? 4 : name === "width" ? 1 : 0,
                    val = 0;
                for (; i < 4; i += 2) {
                    if (extra === "margin") {
                        val += jQuery.css(elem, extra + cssExpand[i], true, styles)
                    }
                    if (isBorderBox) {
                        if (extra === "content") {
                            val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles)
                        }
                        if (extra !== "margin") {
                            val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles)
                        }
                    } else {
                        val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                        if (extra !== "padding") {
                            val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles)
                        }
                    }
                }
                return val
            }

            function getWidthOrHeight(elem, name, extra) {
                var valueIsBorderBox = true,
                    val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
                    styles = getStyles(elem),
                    isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";
                if (val <= 0 || val == null) {
                    val = curCSS(elem, name, styles);
                    if (val < 0 || val == null) {
                        val = elem.style[name]
                    }
                    if (rnumnonpx.test(val)) {
                        return val
                    }
                    valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
                    val = parseFloat(val) || 0
                }
                return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px"
            }

            function showHide(elements, show) {
                var display, elem, hidden, values = [],
                    index = 0,
                    length = elements.length;
                for (; index < length; index++) {
                    elem = elements[index];
                    if (!elem.style) {
                        continue
                    }
                    values[index] = data_priv.get(elem, "olddisplay");
                    display = elem.style.display;
                    if (show) {
                        if (!values[index] && display === "none") {
                            elem.style.display = ""
                        }
                        if (elem.style.display === "" && isHidden(elem)) {
                            values[index] = data_priv.access(elem, "olddisplay", defaultDisplay(elem.nodeName))
                        }
                    } else {
                        hidden = isHidden(elem);
                        if (display !== "none" || !hidden) {
                            data_priv.set(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"))
                        }
                    }
                }
                for (index = 0; index < length; index++) {
                    elem = elements[index];
                    if (!elem.style) {
                        continue
                    }
                    if (!show || elem.style.display === "none" || elem.style.display === "") {
                        elem.style.display = show ? values[index] || "" : "none"
                    }
                }
                return elements
            }
            jQuery.extend({
                cssHooks: {
                    opacity: {
                        get: function get(elem, computed) {
                            if (computed) {
                                var ret = curCSS(elem, "opacity");
                                return ret === "" ? "1" : ret
                            }
                        }
                    }
                },
                cssNumber: {
                    columnCount: true,
                    fillOpacity: true,
                    flexGrow: true,
                    flexShrink: true,
                    fontWeight: true,
                    lineHeight: true,
                    opacity: true,
                    order: true,
                    orphans: true,
                    widows: true,
                    zIndex: true,
                    zoom: true
                },
                cssProps: {
                    "float": "cssFloat"
                },
                style: function style(elem, name, value, extra) {
                    if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                        return
                    }
                    var ret, type, hooks, origName = jQuery.camelCase(name),
                        style = elem.style;
                    name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
                    hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
                    if (value !== undefined) {
                        type = typeof value;
                        if (type === "string" && (ret = rrelNum.exec(value))) {
                            value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                            type = "number"
                        }
                        if (value == null || value !== value) {
                            return
                        }
                        if (type === "number" && !jQuery.cssNumber[origName]) {
                            value += "px"
                        }
                        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                            style[name] = "inherit"
                        }
                        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                            style[name] = value
                        }
                    } else {
                        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                            return ret
                        }
                        return style[name]
                    }
                },
                css: function css(elem, name, extra, styles) {
                    var val, num, hooks, origName = jQuery.camelCase(name);
                    name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
                    hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
                    if (hooks && "get" in hooks) {
                        val = hooks.get(elem, true, extra)
                    }
                    if (val === undefined) {
                        val = curCSS(elem, name, styles)
                    }
                    if (val === "normal" && name in cssNormalTransform) {
                        val = cssNormalTransform[name]
                    }
                    if (extra === "" || extra) {
                        num = parseFloat(val);
                        return extra === true || jQuery.isNumeric(num) ? num || 0 : val
                    }
                    return val
                }
            });
            jQuery.each(["height", "width"], function(i, name) {
                jQuery.cssHooks[name] = {
                    get: function get(elem, computed, extra) {
                        if (computed) {
                            return rdisplayswap.test(jQuery.css(elem, "display")) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function() {
                                return getWidthOrHeight(elem, name, extra)
                            }) : getWidthOrHeight(elem, name, extra)
                        }
                    },
                    set: function set(elem, value, extra) {
                        var styles = extra && getStyles(elem);
                        return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0)
                    }
                }
            });
            jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function(elem, computed) {
                if (computed) {
                    return jQuery.swap(elem, {
                        display: "inline-block"
                    }, curCSS, [elem, "marginRight"])
                }
            });
            jQuery.each({
                margin: "",
                padding: "",
                border: "Width"
            }, function(prefix, suffix) {
                jQuery.cssHooks[prefix + suffix] = {
                    expand: function expand(value) {
                        var i = 0,
                            expanded = {},
                            parts = typeof value === "string" ? value.split(" ") : [value];
                        for (; i < 4; i++) {
                            expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0]
                        }
                        return expanded
                    }
                };
                if (!rmargin.test(prefix)) {
                    jQuery.cssHooks[prefix + suffix].set = setPositiveNumber
                }
            });
            jQuery.fn.extend({
                css: function css(name, value) {
                    return access(this, function(elem, name, value) {
                        var styles, len, map = {},
                            i = 0;
                        if (jQuery.isArray(name)) {
                            styles = getStyles(elem);
                            len = name.length;
                            for (; i < len; i++) {
                                map[name[i]] = jQuery.css(elem, name[i], false, styles)
                            }
                            return map
                        }
                        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name)
                    }, name, value, arguments.length > 1)
                },
                show: function show() {
                    return showHide(this, true)
                },
                hide: function hide() {
                    return showHide(this)
                },
                toggle: function toggle(state) {
                    if (typeof state === "boolean") {
                        return state ? this.show() : this.hide()
                    }
                    return this.each(function() {
                        if (isHidden(this)) {
                            jQuery(this).show()
                        } else {
                            jQuery(this).hide()
                        }
                    })
                }
            });

            function Tween(elem, options, prop, end, easing) {
                return new Tween.prototype.init(elem, options, prop, end, easing)
            }
            jQuery.Tween = Tween;
            Tween.prototype = {
                constructor: Tween,
                init: function init(elem, options, prop, end, easing, unit) {
                    this.elem = elem;
                    this.prop = prop;
                    this.easing = easing || "swing";
                    this.options = options;
                    this.start = this.now = this.cur();
                    this.end = end;
                    this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px")
                },
                cur: function cur() {
                    var hooks = Tween.propHooks[this.prop];
                    return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this)
                },
                run: function run(percent) {
                    var eased, hooks = Tween.propHooks[this.prop];
                    if (this.options.duration) {
                        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration)
                    } else {
                        this.pos = eased = percent
                    }
                    this.now = (this.end - this.start) * eased + this.start;
                    if (this.options.step) {
                        this.options.step.call(this.elem, this.now, this)
                    }
                    if (hooks && hooks.set) {
                        hooks.set(this)
                    } else {
                        Tween.propHooks._default.set(this)
                    }
                    return this
                }
            };
            Tween.prototype.init.prototype = Tween.prototype;
            Tween.propHooks = {
                _default: {
                    get: function get(tween) {
                        var result;
                        if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
                            return tween.elem[tween.prop]
                        }
                        result = jQuery.css(tween.elem, tween.prop, "");
                        return !result || result === "auto" ? 0 : result
                    },
                    set: function set(tween) {
                        if (jQuery.fx.step[tween.prop]) {
                            jQuery.fx.step[tween.prop](tween)
                        } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                            jQuery.style(tween.elem, tween.prop, tween.now + tween.unit)
                        } else {
                            tween.elem[tween.prop] = tween.now
                        }
                    }
                }
            };
            Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
                set: function set(tween) {
                    if (tween.elem.nodeType && tween.elem.parentNode) {
                        tween.elem[tween.prop] = tween.now
                    }
                }
            };
            jQuery.easing = {
                linear: function linear(p) {
                    return p
                },
                swing: function swing(p) {
                    return .5 - Math.cos(p * Math.PI) / 2
                }
            };
            jQuery.fx = Tween.prototype.init;
            jQuery.fx.step = {};
            var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/,
                rfxnum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i"),
                rrun = /queueHooks$/,
                animationPrefilters = [defaultPrefilter],
                tweeners = {
                    "*": [function(prop, value) {
                        var tween = this.createTween(prop, value),
                            target = tween.cur(),
                            parts = rfxnum.exec(value),
                            unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
                            start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)),
                            scale = 1,
                            maxIterations = 20;
                        if (start && start[3] !== unit) {
                            unit = unit || start[3];
                            parts = parts || [];
                            start = +target || 1;
                            do {
                                scale = scale || ".5";
                                start = start / scale;
                                jQuery.style(tween.elem, prop, start + unit)
                            } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations)
                        }
                        if (parts) {
                            start = tween.start = +start || +target || 0;
                            tween.unit = unit;
                            tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2]
                        }
                        return tween
                    }]
                };

            function createFxNow() {
                setTimeout(function() {
                    fxNow = undefined
                });
                return fxNow = jQuery.now()
            }

            function genFx(type, includeWidth) {
                var which, i = 0,
                    attrs = {
                        height: type
                    };
                includeWidth = includeWidth ? 1 : 0;
                for (; i < 4; i += 2 - includeWidth) {
                    which = cssExpand[i];
                    attrs["margin" + which] = attrs["padding" + which] = type
                }
                if (includeWidth) {
                    attrs.opacity = attrs.width = type
                }
                return attrs
            }

            function createTween(value, prop, animation) {
                var tween, collection = (tweeners[prop] || []).concat(tweeners["*"]),
                    index = 0,
                    length = collection.length;
                for (; index < length; index++) {
                    if (tween = collection[index].call(animation, prop, value)) {
                        return tween
                    }
                }
            }

            function defaultPrefilter(elem, props, opts) {
                var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay, anim = this,
                    orig = {},
                    style = elem.style,
                    hidden = elem.nodeType && isHidden(elem),
                    dataShow = data_priv.get(elem, "fxshow");
                if (!opts.queue) {
                    hooks = jQuery._queueHooks(elem, "fx");
                    if (hooks.unqueued == null) {
                        hooks.unqueued = 0;
                        oldfire = hooks.empty.fire;
                        hooks.empty.fire = function() {
                            if (!hooks.unqueued) {
                                oldfire()
                            }
                        }
                    }
                    hooks.unqueued++;
                    anim.always(function() {
                        anim.always(function() {
                            hooks.unqueued--;
                            if (!jQuery.queue(elem, "fx").length) {
                                hooks.empty.fire()
                            }
                        })
                    })
                }
                if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
                    opts.overflow = [style.overflow, style.overflowX, style.overflowY];
                    display = jQuery.css(elem, "display");
                    checkDisplay = display === "none" ? data_priv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;
                    if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
                        style.display = "inline-block"
                    }
                }
                if (opts.overflow) {
                    style.overflow = "hidden";
                    anim.always(function() {
                        style.overflow = opts.overflow[0];
                        style.overflowX = opts.overflow[1];
                        style.overflowY = opts.overflow[2]
                    })
                }
                for (prop in props) {
                    value = props[prop];
                    if (rfxtypes.exec(value)) {
                        delete props[prop];
                        toggle = toggle || value === "toggle";
                        if (value === (hidden ? "hide" : "show")) {
                            if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                                hidden = true
                            } else {
                                continue
                            }
                        }
                        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop)
                    } else {
                        display = undefined
                    }
                }
                if (!jQuery.isEmptyObject(orig)) {
                    if (dataShow) {
                        if ("hidden" in dataShow) {
                            hidden = dataShow.hidden
                        }
                    } else {
                        dataShow = data_priv.access(elem, "fxshow", {})
                    }
                    if (toggle) {
                        dataShow.hidden = !hidden
                    }
                    if (hidden) {
                        jQuery(elem).show()
                    } else {
                        anim.done(function() {
                            jQuery(elem).hide()
                        })
                    }
                    anim.done(function() {
                        var prop;
                        data_priv.remove(elem, "fxshow");
                        for (prop in orig) {
                            jQuery.style(elem, prop, orig[prop])
                        }
                    });
                    for (prop in orig) {
                        tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                        if (!(prop in dataShow)) {
                            dataShow[prop] = tween.start;
                            if (hidden) {
                                tween.end = tween.start;
                                tween.start = prop === "width" || prop === "height" ? 1 : 0
                            }
                        }
                    }
                } else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
                    style.display = display
                }
            }

            function propFilter(props, specialEasing) {
                var index, name, easing, value, hooks;
                for (index in props) {
                    name = jQuery.camelCase(index);
                    easing = specialEasing[name];
                    value = props[index];
                    if (jQuery.isArray(value)) {
                        easing = value[1];
                        value = props[index] = value[0]
                    }
                    if (index !== name) {
                        props[name] = value;
                        delete props[index]
                    }
                    hooks = jQuery.cssHooks[name];
                    if (hooks && "expand" in hooks) {
                        value = hooks.expand(value);
                        delete props[name];
                        for (index in value) {
                            if (!(index in props)) {
                                props[index] = value[index];
                                specialEasing[index] = easing
                            }
                        }
                    } else {
                        specialEasing[name] = easing
                    }
                }
            }

            function Animation(elem, properties, options) {
                var result, stopped, index = 0,
                    length = animationPrefilters.length,
                    deferred = jQuery.Deferred().always(function() {
                        delete tick.elem
                    }),
                    tick = function tick() {
                        if (stopped) {
                            return false
                        }
                        var currentTime = fxNow || createFxNow(),
                            remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
                            temp = remaining / animation.duration || 0,
                            percent = 1 - temp,
                            index = 0,
                            length = animation.tweens.length;
                        for (; index < length; index++) {
                            animation.tweens[index].run(percent)
                        }
                        deferred.notifyWith(elem, [animation, percent, remaining]);
                        if (percent < 1 && length) {
                            return remaining
                        } else {
                            deferred.resolveWith(elem, [animation]);
                            return false
                        }
                    },
                    animation = deferred.promise({
                        elem: elem,
                        props: jQuery.extend({}, properties),
                        opts: jQuery.extend(true, {
                            specialEasing: {}
                        }, options),
                        originalProperties: properties,
                        originalOptions: options,
                        startTime: fxNow || createFxNow(),
                        duration: options.duration,
                        tweens: [],
                        createTween: function createTween(prop, end) {
                            var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                            animation.tweens.push(tween);
                            return tween
                        },
                        stop: function stop(gotoEnd) {
                            var index = 0,
                                length = gotoEnd ? animation.tweens.length : 0;
                            if (stopped) {
                                return this
                            }
                            stopped = true;
                            for (; index < length; index++) {
                                animation.tweens[index].run(1)
                            }
                            if (gotoEnd) {
                                deferred.resolveWith(elem, [animation, gotoEnd])
                            } else {
                                deferred.rejectWith(elem, [animation, gotoEnd])
                            }
                            return this
                        }
                    }),
                    props = animation.props;
                propFilter(props, animation.opts.specialEasing);
                for (; index < length; index++) {
                    result = animationPrefilters[index].call(animation, elem, props, animation.opts);
                    if (result) {
                        return result;
                    }
                }
                jQuery.map(props, createTween, animation);
                if (jQuery.isFunction(animation.opts.start)) {
                    animation.opts.start.call(elem, animation)
                }
                jQuery.fx.timer(jQuery.extend(tick, {
                    elem: elem,
                    anim: animation,
                    queue: animation.opts.queue
                }));
                return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always)
            }
            jQuery.Animation = jQuery.extend(Animation, {
                tweener: function tweener(props, callback) {
                    if (jQuery.isFunction(props)) {
                        callback = props;
                        props = ["*"]
                    } else {
                        props = props.split(" ")
                    }
                    var prop, index = 0,
                        length = props.length;
                    for (; index < length; index++) {
                        prop = props[index];
                        tweeners[prop] = tweeners[prop] || [];
                        tweeners[prop].unshift(callback)
                    }
                },
                prefilter: function prefilter(callback, prepend) {
                    if (prepend) {
                        animationPrefilters.unshift(callback)
                    } else {
                        animationPrefilters.push(callback)
                    }
                }
            });
            jQuery.speed = function(speed, easing, fn) {
                var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
                    complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
                    duration: speed,
                    easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
                };
                opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
                if (opt.queue == null || opt.queue === true) {
                    opt.queue = "fx"
                }
                opt.old = opt.complete;
                opt.complete = function() {
                    if (jQuery.isFunction(opt.old)) {
                        opt.old.call(this)
                    }
                    if (opt.queue) {
                        jQuery.dequeue(this, opt.queue)
                    }
                };
                return opt
            };
            jQuery.fn.extend({
                fadeTo: function fadeTo(speed, to, easing, callback) {
                    return this.filter(isHidden).css("opacity", 0).show().end().animate({
                        opacity: to
                    }, speed, easing, callback)
                },
                animate: function animate(prop, speed, easing, callback) {
                    var empty = jQuery.isEmptyObject(prop),
                        optall = jQuery.speed(speed, easing, callback),
                        doAnimation = function doAnimation() {
                            var anim = Animation(this, jQuery.extend({}, prop), optall);
                            if (empty || data_priv.get(this, "finish")) {
                                anim.stop(true)
                            }
                        };
                    doAnimation.finish = doAnimation;
                    return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation)
                },
                stop: function stop(type, clearQueue, gotoEnd) {
                    var stopQueue = function stopQueue(hooks) {
                        var stop = hooks.stop;
                        delete hooks.stop;
                        stop(gotoEnd)
                    };
                    if (typeof type !== "string") {
                        gotoEnd = clearQueue;
                        clearQueue = type;
                        type = undefined
                    }
                    if (clearQueue && type !== false) {
                        this.queue(type || "fx", [])
                    }
                    return this.each(function() {
                        var dequeue = true,
                            index = type != null && type + "queueHooks",
                            timers = jQuery.timers,
                            data = data_priv.get(this);
                        if (index) {
                            if (data[index] && data[index].stop) {
                                stopQueue(data[index])
                            }
                        } else {
                            for (index in data) {
                                if (data[index] && data[index].stop && rrun.test(index)) {
                                    stopQueue(data[index])
                                }
                            }
                        }
                        for (index = timers.length; index--;) {
                            if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                                timers[index].anim.stop(gotoEnd);
                                dequeue = false;
                                timers.splice(index, 1)
                            }
                        }
                        if (dequeue || !gotoEnd) {
                            jQuery.dequeue(this, type)
                        }
                    })
                },
                finish: function finish(type) {
                    if (type !== false) {
                        type = type || "fx"
                    }
                    return this.each(function() {
                        var index, data = data_priv.get(this),
                            queue = data[type + "queue"],
                            hooks = data[type + "queueHooks"],
                            timers = jQuery.timers,
                            length = queue ? queue.length : 0;
                        data.finish = true;
                        jQuery.queue(this, type, []);
                        if (hooks && hooks.stop) {
                            hooks.stop.call(this, true)
                        }
                        for (index = timers.length; index--;) {
                            if (timers[index].elem === this && timers[index].queue === type) {
                                timers[index].anim.stop(true);
                                timers.splice(index, 1)
                            }
                        }
                        for (index = 0; index < length; index++) {
                            if (queue[index] && queue[index].finish) {
                                queue[index].finish.call(this)
                            }
                        }
                        delete data.finish
                    })
                }
            });
            jQuery.each(["toggle", "show", "hide"], function(i, name) {
                var cssFn = jQuery.fn[name];
                jQuery.fn[name] = function(speed, easing, callback) {
                    return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback)
                }
            });
            jQuery.each({
                slideDown: genFx("show"),
                slideUp: genFx("hide"),
                slideToggle: genFx("toggle"),
                fadeIn: {
                    opacity: "show"
                },
                fadeOut: {
                    opacity: "hide"
                },
                fadeToggle: {
                    opacity: "toggle"
                }
            }, function(name, props) {
                jQuery.fn[name] = function(speed, easing, callback) {
                    return this.animate(props, speed, easing, callback)
                }
            });
            jQuery.timers = [];
            jQuery.fx.tick = function() {
                var timer, i = 0,
                    timers = jQuery.timers;
                fxNow = jQuery.now();
                for (; i < timers.length; i++) {
                    timer = timers[i];
                    if (!timer() && timers[i] === timer) {
                        timers.splice(i--, 1)
                    }
                }
                if (!timers.length) {
                    jQuery.fx.stop()
                }
                fxNow = undefined
            };
            jQuery.fx.timer = function(timer) {
                jQuery.timers.push(timer);
                if (timer()) {
                    jQuery.fx.start()
                } else {
                    jQuery.timers.pop()
                }
            };
            jQuery.fx.interval = 13;
            jQuery.fx.start = function() {
                if (!timerId) {
                    timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval)
                }
            };
            jQuery.fx.stop = function() {
                clearInterval(timerId);
                timerId = null
            };
            jQuery.fx.speeds = {
                slow: 600,
                fast: 200,
                _default: 400
            };
            jQuery.fn.delay = function(time, type) {
                time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
                type = type || "fx";
                return this.queue(type, function(next, hooks) {
                    var timeout = setTimeout(next, time);
                    hooks.stop = function() {
                        clearTimeout(timeout)
                    }
                })
            };
            (function() {
                var input = document.createElement("input"),
                    select = document.createElement("select"),
                    opt = select.appendChild(document.createElement("option"));
                input.type = "checkbox";
                support.checkOn = input.value !== "";
                support.optSelected = opt.selected;
                select.disabled = true;
                support.optDisabled = !opt.disabled;
                input = document.createElement("input");
                input.value = "t";
                input.type = "radio";
                support.radioValue = input.value === "t"
            })();
            var nodeHook, boolHook, attrHandle = jQuery.expr.attrHandle;
            jQuery.fn.extend({
                attr: function attr(name, value) {
                    return access(this, jQuery.attr, name, value, arguments.length > 1)
                },
                removeAttr: function removeAttr(name) {
                    return this.each(function() {
                        jQuery.removeAttr(this, name)
                    })
                }
            });
            jQuery.extend({
                attr: function attr(elem, name, value) {
                    var hooks, ret, nType = elem.nodeType;
                    if (!elem || nType === 3 || nType === 8 || nType === 2) {
                        return
                    }
                    if (typeof elem.getAttribute === strundefined) {
                        return jQuery.prop(elem, name, value)
                    }
                    if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                        name = name.toLowerCase();
                        hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook)
                    }
                    if (value !== undefined) {
                        if (value === null) {
                            jQuery.removeAttr(elem, name)
                        } else if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                            return ret
                        } else {
                            elem.setAttribute(name, value + "");
                            return value
                        }
                    } else if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                        return ret
                    } else {
                        ret = jQuery.find.attr(elem, name);
                        return ret == null ? undefined : ret
                    }
                },
                removeAttr: function removeAttr(elem, value) {
                    var name, propName, i = 0,
                        attrNames = value && value.match(rnotwhite);
                    if (attrNames && elem.nodeType === 1) {
                        while (name = attrNames[i++]) {
                            propName = jQuery.propFix[name] || name;
                            if (jQuery.expr.match.bool.test(name)) {
                                elem[propName] = false
                            }
                            elem.removeAttribute(name)
                        }
                    }
                },
                attrHooks: {
                    type: {
                        set: function set(elem, value) {
                            if (!support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
                                var val = elem.value;
                                elem.setAttribute("type", value);
                                if (val) {
                                    elem.value = val
                                }
                                return value
                            }
                        }
                    }
                }
            });
            boolHook = {
                set: function set(elem, value, name) {
                    if (value === false) {
                        jQuery.removeAttr(elem, name)
                    } else {
                        elem.setAttribute(name, name)
                    }
                    return name
                }
            };
            jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
                var getter = attrHandle[name] || jQuery.find.attr;
                attrHandle[name] = function(elem, name, isXML) {
                    var ret, handle;
                    if (!isXML) {
                        handle = attrHandle[name];
                        attrHandle[name] = ret;
                        ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
                        attrHandle[name] = handle
                    }
                    return ret
                }
            });
            var rfocusable = /^(?:input|select|textarea|button)$/i;
            jQuery.fn.extend({
                prop: function prop(name, value) {
                    return access(this, jQuery.prop, name, value, arguments.length > 1)
                },
                removeProp: function removeProp(name) {
                    return this.each(function() {
                        delete this[jQuery.propFix[name] || name]
                    })
                }
            });
            jQuery.extend({
                propFix: {
                    "for": "htmlFor",
                    "class": "className"
                },
                prop: function prop(elem, name, value) {
                    var ret, hooks, notxml, nType = elem.nodeType;
                    if (!elem || nType === 3 || nType === 8 || nType === 2) {
                        return
                    }
                    notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
                    if (notxml) {
                        name = jQuery.propFix[name] || name;
                        hooks = jQuery.propHooks[name]
                    }
                    if (value !== undefined) {
                        return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value
                    } else {
                        return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name]
                    }
                },
                propHooks: {
                    tabIndex: {
                        get: function get(elem) {
                            return elem.hasAttribute("tabindex") || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1
                        }
                    }
                }
            });
            if (!support.optSelected) {
                jQuery.propHooks.selected = {
                    get: function get(elem) {
                        var parent = elem.parentNode;
                        if (parent && parent.parentNode) {
                            parent.parentNode.selectedIndex
                        }
                        return null
                    }
                }
            }
            jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function() {
                jQuery.propFix[this.toLowerCase()] = this
            });
            var rclass = /[\t\r\n\f]/g;
            jQuery.fn.extend({
                addClass: function addClass(value) {
                    var classes, elem, cur, clazz, j, finalValue, proceed = typeof value === "string" && value,
                        i = 0,
                        len = this.length;
                    if (jQuery.isFunction(value)) {
                        return this.each(function(j) {
                            jQuery(this).addClass(value.call(this, j, this.className))
                        })
                    }
                    if (proceed) {
                        classes = (value || "").match(rnotwhite) || [];
                        for (; i < len; i++) {
                            elem = this[i];
                            cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");
                            if (cur) {
                                j = 0;
                                while (clazz = classes[j++]) {
                                    if (cur.indexOf(" " + clazz + " ") < 0) {
                                        cur += clazz + " "
                                    }
                                }
                                finalValue = jQuery.trim(cur);
                                if (elem.className !== finalValue) {
                                    elem.className = finalValue
                                }
                            }
                        }
                    }
                    return this
                },
                removeClass: function removeClass(value) {
                    var classes, elem, cur, clazz, j, finalValue, proceed = arguments.length === 0 || typeof value === "string" && value,
                        i = 0,
                        len = this.length;
                    if (jQuery.isFunction(value)) {
                        return this.each(function(j) {
                            jQuery(this).removeClass(value.call(this, j, this.className))
                        })
                    }
                    if (proceed) {
                        classes = (value || "").match(rnotwhite) || [];
                        for (; i < len; i++) {
                            elem = this[i];
                            cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");
                            if (cur) {
                                j = 0;
                                while (clazz = classes[j++]) {
                                    while (cur.indexOf(" " + clazz + " ") >= 0) {
                                        cur = cur.replace(" " + clazz + " ", " ")
                                    }
                                }
                                finalValue = value ? jQuery.trim(cur) : "";
                                if (elem.className !== finalValue) {
                                    elem.className = finalValue
                                }
                            }
                        }
                    }
                    return this
                },
                toggleClass: function toggleClass(value, stateVal) {
                    var type = typeof value;
                    if (typeof stateVal === "boolean" && type === "string") {
                        return stateVal ? this.addClass(value) : this.removeClass(value)
                    }
                    if (jQuery.isFunction(value)) {
                        return this.each(function(i) {
                            jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal)
                        })
                    }
                    return this.each(function() {
                        if (type === "string") {
                            var className, i = 0,
                                self = jQuery(this),
                                classNames = value.match(rnotwhite) || [];
                            while (className = classNames[i++]) {
                                if (self.hasClass(className)) {
                                    self.removeClass(className)
                                } else {
                                    self.addClass(className)
                                }
                            }
                        } else if (type === strundefined || type === "boolean") {
                            if (this.className) {
                                data_priv.set(this, "__className__", this.className)
                            }
                            this.className = this.className || value === false ? "" : data_priv.get(this, "__className__") || ""
                        }
                    })
                },
                hasClass: function hasClass(selector) {
                    var className = " " + selector + " ",
                        i = 0,
                        l = this.length;
                    for (; i < l; i++) {
                        if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
                            return true
                        }
                    }
                    return false
                }
            });
            var rreturn = /\r/g;
            jQuery.fn.extend({
                val: function val(value) {
                    var hooks, ret, isFunction, elem = this[0];
                    if (!arguments.length) {
                        if (elem) {
                            hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                            if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                                return ret
                            }
                            ret = elem.value;
                            return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret
                        }
                        return
                    }
                    isFunction = jQuery.isFunction(value);
                    return this.each(function(i) {
                        var val;
                        if (this.nodeType !== 1) {
                            return
                        }
                        if (isFunction) {
                            val = value.call(this, i, jQuery(this).val())
                        } else {
                            val = value
                        }
                        if (val == null) {
                            val = ""
                        } else if (typeof val === "number") {
                            val += ""
                        } else if (jQuery.isArray(val)) {
                            val = jQuery.map(val, function(value) {
                                return value == null ? "" : value + ""
                            })
                        }
                        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                            this.value = val
                        }
                    })
                }
            });
            jQuery.extend({
                valHooks: {
                    option: {
                        get: function get(elem) {
                            var val = jQuery.find.attr(elem, "value");
                            return val != null ? val : jQuery.trim(jQuery.text(elem))
                        }
                    },
                    select: {
                        get: function get(elem) {
                            var value, option, options = elem.options,
                                index = elem.selectedIndex,
                                one = elem.type === "select-one" || index < 0,
                                values = one ? null : [],
                                max = one ? index + 1 : options.length,
                                i = index < 0 ? max : one ? index : 0;
                            for (; i < max; i++) {
                                option = options[i];
                                if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                                    value = jQuery(option).val();
                                    if (one) {
                                        return value
                                    }
                                    values.push(value)
                                }
                            }
                            return values
                        },
                        set: function set(elem, value) {
                            var optionSet, option, options = elem.options,
                                values = jQuery.makeArray(value),
                                i = options.length;
                            while (i--) {
                                option = options[i];
                                if (option.selected = jQuery.inArray(option.value, values) >= 0) {
                                    optionSet = true
                                }
                            }
                            if (!optionSet) {
                                elem.selectedIndex = -1
                            }
                            return values
                        }
                    }
                }
            });
            jQuery.each(["radio", "checkbox"], function() {
                jQuery.valHooks[this] = {
                    set: function set(elem, value) {
                        if (jQuery.isArray(value)) {
                            return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0
                        }
                    }
                };
                if (!support.checkOn) {
                    jQuery.valHooks[this].get = function(elem) {
                        return elem.getAttribute("value") === null ? "on" : elem.value
                    }
                }
            });
            jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function(i, name) {
                jQuery.fn[name] = function(data, fn) {
                    return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name)
                }
            });
            jQuery.fn.extend({
                hover: function hover(fnOver, fnOut) {
                    return this.mouseenter(fnOver).mouseleave(fnOut || fnOver)
                },
                bind: function bind(types, data, fn) {
                    return this.on(types, null, data, fn)
                },
                unbind: function unbind(types, fn) {
                    return this.off(types, null, fn)
                },
                delegate: function delegate(selector, types, data, fn) {
                    return this.on(types, selector, data, fn)
                },
                undelegate: function undelegate(selector, types, fn) {
                    return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn)
                }
            });
            var nonce = jQuery.now();
            var rquery = /\?/;
            jQuery.parseJSON = function(data) {
                return JSON.parse(data + "")
            };
            jQuery.parseXML = function(data) {
                var xml, tmp;
                if (!data || typeof data !== "string") {
                    return null
                }
                try {
                    tmp = new DOMParser;
                    xml = tmp.parseFromString(data, "text/xml")
                } catch (e) {
                    xml = undefined
                }
                if (!xml || xml.getElementsByTagName("parsererror").length) {
                    jQuery.error("Invalid XML: " + data)
                }
                return xml
            };
            var rhash = /#.*$/,
                rts = /([?&])_=[^&]*/,
                rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
                rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
                rnoContent = /^(?:GET|HEAD)$/,
                rprotocol = /^\/\//,
                rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
                prefilters = {},
                transports = {},
                allTypes = "*/".concat("*"),
                ajaxLocation = window.location.href,
                ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];

            function addToPrefiltersOrTransports(structure) {
                return function(dataTypeExpression, func) {
                    if (typeof dataTypeExpression !== "string") {
                        func = dataTypeExpression;
                        dataTypeExpression = "*"
                    }
                    var dataType, i = 0,
                        dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
                    if (jQuery.isFunction(func)) {
                        while (dataType = dataTypes[i++]) {
                            if (dataType[0] === "+") {
                                dataType = dataType.slice(1) || "*";
                                (structure[dataType] = structure[dataType] || []).unshift(func)
                            } else {
                                (structure[dataType] = structure[dataType] || []).push(func)
                            }
                        }
                    }
                }
            }

            function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
                var inspected = {},
                    seekingTransport = structure === transports;

                function inspect(dataType) {
                    var selected;
                    inspected[dataType] = true;
                    jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                        if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                            options.dataTypes.unshift(dataTypeOrTransport);
                            inspect(dataTypeOrTransport);
                            return false
                        } else if (seekingTransport) {
                            return !(selected = dataTypeOrTransport)
                        }
                    });
                    return selected
                }
                return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*")
            }

            function ajaxExtend(target, src) {
                var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
                for (key in src) {
                    if (src[key] !== undefined) {
                        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key]
                    }
                }
                if (deep) {
                    jQuery.extend(true, target, deep)
                }
                return target
            }

            function ajaxHandleResponses(s, jqXHR, responses) {
                var ct, type, finalDataType, firstDataType, contents = s.contents,
                    dataTypes = s.dataTypes;
                while (dataTypes[0] === "*") {
                    dataTypes.shift();
                    if (ct === undefined) {
                        ct = s.mimeType || jqXHR.getResponseHeader("Content-Type")
                    }
                }
                if (ct) {
                    for (type in contents) {
                        if (contents[type] && contents[type].test(ct)) {
                            dataTypes.unshift(type);
                            break
                        }
                    }
                }
                if (dataTypes[0] in responses) {
                    finalDataType = dataTypes[0]
                } else {
                    for (type in responses) {
                        if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                            finalDataType = type;
                            break
                        }
                        if (!firstDataType) {
                            firstDataType = type
                        }
                    }
                    finalDataType = finalDataType || firstDataType
                }
                if (finalDataType) {
                    if (finalDataType !== dataTypes[0]) {
                        dataTypes.unshift(finalDataType)
                    }
                    return responses[finalDataType]
                }
            }

            function ajaxConvert(s, response, jqXHR, isSuccess) {
                var conv2, current, conv, tmp, prev, converters = {},
                    dataTypes = s.dataTypes.slice();
                if (dataTypes[1]) {
                    for (conv in s.converters) {
                        converters[conv.toLowerCase()] = s.converters[conv]
                    }
                }
                current = dataTypes.shift();
                while (current) {
                    if (s.responseFields[current]) {
                        jqXHR[s.responseFields[current]] = response
                    }
                    if (!prev && isSuccess && s.dataFilter) {
                        response = s.dataFilter(response, s.dataType)
                    }
                    prev = current;
                    current = dataTypes.shift();
                    if (current) {
                        if (current === "*") {
                            current = prev
                        } else if (prev !== "*" && prev !== current) {
                            conv = converters[prev + " " + current] || converters["* " + current];
                            if (!conv) {
                                for (conv2 in converters) {
                                    tmp = conv2.split(" ");
                                    if (tmp[1] === current) {
                                        conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                                        if (conv) {
                                            if (conv === true) {
                                                conv = converters[conv2]
                                            } else if (converters[conv2] !== true) {
                                                current = tmp[0];
                                                dataTypes.unshift(tmp[1])
                                            }
                                            break
                                        }
                                    }
                                }
                            }
                            if (conv !== true) {
                                if (conv && s["throws"]) {
                                    response = conv(response)
                                } else {
                                    try {
                                        response = conv(response)
                                    } catch (e) {
                                        return {
                                            state: "parsererror",
                                            error: conv ? e : "No conversion from " + prev + " to " + current
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return {
                    state: "success",
                    data: response
                }
            }
            jQuery.extend({
                active: 0,
                lastModified: {},
                etag: {},
                ajaxSettings: {
                    url: ajaxLocation,
                    type: "GET",
                    isLocal: rlocalProtocol.test(ajaxLocParts[1]),
                    global: true,
                    processData: true,
                    async: true,
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                    accepts: {
                        "*": allTypes,
                        text: "text/plain",
                        html: "text/html",
                        xml: "application/xml, text/xml",
                        json: "application/json, text/javascript"
                    },
                    contents: {
                        xml: /xml/,
                        html: /html/,
                        json: /json/
                    },
                    responseFields: {
                        xml: "responseXML",
                        text: "responseText",
                        json: "responseJSON"
                    },
                    converters: {
                        "* text": String,
                        "text html": true,
                        "text json": jQuery.parseJSON,
                        "text xml": jQuery.parseXML
                    },
                    flatOptions: {
                        url: true,
                        context: true
                    }
                },
                ajaxSetup: function ajaxSetup(target, settings) {
                    return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target)
                },
                ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
                ajaxTransport: addToPrefiltersOrTransports(transports),
                ajax: function ajax(url, options) {
                    if (typeof url === "object") {
                        options = url;
                        url = undefined
                    }
                    options = options || {};
                    var transport, cacheURL, responseHeadersString, responseHeaders, timeoutTimer, parts, fireGlobals, i, s = jQuery.ajaxSetup({}, options),
                        callbackContext = s.context || s,
                        globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
                        deferred = jQuery.Deferred(),
                        completeDeferred = jQuery.Callbacks("once memory"),
                        _statusCode = s.statusCode || {},
                        requestHeaders = {},
                        requestHeadersNames = {},
                        state = 0,
                        strAbort = "canceled",
                        jqXHR = {
                            readyState: 0,
                            getResponseHeader: function getResponseHeader(key) {
                                var match;
                                if (state === 2) {
                                    if (!responseHeaders) {
                                        responseHeaders = {};
                                        while (match = rheaders.exec(responseHeadersString)) {
                                            responseHeaders[match[1].toLowerCase()] = match[2]
                                        }
                                    }
                                    match = responseHeaders[key.toLowerCase()]
                                }
                                return match == null ? null : match
                            },
                            getAllResponseHeaders: function getAllResponseHeaders() {
                                return state === 2 ? responseHeadersString : null
                            },
                            setRequestHeader: function setRequestHeader(name, value) {
                                var lname = name.toLowerCase();
                                if (!state) {
                                    name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                                    requestHeaders[name] = value
                                }
                                return this
                            },
                            overrideMimeType: function overrideMimeType(type) {
                                if (!state) {
                                    s.mimeType = type
                                }
                                return this
                            },
                            statusCode: function statusCode(map) {
                                var code;
                                if (map) {
                                    if (state < 2) {
                                        for (code in map) {
                                            _statusCode[code] = [_statusCode[code], map[code]]
                                        }
                                    } else {
                                        jqXHR.always(map[jqXHR.status])
                                    }
                                }
                                return this
                            },
                            abort: function abort(statusText) {
                                var finalText = statusText || strAbort;
                                if (transport) {
                                    transport.abort(finalText)
                                }
                                done(0, finalText);
                                return this
                            }
                        };
                    deferred.promise(jqXHR).complete = completeDeferred.add;
                    jqXHR.success = jqXHR.done;
                    jqXHR.error = jqXHR.fail;
                    s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
                    s.type = options.method || options.type || s.method || s.type;
                    s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];
                    if (s.crossDomain == null) {
                        parts = rurl.exec(s.url.toLowerCase());
                        s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))))
                    }
                    if (s.data && s.processData && typeof s.data !== "string") {
                        s.data = jQuery.param(s.data, s.traditional)
                    }
                    inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
                    if (state === 2) {
                        return jqXHR
                    }
                    fireGlobals = jQuery.event && s.global;
                    if (fireGlobals && jQuery.active++ === 0) {
                        jQuery.event.trigger("ajaxStart")
                    }
                    s.type = s.type.toUpperCase();
                    s.hasContent = !rnoContent.test(s.type);
                    cacheURL = s.url;
                    if (!s.hasContent) {
                        if (s.data) {
                            cacheURL = s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data;
                            delete s.data
                        }
                        if (s.cache === false) {
                            s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + nonce++) : cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++
                        }
                    }
                    if (s.ifModified) {
                        if (jQuery.lastModified[cacheURL]) {
                            jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL])
                        }
                        if (jQuery.etag[cacheURL]) {
                            jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL])
                        }
                    }
                    if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                        jqXHR.setRequestHeader("Content-Type", s.contentType)
                    }
                    jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
                    for (i in s.headers) {
                        jqXHR.setRequestHeader(i, s.headers[i])
                    }
                    if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                        return jqXHR.abort()
                    }
                    strAbort = "abort";
                    for (i in {
                            success: 1,
                            error: 1,
                            complete: 1
                        }) {
                        jqXHR[i](s[i])
                    }
                    transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
                    if (!transport) {
                        done(-1, "No Transport")
                    } else {
                        jqXHR.readyState = 1;
                        if (fireGlobals) {
                            globalEventContext.trigger("ajaxSend", [jqXHR, s])
                        }
                        if (s.async && s.timeout > 0) {
                            timeoutTimer = setTimeout(function() {
                                jqXHR.abort("timeout")
                            }, s.timeout)
                        }
                        try {
                            state = 1;
                            transport.send(requestHeaders, done)
                        } catch (e) {
                            if (state < 2) {
                                done(-1, e)
                            } else {
                                throw e
                            }
                        }
                    }

                    function done(status, nativeStatusText, responses, headers) {
                        var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                        if (state === 2) {
                            return
                        }
                        state = 2;
                        if (timeoutTimer) {
                            clearTimeout(timeoutTimer)
                        }
                        transport = undefined;
                        responseHeadersString = headers || "";
                        jqXHR.readyState = status > 0 ? 4 : 0;
                        isSuccess = status >= 200 && status < 300 || status === 304;
                        if (responses) {
                            response = ajaxHandleResponses(s, jqXHR, responses)
                        }
                        response = ajaxConvert(s, response, jqXHR, isSuccess);
                        if (isSuccess) {
                            if (s.ifModified) {
                                modified = jqXHR.getResponseHeader("Last-Modified");
                                if (modified) {
                                    jQuery.lastModified[cacheURL] = modified
                                }
                                modified = jqXHR.getResponseHeader("etag");
                                if (modified) {
                                    jQuery.etag[cacheURL] = modified
                                }
                            }
                            if (status === 204 || s.type === "HEAD") {
                                statusText = "nocontent"
                            } else if (status === 304) {
                                statusText = "notmodified"
                            } else {
                                statusText = response.state;
                                success = response.data;
                                error = response.error;
                                isSuccess = !error
                            }
                        } else {
                            error = statusText;
                            if (status || !statusText) {
                                statusText = "error";
                                if (status < 0) {
                                    status = 0
                                }
                            }
                        }
                        jqXHR.status = status;
                        jqXHR.statusText = (nativeStatusText || statusText) + "";
                        if (isSuccess) {
                            deferred.resolveWith(callbackContext, [success, statusText, jqXHR])
                        } else {
                            deferred.rejectWith(callbackContext, [jqXHR, statusText, error])
                        }
                        jqXHR.statusCode(_statusCode);
                        _statusCode = undefined;
                        if (fireGlobals) {
                            globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error])
                        }
                        completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
                        if (fireGlobals) {
                            globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                            if (!--jQuery.active) {
                                jQuery.event.trigger("ajaxStop")
                            }
                        }
                    }
                    return jqXHR
                },
                getJSON: function getJSON(url, data, callback) {
                    return jQuery.get(url, data, callback, "json")
                },
                getScript: function getScript(url, callback) {
                    return jQuery.get(url, undefined, callback, "script")
                }
            });
            jQuery.each(["get", "post"], function(i, method) {
                jQuery[method] = function(url, data, callback, type) {
                    if (jQuery.isFunction(data)) {
                        type = type || callback;
                        callback = data;
                        data = undefined
                    }
                    return jQuery.ajax({
                        url: url,
                        type: method,
                        dataType: type,
                        data: data,
                        success: callback
                    })
                }
            });
            jQuery._evalUrl = function(url) {
                return jQuery.ajax({
                    url: url,
                    type: "GET",
                    dataType: "script",
                    async: false,
                    global: false,
                    "throws": true
                })
            };
            jQuery.fn.extend({
                wrapAll: function wrapAll(html) {
                    var wrap;
                    if (jQuery.isFunction(html)) {
                        return this.each(function(i) {
                            jQuery(this).wrapAll(html.call(this, i))
                        })
                    }
                    if (this[0]) {
                        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                        if (this[0].parentNode) {
                            wrap.insertBefore(this[0])
                        }
                        wrap.map(function() {
                            var elem = this;
                            while (elem.firstElementChild) {
                                elem = elem.firstElementChild
                            }
                            return elem
                        }).append(this)
                    }
                    return this
                },
                wrapInner: function wrapInner(html) {
                    if (jQuery.isFunction(html)) {
                        return this.each(function(i) {
                            jQuery(this).wrapInner(html.call(this, i))
                        })
                    }
                    return this.each(function() {
                        var self = jQuery(this),
                            contents = self.contents();
                        if (contents.length) {
                            contents.wrapAll(html)
                        } else {
                            self.append(html)
                        }
                    })
                },
                wrap: function wrap(html) {
                    var isFunction = jQuery.isFunction(html);
                    return this.each(function(i) {
                        jQuery(this).wrapAll(isFunction ? html.call(this, i) : html)
                    })
                },
                unwrap: function unwrap() {
                    return this.parent().each(function() {
                        if (!jQuery.nodeName(this, "body")) {
                            jQuery(this).replaceWith(this.childNodes)
                        }
                    }).end()
                }
            });
            jQuery.expr.filters.hidden = function(elem) {
                return elem.offsetWidth <= 0 && elem.offsetHeight <= 0
            };
            jQuery.expr.filters.visible = function(elem) {
                return !jQuery.expr.filters.hidden(elem)
            };
            var r20 = /%20/g,
                rbracket = /\[\]$/,
                rCRLF = /\r?\n/g,
                rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
                rsubmittable = /^(?:input|select|textarea|keygen)/i;

            function buildParams(prefix, obj, traditional, add) {
                var name;
                if (jQuery.isArray(obj)) {
                    jQuery.each(obj, function(i, v) {
                        if (traditional || rbracket.test(prefix)) {
                            add(prefix, v)
                        } else {
                            buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add)
                        }
                    })
                } else if (!traditional && jQuery.type(obj) === "object") {
                    for (name in obj) {
                        buildParams(prefix + "[" + name + "]", obj[name], traditional, add)
                    }
                } else {
                    add(prefix, obj)
                }
            }
            jQuery.param = function(a, traditional) {
                var prefix, s = [],
                    add = function add(key, value) {
                        value = jQuery.isFunction(value) ? value() : value == null ? "" : value;
                        s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value)
                    };
                if (traditional === undefined) {
                    traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional
                }
                if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
                    jQuery.each(a, function() {
                        add(this.name, this.value)
                    })
                } else {
                    for (prefix in a) {
                        buildParams(prefix, a[prefix], traditional, add)
                    }
                }
                return s.join("&").replace(r20, "+")
            };
            jQuery.fn.extend({
                serialize: function serialize() {
                    return jQuery.param(this.serializeArray())
                },
                serializeArray: function serializeArray() {
                    return this.map(function() {
                        var elements = jQuery.prop(this, "elements");
                        return elements ? jQuery.makeArray(elements) : this
                    }).filter(function() {
                        var type = this.type;
                        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type))
                    }).map(function(i, elem) {
                        var val = jQuery(this).val();
                        return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function(val) {
                            return {
                                name: elem.name,
                                value: val.replace(rCRLF, "\r\n")
                            }
                        }) : {
                            name: elem.name,
                            value: val.replace(rCRLF, "\r\n")
                        }
                    }).get()
                }
            });
            jQuery.ajaxSettings.xhr = function() {
                try {
                    return new XMLHttpRequest
                } catch (e) {}
            };
            var xhrId = 0,
                xhrCallbacks = {},
                xhrSuccessStatus = {
                    0: 200,
                    1223: 204
                },
                xhrSupported = jQuery.ajaxSettings.xhr();
            if (window.attachEvent) {
                window.attachEvent("onunload", function() {
                    for (var key in xhrCallbacks) {
                        xhrCallbacks[key]()
                    }
                })
            }
            support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
            support.ajax = xhrSupported = !!xhrSupported;
            jQuery.ajaxTransport(function(options) {
                var callback;
                if (support.cors || xhrSupported && !options.crossDomain) {
                    return {
                        send: function send(headers, complete) {
                            var i, xhr = options.xhr(),
                                id = ++xhrId;
                            xhr.open(options.type, options.url, options.async, options.username, options.password);
                            if (options.xhrFields) {
                                for (i in options.xhrFields) {
                                    xhr[i] = options.xhrFields[i]
                                }
                            }
                            if (options.mimeType && xhr.overrideMimeType) {
                                xhr.overrideMimeType(options.mimeType)
                            }
                            if (!options.crossDomain && !headers["X-Requested-With"]) {
                                headers["X-Requested-With"] = "XMLHttpRequest"
                            }
                            for (i in headers) {
                                xhr.setRequestHeader(i, headers[i])
                            }
                            callback = function(type) {
                                return function() {
                                    if (callback) {
                                        delete xhrCallbacks[id];
                                        callback = xhr.onload = xhr.onerror = null;
                                        if (type === "abort") {
                                            xhr.abort()
                                        } else if (type === "error") {
                                            complete(xhr.status, xhr.statusText)
                                        } else {
                                            complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, typeof xhr.responseText === "string" ? {
                                                text: xhr.responseText
                                            } : undefined, xhr.getAllResponseHeaders())
                                        }
                                    }
                                }
                            };
                            xhr.onload = callback();
                            xhr.onerror = callback("error");
                            callback = xhrCallbacks[id] = callback("abort");
                            try {
                                xhr.send(options.hasContent && options.data || null)
                            } catch (e) {
                                if (callback) {
                                    throw e
                                }
                            }
                        },
                        abort: function abort() {
                            if (callback) {
                                callback()
                            }
                        }
                    }
                }
            });
            jQuery.ajaxSetup({
                accepts: {
                    script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
                },
                contents: {
                    script: /(?:java|ecma)script/
                },
                converters: {
                    "text script": function textScript(text) {
                        jQuery.globalEval(text);
                        return text
                    }
                }
            });
            jQuery.ajaxPrefilter("script", function(s) {
                if (s.cache === undefined) {
                    s.cache = false
                }
                if (s.crossDomain) {
                    s.type = "GET"
                }
            });
            jQuery.ajaxTransport("script", function(s) {
                if (s.crossDomain) {
                    var script, callback;
                    return {
                        send: function send(_, complete) {
                            script = jQuery("<script>").prop({
                                async: true,
                                charset: s.scriptCharset,
                                src: s.url
                            }).on("load error", callback = function(evt) {
                                script.remove();
                                callback = null;
                                if (evt) {
                                    complete(evt.type === "error" ? 404 : 200, evt.type)
                                }
                            });
                            document.head.appendChild(script[0])
                        },
                        abort: function abort() {
                            if (callback) {
                                callback()
                            }
                        }
                    }
                }
            });
            var oldCallbacks = [],
                rjsonp = /(=)\?(?=&|$)|\?\?/;
            jQuery.ajaxSetup({
                jsonp: "callback",
                jsonpCallback: function jsonpCallback() {
                    var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
                    this[callback] = true;
                    return callback
                }
            });
            jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {
                var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
                if (jsonProp || s.dataTypes[0] === "jsonp") {
                    callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
                    if (jsonProp) {
                        s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName)
                    } else if (s.jsonp !== false) {
                        s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName
                    }
                    s.converters["script json"] = function() {
                        if (!responseContainer) {
                            jQuery.error(callbackName + " was not called")
                        }
                        return responseContainer[0]
                    };
                    s.dataTypes[0] = "json";
                    overwritten = window[callbackName];
                    window[callbackName] = function() {
                        responseContainer = arguments
                    };
                    jqXHR.always(function() {
                        window[callbackName] = overwritten;
                        if (s[callbackName]) {
                            s.jsonpCallback = originalSettings.jsonpCallback;
                            oldCallbacks.push(callbackName)
                        }
                        if (responseContainer && jQuery.isFunction(overwritten)) {
                            overwritten(responseContainer[0])
                        }
                        responseContainer = overwritten = undefined
                    });
                    return "script"
                }
            });
            jQuery.parseHTML = function(data, context, keepScripts) {
                if (!data || typeof data !== "string") {
                    return null
                }
                if (typeof context === "boolean") {
                    keepScripts = context;
                    context = false
                }
                context = context || document;
                var parsed = rsingleTag.exec(data),
                    scripts = !keepScripts && [];
                if (parsed) {
                    return [context.createElement(parsed[1])]
                }
                parsed = jQuery.buildFragment([data], context, scripts);
                if (scripts && scripts.length) {
                    jQuery(scripts).remove()
                }
                return jQuery.merge([], parsed.childNodes)
            };
            var _load = jQuery.fn.load;
            jQuery.fn.load = function(url, params, callback) {
                if (typeof url !== "string" && _load) {
                    return _load.apply(this, arguments)
                }
                var selector, type, response, self = this,
                    off = url.indexOf(" ");
                if (off >= 0) {
                    selector = jQuery.trim(url.slice(off));
                    url = url.slice(0, off)
                }
                if (jQuery.isFunction(params)) {
                    callback = params;
                    params = undefined
                } else if (params && typeof params === "object") {
                    type = "POST"
                }
                if (self.length > 0) {
                    jQuery.ajax({
                        url: url,
                        type: type,
                        dataType: "html",
                        data: params
                    }).done(function(responseText) {
                        response = arguments;
                        self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText)
                    }).complete(callback && function(jqXHR, status) {
                        self.each(callback, response || [jqXHR.responseText, status, jqXHR])
                    })
                }
                return this
            };
            jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function(i, type) {
                jQuery.fn[type] = function(fn) {
                    return this.on(type, fn)
                }
            });
            jQuery.expr.filters.animated = function(elem) {
                return jQuery.grep(jQuery.timers, function(fn) {
                    return elem === fn.elem
                }).length
            };
            var docElem = window.document.documentElement;

            function getWindow(elem) {
                return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView
            }
            jQuery.offset = {
                setOffset: function setOffset(elem, options, i) {
                    var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, "position"),
                        curElem = jQuery(elem),
                        props = {};
                    if (position === "static") {
                        elem.style.position = "relative"
                    }
                    curOffset = curElem.offset();
                    curCSSTop = jQuery.css(elem, "top");
                    curCSSLeft = jQuery.css(elem, "left");
                    calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;
                    if (calculatePosition) {
                        curPosition = curElem.position();
                        curTop = curPosition.top;
                        curLeft = curPosition.left
                    } else {
                        curTop = parseFloat(curCSSTop) || 0;
                        curLeft = parseFloat(curCSSLeft) || 0
                    }
                    if (jQuery.isFunction(options)) {
                        options = options.call(elem, i, curOffset)
                    }
                    if (options.top != null) {
                        props.top = options.top - curOffset.top + curTop
                    }
                    if (options.left != null) {
                        props.left = options.left - curOffset.left + curLeft
                    }
                    if ("using" in options) {
                        options.using.call(elem, props)
                    } else {
                        curElem.css(props)
                    }
                }
            };
            jQuery.fn.extend({
                offset: function offset(options) {
                    if (arguments.length) {
                        return options === undefined ? this : this.each(function(i) {
                            jQuery.offset.setOffset(this, options, i)
                        })
                    }
                    var docElem, win, elem = this[0],
                        box = {
                            top: 0,
                            left: 0
                        },
                        doc = elem && elem.ownerDocument;
                    if (!doc) {
                        return
                    }
                    docElem = doc.documentElement;
                    if (!jQuery.contains(docElem, elem)) {
                        return box
                    }
                    if (typeof elem.getBoundingClientRect !== strundefined) {
                        box = elem.getBoundingClientRect()
                    }
                    win = getWindow(doc);
                    return {
                        top: box.top + win.pageYOffset - docElem.clientTop,
                        left: box.left + win.pageXOffset - docElem.clientLeft
                    }
                },
                position: function position() {
                    if (!this[0]) {
                        return
                    }
                    var offsetParent, offset, elem = this[0],
                        parentOffset = {
                            top: 0,
                            left: 0
                        };
                    if (jQuery.css(elem, "position") === "fixed") {
                        offset = elem.getBoundingClientRect()
                    } else {
                        offsetParent = this.offsetParent();
                        offset = this.offset();
                        if (!jQuery.nodeName(offsetParent[0], "html")) {
                            parentOffset = offsetParent.offset()
                        }
                        parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
                        parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true)
                    }
                    return {
                        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
                    }
                },
                offsetParent: function offsetParent() {
                    return this.map(function() {
                        var offsetParent = this.offsetParent || docElem;
                        while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static")) {
                            offsetParent = offsetParent.offsetParent
                        }
                        return offsetParent || docElem
                    })
                }
            });
            jQuery.each({
                scrollLeft: "pageXOffset",
                scrollTop: "pageYOffset"
            }, function(method, prop) {
                var top = "pageYOffset" === prop;
                jQuery.fn[method] = function(val) {
                    return access(this, function(elem, method, val) {
                        var win = getWindow(elem);
                        if (val === undefined) {
                            return win ? win[prop] : elem[method]
                        }
                        if (win) {
                            win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset)
                        } else {
                            elem[method] = val
                        }
                    }, method, val, arguments.length, null)
                }
            });
            jQuery.each(["top", "left"], function(i, prop) {
                jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function(elem, computed) {
                    if (computed) {
                        computed = curCSS(elem, prop);
                        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed
                    }
                })
            });
            jQuery.each({
                Height: "height",
                Width: "width"
            }, function(name, type) {
                jQuery.each({
                    padding: "inner" + name,
                    content: type,
                    "": "outer" + name
                }, function(defaultExtra, funcName) {
                    jQuery.fn[funcName] = function(margin, value) {
                        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
                            extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                        return access(this, function(elem, type, value) {
                            var doc;
                            if (jQuery.isWindow(elem)) {
                                return elem.document.documentElement["client" + name]
                            }
                            if (elem.nodeType === 9) {
                                doc = elem.documentElement;
                                return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name])
                            }
                            return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra)
                        }, type, chainable ? margin : undefined, chainable, null)
                    }
                })
            });
            jQuery.fn.size = function() {
                return this.length
            };
            jQuery.fn.andSelf = jQuery.fn.addBack;
            if (typeof define === "function" && define.amd) {
                define("jquery", [], function() {
                    return jQuery
                })
            }
            var _jQuery = window.jQuery,
                _$ = window.$;
            jQuery.noConflict = function(deep) {
                if (window.$ === jQuery) {
                    window.$ = _$
                }
                if (deep && window.jQuery === jQuery) {
                    window.jQuery = _jQuery
                }
                return jQuery
            };
            if (typeof noGlobal === strundefined) {
                window.jQuery = window.$ = jQuery
            }
            return jQuery
        })
    }, {}],
    2: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var Bar = function() {
            function Bar() {
                _classCallCheck(this, Bar);
                this.element = null;
                this.visible = false
            }
            _createClass(Bar, [{
                key: "show",
                value: function show() {
                    this.element.show();
                    this.visible = true
                }
            }, {
                key: "hide",
                value: function hide() {
                    this.element.hide();
                    this.visible = false
                }
            }, {
                key: "isVisible",
                value: function isVisible() {
                    return this.visible
                }
            }]);
            return Bar
        }();
        module.exports = Bar
    }, {}],
    3: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Bar = require("./Bar");
        var Column = require("../components/Column");
        var equal = require("deep-equal");
        var ColumnOperationsBar = function(_Bar) {
            _inherits(ColumnOperationsBar, _Bar);

            function ColumnOperationsBar(elem) {
                _classCallCheck(this, ColumnOperationsBar);
                _get(Object.getPrototypeOf(ColumnOperationsBar.prototype), "constructor", this).call(this);
                this.element = elem;
                elem.on("click", ".button", this.buttonClick.bind(this));
                app.on("component-focused component-blurred context-activated", this.showOrHide.bind(this))
            }
            _createClass(ColumnOperationsBar, [{
                key: "showOrHide",
                value: function showOrHide(component) {
                    if (app.context.focusedComponent instanceof Column) {
                        this.show()
                    } else {
                        this.hide()
                    }
                }
            }, {
                key: "buttonClick",
                value: function buttonClick(e) {
                    var component = app.context.focusedComponent;
                    if (!(component instanceof Column)) {
                        return false
                    }
                    switch (e.currentTarget.dataset.id) {
                        case "left":
                            component.moveLeftAction();
                            break;
                        case "right":
                            component.moveRightAction();
                            break;
                        case "narrow":
                            component.narrowAction();
                            break;
                        case "widen":
                            component.widenAction();
                            break
                    }
                }
            }, {
                key: "update",
                value: function update() {}
            }]);
            return ColumnOperationsBar
        }(Bar);
        module.exports = ColumnOperationsBar
    }, {
        "../components/Column": 37,
        "./Bar": 2,
        "deep-equal": 409
    }],
    4: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Bar = require("./Bar");
        var equal = require("deep-equal");
        var keyChecker = require("../helpers/keyChecker");
        var InlineEditingBar = function(_Bar) {
            _inherits(InlineEditingBar, _Bar);

            function InlineEditingBar(elem) {
                _classCallCheck(this, InlineEditingBar);
                _get(Object.getPrototypeOf(InlineEditingBar.prototype), "constructor", this).call(this);
                this.element = elem;
                this.inlineEditable = null;
                this.setDefault();
                elem.on("click", "span", this.onModifierClick.bind(this));
                elem.on("click", "a.discard", this.discardChanges.bind(this));
                elem.on("click", "a.save", this.commitChanges.bind(this));
                app.on("keydown", this.keydown.bind(this));
                app.on("component-inlineediting-start", this.inlineEditingStart.bind(this));
                app.on("component-inlineediting-end", this.inlineEditingEnd.bind(this))
            }
            _createClass(InlineEditingBar, [{
                key: "inlineEditingStart",
                value: function inlineEditingStart(component) {
                    this.show();
                    this.setInlineEditable(component)
                }
            }, {
                key: "inlineEditingEnd",
                value: function inlineEditingEnd(component) {
                    this.hide();
                    this.setInlineEditable(null)
                }
            }, {
                key: "keydown",
                value: function keydown(e) {
                    if (!this.isVisible()) return;
                    if (keyChecker(e.ctrlKey && e.which == 66, e.metaKey && e.which == 66)) {
                        this.element.find("span.bold:visible").click();
                        e.preventDefault();
                        return false
                    }
                    if (keyChecker(e.ctrlKey && e.which == 73, e.metaKey && e.which == 73)) {
                        this.element.find("span.italic:visible").click();
                        e.preventDefault();
                        return false
                    }
                    if (keyChecker(e.ctrlKey && e.which == 85, e.metaKey && e.which == 85)) {
                        this.element.find("span.underline:visible").click();
                        e.preventDefault();
                        return false
                    }
                    if (keyChecker(e.ctrlKey && e.which == 75, e.metaKey && e.which == 75)) {
                        this.element.find("span.link:visible").click();
                        e.preventDefault();
                        return false
                    }
                    if (keyChecker(e.ctrlKey && e.which == 65, e.metaKey && e.which == 65)) {
                        this.inlineEditable.selectAll();
                        e.preventDefault();
                        return false
                    }
                }
            }, {
                key: "discardChanges",
                value: function discardChanges() {
                    if (!this.inlineEditable) {
                        return false
                    }
                    this.inlineEditable.discard()
                }
            }, {
                key: "commitChanges",
                value: function commitChanges() {
                    if (!this.inlineEditable) {
                        return false
                    }
                    this.inlineEditable.commit()
                }
            }, {
                key: "onModifierClick",
                value: function onModifierClick(e) {
                    if (!this.inlineEditable) {
                        return false
                    }
                    var elem = $(e.currentTarget);
                    var self = this;
                    if (elem.hasClass("bold")) {
                        dealWith("bold")
                    } else if (elem.hasClass("italic")) {
                        dealWith("italic")
                    } else if (elem.hasClass("strike")) {
                        dealWith("strike")
                    } else if (elem.hasClass("underline")) {
                        dealWith("underline")
                    } else if (elem.hasClass("link")) {
                        app.linkDialog.open({
                            link: this.link,
                            onSave: function onSave(href, target) {
                                href = href.trim();
                                self.link = false;
                                if (href) {
                                    self.link = {
                                        href: href,
                                        target: target
                                    }
                                }
                                elem.toggleClass("active", !!self.link);
                                self.modifySelectedChildren("link", self.link);
                                self.updateEditable()
                            },
                            onClose: function onClose() {}
                        })
                    } else if (elem.hasClass("clear-styles")) {
                        this.resetSelectedChildren();
                        this.element.find(".active").each(function() {
                            if (self[this.dataset.id]) {
                                self[this.dataset.id] = false
                            }
                        }).removeClass("active")
                    }
                    this.updateEditable();

                    function dealWith(prop) {
                        self[prop] = !self[prop];
                        elem.toggleClass("active", self[prop]);
                        self.modifySelectedChildren(prop, self[prop])
                    }
                }
            }, {
                key: "modifySelectedChildren",
                value: function modifySelectedChildren(prop, value) {
                    var editable = this.inlineEditable;
                    if (!editable.isThereSelection()) return false;
                    var elements = editable.getSelectedChildren();
                    for (var i = 0; i < elements.length; i++) {
                        elements[i][prop] = value
                    }
                    return true
                }
            }, {
                key: "resetSelectedChildren",
                value: function resetSelectedChildren() {
                    var editable = this.inlineEditable;
                    if (!editable.isThereSelection()) return false;
                    var elements = editable.getSelectedChildren();
                    for (var i = 0; i < elements.length; i++) {
                        elements[i].reset()
                    }
                    return true
                }
            }, {
                key: "updateEditable",
                value: function updateEditable() {
                    if (this.inlineEditable) {
                        this.inlineEditable.update();
                        this.inlineEditable.updateDimensions();
                        this.inlineEditable.drawCaret()
                    }
                }
            }, {
                key: "setDefault",
                value: function setDefault() {
                    this.bold = false;
                    this.italic = false;
                    this.strike = false;
                    this.underline = false;
                    this.link = false
                }
            }, {
                key: "setInlineEditable",
                value: function setInlineEditable(editable) {
                    this.inlineEditable = editable
                }
            }, {
                key: "matchCharacterStyles",
                value: function matchCharacterStyles(param) {
                    if (!param) {
                        this.setDefault();
                        return this.update()
                    }
                    if (!Array.isArray(param)) {
                        param = [param]
                    }
                    this.bold = true;
                    this.italic = true;
                    this.strike = true;
                    this.underline = true;
                    this.link = param[0].link || false;
                    var allHaveLink = true,
                        allHaveTheSameLink = true;
                    for (var i = 0; i < param.length; i++) {
                        this.bold = this.bold && param[i].bold;
                        this.italic = this.italic && param[i].italic;
                        this.strike = this.strike && param[i].strike;
                        this.underline = this.underline && param[i].underline;
                        if (!equal(this.link, param[i].link)) {
                            this.link = false
                        }
                    }
                    this.update()
                }
            }, {
                key: "update",
                value: function update() {
                    this.element.find(".bold").show().toggleClass("active", this.bold);
                    this.element.find(".italic").show().toggleClass("active", this.italic);
                    this.element.find(".strike").show().toggleClass("active", this.strike);
                    this.element.find(".underline").show().toggleClass("active", this.underline);
                    this.element.find(".link").show().toggleClass("active", !!this.link);
                    var blacklist = this.inlineEditable.blacklist;
                    for (var i = 0; i < blacklist.length; i++) {
                        this.element.find("." + blacklist[i]).hide()
                    }
                }
            }]);
            return InlineEditingBar
        }(Bar);
        module.exports = InlineEditingBar
    }, {
        "../helpers/keyChecker": 176,
        "./Bar": 2,
        "deep-equal": 409
    }],
    5: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Bar = require("./Bar");
        var TabBar = function(_Bar) {
            _inherits(TabBar, _Bar);

            function TabBar(elem) {
                _classCallCheck(this, TabBar);
                _get(Object.getPrototypeOf(TabBar.prototype), "constructor", this).call(this);
                this.element = elem;
                this.tabHolder = elem.find("#tab-holder");
                this.tabScroll = elem.find("#tab-scroll");
                this.scrollOffset = 0;
                this.domToContext = new WeakMap;
                elem.on("mousedown", ".tab", this.mouseDown.bind(this));
                elem.on("wheel", this.mouseWheel.bind(this));
                app.on("mouseup", this.mouseUp.bind(this));
                app.on("mousemove", this.mouseMove.bind(this));
                app.on("context-opened context-closed context-activated context-saved", this.scheduleUpdate.bind(this));
                app.on("context-changed", this.contextChanged.bind(this))
            }
            _createClass(TabBar, [{
                key: "contextChanged",
                value: function contextChanged(context) {
                    var index = app.openedContexts.indexOf(context);
                    var tab = this.tabHolder.find(".tab").eq(index);
                    tab.toggleClass("unsaved", !context.isSaved());
                    tab.find(".title").text(formatContextName(context.name))
                }
            }, {
                key: "mouseDown",
                value: function mouseDown(e) {
                    var context = this.domToContext.get(e.currentTarget);
                    if (e.button == 2) {
                        app.contextMenu.show(e.pageX, e.pageY, [{
                            name: "Duplicate",
                            action: app.openDuplicateDesign.bind(app, context)
                        }, {
                            name: "Close",
                            action: app.confirmCloseContext.bind(app, context)
                        }]);
                        e.stopPropagation();
                        return
                    }
                    this._mouseIsDown = true;
                    this._mouseDownPosition = app.mousePosition.clone();
                    this._mouseDownContext = this.domToContext.get(e.currentTarget);
                    this._mouseDownNode = e.currentTarget;
                    this._mouseDownNodeLeft = this._mouseDownNode.getBoundingClientRect().left;
                    this._offsetLeft = e.pageX - this._mouseDownNodeLeft;
                    this._tabBarLeftOffset = this.tabScroll.offset().left;
                    this._tabBarRightOffset = this._tabBarLeftOffset + this.tabScroll.outerWidth();
                    this._detectNeighborsForDraggedTab()
                }
            }, {
                key: "_detectNeighborsForDraggedTab",
                value: function _detectNeighborsForDraggedTab() {
                    var prev = this._mouseDownNode.previousSibling;
                    var next = this._mouseDownNode.nextSibling;
                    this._previousSnapPoint = null;
                    this._nextSnapPoint = null;
                    if (prev) {
                        this._previousSnapPoint = prev.getBoundingClientRect().right
                    }
                    if (next) {
                        this._nextSnapPoint = next.getBoundingClientRect().left
                    }
                }
            }, {
                key: "mouseMove",
                value: function mouseMove() {
                    if (!this._mouseIsDown) return;
                    if (this._mouseDownPosition.distanceTo(app.mousePosition) > 3) {
                        if (app.mousePosition.x < this._tabBarLeftOffset || app.mousePosition.x > this._tabBarRightOffset) {
                            return
                        }
                        this._mouseMoved = true;
                        this._mouseDownNode.classList.add("dragged");
                        if (this._previousSnapPoint && app.mousePosition.x < this._previousSnapPoint - 10) {
                            var element = this._mouseDownNode.previousSibling;
                            element.insertAdjacentElement("beforeBegin", this._mouseDownNode);
                            this._offsetLeft -= element.offsetWidth;
                            this._detectNeighborsForDraggedTab()
                        }
                        if (this._nextSnapPoint && app.mousePosition.x > this._nextSnapPoint + 10) {
                            var element = this._mouseDownNode.nextSibling;
                            element.insertAdjacentElement("afterEnd", this._mouseDownNode);
                            this._offsetLeft += element.offsetWidth;
                            this._detectNeighborsForDraggedTab()
                        }
                        this._mouseDownNode.style["transform"] = "translateX(" + (app.mousePosition.x - (this._mouseDownNodeLeft + this._offsetLeft)) + "px)"
                    }
                }
            }, {
                key: "mouseUp",
                value: function mouseUp(e) {
                    var target = $(e.target);
                    if (!this._mouseIsDown) {
                        return
                    }
                    var wasMoved = this._mouseMoved,
                        context = this._mouseDownContext;
                    this._mouseDownContext = null;
                    this._mouseIsDown = false;
                    this._mouseMoved = false;
                    if (wasMoved) {
                        this._mouseDownNode.classList.remove("dragged");
                        this._mouseDownNode.style["transform"] = "";
                        var self = this;
                        app.openedContexts = this.element.find(".tab").map(function() {
                            return self.domToContext.get(this)
                        }).toArray()
                    } else {
                        if (target.is(".close")) {
                            app.confirmCloseContext(context);
                            return
                        }
                        if (!context.isActive()) {
                            app.activateContext(context)
                        }
                    }
                }
            }, {
                key: "mouseWheel",
                value: function mouseWheel(e) {
                    if (this._mouseMoved) {
                        return
                    }
                    if (e.originalEvent.deltaX > 0 || e.originalEvent.deltaY > 0) {
                        this.scrollOffset -= 50
                    } else {
                        this.scrollOffset += 50
                    }
                    if (this.scrollOffset > 0) {
                        this.scrollOffset = 0
                    }
                    var tabScrollOuterWidth = this.tabScroll.outerWidth();
                    var tabHolderOuterWidth = this.tabHolder.outerWidth();
                    if (tabScrollOuterWidth > tabHolderOuterWidth) {
                        this.scrollOffset = 0
                    } else if (-this.scrollOffset + tabScrollOuterWidth > tabHolderOuterWidth) {
                        this.scrollOffset = tabScrollOuterWidth - tabHolderOuterWidth
                    }
                    this.tabHolder[0].style["transform"] = "translateX(" + this.scrollOffset + "px)"
                }
            }, {
                key: "scheduleUpdate",
                value: function scheduleUpdate() {
                    clearTimeout(this.timeout);
                    this.timeout = setTimeout(this.update.bind(this), 25)
                }
            }, {
                key: "update",
                value: function update() {
                    var arr = [];
                    for (var i = 0; i < app.openedContexts.length; i++) {
                        var ctx = app.openedContexts[i];
                        var tmp = $('<div class="tab"><span class="title"></span><span class="close"></span></div>');
                        tmp.find(".title").text(formatContextName(ctx.name)).attr("title", ctx.path);
                        tmp.toggleClass("active", ctx.isActive());
                        tmp.toggleClass("unsaved", !ctx.isSaved());
                        this.domToContext.set(tmp[0], ctx);
                        arr.push(tmp)
                    }
                    if (arr.length) {
                        this.element.show();
                        this.tabHolder.html(arr)
                    }
                }
            }]);
            return TabBar
        }(Bar);

        function formatContextName(str) {
            if (str.length >= 30) {
                return str.slice(0, 30) + ".."
            }
            return str
        }
        module.exports = TabBar
    }, {
        "./Bar": 2
    }],
    6: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Bar = require("./Bar");
        var Canvas = require("../base/Canvas");
        var ToolBar = function(_Bar) {
            _inherits(ToolBar, _Bar);

            function ToolBar(elem) {
                _classCallCheck(this, ToolBar);
                _get(Object.getPrototypeOf(ToolBar.prototype), "constructor", this).call(this);
                this.element = elem;
                elem.on("click", ".button-size", this.clickResize.bind(this));
                elem.on("click", ".button-zoom", this.clickZoom.bind(this));
                elem.on("click", ".toggle-grid", this.toggleGrid.bind(this));
                this.zoomInElement = elem.find(".zoom-in");
                this.zoomOutElement = elem.find(".zoom-out");
                this.gridElement = elem.find(".toggle-grid");
                this.buttonSizes = elem.find(".button-size");
                this.info = elem.find(".info");
                app.on("context-activated canvas-resized canvas-zoomed", this.update.bind(this))
            }
            _createClass(ToolBar, [{
                key: "toggleGrid",
                value: function toggleGrid(e) {
                    var elem = $(e.currentTarget);
                    app.context.toolState.visualizeGrid = !app.context.toolState.visualizeGrid;
                    app.canvas.refresh();
                    this.update()
                }
            }, {
                key: "clickResize",
                value: function clickResize(e) {
                    if (blockFor(500)) return;
                    var width = Canvas.sizes[e.currentTarget.dataset.id];
                    app.canvas.resize({
                        width: width
                    }, true);
                    this.buttonSizes.removeClass("active");
                    $(e.currentTarget).addClass("active")
                }
            }, {
                key: "clickZoom",
                value: function clickZoom(e) {
                    if (e.currentTarget.dataset.id == "zoom-in") {
                        app.canvas.zoomIn()
                    } else {
                        app.canvas.zoomOut()
                    }
                    this.update()
                }
            }, {
                key: "update",
                value: function update() {
                    this.show();
                    this.zoomInElement.toggleClass("active", app.context.canvasDimensions.zoom < 2);
                    this.zoomOutElement.toggleClass("active", app.context.canvasDimensions.zoom > .25);
                    this.gridElement.toggleClass("on", app.context.toolState.visualizeGrid);
                    if (app.context.toolState.visualizeGrid) {
                        this.gridElement.attr("title", "Grid Is Visible")
                    } else {
                        this.gridElement.attr("title", "Grid Is Hidden")
                    }
                    this.buttonSizes.removeClass("active");
                    this.buttonSizes.filter("." + app.canvas.getSize()).addClass("active");
                    this.info.text(Math.floor(app.context.canvasDimensions.width) + "px × " + Math.floor(app.context.canvasDimensions.height) + "px @ " + Math.round(app.context.canvasDimensions.zoom * 100) + "%")
                }
            }]);
            return ToolBar
        }(Bar);
        var blocked = false;

        function blockFor(n) {
            if (blocked) {
                return true
            }
            blocked = true;
            setTimeout(function() {
                blocked = false
            }, n);
            return false
        }
        module.exports = ToolBar
    }, {
        "../base/Canvas": 11,
        "./Bar": 2
    }],
    7: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var Point = require("./Point");
        var Canvas = require("./Canvas");
        var HTML = require("../components/HTML");
        var Body = require("../components/Body");
        var Context = require("../base/Context");
        var ExportContext = require("../base/ExportContext");
        var Package = require("./Package");
        var Theme = require("./Theme");
        var packageJSON = require("../package.json");
        var InlineEditingBar = require("../bars/InlineEditingBar");
        var TabBar = require("../bars/TabBar");
        var ToolBar = require("../bars/ToolBar");
        var ColumnOperationsBar = require("../bars/ColumnOperationsBar");
        var OptionsPane = require("../panes/OptionsPane");
        var OverviewPane = require("../panes/OverviewPane");
        var ComponentPane = require("../panes/ComponentPane");
        var AssetsPane = require("../panes/AssetsPane");
        var StylesPane = require("../panes/StylesPane");
        var Dialog = require("../dialogs/Dialog");
        var AlertDialog = require("../dialogs/AlertDialog");
        var AboutDialog = require("../dialogs/AboutDialog");
        var IconsDialog = require("../dialogs/IconsDialog");
        var LinkDialog = require("../dialogs/LinkDialog");
        var ConfirmDialog = require("../dialogs/ConfirmDialog");
        var ImagesDialog = require("../dialogs/ImagesDialog");
        var FontImportDialog = require("../dialogs/FontImportDialog");
        var ComponentToPackageDialog = require("../dialogs/ComponentToPackageDialog");
        var ThemeManagerDialog = require("../dialogs/ThemeManagerDialog");
        var ThemeChooserDialog = require("../dialogs/ThemeChooserDialog");
        var NewDesignDialog = require("../dialogs/NewDesignDialog");
        var PreviewDialog = require("../dialogs/PreviewDialog");
        var PurchaseDialog = require("../dialogs/PurchaseDialog");
        var WhatsNewDialog = require("../dialogs/WhatsNewDialog");
        var ContextMenu = require("./ContextMenu");
        var beautifyHTML = require("js-beautify").html;
        var executeDropCall = require("../helpers/executeDropCall");
        var restoreCSSList = require("../helpers/restoreCSSList");
        var parseCSS = require("../helpers/parseCSS");
        var parsePath = require("../helpers/parsePath");
        var buildBSDesignFormat = require("../helpers/buildBSDesignFormat");
        var parseBSComponentFormat = require("../helpers/parseBSComponentFormat");
        var parseBSDesignFormat = require("../helpers/parseBSDesignFormat");
        var enforceFileExtension = require("../helpers/enforceFileExtension");
        var themes = require("../config/bootstrap-themes");
        var parseDOMTree = require("../helpers/parseDOMTree");
        var stringifyParsedTree = require("../helpers/stringifyParsedTree");
        var mimeTypes = require("../config/mime-types");
        var cleanUpDataURL = require("../helpers/cleanUpDataURL");
        var readFileAsBase64 = require("../helpers/readFileAsBase64");
        var cookies = require("../helpers/cookies");
        var keyChecker = require("../helpers/keyChecker");
        var generateMenuTemplateForApp = require("../helpers/generateMenuTemplateForApp");
        var Application = function() {
            function Application() {
                _classCallCheck(this, Application);
                this.aboveCanvas = false;
                this.aboveOverview = false;
                this.mousePosition = new Point;
                this.isDragging = false;
                this.draggedComponent = null;
                this.dropCall = null;
                this.inlineEditingBar = null;
                this.tabBar = null;
                this.toolBar = null;
                this.columnOperationsBar = null;
                this.overviewPane = null;
                this.optionsPane = null;
                this.componentPane = null;
                this.assetsPane = null;
                this.stylesPane = null;
                this.context = null;
                this.openedContexts = [];
                this.packages = [];
                this.userThemes = [];
                this.recent = [];
                this.userCSSElement = null;
                this.canvas = null;
                this.pubsub = {};
                this.changedIDMap = {};
                this.optionsPaneCollapsedState = new Map;
                this.settings = {
                    previewEnabled: false
                }
            }
            _createClass(Application, [{
                key: "setup",
                value: function setup(doc, $) {
                    var app = this;
                    var iframe = $("#canvas iframe");
                    var iframeDoc = $(iframe.prop("contentDocument"));
                    app.themes = themes;
                    this.initPackages(electron.readSetting("packages", []));
                    this.initThemes(electron.readSetting("themes", []));
                    this.recent = electron.readSetting("recent", []);
                    iframeDoc[0].open();
                    iframeDoc[0].write("<!DOCTYPE html>");
                    iframeDoc[0].close();
                    app.alertDialog = new AlertDialog($("#alert-dialog"));
                    app.aboutDialog = new AboutDialog($("#about-dialog"));
                    app.iconsDialog = new IconsDialog($("#icons-dialog"));
                    app.imagesDialog = new ImagesDialog($("#images-dialog"));
                    app.linkDialog = new LinkDialog($("#link-dialog"));
                    app.confirmDialog = new ConfirmDialog($("#confirm-dialog"));
                    app.fontImportDialog = new FontImportDialog($("#font-import-dialog"));
                    app.componentToPackageDialog = new ComponentToPackageDialog($("#component-to-package-dialog"));
                    app.themeManagerDialog = new ThemeManagerDialog($("#theme-manager-dialog"));
                    app.themeChooserDialog = new ThemeChooserDialog($("#theme-chooser-dialog"));
                    app.newDesignDialog = new NewDesignDialog($("#new-design-dialog"));
                    app.previewDialog = new PreviewDialog($("#preview-dialog"));
                    app.purchaseDialog = new PurchaseDialog($("#purchase-dialog"));
                    app.whatsNewDialog = new WhatsNewDialog($("#whats-new-dialog"));
                    app.overviewPane = new OverviewPane($("#overview-pane"));
                    app.optionsPane = new OptionsPane($("#options-pane"));
                    app.componentPane = new ComponentPane($("#component-pane"));
                    app.assetsPane = new AssetsPane($("#assets-pane"));
                    app.stylesPane = new StylesPane($("#styles-pane"));
                    app.userCSSElement = iframeDoc.find("#user-css");
                    app.inlineEditingBar = new InlineEditingBar($("#inline-editing-bar"));
                    app.tabBar = new TabBar($("#tab-bar"));
                    app.toolBar = new ToolBar($("#tool-bar"));
                    app.columnOperationsBar = new ColumnOperationsBar($("#column-operations-bar"));
                    app.contextMenu = new ContextMenu;
                    win.on("resize", app.resize.bind(app));
                    win.on("focus", app.focus.bind(app));
                    win.on("blur", app.blur.bind(app));
                    win.on("mousewheel", app.scroll.bind(app));
                    doc.on("mousemove", function(e) {
                        if (!app.hasOpenedContexts()) return;
                        app.mousePosition.x = e.pageX;
                        app.mousePosition.y = e.pageY;
                        app.canvas.mousePosition.x = Infinity;
                        app.canvas.mousePosition.y = Infinity;
                        app.onMousemove(e)
                    });
                    doc.on("mousedown", app.onMousedown.bind(app));
                    doc.on("mouseup", app.onMouseup.bind(app));
                    doc.on("contextmenu", false);
                    app.focusTarget = $("#focus-target");
                    app.focusTarget.focus();
                    var refocusTimeout;
                    doc.on("focusout", function(e) {
                        if (!app.hasOpenedContexts()) return;
                        refocusTimeout = setTimeout(function() {
                            if (app.isInlineEditingActive()) {
                                app.focusTarget.focus()
                            }
                        }, 20)
                    });
                    doc.on("focusin", function(e) {
                        if (!app.hasOpenedContexts()) return;
                        var target = $(e.target);
                        if (app.isInlineEditingActive() && target.is("textarea, select, input")) {
                            clearTimeout(refocusTimeout)
                        }
                    });
                    doc.on("keydown", function(e) {
                        if (!app.hasOpenedContexts()) return;
                        var target = $(e.target);
                        if (e.target != app.focusTarget[0] && target.is("textarea, input, [contenteditable]")) {
                            return
                        }
                        app.trigger("keydown", e)
                    });
                    iframeDoc.on("click", function(e) {
                        e.preventDefault();
                        app.focusTarget.focus()
                    });
                    iframeDoc.on("click", "a", function(e) {
                        e.preventDefault()
                    });
                    doc.on("input", "#focus-target", function() {
                        app.focusTarget.html("")
                    });
                    iframeDoc.on("mousemove", function(e) {
                        if (!app.hasOpenedContexts()) return false;
                        app.canvas.mousePosition.x = e.pageX;
                        app.canvas.mousePosition.y = e.pageY;
                        app.mousePosition.x = e.pageX * app.context.canvasDimensions.zoom + app.canvas.iframeOffset.left - iframe[0].contentWindow.scrollX;
                        app.mousePosition.y = e.pageY * app.context.canvasDimensions.zoom + app.canvas.iframeOffset.top - iframe[0].contentWindow.scrollY;
                        app.onMousemove(e)
                    });
                    iframeDoc.on("mouseup", app.onMouseup.bind(app));
                    iframeDoc.on("mousedown", app.onMousedown.bind(app));
                    iframeDoc.on("contextmenu", false);
                    this.on("mousedown", function(e) {
                        if (app.aboveCanvas) return;
                        var target = $(e.target);
                        var component = app.context.focusedComponent;
                        if (component && component.isInlineEditingActivated) {
                            if (!target.closest("#inline-editing-bar").length && !target.closest("#dialogs").length) {
                                component.commit();
                                e.preventDefault()
                            }
                            return
                        }
                    });
                    this.on("keydown", function(e) {
                        if (e.which == 27) {
                            if (Dialog.isDialogShown()) {
                                Dialog.getShownDialog().close();
                                return false
                            }
                            if (app.isInlineEditingActive()) {
                                app.context.focusedComponent.discard();
                                return false
                            }
                        }
                        if (e.which == 13) {
                            if (app.isInlineEditingActive()) {
                                app.context.focusedComponent.commit();
                                return false
                            }
                            if (app.context.focusedComponent && app.context.focusedComponent.flags.canBeEdited) {
                                app.context.focusedComponent.activateInlineEditingAndMoveCaretToEnd();
                                return false
                            }
                        }
                    }, -1);
                    this.on("keydown", function(e) {
                        if (keyChecker(e.which == 78 && e.ctrlKey, e.which == 78 && e.metaKey)) {
                            e.preventDefault();
                            app.showDialogForNewDesign()
                        }
                        if (keyChecker(e.which == 79 && e.ctrlKey, e.which == 79 && e.metaKey)) {
                            e.preventDefault();
                            app.open()
                        }
                        if (keyChecker(e.which == 90 && e.ctrlKey, e.which == 90 && e.metaKey)) {
                            e.preventDefault();
                            if (e.shiftKey) {
                                app.redo()
                            } else {
                                app.undo()
                            }
                        }
                        if (keyChecker(e.which == 89 && e.ctrlKey, e.which == 89 && e.metaKey)) {
                            e.preventDefault();
                            app.redo()
                        }
                        if (keyChecker(e.which == 83 && e.ctrlKey, e.which == 83 && e.metaKey)) {
                            e.preventDefault();
                            app.saveDesign(app.context)
                        }
                        if (keyChecker(e.which == 69 && e.ctrlKey, e.which == 69 && e.metaKey)) {
                            e.preventDefault();
                            Application.exportContext(app.context)
                        }
                        if (keyChecker(e.which == 87 && e.ctrlKey, e.which == 87 && e.metaKey)) {
                            e.preventDefault();
                            app.confirmCloseContext(app.context)
                        }
                        if (keyChecker(e.which == 68 && e.ctrlKey, e.which == 68 && e.metaKey)) {
                            e.preventDefault();
                            if (app.context.focusedComponent && app.context.focusedComponent.flags.canBeDuplicated) {
                                app.context.focusedComponent.duplicateAction()
                            }
                        }
                        if (keyChecker(e.which == 38 && e.ctrlKey, e.which == 38 && e.metaKey)) {
                            e.preventDefault();
                            if (app.context.focusedComponent) {
                                app.context.focusedComponent.focusParent()
                            }
                        }
                        if (keyChecker(e.which == 40 && e.ctrlKey, e.which == 40 && e.metaKey)) {
                            e.preventDefault();
                            if (!app.context.focusedComponent) return;
                            var pbl = app.context.previousBreadcrumbList;
                            var child = null;
                            if (pbl && pbl.length) {
                                for (var i = 0; i < pbl.length; i++) {
                                    if (pbl[i] == app.context.focusedComponent && pbl[i + 1] && pbl[i + 1].isVisible()) {
                                        child = pbl[i + 1]
                                    }
                                }
                            }
                            if (!child && app.context.focusedComponent.children) {
                                var comp = app.context.focusedComponent.findFirstComponentChild();
                                comp && comp.focus()
                            }
                            if (child) {
                                child.focus()
                            }
                        }
                        if (keyChecker(e.which == 39 && e.ctrlKey, e.which == 39 && e.metaKey)) {
                            e.preventDefault();
                            if (!app.context.focusedComponent) return;
                            app.context.focusedComponent.focusNextSibling()
                        }
                        if (keyChecker(e.which == 37 && e.ctrlKey, e.which == 37 && e.metaKey)) {
                            e.preventDefault();
                            if (!app.context.focusedComponent) return;
                            app.context.focusedComponent.focusPreviousSibling()
                        }
                        if (e.which == 46) {
                            e.preventDefault();
                            if (app.context.focusedComponent && app.context.focusedComponent.flags.canBeDeleted) {
                                app.context.focusedComponent.deleteAction()
                            }
                        }
                        if (e.which == 8) {
                            e.preventDefault();
                            if (app.context.focusedComponent && app.context.focusedComponent.flags.canBeEdited) {
                                app.context.focusedComponent.activateInlineEditingAndEmpty()
                            }
                        }
                        if (keyChecker(e.which == 80 && e.ctrlKey, e.which == 80 && e.metaKey)) {
                            e.preventDefault()
                        }
                        if (keyChecker(e.which == 82 && e.ctrlKey, e.which == 82 && e.metaKey)) {
                            e.preventDefault()
                        }
                        if (keyChecker(e.which == 187 && e.ctrlKey, e.which == 187 && e.metaKey)) {
                            app.zoomIn();
                            e.preventDefault()
                        }
                        if (keyChecker(e.which == 189 && e.ctrlKey, e.which == 189 && e.metaKey)) {
                            app.zoomOut();
                            e.preventDefault()
                        }
                        if (keyChecker(e.which == 48 && e.ctrlKey, e.which == 48 && e.metaKey)) {
                            app.resetZoom();
                            e.preventDefault()
                        }
                    }, 100);
                    this.on("drag-start", function(e) {
                        bod.addClass("dragging")
                    });
                    this.on("drag-end", function(e) {
                        bod.removeClass("dragging")
                    });
                    this.canvas = new Canvas($("#canvas"));
                    this.startScreen = $("#startscreen");
                    this.startScreen.find(".button.create").on("click", function() {
                        app.showDialogForNewDesign()
                    });
                    this.startScreen.find(".button.open").on("click", function() {
                        app.open()
                    });
                    this.startScreen.find(".button.tutorial").on("click", function() {
                        app.loadTutorial("getting-started")
                    });
                    this.startScreen.on("click", ".recent > div", function(e) {
                        var design = $(this).data("item");
                        if (e.target.nodeName == "A") {
                            app.removeRecentDesign(design.path);
                            app.showStartScreen()
                        } else {
                            app.openDesignAction(design.path)
                        }
                    });
                    var menu = $("#menu");
                    menu.find(".new").on("click", app.showDialogForNewDesign.bind(app));
                    menu.find(".open").on("click", app.open.bind(app));
                    menu.find(".export").on("click", Application.exportContext.bind(Application));
                    var preview = menu.find(".preview").on("click", function() {
                        app.previewDialog.open()
                    });
                    app.on("preview-status-change", function() {
                        if (app.settings.previewEnabled) {
                            preview.find("span").text("Preview (on)")
                        } else {
                            preview.find("span").text("Preview")
                        }
                    });
                    var save = menu.find(".save");
                    save.on("click", function() {
                        app.saveDesign(app.context)
                    });
                    menu.find(".settings").on("click", function() {
                        app.changeThemeForDesign(app.context)
                    });
                    var undo = menu.find(".undo"),
                        redo = menu.find(".redo");
                    undo.on("click", function() {
                        app.undo()
                    });
                    redo.on("click", function() {
                        app.redo()
                    });
                    app.on("context-changed context-activated context-saved", function() {
                        undo.toggleClass("active", app.hasUndo());
                        redo.toggleClass("active", app.hasRedo());
                        save.toggleClass("active", app.context.canBeSaved())
                    });
                    app.on("context-closed", function() {
                        if (!app.openedContexts.length) electron.setTitle("Bootstrap Studio")
                    });
                    app.on("context-activated context-saved context-changed", function() {
                        electron.setTitle(app.context.name + (app.context.isSaved() ? "" : " (unsaved)") + " - Bootstrap Studio")
                    });
                    app.lastChange = Date.now();
                    app.on("context-changed context-activated", function() {
                        app.lastChange = Date.now();
                        if (!app.settings.previewEnabled) return;
                        setTimeout(function() {
                            var parsed = parseDOMTree(app.context.html.element[0], app.context, {
                                unmarkSystemElements: true
                            });
                            var html = stringifyParsedTree(parsed).replace(/<\/?html>/g, "");
                            html = app.context.replaceBlobURLsInString(html);
                            electron.notifySSEClients(html)
                        }, 20)
                    });
                    app.on("preview-setting-change", function() {
                        if (app.settings.previewEnabled) {
                            electron.listenOnNetwork(function() {
                                app.trigger("preview-status-change")
                            })
                        } else {
                            electron.stopListeningOnNetwork(function() {
                                app.trigger("preview-status-change")
                            })
                        }
                    });
                    doc.on("drop", function(e) {
                        processDroppedFiles(e);
                        e.preventDefault();
                        e.stopPropagation()
                    });
                    doc.on("dragover", function(e) {
                        e.preventDefault();
                        e.stopPropagation()
                    });
                    iframeDoc.on("drop", function(e) {
                        processDroppedFiles(e);
                        e.preventDefault();
                        e.stopPropagation()
                    });
                    iframeDoc.on("dragover", function(e) {
                        e.preventDefault();
                        e.stopPropagation()
                    });

                    function processDroppedFiles(e) {
                        var files = e.originalEvent.dataTransfer.files;
                        if (!files || !files.length) return false;
                        var bstudioRegex = /.(?:bscomp|bsdesign)$/;
                        var imagesRegex = /^image\//;
                        var images = [];
                        for (var i = 0; i < files.length; i++) {
                            if (bstudioRegex.test(files[i].name)) {
                                app.openBSPath(files[i].path);
                                return
                            }
                            if (!app.context) return false;
                            if (imagesRegex.test(files[i].type)) {
                                images.push(files[i].path)
                            }
                        }
                        if (images.length) {
                            app.assetsPane.importImagesByPaths(images)
                        }
                    }
                    app.on("context-opened context-saved", function(ctx) {
                        app.addToRecent(ctx.name, ctx.path);
                        electron.addToRecent(ctx.path)
                    });
                    app.on("context-opened", function(ctx) {
                        app.hideStartScreen()
                    });
                    win.on("beforeunload", app.beforeUnload.bind(app));
                    this.openFilePaths(electron.commandLineArgs);
                    this.rebuildMainMenu();
                    var scheduleMenuRebuild = null;
                    var rebuildMenuAction = function rebuildMenuAction() {
                        app.rebuildMainMenu()
                    };
                    app.on("context-activated context-closed context-changed context-saved " + "component-focused component-blurred", function() {
                        clearTimeout(scheduleMenuRebuild);
                        scheduleMenuRebuild = setTimeout(rebuildMenuAction, 200)
                    });
                    app.updateNotification = $("#update-ready");
                    app.updateNotification.on("click", function() {
                        app.updateNotification.removeClass("visible")
                    });
                    window.applicationCache.addEventListener("updateready", function() {
                        app.updateReady()
                    });
                    setInterval(function() {
                        app.checkToken()
                    }, 30 * 60 * 1e3);
                    setTimeout(function() {
                        app.checkToken()
                    }, 30 * 1e3);
                    setInterval(function() {
                        app.updateActivityCookies()
                    }, 5 * 60 * 1e3);
                    this.updateSystemCookies();
                    if (!electron.readSetting("lastRun")) {
                        this.firstRun()
                    } else {
                        if (this.isTrial()) {
                            var lastShow = electron.readSetting("lastPurchaseDialogShowDate");
                            if (lastShow != (new Date).toDateString()) {
                                setTimeout(function() {
                                    electron.saveSetting("lastPurchaseDialogShowDate", (new Date).toDateString());
                                    app.purchaseDialog.open({
                                        daysRemaining: app.trialDaysRemaining()
                                    })
                                }, 5 * 60 * 1e3)
                            }
                        }
                        if (electron.readSetting("lastRunVersion") != packageJSON.version) {
                            setTimeout(function() {
                                app.showWhatsNewDialog()
                            }, 1e3)
                        }
                    }
                    electron.saveSetting("lastRun", Date.now());
                    electron.saveSetting("lastRunVersion", packageJSON.version)
                }
            }, {
                key: "initPackages",
                value: function initPackages(json) {
                    this.packages = [];
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;
                    try {
                        for (var _iterator = json[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var pkg = _step.value;
                            var p = new Package;
                            p.unserialize(pkg);
                            this.packages.push(p)
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator["return"]) {
                                _iterator["return"]()
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError
                            }
                        }
                    }
                }
            }, {
                key: "initThemes",
                value: function initThemes(json) {
                    this.userThemes = [];
                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;
                    try {
                        for (var _iterator2 = json[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                            var th = _step2.value;
                            var theme = new Theme;
                            theme.unserialize(th);
                            this.userThemes.push(theme)
                        }
                    } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
                                _iterator2["return"]()
                            }
                        } finally {
                            if (_didIteratorError2) {
                                throw _iteratorError2
                            }
                        }
                    }
                }
            }, {
                key: "firstRun",
                value: function firstRun() {
                    $.getJSON("./assets/first-run/default-components.json", function(data) {
                        app.initPackages(data);
                        app.savePackageSetting()
                    })
                }
            }, {
                key: "hasToken",
                value: function hasToken() {
                    return cookies.hasItem("token")
                }
            }, {
                key: "setToken",
                value: function setToken(token) {
                    var validity = arguments.length <= 1 || arguments[1] === undefined ? Infinity : arguments[1];
                    return cookies.setItem("token", token, validity, "/")
                }
            }, {
                key: "getToken",
                value: function getToken() {
                    if (this.inDevelopment()) {
                        return "bootstrapstudio"
                    }
                    return cookies.getItem("token")
                }
            }, {
                key: "removeToken",
                value: function removeToken() {
                    return cookies.removeItem("token", "/")
                }
            }, {
                key: "getDeviceID",
                value: function getDeviceID() {
                    return cookies.getItem("device")
                }
            }, {
                key: "getDeviceName",
                value: function getDeviceName() {
                    return decodeURIComponent(cookies.getItem("device-name"))
                }
            }, {
                key: "getUpdatesUntil",
                value: function getUpdatesUntil() {
                    return new Date(Number(cookies.getItem("updates-until")) * 1e3).toLocaleDateString()
                }
            }, {
                key: "updateSystemCookies",
                value: function updateSystemCookies() {
                    cookies.setItem("app-version", packageJSON.version, Infinity, "/");
                    cookies.setItem("os", electron.os, Infinity, "/")
                }
            }, {
                key: "updateActivityCookies",
                value: function updateActivityCookies() {
                    if (Date.now() - app.lastChange > 5 * 60 * 1e3) {
                        return
                    }
                    var totalActivity = (Number(cookies.getItem("activity")) || 0) + 5;
                    cookies.setItem("activity", totalActivity, Infinity, "/")
                }
            }, {
                key: "isLicensed",
                value: function isLicensed() {
                    return this.hasToken()
                }
            }, {
                key: "isTrial",
                value: function isTrial() {
                    return cookies.hasItem("trial") && cookies.getItem("trial") == "1"
                }
            }, {
                key: "trialDaysRemaining",
                value: function trialDaysRemaining() {
                    var expiresOn = new Date(this.getUpdatesUntil());
                    if (expiresOn < Date.now()) {
                        return 0
                    }
                    return Math.round((expiresOn - Date.now()) / (24 * 60 * 60 * 1e3))
                }
            }, {
                key: "deleteLicenseKey",
                value: function deleteLicenseKey() {
                    app.confirmDialog.open({
                        title: "Delete License Key",
                        message: "Deleting the license key will unregister this computer from your account, and you will be able to add another in its place. Once you do this, this copy of Bootstrap Studio will be deactivated. Continue?",
                        okButton: "Delete Key",
                        onOK: function onOK() {
                            $.post("/app/unregister-device", function() {
                                setTimeout(function() {
                                    app.alertDialog.open({
                                        title: "Key Was Deleted",
                                        message: "Save your work and restart Bootstrap Studio."
                                    })
                                }, 800);
                                try {
                                    window.applicationCache.update()
                                } catch (e) {}
                            })
                        }
                    })
                }
            }, {
                key: "checkToken",
                value: function checkToken() {
                    $.getJSON("/app/is-token-valid", function(isValid) {
                        if (isValid) return;
                        app.removeToken();
                        try {
                            window.applicationCache.update()
                        } catch (e) {}
                    })
                }
            }, {
                key: "updateReady",
                value: function updateReady() {
                    app.updateNotification.addClass("visible")
                }
            }, {
                key: "zoomIn",
                value: function zoomIn() {
                    if (!this.context) return;
                    return app.canvas.zoomIn()
                }
            }, {
                key: "zoomOut",
                value: function zoomOut() {
                    if (!this.context) return;
                    return app.canvas.zoomOut()
                }
            }, {
                key: "resetZoom",
                value: function resetZoom() {
                    if (!this.context) return;
                    return app.canvas.resetZoom()
                }
            }, {
                key: "hasUndo",
                value: function hasUndo() {
                    if (!this.context) return false;
                    if (this.isInlineEditingActive()) {
                        return false
                    }
                    return this.context.history.hasUndo()
                }
            }, {
                key: "hasRedo",
                value: function hasRedo() {
                    if (!this.context) return false;
                    if (this.isInlineEditingActive()) {
                        return false
                    }
                    return this.context.history.hasRedo()
                }
            }, {
                key: "undoName",
                value: function undoName() {
                    if (!this.context) return "Undo";
                    return this.context.history.undoName()
                }
            }, {
                key: "redoName",
                value: function redoName() {
                    if (!this.context) return "Redo";
                    return this.context.history.redoName()
                }
            }, {
                key: "undo",
                value: function undo() {
                    if (this.isInlineEditingActive()) {
                        return false
                    }
                    if (Dialog.isDialogShown()) {
                        return false
                    }
                    return this.context.history.undo()
                }
            }, {
                key: "redo",
                value: function redo() {
                    if (this.isInlineEditingActive()) {
                        return false
                    }
                    if (Dialog.isDialogShown()) {
                        return false
                    }
                    return this.context.history.redo()
                }
            }, {
                key: "hasOpenedContexts",
                value: function hasOpenedContexts() {
                    return this.openedContexts.length > 0
                }
            }, {
                key: "isDesignOpened",
                value: function isDesignOpened(path) {
                    return this.getIndexForDesign(path) > -1
                }
            }, {
                key: "getIndexForDesign",
                value: function getIndexForDesign(path) {
                    for (var i = 0; i < this.openedContexts.length; i++) {
                        if (path == this.openedContexts[i].path) {
                            return i
                        }
                    }
                    return -1
                }
            }, {
                key: "switchToContext",
                value: function switchToContext(id) {
                    if (!this.openedContexts[id]) return;
                    app.activateContext(this.openedContexts[id])
                }
            }, {
                key: "saveDesign",
                value: function saveDesign(context) {
                    if (!context.canBeSaved()) return;
                    if (context.existsOnDisk()) {
                        app.writeContextToDisk(context, context.path)
                    } else {
                        electron.showFileSaveDialog({
                            title: "Save Design",
                            defaultPath: (electron.readSetting("lastDesignPath") ? electron.readSetting("lastDesignPath") + electron.pathSeparator : "") + context.name + ".bsdesign",
                            filters: [{
                                name: "Bootstrap Studio Design (.bsdesign)",
                                extensions: ["bsdesign"]
                            }]
                        }, function(path) {
                            if (!path) return;
                            electron.saveSetting("lastDesignPath", parsePath(path).dirname);
                            app.writeContextToDisk(context, path)
                        })
                    }
                }
            }, {
                key: "writeContextToDisk",
                value: function writeContextToDisk(context, path) {
                    if (!path) return;
                    path = enforceFileExtension(path, "bsdesign");
                    var parsed = parsePath(path);
                    context.name = parsed.name;
                    var content = buildBSDesignFormat(context);
                    electron.writeFile(path, content, "gzip").then(function() {
                        context.markAsSaved(path);
                        app.trigger("context-saved", context)
                    })["catch"](function(e) {
                        app.alertDialog.open({
                            title: "Can't Write",
                            message: "An error occured and the file couldn't be written."
                        });
                        console.error(e)
                    })
                }
            }, {
                key: "saveDesignAs",
                value: function saveDesignAs(context) {
                    if (!context.canBeSavedAs()) return;
                    electron.showFileSaveDialog({
                        title: "Save Design As",
                        defaultPath: context.path,
                        filters: [{
                            name: "Bootstrap Studio Design (.bsdesign)",
                            extensions: ["bsdesign"]
                        }]
                    }, function(path) {
                        if (!path) return;
                        app.writeContextToDisk(context, path)
                    })
                }
            }, {
                key: "showDialogForNewDesign",
                value: function showDialogForNewDesign() {
                    this.newDesignDialog.open({
                        name: "",
                        path: "",
                        theme: "default",
                        onSave: function onSave(prop) {
                            if (prop.template == "blank") {
                                app.openContext(Application.createContext(prop), true)
                            } else {
                                app.loadTemplate(prop.template)
                            }
                        }
                    })
                }
            }, {
                key: "showAboutDialog",
                value: function showAboutDialog() {
                    this.aboutDialog.open({
                        version: packageJSON.version,
                        computerName: app.getDeviceName(),
                        updatesUntil: app.getUpdatesUntil(),
                        trial: app.isTrial()
                    })
                }
            }, {
                key: "showWhatsNewDialog",
                value: function showWhatsNewDialog() {
                    $.get("/changelog/log.json", function(msg) {
                        app.whatsNewDialog.open(msg)
                    })
                }
            }, {
                key: "changeThemeForDesign",
                value: function changeThemeForDesign(context) {
                    this.themeChooserDialog.open({
                        theme: context.theme,
                        onSave: function onSave(prop) {
                            var oldTheme = context.theme,
                                newTheme = prop.theme;
                            update(newTheme);
                            context.history.add({
                                name: "Change Design Theme",
                                undo: function undo() {
                                    update(oldTheme)
                                },
                                redo: function redo() {
                                    update(newTheme)
                                }
                            });

                            function update(theme) {
                                context.theme = theme;
                                var themePromises = [];
                                var _iteratorNormalCompletion3 = true;
                                var _didIteratorError3 = false;
                                var _iteratorError3 = undefined;
                                try {
                                    for (var _iterator3 = app.getThemeById(theme).fonts[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                                        var font = _step3.value;
                                        themePromises.push(app.canvas.preloadFont(font.name))
                                    }
                                } catch (err) {
                                    _didIteratorError3 = true;
                                    _iteratorError3 = err
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion3 && _iterator3["return"]) {
                                            _iterator3["return"]()
                                        }
                                    } finally {
                                        if (_didIteratorError3) {
                                            throw _iteratorError3
                                        }
                                    }
                                }
                                themePromises.push(context.loadThemeStyles());
                                if (themePromises.length) {
                                    Promise.all(themePromises).then(exec)
                                } else exec();

                                function exec() {
                                    if (context.isActive()) {
                                        app.canvas.hideSystemUI();
                                        app.canvas.update();
                                        app.assetsPane.update();
                                        setTimeout(function() {
                                            app.canvas.refresh();
                                            app.canvas.showSystemUI()
                                        }, 500)
                                    }
                                }
                            }
                        }
                    })
                }
            }, {
                key: "importBootstrapThemeAction",
                value: function importBootstrapThemeAction() {
                    electron.showFileOpenDialog({
                        filters: [{
                            name: "Bootstrap Theme (.css)",
                            extensions: ["css"]
                        }],
                        defaultPath: electron.readSetting("lastBootstrapThemePath") || electron.readSetting("lastDesignPath")
                    }, function(path) {
                        if (Array.isArray(path)) {
                            path = path[0]
                        }
                        if (!path) return;
                        electron.saveSetting("lastBootstrapThemePath", path);
                        electron.readFile(path).then(function(contents) {
                            var parsed = parsePath(path);
                            var result = app.parseBootstrapTheme(contents, parsed.name.replace(".min", ""));
                            app.addTheme(result);
                            app.trigger("bootstrap-theme-added")
                        })["catch"](function(error) {
                            console.error(error);
                            app.alertDialog.open({
                                title: "Invalid CSS",
                                message: "This file contains invalid CSS and can't be imported."
                            })
                        })
                    })
                }
            }, {
                key: "parseBootstrapTheme",
                value: function parseBootstrapTheme(str) {
                    var name = arguments.length <= 1 || arguments[1] === undefined ? "New Theme" : arguments[1];
                    var parsed = parseCSS(str, {
                        system: true,
                        origin: "bootstrap.css"
                    }, {
                        system: true
                    });
                    var fonts = [];
                    var tmp = str.match(/@import url\("([^"]+)"\);/);
                    if (tmp && tmp.length && tmp[1]) {
                        fonts.push({
                            url: tmp[1],
                            name: tmp[1].match(/family=([^:,&]+)/)[1].replace(/\+/g, " ")
                        })
                    }
                    var theme = new Theme;
                    theme.name = name;
                    theme.fonts = fonts;
                    theme.css = parsed;
                    theme.raw = str;
                    return theme
                }
            }, {
                key: "openDuplicateDesign",
                value: function openDuplicateDesign(context) {
                    app.openContext(Application.createContext({
                        name: context.name + " (copy)",
                        path: "",
                        json: context.serialize(),
                        theme: context.theme
                    }))
                }
            }, {
                key: "open",
                value: function open() {
                    electron.showFileOpenDialog({
                        filters: [{
                            name: "Bootstrap Studio Files",
                            extensions: ["bsdesign", "bscomp"]
                        }],
                        defaultPath: electron.readSetting("lastDesignPath")
                    }, function(path) {
                        if (Array.isArray(path)) {
                            path = path[0]
                        }
                        if (!path) return;
                        electron.saveSetting("lastDesignPath", parsePath(path).dirname);
                        app.openBSPath(path)
                    })
                }
            }, {
                key: "openFilePaths",
                value: function openFilePaths(paths) {
                    var toOpen = paths.filter(function(name) {
                        return /\.bs\w+$/.test(name)
                    });
                    var _iteratorNormalCompletion4 = true;
                    var _didIteratorError4 = false;
                    var _iteratorError4 = undefined;
                    try {
                        for (var _iterator4 = toOpen[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                            var path = _step4.value;
                            app.openBSPath(path)
                        }
                    } catch (err) {
                        _didIteratorError4 = true;
                        _iteratorError4 = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion4 && _iterator4["return"]) {
                                _iterator4["return"]()
                            }
                        } finally {
                            if (_didIteratorError4) {
                                throw _iteratorError4
                            }
                        }
                    }
                }
            }, {
                key: "openBSPath",
                value: function openBSPath(path) {
                    var parsed = parsePath(path);
                    switch (parsed.extname.toLowerCase()) {
                        case ".bscomp":
                            app.openPackageAction(path);
                            break;
                        case ".bsdesign":
                            app.openDesignAction(path);
                            break
                    }
                }
            }, {
                key: "openDesignAction",
                value: function openDesignAction(path) {
                    if (!electron.pathExists(path)) return;
                    if (this.isDesignOpened(path)) {
                        this.switchToContext(this.getIndexForDesign(path));
                        return
                    }
                    electron.readFile(path, "gzip").then(function(contents) {
                        var context = parseBSDesignFormat(JSON.parse(contents), path);
                        app.openContext(context, true)
                    })["catch"](function(error) {
                        console.error(error);
                        app.alertDialog.open({
                            title: "Can't Read",
                            message: "An error occured while reading this design. It can't be opened."
                        })
                    })
                }
            }, {
                key: "openPackageAction",
                value: function openPackageAction(path) {
                    if (!electron.pathExists(path)) return;
                    electron.readFile(path, "gzip").then(function(contents) {
                        var pkg = parseBSComponentFormat(contents);
                        if (app.packageExists(pkg.id)) {
                            app.alertDialog.open({
                                title: "Component Exists",
                                message: "This component already exists in your library and won't be imported."
                            });
                            return
                        }
                        app.confirmDialog.open({
                            title: "Import Component",
                            message: 'The component "' + pkg.name.substr(0, 30) + '" will be added to your library. Continue?',
                            okButton: "Import",
                            onOK: function onOK() {
                                app.addPackage(pkg)
                            }
                        })
                    })["catch"](function(error) {
                        app.alertDialog.open({
                            title: "Can't Read",
                            message: "An error occured while reading this component and it can't be imported."
                        });
                        console.error(error)
                    })
                }
            }, {
                key: "openContext",
                value: function openContext(ctx) {
                    var switchTo = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
                    if (!this.themeExists(ctx.theme)) {
                        ctx.theme = "default"
                    }
                    ctx.loadThemeStyles().then(function() {
                        app.openedContexts.push(ctx);
                        app.trigger("context-opened", ctx);
                        if (switchTo) {
                            app.activateContext(ctx)
                        }
                    })
                }
            }, {
                key: "confirmCloseContext",
                value: function confirmCloseContext(context) {
                    if (!context) return;
                    if (context.hasUnsavedChanges()) {
                        app.confirmDialog.open({
                            title: "Close this Design?",
                            message: "You have unsaved changes. If you close this design, you will lose them. Continue?",
                            okButton: "Close Design",
                            onOK: function onOK() {
                                app.closeContext(context)
                            }
                        })
                    } else {
                        app.closeContext(context)
                    }
                }
            }, {
                key: "closeContext",
                value: function closeContext(ctx) {
                    this.openedContexts.splice(this.openedContexts.indexOf(ctx), 1);
                    this.trigger("context-closed");
                    if (ctx.isActive()) {
                        this.deactivateContext(ctx);
                        if (this.openedContexts.length) {
                            this.activateContext(this.openedContexts[0])
                        }
                    }
                    if (!this.openedContexts.length) {
                        this.showStartScreen();
                        return
                    }
                    ctx.destructor()
                }
            }, {
                key: "saveThemeSetting",
                value: function saveThemeSetting() {
                    electron.saveSetting("themes", this.userThemes.map(function(t) {
                        return t.serialize()
                    }))
                }
            }, {
                key: "themeExists",
                value: function themeExists(id) {
                    return this.getThemeById(id) !== false
                }
            }, {
                key: "getThemeById",
                value: function getThemeById(id) {
                    for (var i = 0; i < this.themes.length; i++) {
                        if (this.themes[i].id == id) {
                            return this.themes[i]
                        }
                    }
                    for (var i = 0; i < this.userThemes.length; i++) {
                        if (this.userThemes[i].id == id) {
                            return this.userThemes[i]
                        }
                    }
                    return false
                }
            }, {
                key: "getAllThemes",
                value: function getAllThemes() {
                    return this.userThemes.concat(this.themes)
                }
            }, {
                key: "removeTheme",
                value: function removeTheme(theme) {
                    var index = this.userThemes.indexOf(theme);
                    if (index == -1) {
                        return false
                    }
                    this.userThemes.splice(index, 1);
                    this.saveThemeSetting()
                }
            }, {
                key: "addTheme",
                value: function addTheme(theme) {
                    this.userThemes.push(theme);
                    this.userThemes.sort(function(a, b) {
                        if (a.name > b.name) return 1;
                        if (a.name < b.name) return -1;
                        return 0
                    });
                    this.saveThemeSetting()
                }
            }, {
                key: "renameTheme",
                value: function renameTheme(theme, newName) {
                    theme.name = newName;
                    this.userThemes.sort(function(a, b) {
                        if (a.name > b.name) return 1;
                        if (a.name < b.name) return -1;
                        return 0
                    });
                    this.saveThemeSetting()
                }
            }, {
                key: "isThemeUserMade",
                value: function isThemeUserMade(id) {
                    for (var i = 0; i < this.userThemes.length; i++) {
                        if (this.userThemes[i].id == id) {
                            return true
                        }
                    }
                    return false
                }
            }, {
                key: "isThemeUsedInOpenDesigns",
                value: function isThemeUsedInOpenDesigns(id) {
                    var _iteratorNormalCompletion5 = true;
                    var _didIteratorError5 = false;
                    var _iteratorError5 = undefined;
                    try {
                        for (var _iterator5 = this.openedContexts[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                            var ctx = _step5.value;
                            if (ctx.usesTheme(id)) {
                                return true
                            }
                        }
                    } catch (err) {
                        _didIteratorError5 = true;
                        _iteratorError5 = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion5 && _iterator5["return"]) {
                                _iterator5["return"]()
                            }
                        } finally {
                            if (_didIteratorError5) {
                                throw _iteratorError5
                            }
                        }
                    }
                    return false
                }
            }, {
                key: "savePackageSetting",
                value: function savePackageSetting() {
                    electron.saveSetting("packages", this.packages.map(function(p) {
                        return p.serialize()
                    }))
                }
            }, {
                key: "renamePackage",
                value: function renamePackage(pkg, name) {
                    pkg.name = name;
                    this.trigger("package-changed");
                    this.savePackageSetting()
                }
            }, {
                key: "removePackage",
                value: function removePackage(pkg) {
                    var index = this.packages.indexOf(pkg);
                    this.packages.splice(index, 1);
                    this.trigger("package-deleted");
                    this.savePackageSetting()
                }
            }, {
                key: "updatePackage",
                value: function updatePackage(pkg, props) {
                    pkg.css = props.css;
                    pkg.fonts = props.fonts;
                    pkg.images = props.images;
                    pkg.version = props.version;
                    pkg.components = props.components;
                    this.trigger("package-changed");
                    this.savePackageSetting()
                }
            }, {
                key: "addPackage",
                value: function addPackage(pkg) {
                    if (this.packageExists(pkg.id)) {
                        return false
                    }
                    this.packages.push(pkg);
                    this.packages.sort(function(a, b) {
                        if (a.name > b.name) return 1;
                        if (a.name < b.name) return -1;
                        return 0
                    });
                    this.trigger("package-created");
                    this.savePackageSetting();
                    return true
                }
            }, {
                key: "getPackageById",
                value: function getPackageById(id) {
                    for (var i = 0; i < this.packages.length; i++) {
                        if (this.packages[i].id == id) {
                            return this.packages[i]
                        }
                    }
                    return false
                }
            }, {
                key: "packageExists",
                value: function packageExists(id) {
                    return !!this.getPackageById(id)
                }
            }, {
                key: "showStartScreen",
                value: function showStartScreen() {
                    var recent = this.startScreen.find(".recent");
                    var arr = [],
                        tmp;
                    var recentDesigns = this.getRecentDesigns(4, true);
                    var _iteratorNormalCompletion6 = true;
                    var _didIteratorError6 = false;
                    var _iteratorError6 = undefined;
                    try {
                        for (var _iterator6 = recentDesigns[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                            var design = _step6.value;
                            tmp = $('<div><a title="Remove From Recent">&times;</a><div class="name"></div><div class="path"></div></div>');
                            tmp.find(".name").text(design.name);
                            tmp.find(".path").text(design.path);
                            tmp.data("item", design);
                            arr.push(tmp)
                        }
                    } catch (err) {
                        _didIteratorError6 = true;
                        _iteratorError6 = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion6 && _iterator6["return"]) {
                                _iterator6["return"]()
                            }
                        } finally {
                            if (_didIteratorError6) {
                                throw _iteratorError6
                            }
                        }
                    }
                    recent.html(arr);
                    this.startScreen.removeClass("loading");
                    this.startScreen.toggleClass("has-recent", !!recentDesigns.length);
                    this.startScreen.toggleClass("show-tutorial", !recentDesigns.length);
                    this.startScreen.show()
                }
            }, {
                key: "hideStartScreen",
                value: function hideStartScreen() {
                    this.startScreen.fadeOut("fast")
                }
            }, {
                key: "addToRecent",
                value: function addToRecent(name, path) {
                    if (!name || !path) return;
                    this.removeRecentDesign(path);
                    this.recent.unshift({
                        name: name,
                        path: path
                    });
                    if (this.recent.length > 10) {
                        this.recent.length = 10
                    }
                    electron.saveSetting("recent", this.recent)
                }
            }, {
                key: "getRecentDesigns",
                value: function getRecentDesigns() {
                    var count = arguments.length <= 0 || arguments[0] === undefined ? 4 : arguments[0];
                    var checkExists = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
                    var recent = [];
                    var _iteratorNormalCompletion7 = true;
                    var _didIteratorError7 = false;
                    var _iteratorError7 = undefined;
                    try {
                        for (var _iterator7 = this.recent[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                            var r = _step7.value;
                            if (recent.length >= count) break;
                            if (checkExists && !electron.pathExists(r.path)) continue;
                            recent.push(r)
                        }
                    } catch (err) {
                        _didIteratorError7 = true;
                        _iteratorError7 = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion7 && _iterator7["return"]) {
                                _iterator7["return"]()
                            }
                        } finally {
                            if (_didIteratorError7) {
                                throw _iteratorError7
                            }
                        }
                    }
                    return recent
                }
            }, {
                key: "removeRecentDesign",
                value: function removeRecentDesign(path) {
                    var index = -1;
                    for (var i = 0; i < this.recent.length; i++) {
                        if (this.recent[i].path == path) {
                            index = i
                        }
                    }
                    if (index >= 0) {
                        this.recent.splice(index, 1)
                    }
                    electron.saveSetting("recent", this.recent)
                }
            }, {
                key: "activateContext",
                value: function activateContext(ctx) {
                    this.context = ctx;
                    this.canvas.setHTML(ctx.html);
                    this.canvas.initialize();
                    this.changedIDMap = {};
                    this.trigger("context-activated")
                }
            }, {
                key: "deactivateContext",
                value: function deactivateContext(ctx) {
                    this.context = null
                }
            }, {
                key: "isInlineEditingActive",
                value: function isInlineEditingActive() {
                    return this.context.focusedComponent && this.context.focusedComponent.isInlineEditingActivated
                }
            }, {
                key: "freezeUI",
                value: function freezeUI() {
                    $("#freeze-ui").show()
                }
            }, {
                key: "unfreezeUI",
                value: function unfreezeUI() {
                    $("#freeze-ui").hide()
                }
            }, {
                key: "dragStart",
                value: function dragStart(props) {
                    this.trigger("drag-start", props);
                    this.draggedComponent = props.component;
                    this.dropHistory = props.dropHistory || "Move Component";
                    if (!props.dropAction) {
                        props.dropAction = function(dropCall) {
                            executeDropCall(dropCall);
                            app.canvas.update()
                        }
                    }
                    if (!props.dropActionUndo) {
                        var parent = props.component.parent;
                        var index = parent.childIndex(props.component);
                        props.dropActionUndo = function() {
                            parent.insertAt(props.component, index);
                            app.canvas.update()
                        }
                    }
                    this.dropAction = props.dropAction;
                    this.dropActionUndo = props.dropActionUndo;
                    props.component.startDragging();
                    this.dragbox = document.getElementById("dragbox");
                    this.ghost = document.getElementById("ghost");
                    var ghostX = props.origin.left - this.mousePosition.x,
                        ghostY = props.origin.top - this.mousePosition.y,
                        ghostWidth = props.origin.width,
                        ghostHeight = props.origin.height;
                    this.ghost.style.transform = "translate3D(" + ghostX + "px," + ghostY + "px, 0)";
                    this.ghost.style.width = ghostWidth + "px";
                    this.ghost.style.height = ghostHeight + "px";
                    this.ghost.style.opacity = .5;
                    this.dragbox.style.display = "block";
                    setTimeout(function() {
                        this.ghost.style.transform = "translate3d(10px, 10px, 0)";
                        this.ghost.style.width = "14px";
                        this.ghost.style.height = "14px";
                        this.ghost.style.opacity = .9
                    }.bind(this), 20);
                    this.isDragging = true;
                    this.dragbox.style.transform = "translate3D(" + this.mousePosition.x + "px," + this.mousePosition.y + "px, 0)"
                }
            }, {
                key: "dragEnd",
                value: function dragEnd() {
                    this.trigger("drag-end");
                    this.draggedComponent.stopDragging();
                    this.dragbox.style.display = "none";
                    if (this.dropCall) {
                        this.dropCall.object.beforeDrop();
                        var dropCall = this.dropCall;
                        this.dropCall = {};
                        this.dropAction(dropCall);
                        app.context.history.add({
                            name: this.dropHistory,
                            undo: this.dropActionUndo.bind(this),
                            redo: this.dropAction.bind(this, dropCall)
                        })
                    }
                    this.draggedComponent = null;
                    delete this.dropHistory;
                    delete this.dropActionUndo;
                    delete this.dropAction;
                    this.isDragging = false
                }
            }, {
                key: "onMousemove",
                value: function onMousemove(e) {
                    if (!app.hasOpenedContexts()) return;
                    this.dropCall = null;
                    this.trigger("mousemove", e);
                    if (this.isDragging) {
                        this.dragbox.style.transform = "translate3D(" + this.mousePosition.x + "px," + this.mousePosition.y + "px, 0)"
                    }
                }
            }, {
                key: "onMouseup",
                value: function onMouseup(e) {
                    if (!app.hasOpenedContexts()) return;
                    this.trigger("mouseup", e);
                    if (this.isDragging) {
                        this.dragEnd()
                    }
                }
            }, {
                key: "onMousedown",
                value: function onMousedown(e) {
                    if (!app.hasOpenedContexts()) return;
                    if (this.contextMenu.visible && !e.target.closest(".context-menu")) {
                        this.contextMenu.hide()
                    }
                    if (this.aboveCanvas) {
                        e.preventDefault()
                    }
                    this.trigger("mousedown", e)
                }
            }, {
                key: "beforeUnload",
                value: function beforeUnload(e) {
                    if (app.quitConfirmed) {
                        return
                    }
                    var _iteratorNormalCompletion8 = true;
                    var _didIteratorError8 = false;
                    var _iteratorError8 = undefined;
                    try {
                        for (var _iterator8 = this.openedContexts[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                            var ctx = _step8.value;
                            if (ctx.hasUnsavedChanges()) {
                                app.confirmDialog.open({
                                    title: "Close Bootstrap Studio?",
                                    message: "You have unsaved changes. If you close the application, you will lose them. Continue?",
                                    okButton: "Close App",
                                    onOK: function onOK() {
                                        app.quitConfirmed = true;
                                        app.quit()
                                    }
                                });
                                return false
                            }
                        }
                    } catch (err) {
                        _didIteratorError8 = true;
                        _iteratorError8 = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion8 && _iterator8["return"]) {
                                _iterator8["return"]()
                            }
                        } finally {
                            if (_didIteratorError8) {
                                throw _iteratorError8
                            }
                        }
                    }
                }
            }, {
                key: "quit",
                value: function quit() {
                    electron.quit()
                }
            }, {
                key: "resize",
                value: function resize() {
                    this.trigger("resize")
                }
            }, {
                key: "focus",
                value: function focus() {
                    this.trigger("focus")
                }
            }, {
                key: "blur",
                value: function blur() {
                    this.trigger("blur")
                }
            }, {
                key: "scroll",
                value: function scroll() {
                    this.trigger("scroll")
                }
            }, {
                key: "togglePreview",
                value: function togglePreview() {
                    if (app.settings.previewEnabled) {
                        app.disablePreview()
                    } else {
                        app.enablePreview()
                    }
                }
            }, {
                key: "enablePreview",
                value: function enablePreview() {
                    app.settings.previewEnabled = true;
                    app.trigger("preview-setting-change")
                }
            }, {
                key: "disablePreview",
                value: function disablePreview() {
                    app.settings.previewEnabled = false;
                    app.trigger("preview-setting-change")
                }
            }, {
                key: "openURLInBrowser",
                value: function openURLInBrowser(url) {
                    electron.openBrowserWindow(url)
                }
            }, {
                key: "inDevelopment",
                value: function inDevelopment() {
                    return electron.development
                }
            }, {
                key: "onNetworkRequest",
                value: function onNetworkRequest(event, status, newURL, originalURL, httpResponseCode, requestMethod, referrer, headers) {
                    if (requestMethod !== "GET") return;
                    var url = new window.URL(newURL);
                    var ignoreOrigins = [window.location.origin, "https://bootstrapstudio.io"];
                    if (ignoreOrigins.indexOf(url.origin) == -1 && app.context) {
                        app.canvas.scheduleRefresh(200);
                        console.info("Refreshing Canvas Due To External HTTP Request", newURL)
                    }
                }
            }, {
                key: "handlePreviewRequest",
                value: function handlePreviewRequest(path, parsed, headers) {
                    return new Promise(function(resolve, reject) {
                        if (!app.settings.previewEnabled) {
                            return reject()
                        }
                        if (path == "/bs-lastchange") {
                            return resolve({
                                content: app.lastChange.toString(),
                                headers: {
                                    "Cache-Control": "no-cache, must-revalidate, max-age=0"
                                }
                            })
                        }
                        if (path == "/") {
                            var parsed = parseDOMTree(app.context.html.element[0], app.context, {
                                unmarkSystemElements: true
                            });
                            var html = stringifyParsedTree(parsed);
                            html = app.context.replaceBlobURLsInString(html);
                            html = "<!DOCTYPE html>\n" + html;
                            html = html.replace("</head>", '<script id="bs-live-reload" src="./embed/js/livereload.js" data-sseport="' + electron.ssePort + '" data-lastchange="' + app.lastChange + '"></script>\n' + '<script src="./embed/js/jquery.min.js"></script>\n' + '<script src="./embed/js/bootstrap.min.js"></script>\n' + "</head>");
                            return resolve({
                                content: html,
                                headers: {
                                    "Content-Type": "text/html",
                                    "Cache-Control": "no-cache, must-revalidate, max-age=0"
                                }
                            })
                        }
                        var decodedName = decodeURIComponent(path.slice(1));
                        if (app.context.hasImageAssetWithName(decodedName)) {
                            var img = app.context.getImageAssetByName(decodedName);
                            return resolve({
                                content: cleanUpDataURL(img.data),
                                decode: "base64",
                                contentType: mimeTypes[img.extension]
                            })
                        }
                        var filePath = document.baseURI.replace(/\/$/, "") + path;
                        return resolve(readFileAsBase64(filePath))
                    })
                }
            }, {
                key: "rebuildMainMenu",
                value: function rebuildMainMenu() {
                    var template = generateMenuTemplateForApp(this);
                    electron.setMenu(template)
                }
            }, {
                key: "loadTutorial",
                value: function loadTutorial(tutorial) {
                    this.openDesignFromURL("./assets/tutorials/" + tutorial + ".json")
                }
            }, {
                key: "loadTemplate",
                value: function loadTemplate(template) {
                    this.openDesignFromURL("./assets/templates/" + template + ".json")
                }
            }, {
                key: "openDesignFromURL",
                value: function openDesignFromURL(jsonURL) {
                    $.getJSON(jsonURL, function(data) {
                        var context = parseBSDesignFormat(data);
                        app.openContext(context, true)
                    })
                }
            }, {
                key: "on",
                value: function on(str, cb) {
                    var weight = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
                    var parsed = parseEventName(str);
                    for (var i = 0; i < parsed.length; i++) {
                        if (!(parsed[i].name in this.pubsub)) {
                            this.pubsub[parsed[i].name] = []
                        }
                        this.pubsub[parsed[i].name].push({
                            name: parsed[i].name,
                            namespace: parsed[i].namespace,
                            callback: cb,
                            weight: weight
                        })
                    }
                    for (var i = 0; i < parsed.length; i++) {
                        this.pubsub[parsed[i].name].sort(function(a, b) {
                            return a.weight - b.weight
                        })
                    }
                    return this
                }
            }, {
                key: "off",
                value: function off(str) {
                    var parsed = parseEventName(str);
                    var queue, newQueue;
                    for (var i = 0; i < parsed.length; i++) {
                        for (var k in this.pubsub)
                            if (this.pubsub.hasOwnProperty(k)) {
                                if (parsed[i].name !== undefined && parsed[i].name !== k) {
                                    continue
                                }
                                if (parsed[i].namespace !== undefined) {
                                    newQueue = [];
                                    queue = this.pubsub[k];
                                    for (var j = 0; j < queue.length; j++) {
                                        if (queue[j].namespace === parsed[i].namespace) {
                                            continue
                                        }
                                        newQueue.push(queue[j])
                                    }
                                    this.pubsub[k] = newQueue
                                } else {
                                    delete this.pubsub[k]
                                }
                            }
                    }
                    return this
                }
            }, {
                key: "trigger",
                value: function trigger(str) {
                    var parsed = parseEventName(str);
                    var queue, result, len;
                    for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                        rest[_key - 1] = arguments[_key]
                    }
                    for (var i = 0; i < parsed.length; i++) {
                        if (!(parsed[i].name in this.pubsub)) {
                            continue
                        }
                        queue = this.pubsub[parsed[i].name];
                        for (var j = 0, len = queue.length; j < len; j++) {
                            if (parsed[i].namespace === undefined || parsed[i].namespace === queue[j].namespace) {
                                result = queue[j].callback.apply(this.pubsub, rest);
                                if (result === false) return this
                            }
                        }
                    }
                    return this
                }
            }], [{
                key: "createContext",
                value: function createContext(options) {
                    var _options$name = options.name;
                    var name = _options$name === undefined ? "Untitled" : _options$name;
                    var path = options.path;
                    var theme = options.theme;
                    var json = options.json;
                    var ctx = new Context(name, path, theme);
                    if (!json) {
                        var html = new HTML;
                        html.initialize();
                        html.setContext(name);
                        html.setContext(ctx);
                        var body = new Body;
                        body.initialize();
                        html.insertLast(body);
                        ctx.html = html
                    } else {
                        ctx.unserialize(json);
                        ctx.name = name
                    }
                    return ctx
                }
            }, {
                key: "exportContext",
                value: function exportContext(context) {
                    electron.showFileOpenDialog({
                        title: "Export Destination",
                        properties: ["openDirectory", "createDirectory"],
                        defaultPath: electron.readSetting("lastExportPath") || electron.readSetting("lastDesignPath")
                    }, function(path) {
                        if (!Array.isArray(path)) return;
                        var sep = electron.separator;
                        var dir = path[0] + sep;
                        electron.saveSetting("lastExportPath", dir);
                        var exp = new ExportContext;
                        exp.unserialize(app.context.serialize());
                        exp.html.update();
                        var html = exp.generateHTML();
                        try {
                            [dir + sep + "assets", dir + sep + "assets" + sep + "img", dir + sep + "assets" + sep + "js", dir + sep + "assets" + sep + "css", dir + sep + "assets" + sep + "bootstrap", dir + sep + "assets" + sep + "bootstrap" + sep + "js", dir + sep + "assets" + sep + "bootstrap" + sep + "css", dir + sep + "assets" + sep + "bootstrap" + sep + "fonts"].map(mkdir)
                        } catch (e) {
                            return error(e.message)
                        }
                        var operations = [];
                        operations.push(electron.writeFile(dir + sep + "index.html", beautifyHTML(html)));
                        var images = exp.assets.images;
                        for (var i = 0; i < images.length; i++) {
                            operations.push(electron.writeFile(dir + sep + "assets" + sep + "img" + sep + images[i].name, cleanUpDataURL(images[i].data), "raw-from-base64"))
                        }
                        var sheet = exp.getStylesheetForActiveTheme();
                        if (app.context.isThemeUserMade()) {
                            var themeContent = app.context.getActiveTheme().raw;
                            operations.push(electron.writeFile(dir + sep + sheet, themeContent))
                        } else {
                            var originalSheet = app.context.getStylesheetForActiveTheme();
                            operations.push(copyFilePromise(originalSheet, dir + sep + sheet))
                        }
                        operations.push(copyFilePromise("./embed/js/jquery.min.js", dir + sep + "assets" + sep + "js" + sep + "jquery.min.js"));
                        operations.push(copyFilePromise("./embed/js/bootstrap.min.js", dir + sep + "assets" + sep + "bootstrap" + sep + "js" + sep + "bootstrap.min.js"));
                        operations.push(copyFilePromise("./embed/bootstrap/fonts/glyphicons.css", dir + sep + "assets" + sep + "bootstrap" + sep + "fonts" + sep + "glyphicons.css"));
                        operations.push(["eot", "svg", "ttf", "woff", "woff2"].map(function(ext) {
                            return copyFilePromise("./embed/bootstrap/fonts/glyphicons-halflings-regular." + ext, dir + sep + "assets" + sep + "bootstrap" + sep + "fonts" + sep + "glyphicons-halflings-regular." + ext)
                        }));
                        if (exp.shouldIncludeFontAwesome()) {
                            operations.push(copyFilePromise("./embed/bootstrap/fonts/font-awesome.min.css", dir + sep + "assets" + sep + "bootstrap" + sep + "fonts" + sep + "font-awesome.min.css"));
                            operations.push(["eot", "svg", "ttf", "woff", "woff2"].map(function(ext) {
                                return copyFilePromise("./embed/bootstrap/fonts/fontawesome-webfont." + ext, dir + sep + "assets" + sep + "bootstrap" + sep + "fonts" + sep + "fontawesome-webfont." + ext)
                            }))
                        }
                        operations.push(electron.writeFile(dir + sep + "assets" + sep + "css" + sep + "user.css", exp.generateUserCSS()));

                        function mkdir(path) {
                            if (!electron.mkdirSync(path)) {
                                throw new Error("No rights")
                            }
                        }

                        function copyFilePromise(from, to) {
                            return readFileAsBase64(from).then(function(r) {
                                return electron.writeFile(to, r.content, "raw-from-base64")
                            })
                        }
                        Promise.all(operations).then(function() {})["catch"](error);

                        function error(e) {
                            console.error(e);
                            app.alertDialog.open({
                                title: "Can't Export",
                                message: "An error occured while exporting this design. Please choose a different folder."
                            })
                        }
                    })
                }
            }]);
            return Application
        }();
        var namespaceRegex = /([^\s\.]+)?(?:\.(\S+))?/;

        function parseEventName(str) {
            var names = String(str).split(/\s+/);
            var events = new Array(names.length);
            var tmp;
            for (var i = 0; i < names.length; i++) {
                tmp = names[i].match(namespaceRegex);
                events[i] = {
                    name: tmp[1],
                    namespace: tmp[2]
                }
            }
            return events
        }
        module.exports = Application
    }, {
        "../bars/ColumnOperationsBar": 3,
        "../bars/InlineEditingBar": 4,
        "../bars/TabBar": 5,
        "../bars/ToolBar": 6,
        "../base/Context": 12,
        "../base/ExportContext": 14,
        "../components/Body": 26,
        "../components/HTML": 54,
        "../config/bootstrap-themes": 131,
        "../config/mime-types": 135,
        "../dialogs/AboutDialog": 137,
        "../dialogs/AlertDialog": 138,
        "../dialogs/ComponentToPackageDialog": 139,
        "../dialogs/ConfirmDialog": 140,
        "../dialogs/Dialog": 141,
        "../dialogs/FontImportDialog": 142,
        "../dialogs/IconsDialog": 143,
        "../dialogs/ImagesDialog": 144,
        "../dialogs/LinkDialog": 145,
        "../dialogs/NewDesignDialog": 146,
        "../dialogs/PreviewDialog": 147,
        "../dialogs/PurchaseDialog": 148,
        "../dialogs/ThemeChooserDialog": 149,
        "../dialogs/ThemeManagerDialog": 150,
        "../dialogs/WhatsNewDialog": 151,
        "../helpers/buildBSDesignFormat": 153,
        "../helpers/cleanUpDataURL": 155,
        "../helpers/cookies": 157,
        "../helpers/enforceFileExtension": 162,
        "../helpers/executeDropCall": 165,
        "../helpers/generateMenuTemplateForApp": 168,
        "../helpers/keyChecker": 176,
        "../helpers/parseBSComponentFormat": 179,
        "../helpers/parseBSDesignFormat": 180,
        "../helpers/parseCSS": 181,
        "../helpers/parseDOMTree": 182,
        "../helpers/parsePath": 183,
        "../helpers/readFileAsBase64": 185,
        "../helpers/restoreCSSList": 186,
        "../helpers/stringifyParsedTree": 191,
        "../package.json": 425,
        "../panes/AssetsPane": 426,
        "../panes/ComponentPane": 431,
        "../panes/OptionsPane": 438,
        "../panes/OverviewPane": 439,
        "../panes/StylesPane": 442,
        "./Canvas": 11,
        "./ContextMenu": 13,
        "./Package": 16,
        "./Point": 17,
        "./Theme": 18,
        "js-beautify": 417
    }],
    8: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var Box = function() {
            function Box() {
                _classCallCheck(this, Box)
            }
            _createClass(Box, [{
                key: "updateDimensions",
                value: function updateDimensions(left, top, width, height) {
                    var zIndex = arguments.length <= 4 || arguments[4] === undefined ? 0 : arguments[4];
                    this.width = width;
                    this.height = height;
                    this.x = left;
                    this.y = top;
                    this.x2 = this.x + this.width;
                    this.y2 = this.y + this.height;
                    this.z = zIndex
                }
            }, {
                key: "isPointWithin",
                value: function isPointWithin(point) {
                    return point.x >= this.x && point.x <= this.x2 && point.y >= this.y && point.y <= this.y2
                }
            }, {
                key: "isPointWithinOffset",
                value: function isPointWithinOffset(point, offset) {
                    return point.x >= this.x + offset && point.x <= this.x2 - offset && point.y >= this.y + offset && point.y <= this.y2 - offset
                }
            }, {
                key: "distanceToPoint",
                value: function distanceToPoint(p) {
                    var centerX = this.x + this.width / 2;
                    var centerY = this.y + this.height / 2;
                    var dx, dy;
                    dx = Math.max(Math.abs(p.x - centerX) - this.width / 2, 0);
                    dy = Math.max(Math.abs(p.y - centerY) - this.height / 2, 0);
                    return dx * dx + dy * dy
                }
            }, {
                key: "onTheSameRowWith",
                value: function onTheSameRowWith(box) {
                    return this.y < box.y2 && this.y2 > box.y
                }
            }, {
                key: "onTheSameColumnWith",
                value: function onTheSameColumnWith(box) {
                    return this.x < box.x2 && this.x2 > box.x
                }
            }]);
            return Box
        }();
        module.exports = Box
    }, {}],
    9: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var specificity = require("specificity");
        var isMQValid = require("valid-media-queries");
        var CSSRule = require("./CSSRule");
        var cleanSelectorsRegex = /:hover|:active|:visited|:before|:after|:target|:focus/gi;
        var normalizeCSSSelector = require("../helpers/normalizeCSSSelector");
        var specificityToNumber = require("../helpers/specificityToNumber");
        var escapeRegexString = require("../helpers/escapeRegexString");
        var CSSBlock = function() {
            function CSSBlock() {
                var selector = arguments.length <= 0 || arguments[0] === undefined ? "" : arguments[0];
                var rules = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
                var mediaQuery = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
                var system = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
                var origin = arguments.length <= 4 || arguments[4] === undefined ? "user.css" : arguments[4];
                _classCallCheck(this, CSSBlock);
                this.selector = selector;
                this.rules = rules;
                this.mediaQuery = mediaQuery;
                this.system = system;
                this.origin = origin;
                this.packageID = null
            }
            _createClass(CSSBlock, [{
                key: "isImageUsed",
                value: function isImageUsed(image) {
                    var regex = new RegExp("url\\(\\s*['\"]?" + escapeRegexString(image) + "['\"]?\\s*\\)");
                    for (var i = 0; i < this.rules.length; i++) {
                        if (regex.test(this.rules[i].value)) {
                            return true
                        }
                    }
                    return false
                }
            }, {
                key: "isFontUsed",
                value: function isFontUsed(font) {
                    var propertyRegex = /^(?:font-family|font)$/i;
                    var valueRegex = new RegExp("\\b" + escapeRegexString(font) + "\\b", "i");
                    for (var i = 0; i < this.rules.length; i++) {
                        if (propertyRegex.test(this.rules[i].property) && valueRegex.test(this.rules[i].value)) {
                            return true
                        }
                    }
                    return false
                }
            }, {
                key: "toString",
                value: function toString() {
                    if (!this.selector) return "";
                    if (this.system) return "";
                    var tmp = "\n";
                    for (var i = 0; i < this.rules.length; i++) {
                        tmp += this.rules[i].toString()
                    }
                    if (this.mediaQuery !== false) {
                        return "@media " + this.mediaQuery + " {\n  " + this.selector + "{" + tmp.replace(/^  /gm, "    ") + "  }\n" + "}\n"
                    }
                    return this.selector + "{" + tmp + "}\n"
                }
            }, {
                key: "calculateSpecificityFor",
                value: function calculateSpecificityFor(element) {
                    var max = 0,
                        specificity;
                    var selectors = [];
                    for (var i = 0; i < this.specificity.length; i++) {
                        try {
                            if (element.matches(this.specificity[i].selector.replace(cleanSelectorsRegex, ""))) {
                                specificity = specificityToNumber(this.specificity[i].specificity);
                                if (specificity > max) {
                                    max = specificity
                                }
                                selectors.push({
                                    selector: normalizeCSSSelector(this.specificity[i].selector),
                                    specificity: specificity
                                })
                            }
                        } catch (e) {
                            return false
                        }
                    }
                    if (!selectors.length) {
                        return false
                    }
                    return {
                        specificity: max,
                        selectors: selectors
                    }
                }
            }, {
                key: "matchesElement",
                value: function matchesElement(element) {
                    try {
                        return element.matches(this.selector.replace(cleanSelectorsRegex, ""))
                    } catch (e) {
                        return false
                    }
                }
            }, {
                key: "removeRule",
                value: function removeRule(rule) {
                    var index = this.rules.indexOf(rule);
                    if (index == -1) {
                        return false
                    }
                    return this.removeIndex(index)
                }
            }, {
                key: "addAtIndex",
                value: function addAtIndex(rules, index) {
                    if (!Array.isArray(rules)) rules = [rules];
                    Array.prototype.splice.apply(this.rules, [index, 0].concat(rules))
                }
            }, {
                key: "removeIndex",
                value: function removeIndex(index) {
                    this.rules.splice(index, 1)
                }
            }, {
                key: "cloneAsUserBlock",
                value: function cloneAsUserBlock() {
                    var rules = this.rules.map(function(rule) {
                        return rule.clone()
                    });
                    rules.forEach(function(r) {
                        r.system = false
                    });
                    var newBlock = new CSSBlock(this.selector, rules, this.mediaQuery);
                    newBlock.system = false;
                    newBlock.origin = "user.css";
                    return newBlock
                }
            }, {
                key: "clone",
                value: function clone() {
                    var newBlock = new CSSBlock(this.selector, this.rules.map(function(rule) {
                        return rule.clone()
                    }), this.mediaQuery);
                    newBlock.system = this.system;
                    newBlock.origin = this.origin;
                    return newBlock
                }
            }, {
                key: "removePackageAssociation",
                value: function removePackageAssociation() {
                    this.packageID = null
                }
            }, {
                key: "associateWithPackage",
                value: function associateWithPackage(pkg) {
                    this.packageID = pkg.id
                }
            }, {
                key: "getAssociatedPackage",
                value: function getAssociatedPackage() {
                    if (!this.packageID) return false;
                    return app.getPackageById(this.packageID)
                }
            }, {
                key: "isMediaQueryValid",
                value: function isMediaQueryValid() {
                    return isMQValid("@media " + this.mediaQuery)
                }
            }, {
                key: "isInheritable",
                value: function isInheritable() {
                    for (var i = 0; i < this.rules.length; i++) {
                        if (this.rules[i].isInheritable()) return true
                    }
                    return false
                }
            }, {
                key: "isUserEmpty",
                value: function isUserEmpty() {
                    return !this.system && this.rules.length == 0
                }
            }, {
                key: "cleanEmptyRules",
                value: function cleanEmptyRules() {
                    this.rules = this.rules.filter(function(r) {
                        return !r.isEmpty()
                    })
                }
            }, {
                key: "serialize",
                value: function serialize() {
                    return {
                        selector: this.selector,
                        mediaQuery: this.mediaQuery,
                        system: this.system,
                        origin: this.origin,
                        packageID: this.packageID,
                        rules: this.rules.map(function(r) {
                            return r.serialize()
                        })
                    }
                }
            }, {
                key: "unserialize",
                value: function unserialize(obj) {
                    this.selector = obj.selector;
                    this.mediaQuery = obj.mediaQuery;
                    this.system = obj.system || false;
                    this.origin = obj.origin || "user.css";
                    this.packageID = obj.packageID || null;
                    var that = this;
                    this.rules = obj.rules.map(function(r) {
                        var tmp = new CSSRule;
                        tmp.unserialize(r);
                        return tmp
                    })
                }
            }, {
                key: "selector",
                get: function get() {
                    return this._selector
                },
                set: function set(val) {
                    this._selector = normalizeCSSSelector(val);
                    this.specificity = specificity.calculate(val)
                }
            }]);
            return CSSBlock
        }();
        CSSBlock.isSelectorValid = function(selector) {
            try {
                document.querySelector(selector);
                return true
            } catch (e) {
                return false
            }
        };
        module.exports = CSSBlock
    }, {
        "../helpers/escapeRegexString": 164,
        "../helpers/normalizeCSSSelector": 178,
        "../helpers/specificityToNumber": 190,
        "./CSSRule": 10,
        specificity: 421,
        "valid-media-queries": 424
    }],
    10: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var cssProperties = require("../config/css-properties.js");
        var CSSRule = function() {
            function CSSRule() {
                var property = arguments.length <= 0 || arguments[0] === undefined ? "" : arguments[0];
                var value = arguments.length <= 1 || arguments[1] === undefined ? "" : arguments[1];
                var enabled = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
                var system = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
                _classCallCheck(this, CSSRule);
                this.property = property;
                this.value = value;
                this.enabled = enabled;
                this.system = system;
                this._validCache = {
                    property: "",
                    value: "",
                    status: false
                }
            }
            _createClass(CSSRule, [{
                key: "toString",
                value: function toString() {
                    if (!this.enabled) return "";
                    if (!this.property || !this.value) return "";
                    return "  " + this.property + ":" + this.value + ";\n"
                }
            }, {
                key: "isEmpty",
                value: function isEmpty() {
                    return !this.property || !this.value
                }
            }, {
                key: "isValid",
                value: function isValid() {
                    if (this._validCache.property == this.property && this._validCache.value == this.value) {
                        return this._validCache.status
                    }
                    if (!this.property || !this.value) {
                        return false
                    }
                    var prop = this.property.replace(/^(?:-moz-|-webkit-|-ms-)/g, "");
                    if (!CSSRule.isPropertyValid(prop)) {
                        return false
                    }
                    var div = document.createElement("div");
                    div.style[prop] = this.value.replace(/!important/gi, "").replace(/\s+/g, " ");
                    this._validCache.status = prop in div.style && div.style[prop] != "";
                    this._validCache.property = this.property;
                    this._validCache.value = this.value;
                    return this._validCache.status
                }
            }, {
                key: "isInheritable",
                value: function isInheritable() {
                    return cssProperties.inheritableProperties.has(this.property.toLowerCase())
                }
            }, {
                key: "clone",
                value: function clone() {
                    return new CSSRule(this.property, this.value, this.enabled, this.system)
                }
            }, {
                key: "serialize",
                value: function serialize() {
                    return {
                        property: this.property,
                        value: this.value,
                        enabled: this.enabled,
                        system: this.system
                    }
                }
            }, {
                key: "unserialize",
                value: function unserialize(obj) {
                    this.property = obj.property;
                    this.value = obj.value;
                    this.enabled = obj.enabled;
                    this.system = obj.system
                }
            }]);
            return CSSRule
        }();
        CSSRule.isPropertyForbidden = function(property) {
            return cssProperties.forbiddenProperties.indexOf(property.toLowerCase()) !== -1
        };
        CSSRule.isPropertyValid = function(property) {
            return cssProperties.validProperties.indexOf(property.toLowerCase()) !== -1
        };
        module.exports = CSSRule
    }, {
        "../config/css-properties.js": 132
    }],
    11: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var deepEqual = require("deep-equal");
        var Point = require("../base/Point");
        var Row = require("../components/Row");
        var Column = require("../components/Column");
        var dragScroll = require("../helpers/dragScroll");
        var Canvas = function() {
            function Canvas(elem) {
                _classCallCheck(this, Canvas);
                this.element = elem;
                this.sizer = elem.find(".sizer");
                this.iframe = elem.find("iframe");
                var iframeDoc = this.iframeDoc = $(this.iframe.prop("contentDocument"));
                var iframeWin = this.iframeWin = $(this.iframe.prop("contentWindow"));
                this.gridContainer = this.element.find(".grid");
                this.focusRect = this.element.find(".focus-rect");
                this.domHighlight = this.element.find(".dom-highlight");
                this.line = this.element.find(".line");
                this.inlineCaret = this.element.find(".inline-caret");
                this.mousePosition = new Point;
                this.drawLine = null;
                this.html = null;
                this.iframeOffset = null;
                this._refreshTimerFunc = function() {
                    this.refresh()
                }.bind(this);
                app.on("mousemove", this.mousemove.bind(this));
                this.element.on("scroll", function(e) {
                    that.iframeOffset = that.iframe.offset()
                });
                var that = this;
                iframeDoc.on("mouseleave", function() {
                    if (!app.hasOpenedContexts()) return false;
                    app.aboveCanvas = false;
                    that.removeHighlight();
                    that.hideLine()
                }).on("mouseenter", function() {
                    app.aboveCanvas = true;
                    that.iframeOffset = that.iframe.offset()
                });
                iframeDoc.on("mouseover", function(e) {
                    if (!app.hasOpenedContexts()) return false;
                    if (e.target.matches("inline-character, inline-wrapper")) {
                        app.context.hoveredInlineElement = app.context.inlineDOMToComponent.get(e.target)
                    }
                    app.context.hoveredComponent = app.context.findComponentForElement(e.target)
                });
                iframeDoc.on("mouseleave", "inline-character, inline-wrapper", function(e) {
                    app.context.hoveredInlineElement = null;
                    app.context.hoveredComponent = null
                });
                this.element.on("mousedown", ".move-handle", function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    var component = app.context.focusedComponent;
                    if (e.button == 2) {
                        component.showContextMenu();
                        return
                    }
                    app.dragStart({
                        component: component,
                        origin: {
                            top: component.y + that.iframeOffset.top,
                            left: component.x + that.iframeOffset.left,
                            width: component.width,
                            height: component.height
                        }
                    })
                });
                app.on("drag-end", function() {
                    this.hideLine()
                }.bind(this));
                app.on("mouseup", this.mouseup.bind(this));
                app.on("mousedown", this.mousedown.bind(this));
                app.on("context-activated", this.contextActivated.bind(this));
                app.on("component-updated", this.componentUpdated.bind(this));
                app.on("component-focused", this.componentFocused.bind(this));
                app.on("component-blurred", this.hideFocus.bind(this));
                app.on("context-css-changed", this.contextCSSChanged.bind(this));
                app.on("image-assets-changed font-assets-changed", this.initialize.bind(this));
                this.dimensions = {};
                app.on("resize pane-resize", this.updateDimensions.bind(this));
                this.element.on("mouseenter", this.updateDimensions.bind(this))
            }
            _createClass(Canvas, [{
                key: "updateDimensions",
                value: function updateDimensions() {
                    this.dimensions = this.element[0].getBoundingClientRect()
                }
            }, {
                key: "contextCSSChanged",
                value: function contextCSSChanged() {
                    this.refreshCSS()
                }
            }, {
                key: "componentFocused",
                value: function componentFocused(component) {
                    this.markAsFocused(component);
                    this.removeDOMHighlight();
                    this.scrollToNode(component.element[0])
                }
            }, {
                key: "isNodeInVisibleCanvas",
                value: function isNodeInVisibleCanvas(node) {
                    var rect = node.getBoundingClientRect();
                    var zoom = app.context.canvasDimensions.zoom;
                    var top = this.iframeOffset.top + rect.top * zoom,
                        left = this.iframeOffset.left + rect.left * zoom,
                        right = this.iframeOffset.left + rect.right * zoom,
                        bottom = this.iframeOffset.top + rect.bottom * zoom;
                    var canvasRect = this.element[0].getBoundingClientRect();
                    return !(top > canvasRect.bottom - 40 || bottom < canvasRect.top + 40 || left > canvasRect.right - 40 || right < canvasRect.left + 40)
                }
            }, {
                key: "scrollToNode",
                value: function scrollToNode(node) {
                    if (this.isNodeInVisibleCanvas(node)) return;
                    var rect = node.getBoundingClientRect();
                    if (rect.width == 0 || rect.height == 0) return;
                    var canvasRect = this.element[0].getBoundingClientRect();
                    var zoom = app.context.canvasDimensions.zoom;
                    var scrollLeft, scrollTop;
                    if (rect.height * zoom > canvasRect.height) {
                        scrollTop = 50 + rect.top * zoom - 20
                    }
                    if (rect.width * zoom > canvasRect.width) {
                        scrollLeft = 50 + rect.left * zoom - 20
                    }
                    if (scrollTop == undefined) {
                        scrollTop = 50 + rect.top * zoom - (canvasRect.height - rect.height * zoom) / 2
                    }
                    if (scrollLeft == undefined) {
                        scrollLeft = 50 + rect.left * zoom - (canvasRect.width - rect.width * zoom) / 2
                    }
                    this.element[0].scrollTop = scrollTop;
                    this.element[0].scrollLeft = scrollLeft
                }
            }, {
                key: "componentUpdated",
                value: function componentUpdated(component) {
                    app.context.domToComponent.set(component.element[0], component);
                    if (app.isInlineEditingActive()) {
                        var component = app.context.focusedComponent;
                        setTimeout(function() {
                            if (component.haveDimensionsChanged()) {
                                app.canvas.scheduleRefresh()
                            }
                        }, 10);
                        return
                    }
                    this.scheduleRefresh()
                }
            }, {
                key: "contains",
                value: function contains(DOMNode) {
                    return this.iframeDoc[0].contains(DOMNode)
                }
            }, {
                key: "preloadFont",
                value: function preloadFont(name) {
                    return this.iframeDoc[0].fonts.load("10px '" + name + "'")
                }
            }, {
                key: "mouseup",
                value: function mouseup(e) {
                    if (app.aboveCanvas) {
                        var component = app.context.hoveredComponent;
                        component && component.onMouseup(e)
                    }
                }
            }, {
                key: "mousedown",
                value: function mousedown(e) {
                    var boundingRect = this.element[0].getBoundingClientRect();
                    if (app.mousePosition.y > boundingRect.bottom - 10 || app.mousePosition.x > boundingRect.right - 10) {
                        return
                    }
                    if (e.target == this.element[0]) {
                        if (app.context.focusedComponent) {
                            app.context.focusedComponent.blur()
                        }
                    }
                    if (!app.aboveCanvas) {
                        return
                    }
                    var component = app.context.hoveredComponent;
                    if (!component) {
                        return
                    }
                    if (app.context.focusedComponent && app.context.focusedComponent !== component) {
                        app.context.focusedComponent.onBlur()
                    }
                    component.onMousedown(e)
                }
            }, {
                key: "scheduleRefresh",
                value: function scheduleRefresh() {
                    var timeout = arguments.length <= 0 || arguments[0] === undefined ? 20 : arguments[0];
                    clearTimeout(this._refreshTimer);
                    this._refreshTimer = setTimeout(this._refreshTimerFunc, timeout)
                }
            }, {
                key: "contextActivated",
                value: function contextActivated() {
                    app.canvas.resize(app.context.canvasDimensions.width);
                    if (app.context.focusedComponent) {
                        app.context.focusedComponent.focus()
                    } else {
                        this.hideFocus()
                    }
                }
            }, {
                key: "findDOMNodeWithId",
                value: function findDOMNodeWithId(id) {
                    return this.html.body.element[0].querySelector("#" + id)
                }
            }, {
                key: "isThereDOMNodeWithID",
                value: function isThereDOMNodeWithID(id) {
                    return this.findDOMNodeWithId(id) !== null
                }
            }, {
                key: "generateUniqueID",
                value: function generateUniqueID(prefix) {
                    var i = 1;
                    while (i < 1e3) {
                        if (!this.isThereDOMNodeWithID(prefix + "-" + i)) {
                            return prefix + "-" + i
                        }
                        i++
                    }
                    return ""
                }
            }, {
                key: "update",
                value: function update() {
                    return this.html.update()
                }
            }, {
                key: "mousemove",
                value: function mousemove() {
                    if (app.isDragging) {
                        dragScroll.scroll(this.element[0], this.dimensions, this.dimensions, app.mousePosition, {
                            topOffset: 60,
                            leftOffset: 60,
                            rightOffset: 60,
                            bottomOffset: 60,
                            speedUpScrolling: true
                        })
                    } else {
                        dragScroll.reset(this.element[0])
                    }
                    if (!app.aboveCanvas) {
                        return
                    }
                    var component = app.context.hoveredComponent;
                    if (app.isDragging) {
                        this.drawLine = null;
                        if (component) {
                            component.hoverDrag(0)
                        }
                        this.renderLine()
                    } else {
                        if (component) {
                            this.highlight(component)
                        }
                    }
                }
            }, {
                key: "setHTML",
                value: function setHTML(html) {
                    this.html = html;
                    this.iframeDoc.find("html").replaceWith(html.element);
                    this.hideLine()
                }
            }, {
                key: "markAsDragged",
                value: function markAsDragged(component) {
                    if (!component.isVisible()) {
                        return
                    }
                    component.element.attr("bs-dragged", 1)
                }
            }, {
                key: "markAsNotDragged",
                value: function markAsNotDragged(component) {
                    if (!component.isVisible()) {
                        return
                    }
                    component.element.removeAttr("bs-dragged")
                }
            }, {
                key: "markAsFocused",
                value: function markAsFocused(component) {
                    var zoom = app.context.canvasDimensions.zoom;
                    if (!component.isVisible()) {
                        this.focusRect.hide();
                        return
                    }
                    this.focusRect.css({
                        top: component.y * zoom,
                        left: component.x * zoom,
                        width: component.width * zoom - 2,
                        height: component.height * zoom - 2
                    }).show();
                    this.focusRect.toggleClass("inline-editing", !!component.isInlineEditingActivated);
                    this.focusRect.find(".move-handle").toggle(!!component.flags.canBeMoved)
                }
            }, {
                key: "hideFocus",
                value: function hideFocus() {
                    this.focusRect.hide()
                }
            }, {
                key: "restoreFocus",
                value: function restoreFocus() {
                    if (app.context.focusedComponent) {
                        this.markAsFocused(app.context.focusedComponent)
                    }
                }
            }, {
                key: "initialize",
                value: function initialize() {
                    this.update();
                    this.renderCSS();
                    this.scheduleRefresh()
                }
            }, {
                key: "refresh",
                value: function refresh() {
                    var oldHTMLHeight = this.html.height;
                    this.html.updateDimensions();
                    this.removeHighlight();
                    this.hideLine();
                    this.hideGrid();
                    if (app.context.toolState.visualizeGrid) {
                        this.redrawGrid()
                    }
                    if (oldHTMLHeight != this.html.height) {
                        this.resize({
                            height: this.html.height
                        });
                        return
                    }
                    if (app.context.focusedComponent) {
                        this.markAsFocused(app.context.focusedComponent);
                    }
                    this.showSystemUI()
                }
            }, {
                key: "refreshCSS",
                value: function refreshCSS() {
                    this.renderCSS();
                    this.scheduleRefresh()
                }
            }, {
                key: "hideLine",
                value: function hideLine() {
                    this.drawLine = null;
                    this._lastDrawLine = null;
                    this.line.hide()
                }
            }, {
                key: "drawHorizontalLine",
                value: function drawHorizontalLine(x, y, width) {
                    var decoration = arguments.length <= 3 || arguments[3] === undefined ? "" : arguments[3];
                    this.drawLine = {
                        x: x,
                        y: y,
                        width: width,
                        height: 1,
                        decoration: decoration
                    }
                }
            }, {
                key: "drawVerticalLine",
                value: function drawVerticalLine(x, y, height) {
                    var decoration = arguments.length <= 3 || arguments[3] === undefined ? "" : arguments[3];
                    this.drawLine = {
                        x: x,
                        y: y,
                        height: height,
                        width: 1,
                        decoration: decoration
                    }
                }
            }, {
                key: "renderLine",
                value: function renderLine() {
                    if (!this.drawLine) {
                        if (this._lastDrawLine) {
                            this.hideLine()
                        }
                        return
                    }
                    if (deepEqual(this._lastDrawLine, this.drawLine)) {
                        return
                    }
                    var zoom = app.context.canvasDimensions.zoom;
                    this._lastDrawLine = Object.assign({}, this.drawLine);
                    this.line.show();
                    this.line.width(Math.max(1, this.drawLine.width * zoom));
                    this.line.height(Math.max(1, this.drawLine.height * zoom));
                    this.line.css({
                        top: this.drawLine.y * zoom,
                        left: this.drawLine.x * zoom
                    });
                    this.line.attr("class", "line " + this.drawLine.decoration)
                }
            }, {
                key: "redrawGrid",
                value: function redrawGrid() {
                    var self = this;
                    var zoom = app.context.canvasDimensions.zoom;
                    var rowsAndCols = app.context.findInTree([Row, Column]);
                    for (var i = 0; i < rowsAndCols.length; i++) {
                        if (rowsAndCols[i].width * zoom - 2 < 3 || rowsAndCols[i].height * zoom - 2 < 3) {
                            continue
                        }
                        self.gridContainer.append($('<div class="grid-rect">').css({
                            width: rowsAndCols[i].width * zoom - 2,
                            height: rowsAndCols[i].height * zoom - 2,
                            top: rowsAndCols[i].y * zoom,
                            left: rowsAndCols[i].x * zoom
                        }))
                    }
                }
            }, {
                key: "hideGrid",
                value: function hideGrid() {
                    this.gridContainer.empty()
                }
            }, {
                key: "highlightDOMElement",
                value: function highlightDOMElement(element) {
                    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
                    options = Object.assign({
                        lineOnly: false,
                        displayMargin: true,
                        displayHighlight: true,
                        displayBorder: true,
                        displayPadding: true
                    }, options);
                    this.removeDOMHighlight();
                    var zoom = app.context.canvasDimensions.zoom;
                    var styles = window.getComputedStyle(element);
                    var box = element.getBoundingClientRect();
                    element = $(element);
                    var offset = element.offset();
                    offset.left *= zoom;
                    offset.top *= zoom;
                    var width = box.width * zoom,
                        height = box.height * zoom,
                        marginTop = calcSize(styles.marginTop),
                        marginRight = calcSize(styles.marginRight),
                        marginBottom = calcSize(styles.marginBottom),
                        marginLeft = calcSize(styles.marginLeft),
                        paddingTop = calcSize(styles.paddingTop),
                        paddingRight = calcSize(styles.paddingRight),
                        paddingBottom = calcSize(styles.paddingBottom),
                        paddingLeft = calcSize(styles.paddingLeft),
                        borderTop = calcSize(styles.borderTop),
                        borderRight = calcSize(styles.borderRight),
                        borderBottom = calcSize(styles.borderBottom),
                        borderLeft = calcSize(styles.borderLeft);
                    var self = this;
                    if (box.width == 0 && box.height == 0) {
                        return
                    }
                    this.domHighlight.css({
                        left: offset.left,
                        top: offset.top,
                        width: width,
                        height: height
                    }).show();
                    if (options.lineOnly) {
                        drawRect("highlight-line", 0, 0, width, height, 1, 1, 1, 1);
                        return
                    }
                    if (options.displayBorder) {
                        drawRect("border", 0, 0, width, height, borderTop, borderRight, borderBottom, borderLeft)
                    }
                    if (options.displayPadding) {
                        drawRect("padding", borderLeft, borderTop, width - (borderLeft + borderRight), height - (borderTop + borderBottom), paddingTop, paddingRight, paddingBottom, paddingRight)
                    }
                    if (options.displayHighlight) {
                        drawRect("main", borderLeft + paddingLeft, borderTop + paddingTop, width - (paddingLeft + paddingRight + borderLeft + borderRight), height - (paddingTop + paddingBottom + borderTop + borderBottom), 0, 0, 0, 0)
                    }
                    if (options.displayMargin) {
                        drawRect("margin", -marginLeft, -marginTop, width + marginLeft + marginRight, height + marginTop + marginBottom, marginTop, marginRight, marginBottom, marginLeft)
                    }

                    function drawRect(className, x, y, width, height) {
                        var top = arguments.length <= 5 || arguments[5] === undefined ? 0 : arguments[5];
                        var right = arguments.length <= 6 || arguments[6] === undefined ? 0 : arguments[6];
                        var bottom = arguments.length <= 7 || arguments[7] === undefined ? 0 : arguments[7];
                        var left = arguments.length <= 8 || arguments[8] === undefined ? 0 : arguments[8];
                        $('<div class="' + className + '">').css({
                            width: width,
                            height: height,
                            top: y,
                            left: x,
                            borderWidth: [top, right, bottom, left].join("px ") + "px"
                        }).appendTo(self.domHighlight)
                    }

                    function calcSize(size) {
                        var tmp = parseInt(size, 10) * zoom;
                        if (tmp > 0 && tmp < 1) {
                            tmp = 1
                        }
                        return Math.floor(tmp)
                    }
                }
            }, {
                key: "removeDOMHighlight",
                value: function removeDOMHighlight() {
                    this.domHighlight.empty().hide();
                    this.restoreFocus()
                }
            }, {
                key: "highlight",
                value: function highlight(component) {
                    if (app.context.highlightedComponent == component) {
                        return
                    }
                    if (app.context.focusedComponent == component || app.isInlineEditingActive() || !component.isVisible()) {
                        this.removeHighlight();
                        return
                    }
                    app.context.highlightedComponent = component;
                    if (app.isDragging) {
                        return this.highlightDOMElement(component.element[0], {
                            lineOnly: true
                        })
                    }
                    this.highlightDOMElement(component.element[0])
                }
            }, {
                key: "removeHighlight",
                value: function removeHighlight() {
                    if (!app.context.highlightedComponent) return false;
                    app.context.highlightedComponent = null;
                    this.removeDOMHighlight()
                }
            }, {
                key: "renderCSS",
                value: function renderCSS() {
                    this.html.fillUserStylesheet(app.context.generateUserCSS())
                }
            }, {
                key: "resize",
                value: function resize() {
                    var dimensions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
                    var withAnimation = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
                    var width = dimensions.width || app.context.canvasDimensions.width;
                    var height = dimensions.height || app.context.canvasDimensions.height;
                    var zoom = dimensions.zoom || app.context.canvasDimensions.zoom;
                    var oldScrollTop = this.element[0].scrollTop;
                    var newScrollTop = (oldScrollTop - 50) * (zoom / app.context.canvasDimensions.zoom) + 50;
                    var haveResized = false,
                        haveZoomed = false;
                    if (width != app.context.canvasDimensions.width || height != app.context.canvasDimensions.height) {
                        haveResized = true
                    }
                    if (zoom != app.context.canvasDimensions.zoom) {
                        haveZoomed = true
                    }
                    if (!haveResized && !haveZoomed) {
                        withAnimation = false
                    }
                    if (haveZoomed) {
                        withAnimation = false
                    }
                    if (withAnimation) {
                        this.iframe.addClass("animated");
                        this.sizer.addClass("animated");
                        this.hideSystemUI();
                        this.removeHighlight();
                        this.focusRect.hide();
                        this.iframe.css({
                            transform: "scale(" + zoom + ")",
                            width: width,
                            height: height
                        });
                        this.sizer.css({
                            width: width * zoom + 100,
                            height: height * zoom + 100
                        });
                        var that = this;
                        setTimeout(function() {
                            that.iframe.removeClass("animated");
                            that.sizer.removeClass("animated");
                            that.scheduleRefresh();
                            updateAndNotify()
                        }, 400)
                    } else {
                        this.hideSystemUI();
                        this.removeHighlight();
                        this.focusRect.hide();
                        this.iframe.css({
                            transform: "scale(" + zoom + ")",
                            width: width,
                            height: height
                        });
                        this.sizer.css({
                            width: width * zoom + 100,
                            height: height * zoom + 100
                        });
                        if (haveZoomed) {
                            this.element[0].scrollTop = newScrollTop
                        }
                        this.scheduleRefresh();
                        updateAndNotify()
                    }

                    function updateAndNotify() {
                        app.context.canvasDimensions = {
                            width: width,
                            height: height,
                            zoom: zoom
                        };
                        if (haveResized) {
                            app.trigger("canvas-resized")
                        }
                        if (haveZoomed) {
                            app.trigger("canvas-zoomed")
                        }
                    }
                }
            }, {
                key: "zoomIn",
                value: function zoomIn() {
                    var withAnimation = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
                    var zoom = app.context.canvasDimensions.zoom;
                    zoom += .25;
                    if (zoom > 2) {
                        zoom = 2
                    }
                    this.resize({
                        zoom: zoom
                    }, withAnimation)
                }
            }, {
                key: "zoomOut",
                value: function zoomOut() {
                    var withAnimation = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
                    var zoom = app.context.canvasDimensions.zoom;
                    zoom -= .25;
                    if (zoom < .25) {
                        zoom = .25
                    }
                    this.resize({
                        zoom: zoom
                    }, withAnimation)
                }
            }, {
                key: "resetZoom",
                value: function resetZoom() {
                    var withAnimation = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
                    this.resize({
                        zoom: 1
                    }, withAnimation)
                }
            }, {
                key: "hideSystemUI",
                value: function hideSystemUI() {
                    this.element.addClass("hide-sui")
                }
            }, {
                key: "showSystemUI",
                value: function showSystemUI() {
                    this.element.removeClass("hide-sui")
                }
            }, {
                key: "getSize",
                value: function getSize() {
                    return canvasSizesReverse[app.context.canvasDimensions.width] || "md"
                }
            }, {
                key: "getBreakpointsForSize",
                value: function getBreakpointsForSize() {
                    return Canvas.sizeLimits[this.getSize()]
                }
            }, {
                key: "scrollTo",
                value: function scrollTo() {}
            }]);
            return Canvas
        }();
        var canvasSizesReverse = {
            360: "xs",
            768: "sm",
            1024: "md",
            1200: "lg"
        };
        Canvas.sizes = {
            xs: 360,
            sm: 768,
            md: 1024,
            lg: 1200
        };
        Canvas.sizeLimits = {
            xs: {
                min: 0,
                max: 767
            },
            sm: {
                min: 768,
                max: 991
            },
            md: {
                min: 992,
                max: 1199
            },
            lg: {
                min: 1200,
                max: Infinity
            }
        };
        module.exports = Canvas
    }, {
        "../base/Point": 17,
        "../components/Column": 37,
        "../components/Row": 115,
        "../helpers/dragScroll": 160,
        "deep-equal": 409
    }],
    12: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var Point = require("./Point");
        var Body = require("../components/Body");
        var Canvas = require("./Canvas");
        var History = require("./History");
        var ImageAsset = require("../panes/ImageAsset");
        var restoreComponentTree = require("../helpers/restoreComponentTree");
        var restoreCSSList = require("../helpers/restoreCSSList");
        var _findInTree = require("../helpers/findInTree");
        var _findInTreeCallback = require("../helpers/findInTreeCallback");
        var ComponentWithChildren = require("../components/ComponentWithChildren");
        var ComponentWithInlineEditing = require("../components/ComponentWithInlineEditing");
        var clone = require("clone");
        var deepEqual = require("deep-equal");
        var validFilename = require("valid-filename");
        var parsePath = require("../helpers/parsePath");
        var Context = function() {
            function Context(name, path) {
                var theme = arguments.length <= 2 || arguments[2] === undefined ? "default-theme" : arguments[2];
                _classCallCheck(this, Context);
                this.name = name;
                this.path = path;
                this.highlightedComponent = null;
                this.focusedComponent = null;
                this.hoveredComponent = null;
                this.css = [];
                this.themeCSS = [];
                this.domToComponent = new WeakMap;
                this.hoveredInlineElement = null;
                this.inlineDOMToComponent = new WeakMap;
                this.html = null;
                this.history = new History(100, this);
                this.historyStackID = 0;
                this.canvasDimensions = {
                    zoom: 1,
                    width: Canvas.sizes["md"],
                    height: 600
                };
                if (window && window.innerWidth < 1550) {
                    this.canvasDimensions.zoom = .75
                }
                if (window && window.innerWidth < 1330) {
                    this.canvasDimensions.zoom = .5
                }
                this.toolState = {
                    visualizeGrid: true
                };
                this.assets = {
                    images: [],
                    fonts: []
                };
                this.theme = theme;
                this.assetPath = "./embed/";
                this.lastSaveTime = null
            }
            _createClass(Context, [{
                key: "destructor",
                value: function destructor() {
                    this.assets.images.forEach(function(asset) {
                        return asset.revokeBlobURL()
                    })
                }
            }, {
                key: "isFocused",
                value: function isFocused(component) {
                    return this.focusedComponent === component
                }
            }, {
                key: "updatePackageInstancesOperation",
                value: function updatePackageInstancesOperation(pkg) {
                    var instances = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
                    var context = this;
                    if (!instances) {
                        instances = this.findInTreeCallback(function(component) {
                            return component.properties.packageID == pkg.id && component.properties.packageVersion != pkg.version
                        })
                    }
                    if (!Array.isArray(instances)) {
                        instances = [instances]
                    }
                    if (!instances.length) return;
                    var replaceOps = [];
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;
                    try {
                        for (var _iterator = instances[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var instance = _step.value;
                            replaceOps.push(instance.replaceWithOperation(pkg.createTree()))
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator["return"]) {
                                _iterator["return"]()
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError
                            }
                        }
                    }
                    var assetsOp = pkg.addAssetsToContextOperation(this);
                    return {
                        "do": function _do() {
                            assetsOp["do"]();
                            replaceOps.forEach(function(op) {
                                return op["do"]()
                            })
                        },
                        undo: function undo() {
                            assetsOp.undo();
                            replaceOps.forEach(function(op) {
                                return op.undo()
                            })
                        }
                    }
                }
            }, {
                key: "findComponentForElement",
                value: function findComponentForElement(element) {
                    while (element) {
                        if (this.domToComponent.has(element)) {
                            return this.domToComponent.get(element)
                        }
                        element = element.parentNode
                    }
                    return null
                }
            }, {
                key: "hasCSSBlock",
                value: function hasCSSBlock(block) {
                    for (var i = 0; i < this.css.length; i++) {
                        if (this.css[i].selector == block.selector && this.css[i].mediaQuery == block.mediaQuery) {
                            if (deepEqual(this.css[i].serialize(), block.serialize())) {
                                return true
                            }
                        }
                    }
                    return false
                }
            }, {
                key: "findIndexForCSSBlock",
                value: function findIndexForCSSBlock(block) {
                    return this.css.indexOf(block)
                }
            }, {
                key: "deleteCSSBlock",
                value: function deleteCSSBlock(block) {
                    var index = this.findIndexForCSSBlock(block);
                    if (index == -1) {
                        return false
                    }
                    this.css.splice(index, 1);
                    return true
                }
            }, {
                key: "addCSSBlockAtIndex",
                value: function addCSSBlockAtIndex(block, index) {
                    this.css.splice(index, 0, block)
                }
            }, {
                key: "addCSSBlocksAtIndex",
                value: function addCSSBlocksAtIndex(blocks, index) {
                    this.css.splice.apply(this.css, [index, 0].concat(blocks))
                }
            }, {
                key: "findIndexForImageAsset",
                value: function findIndexForImageAsset(asset) {
                    return this.assets.images.indexOf(asset)
                }
            }, {
                key: "getImageAssetByName",
                value: function getImageAssetByName(name) {
                    return this.assets.images[this.findIndexForImageAssetByName(name)]
                }
            }, {
                key: "findIndexForImageAssetByName",
                value: function findIndexForImageAssetByName(name) {
                    for (var i = 0; i < this.assets.images.length; i++) {
                        if (this.assets.images[i].nameEquals(name)) return i
                    }
                    return -1
                }
            }, {
                key: "hasImageAssetWithName",
                value: function hasImageAssetWithName(name) {
                    return this.findIndexForImageAssetByName(name) !== -1
                }
            }, {
                key: "createImageAsset",
                value: function createImageAsset(imageData) {
                    return new ImageAsset(imageData.name, imageData.extension, imageData.data)
                }
            }, {
                key: "addImageAsset",
                value: function addImageAsset(asset) {
                    if (this.hasImageAssetWithName(asset.name)) return false;
                    this.assets.images.unshift(asset);
                    return true
                }
            }, {
                key: "addImageAssetToIndex",
                value: function addImageAssetToIndex(asset, index) {
                    if (this.hasImageAssetWithName(asset.name)) return false;
                    this.assets.images.splice(index, 0, asset);
                    return true
                }
            }, {
                key: "removeImageAssetFromIndex",
                value: function removeImageAssetFromIndex(index) {
                    var removed = this.assets.images.splice(index, 1);
                    removed[0].destructor()
                }
            }, {
                key: "removeImageAsset",
                value: function removeImageAsset(asset) {
                    var index = this.assets.images.indexOf(asset);
                    if (index == -1) return false;
                    this.removeImageAssetFromIndex(index);
                    return true
                }
            }, {
                key: "renameImageAsset",
                value: function renameImageAsset(oldName, newName) {
                    var images = this.assets.images;
                    var index = this.findIndexForImageAssetByName(oldName);
                    if (index == -1) {
                        return -1
                    }
                    if (oldName == newName) {
                        return -2
                    }
                    if (!ImageAsset.isNameValid(newName)) {
                        return -3
                    }
                    for (var i = 0; i < images.length; i++) {
                        if (i == index) continue;
                        if (images[i].nameEquals(newName)) {
                            return -4
                        }
                    }
                    images[index].renameTo(newName);
                    return 1
                }
            }, {
                key: "findIndexForFontAsset",
                value: function findIndexForFontAsset(font) {
                    return this.assets.fonts.indexOf(font)
                }
            }, {
                key: "hasFontAsset",
                value: function hasFontAsset(name) {
                    for (var i = 0; i < this.assets.fonts.length; i++) {
                        if (this.assets.fonts[i].name == name) return true
                    }
                    return false
                }
            }, {
                key: "getMergedFontAssets",
                value: function getMergedFontAssets(fonts) {
                    if (!Array.isArray(fonts)) {
                        fonts = [fonts]
                    }
                    var copy = this.assets.fonts.slice();
                    Array.prototype.push.apply(copy, fonts);
                    return copy
                }
            }, {
                key: "addFontAssets",
                value: function addFontAssets(fonts) {
                    this.assets.fonts = this.getMergedFontAssets(fonts)
                }
            }, {
                key: "addFontAssetToIndex",
                value: function addFontAssetToIndex(font, index) {
                    this.assets.fonts.splice(index, 0, font)
                }
            }, {
                key: "removeFontAssetFromIndex",
                value: function removeFontAssetFromIndex(index) {
                    this.assets.fonts.splice(index, 1)
                }
            }, {
                key: "removeFontAsset",
                value: function removeFontAsset(font) {
                    var index = this.assets.fonts.indexOf(font);
                    if (index == -1) return -1;
                    this.removeFontAssetFromIndex(index);
                    return 1
                }
            }, {
                key: "findInTreeCallback",
                value: function findInTreeCallback(cb) {
                    return _findInTreeCallback(cb, this.html.body)
                }
            }, {
                key: "findInTree",
                value: function findInTree(what) {
                    return _findInTree(what, this.html.body)
                }
            }, {
                key: "transformImageAsset",
                value: function transformImageAsset(name, options) {
                    var asset = this.getImageAssetByName(name);
                    if (!asset) return false;
                    return asset.blobURL
                }
            }, {
                key: "replaceBlobURLsInString",
                value: function replaceBlobURLsInString(str) {
                    var blobRegex = /blob:[%\d-\.\/\w]+/g;
                    var that = this;
                    return str.replace(blobRegex, function(match) {
                        var _iteratorNormalCompletion2 = true;
                        var _didIteratorError2 = false;
                        var _iteratorError2 = undefined;
                        try {
                            for (var _iterator2 = that.assets.images[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                var img = _step2.value;
                                if (img._blobURL == match) return img.name
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
                                    _iterator2["return"]()
                                }
                            } finally {
                                if (_didIteratorError2) {
                                    throw _iteratorError2
                                }
                            }
                        }
                        return match
                    })
                }
            }, {
                key: "isThemeUserMade",
                value: function isThemeUserMade() {
                    return app.isThemeUserMade(this.theme)
                }
            }, {
                key: "getStylesheetForActiveTheme",
                value: function getStylesheetForActiveTheme() {
                    return this.assetPath + "bootstrap/" + this.theme + "/bootstrap.min.css"
                }
            }, {
                key: "getActiveTheme",
                value: function getActiveTheme() {
                    return app.getThemeById(this.theme)
                }
            }, {
                key: "getFonts",
                value: function getFonts() {
                    var themeFonts = this.getActiveTheme().fonts.map(function(t) {
                        return {
                            name: t.name,
                            url: t.url,
                            theme: true
                        }
                    });
                    return themeFonts.concat(this.assets.fonts)
                }
            }, {
                key: "shouldIncludeFontAwesome",
                value: function shouldIncludeFontAwesome() {
                    return true
                }
            }, {
                key: "generateUserCSS",
                value: function generateUserCSS() {
                    var css = "",
                        tmp;
                    for (var i = 0; i < this.css.length; i++) {
                        tmp = this.css[i].toString();
                        if (tmp) {
                            css = css + tmp + "\n"
                        }
                    }
                    var that = this;
                    css = css.replace(/url\(['"]?([^)'";}]+)['"]?\)/g, function(match, image) {
                        var src = that.transformImageAsset(image, {
                            stylesheet: true
                        });
                        if (src) {
                            return match.replace(image, src)
                        }
                        return match
                    });
                    return css
                }
            }, {
                key: "markAsSaved",
                value: function markAsSaved() {
                    var path = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
                    this.lastSaveTime = Date.now();
                    this.historyStackID = this.history.stackID;
                    if (path) {
                        this.path = path
                    }
                }
            }, {
                key: "isActive",
                value: function isActive() {
                    return app.context == this
                }
            }, {
                key: "isSaved",
                value: function isSaved() {
                    return this.existsOnDisk() && !this.hasUnsavedChanges()
                }
            }, {
                key: "canBeSaved",
                value: function canBeSaved() {
                    return !this.isSaved()
                }
            }, {
                key: "canBeSavedAs",
                value: function canBeSavedAs() {
                    return this.existsOnDisk()
                }
            }, {
                key: "existsOnDisk",
                value: function existsOnDisk() {
                    return this.lastSaveTime !== null
                }
            }, {
                key: "hasUnsavedChanges",
                value: function hasUnsavedChanges() {
                    return this.historyStackID != this.history.stackID
                }
            }, {
                key: "getAllCSS",
                value: function getAllCSS() {
                    return this.themeCSS.concat(this.css)
                }
            }, {
                key: "loadThemeStyles",
                value: function loadThemeStyles() {
                    var ctx = this;
                    return new Promise(function(resolve, reject) {
                        if (app.isThemeUserMade(ctx.theme)) {
                            var theme = app.getThemeById(theme);
                            ctx.themeCSS = theme.css;
                            resolve(true)
                        } else {
                            $.getJSON("./embed/bootstrap/" + ctx.theme + "/css.json", function(css) {
                                ctx.themeCSS = restoreCSSList(css);
                                resolve(true)
                            })
                        }
                    })
                }
            }, {
                key: "usesTheme",
                value: function usesTheme(id) {
                    return this.theme == id
                }
            }, {
                key: "serialize",
                value: function serialize() {
                    return {
                        name: this.name,
                        theme: this.theme,
                        css: this.css.map(function(b) {
                            return b.serialize()
                        }),
                        assets: {
                            images: this.assets.images.map(function(i) {
                                return i.serialize()
                            }),
                            fonts: clone(this.assets.fonts)
                        },
                        components: this.html.serialize()
                    }
                }
            }, {
                key: "unserialize",
                value: function unserialize(json) {
                    var _this = this;
                    this.name = json.name;
                    this.theme = json.theme;
                    this.css = restoreCSSList(json.css);
                    this.assets = {};
                    this.assets.fonts = json.assets.fonts;
                    this.assets.images = json.assets.images.map(function(img) {
                        return _this.createImageAsset(img)
                    });
                    this.html = restoreComponentTree(json.components);
                    this.html.setContext(this)
                }
            }]);
            return Context
        }();
        module.exports = Context
    }, {
        "../components/Body": 26,
        "../components/ComponentWithChildren": 39,
        "../components/ComponentWithInlineEditing": 40,
        "../helpers/findInTree": 166,
        "../helpers/findInTreeCallback": 167,
        "../helpers/parsePath": 183,
        "../helpers/restoreCSSList": 186,
        "../helpers/restoreComponentTree": 187,
        "../panes/ImageAsset": 434,
        "./Canvas": 11,
        "./History": 15,
        "./Point": 17,
        clone: 385,
        "deep-equal": 409,
        "valid-filename": 422
    }],
    13: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var ContextMenu = function() {
            function ContextMenu() {
                _classCallCheck(this, ContextMenu);
                this.element = $('<div class="context-menu">');
                this.element.hide().appendTo(document.body);
                this.visible = false;
                this.element.on("click", "a", this.optionClick.bind(this));
                app.on("resize blur context-changed scroll", this.hide.bind(this))
            }
            _createClass(ContextMenu, [{
                key: "optionClick",
                value: function optionClick(e) {
                    var index = this.element.find("a").index(e.target);
                    if (index == -1) return false;
                    this.options[index].action();
                    this.hide();
                    e.preventDefault();
                    e.stopPropagation()
                }
            }, {
                key: "show",
                value: function show(x, y, options) {
                    var props = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
                    if (!options.length) {
                        return false
                    }
                    this.options = options;
                    this.visible = true;
                    this.element.empty();
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;
                    try {
                        for (var _iterator = this.options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var opt = _step.value;
                            if (opt.type == "heading") {
                                this.element.append($('<a class="heading">').text(opt.name));
                                continue
                            }
                            this.element.append($("<a>").text(opt.name))
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator["return"]) {
                                _iterator["return"]()
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError
                            }
                        }
                    }
                    this.element.show();
                    if (props.forcePosition) {
                        if (props.forcePosition == "top-right") {
                            this.element.css({
                                right: win.width() - x,
                                top: y,
                                left: "auto",
                                bottom: "auto"
                            })
                        }
                    } else {
                        if (x + this.element.width() > win.width()) {
                            this.element.css({
                                right: win.width() - x,
                                left: "auto"
                            })
                        } else {
                            this.element.css({
                                left: x,
                                right: "auto"
                            })
                        }
                        if (y + this.element.height() > win.height()) {
                            this.element.css({
                                bottom: win.height() - y,
                                top: "auto"
                            })
                        } else {
                            this.element.css({
                                top: y,
                                bottom: "auto"
                            })
                        }
                    }
                }
            }, {
                key: "hide",
                value: function hide() {
                    if (!this.visible) return;
                    this.visible = false;
                    this.element.hide();
                    this.element.empty();
                    this.options = []
                }
            }]);
            return ContextMenu
        }();
        module.exports = ContextMenu
    }, {}],
    14: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Context = require("./Context");
        var Icon = require("../components/Icon");
        var ExportContext = function(_Context) {
            _inherits(ExportContext, _Context);

            function ExportContext(name, path) {
                _classCallCheck(this, ExportContext);
                _get(Object.getPrototypeOf(ExportContext.prototype), "constructor", this).call(this, name, path);
                this.isExport = true;
                this.assetPath = "assets/";
                this.tempImageSrc = []
            }
            _createClass(ExportContext, [{
                key: "transformImageAsset",
                value: function transformImageAsset(name) {
                    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
                    var asset = this.getImageAssetByName(name);
                    if (!asset) return false;
                    if (options.stylesheet) {
                        return "../../" + this.assetPath + "img/" + asset.name
                    }
                    var transformedPath = this.assetPath + "img/" + asset.name;
                    this.tempImageSrc.push(transformedPath);
                    return "data:text/plain," + String(this.tempImageSrc.length - 1)
                }
            }, {
                key: "generateHTML",
                value: function generateHTML() {
                    var html = this.html.element[0].outerHTML;
                    html = "<!DOCTYPE html>" + html;
                    var that = this;
                    html = html.replace(/data:text\/plain,\d+/g, function(match) {
                        return that.tempImageSrc[match.split(",")[1]]
                    });
                    return html
                }
            }, {
                key: "shouldIncludeFontAwesome",
                value: function shouldIncludeFontAwesome() {
                    var icons = this.findInTree(Icon);
                    for (var i = 0; i < icons.length; i++) {
                        if (icons[i].usesFontAwesome()) {
                            return true
                        }
                    }
                    return false
                }
            }, {
                key: "getStylesheetForActiveTheme",
                value: function getStylesheetForActiveTheme() {
                    return this.assetPath + "bootstrap/css/bootstrap.min.css"
                }
            }]);
            return ExportContext
        }(Context);
        module.exports = ExportContext
    }, {
        "../components/Icon": 60,
        "./Context": 12
    }],
    15: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var History = function() {
            function History(limit, context) {
                if (limit === undefined) limit = 100;
                _classCallCheck(this, History);
                this.stackID = 0;
                this.undoStack = [];
                this.redoStack = [];
                this.limit = limit;
                this.context = context
            }
            _createClass(History, [{
                key: "add",
                value: function add(item) {
                    this.stackID++;
                    this.undoStack.push(item);
                    this.redoStack = [];
                    if (this.undoStack.length > this.limit) {
                        this.undoStack.shift()
                    }
                    app.trigger("history-event", "add", item.name, this.context);
                    app.trigger("context-changed", this.context)
                }
            }, {
                key: "empty",
                value: function empty() {
                    this.redoStack = [];
                    this.undoStack = []
                }
            }, {
                key: "hasUndo",
                value: function hasUndo() {
                    return !!this.undoStack.length
                }
            }, {
                key: "hasRedo",
                value: function hasRedo() {
                    return !!this.redoStack.length
                }
            }, {
                key: "undoName",
                value: function undoName() {
                    if (this.hasUndo()) {
                        return 'Undo "' + this.undoStack[this.undoStack.length - 1].name + '"'
                    }
                    return "Undo"
                }
            }, {
                key: "redoName",
                value: function redoName() {
                    if (this.hasRedo()) {
                        return 'Redo "' + this.redoStack[this.redoStack.length - 1].name + '"'
                    }
                    return "Redo"
                }
            }, {
                key: "undo",
                value: function undo() {
                    var item = this.undoStack.pop();
                    if (!item) return false;
                    this.stackID--;
                    item.undo();
                    this.redoStack.push(item);
                    if (this.redoStack.length > this.limit) {
                        this.redoStack.shift()
                    }
                    app.trigger("history-event", "undo", item.name, this.context);
                    app.trigger("context-changed", this.context);
                    return true
                }
            }, {
                key: "redo",
                value: function redo() {
                    var item = this.redoStack.pop();
                    if (!item) return false;
                    this.stackID++;
                    item.redo();
                    this.undoStack.push(item);
                    if (this.undoStack.length > this.limit) {
                        this.undoStack.shift()
                    }
                    app.trigger("history-event", "redo", item.name, this.context);
                    app.trigger("context-changed", this.context);
                    return true
                }
            }]);
            return History
        }();
        module.exports = History
    }, {}],
    16: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var restoreComponentTree = require("../helpers/restoreComponentTree");
        var restoreCSSList = require("../helpers/restoreCSSList");
        var clone = require("clone");
        var Package = function() {
            function Package() {
                _classCallCheck(this, Package);
                this.id = app.getToken() + "_" + Date.now();
                this.name = "";
                this.version = Date.now();
                this.css = [];
                this.fonts = [];
                this.images = [];
                this.components = {}
            }
            _createClass(Package, [{
                key: "createCSS",
                value: function createCSS() {
                    return restoreCSSList(this.css, {
                        packageID: this.id
                    })
                }
            }, {
                key: "createTree",
                value: function createTree() {
                    var elem = restoreComponentTree(this.components);
                    elem.associateWithPackage(this);
                    return elem
                }
            }, {
                key: "createImages",
                value: function createImages() {
                    return this.images
                }
            }, {
                key: "createFonts",
                value: function createFonts() {
                    return this.fonts
                }
            }, {
                key: "addAssetsToContextOperation",
                value: function addAssetsToContextOperation(context) {
                    var modifyImages = false,
                        modifyFonts = false;
                    var images = this.createImages();
                    if (images.length) {
                        var oldImages = context.assets.images,
                            newImages = oldImages.slice();
                        modifyImages = true;
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;
                        try {
                            outer: for (var _iterator = images[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var img = _step.value;
                                var image = context.createImageAsset(img);
                                for (var i = 0; i < newImages.length; i++) {
                                    if (newImages[i].nameEquals(image.name)) {
                                        newImages[i].destructor();
                                        newImages[i] = image;
                                        continue outer
                                    }
                                }
                                newImages.unshift(image)
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator["return"]) {
                                    _iterator["return"]()
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError
                                }
                            }
                        }
                    }
                    var fonts = this.createFonts();
                    if (fonts.length) {
                        var oldFonts = context.assets.fonts,
                            newFonts = oldFonts.slice();
                        var _iteratorNormalCompletion2 = true;
                        var _didIteratorError2 = false;
                        var _iteratorError2 = undefined;
                        try {
                            for (var _iterator2 = fonts[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                var fnt = _step2.value;
                                if (!context.hasFontAsset(fnt.name)) {
                                    newFonts.unshift(fnt);
                                    modifyFonts = true
                                }
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
                                    _iterator2["return"]()
                                }
                            } finally {
                                if (_didIteratorError2) {
                                    throw _iteratorError2
                                }
                            }
                        }
                    }
                    var oldCSS = context.css;
                    var newCSS = [];
                    var _iteratorNormalCompletion3 = true;
                    var _didIteratorError3 = false;
                    var _iteratorError3 = undefined;
                    try {
                        for (var _iterator3 = oldCSS[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                            var cssBlock = _step3.value;
                            if (cssBlock.packageID == this.id) continue;
                            newCSS.push(cssBlock)
                        }
                    } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion3 && _iterator3["return"]) {
                                _iterator3["return"]()
                            }
                        } finally {
                            if (_didIteratorError3) {
                                throw _iteratorError3
                            }
                        }
                    }
                    var _iteratorNormalCompletion4 = true;
                    var _didIteratorError4 = false;
                    var _iteratorError4 = undefined;
                    try {
                        for (var _iterator4 = this.createCSS()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                            var block = _step4.value;
                            newCSS.push(block)
                        }
                    } catch (err) {
                        _didIteratorError4 = true;
                        _iteratorError4 = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion4 && _iterator4["return"]) {
                                _iterator4["return"]()
                            }
                        } finally {
                            if (_didIteratorError4) {
                                throw _iteratorError4
                            }
                        }
                    }
                    return {
                        "do": function _do() {
                            if (modifyImages) {
                                context.assets.images = newImages
                            }
                            if (modifyFonts) {
                                context.assets.fonts = newFonts
                            }
                            context.css = newCSS
                        },
                        undo: function undo() {
                            if (modifyImages) {
                                context.assets.images = oldImages
                            }
                            if (modifyFonts) {
                                context.assets.fonts = oldFonts
                            }
                            context.css = oldCSS
                        }
                    }
                }
            }, {
                key: "addToEmptyContext",
                value: function addToEmptyContext(ctx) {
                    ctx.html.body.insertFirst(this.createTree());
                    this.addAssetsToContextOperation(ctx)["do"]()
                }
            }, {
                key: "clone",
                value: function clone() {
                    var c = new this.constructor;
                    c.unserialize(this.serialize());
                    return c
                }
            }, {
                key: "serialize",
                value: function serialize() {
                    return {
                        id: this.id,
                        version: this.version,
                        name: this.name,
                        css: clone(this.css),
                        fonts: clone(this.fonts),
                        images: clone(this.images),
                        components: clone(this.components)
                    }
                }
            }, {
                key: "unserialize",
                value: function unserialize(json) {
                    this.id = json.id;
                    this.version = json.version;
                    this.name = json.name;
                    this.css = json.css;
                    this.fonts = json.fonts;
                    this.images = json.images;
                    this.components = json.components
                }
            }]);
            return Package
        }();
        module.exports = Package
    }, {
        "../helpers/restoreCSSList": 186,
        "../helpers/restoreComponentTree": 187,
        clone: 385
    }],
    17: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var Point = function() {
            function Point(x, y) {
                _classCallCheck(this, Point);
                this.x = x;
                this.y = y
            }
            _createClass(Point, [{
                key: "clone",
                value: function clone() {
                    return new Point(this.x, this.y)
                }
            }, {
                key: "distanceTo",
                value: function distanceTo(x, y) {
                    if (x instanceof Point) {
                        y = x.y;
                        x = x.x
                    }
                    return Math.sqrt((this.x - x) * (this.x - x) + (this.y - y) * (this.y - y))
                }
            }]);
            return Point
        }();
        module.exports = Point
    }, {}],
    18: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var restoreCSSList = require("../helpers/restoreCSSList");
        var clone = require("clone");
        var Theme = function() {
            function Theme() {
                _classCallCheck(this, Theme);
                this.id = app.getToken() + "_" + Date.now();
                this.name = "";
                this.raw = "";
                this.css = [];
                this.fonts = []
            }
            _createClass(Theme, [{
                key: "serialize",
                value: function serialize() {
                    return {
                        id: this.id,
                        name: this.name,
                        raw: this.raw,
                        css: this.css.map(function(block) {
                            return block.serialize()
                        }),
                        fonts: clone(this.fonts)
                    }
                }
            }, {
                key: "unserialize",
                value: function unserialize(obj) {
                    this.id = obj.id;
                    this.name = obj.name;
                    this.raw = obj.raw;
                    this.css = restoreCSSList(obj.css);
                    this.fonts = obj.fonts
                }
            }]);
            return Theme
        }();
        module.exports = Theme
    }, {
        "../helpers/restoreCSSList": 186,
        clone: 385
    }],
    19: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Div = require("./Div");
        var Span = require("./Span");
        var textOptions = require("../helpers/textOptions");
        var Alert = function(_Div) {
            _inherits(Alert, _Div);

            function Alert() {
                _classCallCheck(this, Alert);
                _get(Object.getPrototypeOf(Alert.prototype), "constructor", this).call(this);
                this.defineProperties([{
                    id: "style",
                    label: "Style",
                    type: "select",
                    value: "alert-success",
                    options: Alert.possibleStyles
                }, {
                    id: "dismissable",
                    label: "Dismissable",
                    type: "checkbox",
                    value: false
                }]);
                textOptions.construct(this, {
                    includeColor: false
                })
            }
            _createClass(Alert, [{
                key: "initialize",
                value: function initialize() {
                    var txt = arguments.length <= 0 || arguments[0] === undefined ? "<b>Alert</b> text." : arguments[0];
                    var span = new Span;
                    span.initialize(txt);
                    span.blacklist = ["link"];
                    this.insertFirst(span)
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = {};
                    this.cssClasses.system.main = "alert " + this.properties.style;
                    this.attributes.role = "alert";
                    textOptions.update(this);
                    _get(Object.getPrototypeOf(Alert.prototype), "startUpdate", this).call(this);
                    if (this.properties.dismissable) {
                        this.element.prepend('<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>')
                    }
                    return _get(Object.getPrototypeOf(Alert.prototype), "finishUpdate", this).call(this)
                }
            }]);
            return Alert
        }(Div);
        Alert.possibleStyles = [{
            label: "Success",
            value: "alert-success"
        }, {
            label: "Info",
            value: "alert-info"
        }, {
            label: "Warning",
            value: "alert-warning"
        }, {
            label: "Danger",
            value: "alert-danger"
        }];
        module.exports = Alert
    }, {
        "../helpers/textOptions": 192,
        "./Div": 42,
        "./Span": 119
    }],
    20: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x3, _x4, _x5) {
            var _again = true;
            _function: while (_again) {
                var object = _x3,
                    property = _x4,
                    receiver = _x5;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x3 = parent;
                        _x4 = property;
                        _x5 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithInlineEditing = require("./ComponentWithInlineEditing");
        var linkOptions = require("../helpers/linkOptions");
        var textOptions = require("../helpers/textOptions");
        var Alert = require("./Alert");
        var Paragraph = require("./Paragraph");
        var Anchor = function(_ComponentWithInlineEditing) {
            _inherits(Anchor, _ComponentWithInlineEditing);

            function Anchor() {
                _classCallCheck(this, Anchor);
                _get(Object.getPrototypeOf(Anchor.prototype), "constructor", this).call(this);
                this.inline = true;
                this.blacklist = ["link"];
                this.element = $("<a>");
                linkOptions.construct(this);
                textOptions.construct(this, {
                    includeAlignment: false,
                    includeNowrap: false
                });
                this.cssClasses.system = {}
            }
            _createClass(Anchor, [{
                key: "initialize",
                value: function initialize() {
                    var text = arguments.length <= 0 || arguments[0] === undefined ? "Link" : arguments[0];
                    var url = arguments.length <= 1 || arguments[1] === undefined ? "#" : arguments[1];
                    _get(Object.getPrototypeOf(Anchor.prototype), "initialize", this).call(this, text);
                    this.properties.url = url
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(c) {
                    return _get(Object.getPrototypeOf(Anchor.prototype), "canTakeChild", this).call(this, c) && !(c instanceof Anchor)
                }
            }, {
                key: "update",
                value: function update() {
                    var NavBar = require("./NavBar");
                    linkOptions.update(this);
                    textOptions.update(this);
                    _get(Object.getPrototypeOf(Anchor.prototype), "startUpdate", this).call(this);
                    if (this.hasParent(Alert)) {
                        this.element.addClass("alert-link")
                    }
                    if (this.parent instanceof NavBar || this.parent instanceof Paragraph && this.parent.parent instanceof NavBar) {
                        this.element.addClass("navbar-link")
                    }
                    return _get(Object.getPrototypeOf(Anchor.prototype), "finishUpdate", this).call(this)
                }
            }]);
            return Anchor
        }(ComponentWithInlineEditing);
        Anchor.possibleTargets = [{
            label: "Default",
            value: ""
        }, {
            label: "Blank",
            value: "_blank"
        }, {
            label: "Parent",
            value: "_parent"
        }, {
            label: "Top",
            value: "_top"
        }];
        Anchor.prettyName = "Link";
        module.exports = Anchor
    }, {
        "../helpers/linkOptions": 177,
        "../helpers/textOptions": 192,
        "./Alert": 19,
        "./ComponentWithInlineEditing": 40,
        "./NavBar": 96,
        "./Paragraph": 110
    }],
    21: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Article = function(_ComponentWithChildren) {
            _inherits(Article, _ComponentWithChildren);

            function Article() {
                _classCallCheck(this, Article);
                _get(Object.getPrototypeOf(Article.prototype), "constructor", this).call(this);
                this.element = $("<article>")
            }
            return Article
        }(ComponentWithChildren);
        module.exports = Article
    }, {
        "./ComponentWithChildren": 39
    }],
    22: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Aside = function(_ComponentWithChildren) {
            _inherits(Aside, _ComponentWithChildren);

            function Aside() {
                _classCallCheck(this, Aside);
                _get(Object.getPrototypeOf(Aside.prototype), "constructor", this).call(this);
                this.element = $("<aside>")
            }
            return Aside
        }(ComponentWithChildren);
        module.exports = Aside
    }, {
        "./ComponentWithChildren": 39
    }],
    23: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithInlineEditing = require("./ComponentWithInlineEditing");
        var Badge = function(_ComponentWithInlineEditing) {
            _inherits(Badge, _ComponentWithInlineEditing);

            function Badge() {
                _classCallCheck(this, Badge);
                _get(Object.getPrototypeOf(Badge.prototype), "constructor", this).call(this);
                this.inline = true;
                this.element = $("<span>");
                this.cssClasses.system = "badge"
            }
            _createClass(Badge, [{
                key: "canTakeChild",
                value: function canTakeChild(component) {
                    return _get(Object.getPrototypeOf(Badge.prototype), "canTakeChild", this).call(this, component) && !(component instanceof Badge)
                }
            }, {
                key: "initialize",
                value: function initialize() {
                    var txt = arguments.length <= 0 || arguments[0] === undefined ? "42" : arguments[0];
                    _get(Object.getPrototypeOf(Badge.prototype), "initialize", this).call(this, txt)
                }
            }]);
            return Badge
        }(ComponentWithInlineEditing);
        module.exports = Badge
    }, {
        "./ComponentWithInlineEditing": 40
    }],
    24: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var BlockquoteFooter = require("./BlockquoteFooter");
        var Paragraph = require("./Paragraph");
        var Blockquote = function(_ComponentWithChildren) {
            _inherits(Blockquote, _ComponentWithChildren);

            function Blockquote() {
                _classCallCheck(this, Blockquote);
                _get(Object.getPrototypeOf(Blockquote.prototype), "constructor", this).call(this);
                this.element = $("<blockquote>");
                this.defineProperties([{
                    id: "type",
                    label: "Type",
                    type: "select",
                    value: "",
                    options: Blockquote.possibleTypes
                }])
            }
            _createClass(Blockquote, [{
                key: "initialize",
                value: function initialize() {
                    var p = new Paragraph;
                    p.initialize("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.");
                    p.fixate();
                    this.insertFirst(p);
                    this.properties.showFooter = true;
                    this.insertLast(this.createOrSelectInstance(BlockquoteFooter))
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild() {
                    return false
                }
            }, {
                key: "focus",
                value: function focus() {
                    _get(Object.getPrototypeOf(Blockquote.prototype), "focus", this).call(this);
                    var bqOptions = this.getMainOptionsGroup();
                    bqOptions.add(this.createCheckBoxForSubComponent("showFooter", "Footer", BlockquoteFooter, function(parent, child) {
                        parent.insertLast(child)
                    }))
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = this.properties.type;
                    return _get(Object.getPrototypeOf(Blockquote.prototype), "update", this).call(this)
                }
            }]);
            return Blockquote
        }(ComponentWithChildren);
        Blockquote.possibleTypes = [{
            label: "Regular",
            value: ""
        }, {
            label: "Reverse",
            value: "blockquote-reverse"
        }];
        module.exports = Blockquote
    }, {
        "./BlockquoteFooter": 25,
        "./ComponentWithChildren": 39,
        "./Paragraph": 110
    }],
    25: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithInlineEditing = require("./ComponentWithInlineEditing");
        var BlockquoteFooter = function(_ComponentWithInlineEditing) {
            _inherits(BlockquoteFooter, _ComponentWithInlineEditing);

            function BlockquoteFooter() {
                _classCallCheck(this, BlockquoteFooter);
                _get(Object.getPrototypeOf(BlockquoteFooter.prototype), "constructor", this).call(this);
                this.element = $("<footer>")
            }
            _createClass(BlockquoteFooter, [{
                key: "initialize",
                value: function initialize() {
                    var txt = arguments.length <= 0 || arguments[0] === undefined ? "Someone famous" : arguments[0];
                    _get(Object.getPrototypeOf(BlockquoteFooter.prototype), "initialize", this).call(this, txt)
                }
            }]);
            return BlockquoteFooter
        }(ComponentWithInlineEditing);
        BlockquoteFooter.prettyName = "Blockquote Footer";
        module.exports = BlockquoteFooter
    }, {
        "./ComponentWithInlineEditing": 40
    }],
    26: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Body = function(_ComponentWithChildren) {
            _inherits(Body, _ComponentWithChildren);

            function Body() {
                _classCallCheck(this, Body);
                _get(Object.getPrototypeOf(Body.prototype), "constructor", this).call(this);
                this.element = $("<body>");
                this.fixate()
            }
            return Body
        }(ComponentWithChildren);
        module.exports = Body
    }, {
        "./ComponentWithChildren": 39
    }],
    27: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var BreadcrumbsItem = require("./BreadcrumbsItem");
        var Breadcrumbs = function(_ComponentWithChildren) {
            _inherits(Breadcrumbs, _ComponentWithChildren);

            function Breadcrumbs() {
                _classCallCheck(this, Breadcrumbs);
                _get(Object.getPrototypeOf(Breadcrumbs.prototype), "constructor", this).call(this);
                this.element = $("<ol>");
                this.cssClasses.system = "breadcrumb"
            }
            _createClass(Breadcrumbs, [{
                key: "initialize",
                value: function initialize() {
                    var bc1 = new BreadcrumbsItem;
                    bc1.initialize("Home");
                    bc1.properties.href = "#";
                    this.insertLast(bc1);
                    var bc2 = new BreadcrumbsItem;
                    bc2.initialize("Library");
                    bc2.properties.href = "#";
                    this.insertLast(bc2);
                    var bc3 = new BreadcrumbsItem;
                    bc3.initialize("Data");
                    bc3.properties.href = "#";
                    this.insertLast(bc3)
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(component) {
                    return component instanceof BreadcrumbsItem
                }
            }]);
            return Breadcrumbs
        }(ComponentWithChildren);
        Breadcrumbs.suggestedComponents = ["BreadcrumbsItem"];
        module.exports = Breadcrumbs
    }, {
        "./BreadcrumbsItem": 28,
        "./ComponentWithChildren": 39
    }],
    28: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Span = require("./Span");
        var linkOptions = require("../helpers/linkOptions");
        var BreadcrumbsItem = function(_ComponentWithChildren) {
            _inherits(BreadcrumbsItem, _ComponentWithChildren);

            function BreadcrumbsItem() {
                var _this = this;
                _classCallCheck(this, BreadcrumbsItem);
                _get(Object.getPrototypeOf(BreadcrumbsItem.prototype), "constructor", this).call(this);
                this.element = $("<li>");
                this.defineProperties([{
                    id: "active",
                    label: "Active",
                    type: "checkbox",
                    value: false
                }]);
                linkOptions.construct(this, "", function() {
                    return !_this.properties.active
                })
            }
            _createClass(BreadcrumbsItem, [{
                key: "initialize",
                value: function initialize(txt) {
                    var span = new Span;
                    span.initialize(txt);
                    span.fixate();
                    this.insertFirst(span)
                }
            }, {
                key: "canBeDroppedIn",
                value: function canBeDroppedIn(component) {
                    var Breadcrumbs = require("./Breadcrumbs");
                    return component instanceof Breadcrumbs
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = "";
                    if (this.properties.active) {
                        this.cssClasses.system = "active"
                    }
                    _get(Object.getPrototypeOf(BreadcrumbsItem.prototype), "startUpdate", this).call(this);
                    if (!this.properties.active) {
                        var a = document.createElement("a");
                        linkOptions.updateDOMNode(this, a);
                        this.element.children().appendTo(a);
                        this.element.append(a)
                    }
                    return _get(Object.getPrototypeOf(BreadcrumbsItem.prototype), "finishUpdate", this).call(this)
                }
            }]);
            return BreadcrumbsItem
        }(ComponentWithChildren);
        BreadcrumbsItem.prettyName = "Breadcrumbs Item";
        module.exports = BreadcrumbsItem
    }, {
        "../helpers/linkOptions": 177,
        "./Breadcrumbs": 27,
        "./ComponentWithChildren": 39,
        "./Span": 119
    }],
    29: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithInlineEditing = require("./ComponentWithInlineEditing");
        var htmlToInline = require("../helpers/htmlToInline");
        var SelectOption = require("../panes/SelectOption");
        var TextBoxOption = require("../panes/TextBoxOption");
        var Anchor = require("./Anchor");
        var Button = function(_ComponentWithInlineEditing) {
            _inherits(Button, _ComponentWithInlineEditing);

            function Button() {
                _classCallCheck(this, Button);
                _get(Object.getPrototypeOf(Button.prototype), "constructor", this).call(this);
                this.inline = true;
                this.element = $("<div>");
                this.blacklist = ["link"];
                var button = this;
                this.defineProperties([{
                    id: "type",
                    label: "Element",
                    type: "select",
                    value: "Button",
                    visible: function visible() {
                        return !button.isParentJustifiedButtonGroup()
                    },
                    options: ["Button", "Link"].map(function(t) {
                        return {
                            value: t,
                            label: t
                        }
                    })
                }, {
                    id: "href",
                    label: "Link URL",
                    type: "textbox",
                    value: "#",
                    visible: function visible() {
                        return button.shouldShowAsLink()
                    }
                }, {
                    id: "target",
                    label: "Link Target",
                    type: "select",
                    value: "",
                    options: Anchor.possibleTargets,
                    visible: function visible() {
                        return button.shouldShowAsLink()
                    }
                }, {
                    id: "buttonType",
                    label: "Button Type",
                    type: "select",
                    value: Button.buttonTypes[0].value,
                    options: Button.buttonTypes,
                    visible: function visible() {
                        return !button.shouldShowAsLink()
                    }
                }, {
                    id: "style",
                    label: "Style",
                    type: "select",
                    value: Button.buttonStyles[0].value,
                    options: Button.buttonStyles
                }, {
                    id: "size",
                    label: "Size",
                    type: "select",
                    value: "",
                    options: Button.buttonSizes
                }, {
                    id: "disabled",
                    label: "Disabled",
                    type: "checkbox",
                    value: false
                }, {
                    id: "active",
                    label: "Active",
                    type: "checkbox",
                    value: false
                }, {
                    id: "block",
                    label: "Block",
                    type: "checkbox",
                    value: false
                }])
            }
            _createClass(Button, [{
                key: "initialize",
                value: function initialize() {
                    var str = arguments.length <= 0 || arguments[0] === undefined ? "Button" : arguments[0];
                    _get(Object.getPrototypeOf(Button.prototype), "initialize", this).call(this, str)
                }
            }, {
                key: "isParentJustifiedButtonGroup",
                value: function isParentJustifiedButtonGroup() {
                    var ButtonGroup = require("./ButtonGroup");
                    if (this.parent instanceof ButtonGroup && this.parent.properties.justified) {
                        return true
                    }
                }
            }, {
                key: "shouldShowAsLink",
                value: function shouldShowAsLink() {
                    if (this.isParentJustifiedButtonGroup()) {
                        return true
                    }
                    return this.properties.type == "Link"
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(child) {
                    var SplitButton = require("./SplitButton");
                    return _get(Object.getPrototypeOf(Button.prototype), "canTakeChild", this).call(this, child) && !(child instanceof Button) && !(child instanceof SplitButton)
                }
            }, {
                key: "update",
                value: function update() {
                    var tmp;
                    delete this.attributes.role;
                    delete this.attributes.href;
                    delete this.attributes.target;
                    delete this.attributes.type;
                    delete this.attributes.disabled;
                    this.cssClasses.system = "btn " + this.properties.style;
                    if (this.shouldShowAsLink()) {
                        this.attributes.role = "button";
                        this.attributes.href = this.properties.href;
                        if (this.properties.target) {
                            this.attributes.target = this.properties.target
                        }
                        if (this.properties.disabled) {
                            this.cssClasses.system += " disabled"
                        }
                        tmp = $("<a>")
                    } else {
                        this.attributes.type = this.properties.buttonType;
                        if (this.properties.disabled) {
                            this.attributes.disabled = "disabled"
                        }
                        tmp = $("<button>")
                    }
                    if (this.properties.active) {
                        this.cssClasses.system += " active"
                    }
                    if (this.properties.block) {
                        this.cssClasses.system += " btn-block"
                    }
                    if (this.properties.size) {
                        this.cssClasses.system += " " + this.properties.size
                    }
                    this.element.replaceWith(tmp);
                    this.element = tmp;
                    return _get(Object.getPrototypeOf(Button.prototype), "update", this).call(this)
                }
            }]);
            return Button
        }(ComponentWithInlineEditing);
        Button.buttonSizes = [{
            label: "Large",
            value: "btn-lg"
        }, {
            label: "Default",
            value: ""
        }, {
            label: "Small",
            value: "btn-sm"
        }, {
            label: "Extra small",
            value: "btn-xs"
        }];
        Button.buttonStyles = [{
            label: "Default",
            value: "btn-default"
        }, {
            label: "Primary",
            value: "btn-primary"
        }, {
            label: "Success",
            value: "btn-success"
        }, {
            label: "Info",
            value: "btn-info"
        }, {
            label: "Warning",
            value: "btn-warning"
        }, {
            label: "Danger",
            value: "btn-danger"
        }, {
            label: "Link",
            value: "btn-link"
        }];
        Button.buttonTypes = [{
            label: "Button",
            value: "button"
        }, {
            label: "Submit",
            value: "submit"
        }, {
            label: "Reset",
            value: "reset"
        }];
        module.exports = Button
    }, {
        "../helpers/htmlToInline": 171,
        "../panes/SelectOption": 441,
        "../panes/TextBoxOption": 444,
        "./Anchor": 20,
        "./ButtonGroup": 30,
        "./ComponentWithInlineEditing": 40,
        "./SplitButton": 120
    }],
    30: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Button = require("./Button");
        var ButtonGroup = function(_ComponentWithChildren) {
            _inherits(ButtonGroup, _ComponentWithChildren);

            function ButtonGroup() {
                _classCallCheck(this, ButtonGroup);
                _get(Object.getPrototypeOf(ButtonGroup.prototype), "constructor", this).call(this);
                this.inline = true;
                this.attributes.role = "group";
                this.element = $("<div>");
                this.defineProperties([{
                    id: "justified",
                    label: "Justified",
                    type: "checkbox",
                    value: false
                }, {
                    id: "type",
                    label: "Type",
                    type: "select",
                    value: "btn-group",
                    options: ButtonGroup.possibleTypes
                }, {
                    id: "size",
                    label: "Size",
                    type: "select",
                    value: "",
                    options: ButtonGroup.possibleSizes
                }])
            }
            _createClass(ButtonGroup, [{
                key: "initialize",
                value: function initialize() {
                    var b = new Button;
                    b.initialize("Button 1");
                    this.insertLast(b);
                    b = new Button;
                    b.initialize("Button 2");
                    this.insertLast(b)
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(component) {
                    var Dropdown = require("./Dropdown");
                    return component instanceof Button || component instanceof Dropdown
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = this.properties.type;
                    if (this.properties.size) {
                        this.cssClasses.system += " " + this.properties.size
                    }
                    if (this.properties.justified) {
                        this.cssClasses.system += " btn-group-justified"
                    }
                    return _get(Object.getPrototypeOf(ButtonGroup.prototype), "update", this).call(this)
                }
            }]);
            return ButtonGroup
        }(ComponentWithChildren);
        ButtonGroup.possibleTypes = [{
            label: "Horizontal",
            value: "btn-group"
        }, {
            label: "Vertical",
            value: "btn-group-vertical"
        }];
        ButtonGroup.possibleSizes = [{
            label: "Small",
            value: "btn-group-sm"
        }, {
            label: "Default",
            value: ""
        }, {
            label: "Large",
            value: "btn-group-lg"
        }];
        ButtonGroup.prettyName = "Button Group";
        ButtonGroup.suggestedComponents = ["Button"];
        module.exports = ButtonGroup
    }, {
        "./Button": 29,
        "./ComponentWithChildren": 39,
        "./Dropdown": 43
    }],
    31: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Div = require("./Div");
        var ButtonGroup = require("./ButtonGroup");
        var ButtonToolbar = function(_Div) {
            _inherits(ButtonToolbar, _Div);

            function ButtonToolbar() {
                _classCallCheck(this, ButtonToolbar);
                _get(Object.getPrototypeOf(ButtonToolbar.prototype), "constructor", this).call(this);
                this.cssClasses.system = "btn-toolbar"
            }
            _createClass(ButtonToolbar, [{
                key: "initialize",
                value: function initialize() {
                    var b = new ButtonGroup;
                    b.initialize();
                    this.insertLast(b);
                    b = new ButtonGroup;
                    b.initialize();
                    this.insertLast(b)
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(component) {
                    return component instanceof ButtonGroup
                }
            }]);
            return ButtonToolbar
        }(Div);
        ButtonToolbar.prettyName = "Button Toolbar";
        ButtonToolbar.suggestedComponents = ["Button", "ButtonGroup"];
        module.exports = ButtonToolbar
    }, {
        "./ButtonGroup": 30,
        "./Div": 42
    }],
    32: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Paragraph = require("./Paragraph");
        var Caption = function(_Paragraph) {
            _inherits(Caption, _Paragraph);

            function Caption() {
                _classCallCheck(this, Caption);
                _get(Object.getPrototypeOf(Caption.prototype), "constructor", this).call(this);
                this.element = $("<caption>");
                this.fixate()
            }
            _createClass(Caption, [{
                key: "initialize",
                value: function initialize() {
                    _get(Object.getPrototypeOf(Caption.prototype), "initialize", this).call(this, "Table Caption")
                }
            }]);
            return Caption
        }(Paragraph);
        module.exports = Caption
    }, {
        "./Paragraph": 110
    }],
    33: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Component = require("./Component");
        var Caret = function(_Component) {
            _inherits(Caret, _Component);

            function Caret() {
                _classCallCheck(this, Caret);
                _get(Object.getPrototypeOf(Caret.prototype), "constructor", this).call(this);
                this.inline = true;
                this.cssClasses.system = "caret";
                this.element = $("<span>")
            }
            return Caret
        }(Component);
        module.exports = Caret
    }, {
        "./Component": 38
    }],
    34: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var RadioCheckHolderBase = require("./RadioCheckHolderBase");
        var InputCheckbox = require("./InputCheckbox");
        var CheckboxHolder = function(_RadioCheckHolderBase) {
            _inherits(CheckboxHolder, _RadioCheckHolderBase);

            function CheckboxHolder() {
                _classCallCheck(this, CheckboxHolder);
                _get(Object.getPrototypeOf(CheckboxHolder.prototype), "constructor", this).call(this);
                this.inlineClass = "checkbox-inline";
                this.regularClass = "checkbox";
                this.componentConstructor = InputCheckbox
            }
            _createClass(CheckboxHolder, [{
                key: "removeCheckbox",
                value: function removeCheckbox() {
                    return this.removeMainComponent()
                }
            }]);
            return CheckboxHolder
        }(RadioCheckHolderBase);
        CheckboxHolder.prettyName = "Checkbox Holder";
        module.exports = CheckboxHolder
    }, {
        "./InputCheckbox": 65,
        "./RadioCheckHolderBase": 112
    }],
    35: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Component = require("./Component");
        var Clearfix = function(_Component) {
            _inherits(Clearfix, _Component);

            function Clearfix() {
                _classCallCheck(this, Clearfix);
                _get(Object.getPrototypeOf(Clearfix.prototype), "constructor", this).call(this);
                this.cssClasses.system = "clearfix";
                this.element = $("<div>")
            }
            return Clearfix
        }(Component);
        module.exports = Clearfix
    }, {
        "./Component": 38
    }],
    36: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Component = require("./Component");
        var Close = function(_Component) {
            _inherits(Close, _Component);

            function Close() {
                _classCallCheck(this, Close);
                _get(Object.getPrototypeOf(Close.prototype), "constructor", this).call(this);
                this.inline = true;
                this.cssClasses.system = "close";
                this.element = $('<button type="button" aria-label="Close"><span aria-hidden="true">&times;</span></button>')
            }
            return Close
        }(Component);
        module.exports = Close
    }, {
        "./Component": 38
    }],
    37: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x3, _x4, _x5) {
            var _again = true;
            _function: while (_again) {
                var object = _x3,
                    property = _x4,
                    receiver = _x5;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x3 = parent;
                        _x4 = property;
                        _x5 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var ButtonOption = require("../panes/ButtonOption");
        var Column = function(_ComponentWithChildren) {
            _inherits(Column, _ComponentWithChildren);

            function Column() {
                _classCallCheck(this, Column);
                _get(Object.getPrototypeOf(Column.prototype), "constructor", this).call(this);
                this.element = $("<div>");
                this.defineGroups([{
                    id: "col-size",
                    label: "Column Size"
                }, {
                    id: "col-offset",
                    label: "Column Offset",
                    collapsed: true
                }, {
                    id: "col-push",
                    label: "Column Push",
                    collapsed: true
                }, {
                    id: "col-pull",
                    label: "Column Pull",
                    collapsed: true
                }]);
                var self = this;
                this.defineProperties(sizes.map(function(s) {
                    var options = [{
                        label: "None",
                        value: -1
                    }];
                    for (var i = 1; i <= 12; i++) {
                        options.push({
                            label: String(i),
                            value: i
                        })
                    }
                    return {
                        id: "col" + s.id,
                        label: s.title,
                        type: "select",
                        value: defaultWidthValues[s.id] || -1,
                        options: options,
                        group: "col-size"
                    }
                }));
                this.defineProperties(sizes.map(function(s) {
                    var options = [{
                        label: "None",
                        value: -1
                    }, {
                        label: "0",
                        value: 0
                    }];
                    for (var i = 1; i <= 12; i++) {
                        options.push({
                            label: String(i),
                            value: i
                        })
                    }
                    return {
                        id: "col" + s.id + "Offset",
                        label: s.title,
                        type: "select",
                        value: -1,
                        options: options,
                        group: "col-offset"
                    }
                }));
                this.defineProperties(sizes.map(function(s) {
                    var options = [{
                        label: "None",
                        value: -1
                    }, {
                        label: "0",
                        value: 0
                    }];
                    for (var i = 1; i <= 12; i++) {
                        options.push({
                            label: String(i),
                            value: i
                        })
                    }
                    return {
                        id: "col" + s.id + "Push",
                        label: s.title,
                        type: "select",
                        value: -1,
                        options: options,
                        group: "col-push"
                    }
                }));
                this.defineProperties(sizes.map(function(s) {
                    var options = [{
                        label: "None",
                        value: -1
                    }, {
                        label: "0",
                        value: 0
                    }];
                    for (var i = 1; i <= 12; i++) {
                        options.push({
                            label: String(i),
                            value: i
                        })
                    }
                    return {
                        id: "col" + s.id + "Pull",
                        label: s.title,
                        type: "select",
                        value: -1,
                        options: options,
                        group: "col-pull"
                    }
                }));
                this.defineActions([{
                    label: "Move Left",
                    action: this.moveLeftAction.bind(this),
                    showInContextMenu: true
                }, {
                    label: "Move Right",
                    action: this.moveRightAction.bind(this),
                    showInContextMenu: true
                }, {
                    label: "Widen",
                    action: this.widenAction.bind(this),
                    showInContextMenu: true
                }, {
                    label: "Narrow",
                    action: this.narrowAction.bind(this),
                    showInContextMenu: true
                }])
            }
            _createClass(Column, [{
                key: "moveLeftAction",
                value: function moveLeftAction() {
                    var size = app.canvas.getSize();
                    var column = this;
                    var oldOffset = column.properties["col" + size + "Offset"];
                    var offset = this.getDefaultValue("col", size, "Offset", 0);
                    if (offset == 0) {
                        return
                    }
                    var newOffset = offset - 1;
                    column.properties["col" + size + "Offset"] = newOffset;
                    column.update();
                    app.context.history.add({
                        name: "Change Column Offset",
                        undo: function undo() {
                            column.properties["col" + size + "Offset"] = oldOffset;
                            column.update()
                        },
                        redo: function redo() {
                            column.properties["col" + size + "Offset"] = newOffset;
                            column.update()
                        }
                    })
                }
            }, {
                key: "moveRightAction",
                value: function moveRightAction() {
                    var size = app.canvas.getSize();
                    var column = this;
                    var oldOffset = column.properties["col" + size + "Offset"];
                    var offset = this.getDefaultValue("col", size, "Offset", 0);
                    if (offset == 12) {
                        return
                    }
                    var newOffset = offset + 1;
                    column.properties["col" + size + "Offset"] = newOffset;
                    column.update();
                    app.context.history.add({
                        name: "Change Column Offset",
                        undo: function undo() {
                            column.properties["col" + size + "Offset"] = oldOffset;
                            column.update()
                        },
                        redo: function redo() {
                            column.properties["col" + size + "Offset"] = newOffset;
                            column.update()
                        }
                    })
                }
            }, {
                key: "widenAction",
                value: function widenAction() {
                    var size = app.canvas.getSize();
                    var column = this;
                    var oldWidth = column.properties["col" + size];
                    var width = this.getDefaultValue("col", size, "", 12);
                    if (width == 12) {
                        return
                    }
                    var newWidth = width + 1;
                    column.properties["col" + size] = newWidth;
                    column.update();
                    app.context.history.add({
                        name: "Change Column Width",
                        undo: function undo() {
                            column.properties["col" + size] = oldWidth;
                            column.update()
                        },
                        redo: function redo() {
                            column.properties["col" + size] = newWidth;
                            column.update()
                        }
                    })
                }
            }, {
                key: "narrowAction",
                value: function narrowAction() {
                    var size = app.canvas.getSize();
                    var column = this;
                    var oldWidth = column.properties["col" + size];
                    var width = this.getDefaultValue("col", size, "", 12);
                    if (width == 1) {
                        return
                    }
                    var newWidth = width - 1;
                    column.properties["col" + size] = newWidth;
                    column.update();
                    app.context.history.add({
                        name: "Change Column Width",
                        undo: function undo() {
                            column.properties["col" + size] = oldWidth;
                            column.update()
                        },
                        redo: function redo() {
                            column.properties["col" + size] = newWidth;
                            column.update()
                        }
                    })
                }
            }, {
                key: "getDefaultValue",
                value: function getDefaultValue(prefix, id) {
                    var postfix = arguments.length <= 2 || arguments[2] === undefined ? "" : arguments[2];
                    var def = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];
                    var val = def,
                        tmp;
                    for (var i = 0; i < sizesIncreasingOrder.length; i++) {
                        tmp = this.properties[prefix + sizesIncreasingOrder[i] + postfix];
                        if (tmp >= 0) {
                            val = tmp
                        }
                        if (sizesIncreasingOrder[i] == id) {
                            break
                        }
                    }
                    return Number(val)
                }
            }, {
                key: "canBeDroppedIn",
                value: function canBeDroppedIn(component) {
                    return _get(Object.getPrototypeOf(Column.prototype), "canBeDroppedIn", this).call(this, component) && !(component instanceof Column)
                }
            }, {
                key: "update",
                value: function update() {
                    var self = this;
                    this.cssClasses.system = "";
                    sizes.forEach(function(s) {
                        if (self.properties["col" + s.id] > 0) {
                            self.cssClasses.system += " col-" + s.id + "-" + self.properties["col" + s.id]
                        }
                        if (self.properties["col" + s.id + "Offset"] >= 0) {
                            self.cssClasses.system += " col-" + s.id + "-offset-" + self.properties["col" + s.id + "Offset"]
                        }
                        if (self.properties["col" + s.id + "Push"] >= 0) {
                            self.cssClasses.system += " col-" + s.id + "-push-" + self.properties["col" + s.id + "Push"]
                        }
                        if (self.properties["col" + s.id + "Pull"] >= 0) {
                            self.cssClasses.system += " col-" + s.id + "-pull-" + self.properties["col" + s.id + "Pull"]
                        }
                    });
                    return _get(Object.getPrototypeOf(Column.prototype), "update", this).call(this)
                }
            }]);
            return Column
        }(ComponentWithChildren);
        var sizes = [{
            id: "lg",
            title: "LG"
        }, {
            id: "md",
            title: "MD"
        }, {
            id: "sm",
            title: "SM"
        }, {
            id: "xs",
            title: "XS"
        }];
        var sizesIncreasingOrder = ["xs", "sm", "md", "lg"];
        var defaultWidthValues = {
            md: 12
        };
        module.exports = Column
    }, {
        "../panes/ButtonOption": 428,
        "./ComponentWithChildren": 39
    }],
    38: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x6, _x7, _x8) {
            var _again = true;
            _function: while (_again) {
                var object = _x6,
                    property = _x7,
                    receiver = _x8;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x6 = parent;
                        _x7 = property;
                        _x8 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Box = require("../base/Box");
        var TextBoxOption = require("../panes/TextBoxOption");
        var GroupOption = require("../panes/GroupOption");
        var BreadcrumbsOption = require("../panes/BreadcrumbsOption");
        var ButtonOption = require("../panes/ButtonOption");
        var CheckBoxOption = require("../panes/CheckBoxOption");
        var SelectOption = require("../panes/SelectOption");
        var InfoOption = require("../panes/InfoOption");
        var clone = require("clone");
        var duplicateComponentTree = require("../helpers/duplicateComponentTree");
        var getSmartProp = require("../helpers/getSmartProp");
        var Component = function(_Box) {
            _inherits(Component, _Box);

            function Component(props) {
                _classCallCheck(this, Component);
                _get(Object.getPrototypeOf(Component.prototype), "constructor", this).call(this);
                this.parent = null;
                this.element = null;
                this.inline = false;
                this.flags = {
                    canBeMoved: true,
                    canBeDeleted: true,
                    canBeDuplicated: true,
                    canBeEdited: false,
                    canBePackaged: true
                };
                this.cssClasses = {
                    system: "",
                    parent: ""
                };
                this.overrides = {
                    css: {},
                    ids: {}
                };
                this.attributes = {};
                this.attributesMask = {};
                this.properties = {};
                this.overrideBlacklist = [];
                this._instanceOptionGroups = [];
                this._instanceOptionProperties = [];
                this._instanceActions = [];
                this._dimensionsBeforeUpdate = {
                    x: 0,
                    y: 0,
                    width: 0,
                    height: 0
                };
                this.defineActions([{
                    label: "Add to Library",
                    action: this.addToLibraryAction.bind(this),
                    visible: [this.flags, "canBePackaged"],
                    showInContextMenu: true,
                    showInApplicationMenu: true,
                    weight: 95
                }, {
                    label: "Pull from Library",
                    action: this.pullFromLibraryAction.bind(this),
                    visible: this.isInstanceOfPackage.bind(this),
                    showInContextMenu: true,
                    showInApplicationMenu: true,
                    weight: 96
                }, {
                    label: "Push to Library",
                    action: this.pushToLibraryAction.bind(this),
                    visible: this.isInstanceOfPackage.bind(this),
                    showInContextMenu: true,
                    showInApplicationMenu: true,
                    weight: 97
                }, {
                    label: "Duplicate",
                    icon: "content_copy",
                    action: this.duplicateAction.bind(this),
                    visible: [this.flags, "canBeDuplicated"],
                    showInOptionsPane: true,
                    showInContextMenu: true,
                    showInApplicationMenu: true,
                    accelerator: "CmdOrCtrl+D",
                    weight: 98
                }, {
                    label: "Delete",
                    icon: "delete",
                    action: this.deleteAction.bind(this),
                    visible: [this.flags, "canBeDeleted"],
                    showInOptionsPane: true,
                    showInContextMenu: true,
                    showInApplicationMenu: true,
                    accelerator: "Delete",
                    weight: 99
                }, {
                    label: "More",
                    icon: "more_vert",
                    action: this.libraryMenuClick.bind(this),
                    visible: [this.flags, "canBePackaged"],
                    showInOptionsPane: true,
                    weight: 100
                }])
            }
            _createClass(Component, [{
                key: "libraryMenuClick",
                value: function libraryMenuClick(e) {
                    var elem = $(e.currentTarget);
                    var offset = elem.offset();
                    var editable = elem.closest(".smart-editable");
                    var self = this;
                    var items = [{
                        name: "Add to Library",
                        action: this.addToLibraryAction.bind(this)
                    }];
                    if (this.isInstanceOfPackage()) {
                        items.push({
                            name: "Pull from Library",
                            action: this.pullFromLibraryAction.bind(this)
                        }, {
                            name: "Push to Library",
                            action: this.pushToLibraryAction.bind(this)
                        })
                    }
                    app.contextMenu.show(offset.left + elem.outerWidth(), offset.top + elem.outerHeight(), items)
                }
            }, {
                key: "isInstanceOfPackage",
                value: function isInstanceOfPackage() {
                    return this.properties.packageID && app.packageExists(this.properties.packageID)
                }
            }, {
                key: "initialize",
                value: function initialize() {}
            }, {
                key: "fixate",
                value: function fixate() {
                    this.flags.canBeMoved = false;
                    this.flags.canBeDeleted = false;
                    this.flags.canBeDuplicated = false;
                    this.flags.canBePackaged = false
                }
            }, {
                key: "freeze",
                value: function freeze() {
                    this.fixate();
                    this.flags.canBeEdited = false
                }
            }, {
                key: "isLocked",
                value: function isLocked() {
                    return !this.flags.canBeMoved
                }
            }, {
                key: "getName",
                value: function getName() {
                    return this.constructor.getName()
                }
            }, {
                key: "getFullName",
                value: function getFullName() {
                    return this.getName() + (this.id ? "#" + this.id : "")
                }
            }, {
                key: "defineProperties",
                value: function defineProperties(arr) {
                    if (!Array.isArray(arr)) {
                        arr = [arr]
                    }
                    for (var i = 0; i < arr.length; i++) {
                        this.properties[arr[i].id] = arr[i].value;
                        this._instanceOptionProperties.push(arr[i])
                    }
                }
            }, {
                key: "deleteProperties",
                value: function deleteProperties(arr) {
                    if (!Array.isArray(arr)) {
                        arr = [arr]
                    }
                    for (var i = 0; i < arr.length; i++) {
                        var index = -1;
                        for (var j = 0; j < this._instanceOptionProperties.length; j++) {
                            if (arr[i] == this._instanceOptionProperties[j].id) {
                                index = j;
                                break
                            }
                        }
                        if (index >= 0) {
                            this._instanceOptionProperties.splice(index, 1);
                            delete this.properties[arr[i]]
                        }
                    }
                }
            }, {
                key: "defineGroups",
                value: function defineGroups(arr) {
                    if (!Array.isArray(arr)) {
                        arr = [arr]
                    }
                    Array.prototype.push.apply(this._instanceOptionGroups, arr)
                }
            }, {
                key: "defineActions",
                value: function defineActions(arr) {
                    if (!Array.isArray(arr)) {
                        arr = [arr]
                    }
                    Array.prototype.push.apply(this._instanceActions, arr);
                    this._instanceActions.sort(function(a, b) {
                        return (a.weight || 0) - (b.weight || 0)
                    })
                }
            }, {
                key: "getVisibleActions",
                value: function getVisibleActions() {
                    return this._instanceActions.filter(function(a) {
                        return getSmartProp(a.visible, true)
                    })
                }
            }, {
                key: "addToLibraryAction",
                value: function addToLibraryAction() {
                    var Package = require("../base/Package");
                    var component = this;
                    app.componentToPackageDialog.open({
                        component: this,
                        onSubmit: function onSubmit(obj) {
                            var up = new Package;
                            up.name = obj.name;
                            up.css = obj.css.map(function(c) {
                                return c.serialize()
                            });
                            up.fonts = clone(obj.fonts);
                            up.images = obj.images.map(function(img) {
                                return img.serialize()
                            });
                            up.components = component.serialize();
                            var cssAssociations = obj.css.map(function(c) {
                                return c.getAssociatedPackage()
                            });
                            var oldPackageAssociation = component.getAssociatedPackage();
                            redo();
                            app.context.history.add({
                                name: "Add To Library",
                                undo: undo,
                                redo: redo
                            });

                            function redo() {
                                obj.css.forEach(function(c) {
                                    return c.associateWithPackage(up)
                                });
                                component.associateWithPackage(up);
                                app.addPackage(up)
                            }

                            function undo() {
                                obj.css.forEach(function(c, index) {
                                    if (cssAssociations[index]) {
                                        c.associateWithPackage(cssAssociations[index])
                                    } else {
                                        c.removePackageAssociation()
                                    }
                                });
                                if (oldPackageAssociation) {
                                    component.associateWithPackage(oldPackageAssociation)
                                } else {
                                    component.removePackageAssociation()
                                }
                                app.removePackage(up)
                            }
                        }
                    })
                }
            }, {
                key: "pushToLibraryAction",
                value: function pushToLibraryAction() {
                    var pkg = this.getAssociatedPackage();
                    var component = this;
                    app.componentToPackageDialog.open({
                        component: this,
                        update: pkg,
                        onSubmit: function onSubmit(obj) {
                            var oldCSS = pkg.css,
                                oldFonts = pkg.fonts,
                                oldImages = pkg.images,
                                oldVersion = pkg.version,
                                oldComponents = pkg.components;
                            var newCSS = obj.css.map(function(c) {
                                    return c.serialize()
                                }),
                                newFonts = clone(obj.fonts),
                                newImages = clone(obj.images),
                                newVersion = Date.now(),
                                newComponents = component.serialize();
                            var cssAssociations = obj.css.map(function(c) {
                                return c.getAssociatedPackage()
                            });
                            redo();
                            app.context.history.add({
                                name: "Push To Library",
                                undo: undo,
                                redo: redo
                            });
                            if (!obj.updateAll) {
                                return
                            }
                            for (var i = 0; i < app.openedContexts.length; i++) {
                                (function() {
                                    var ctx = app.openedContexts[i];
                                    var op = ctx.updatePackageInstancesOperation(pkg);
                                    if (!op) return;
                                    op["do"]();
                                    refresh(ctx);
                                    ctx.history.add({
                                        name: "Change Component Instances From Library",
                                        undo: function undo() {
                                            op.undo();
                                            refresh(ctx)
                                        },
                                        redo: function redo() {
                                            op["do"]();
                                            refresh(ctx)
                                        }
                                    })
                                })()
                            }

                            function refresh(ctx) {
                                if (ctx.isActive()) {
                                    app.assetsPane.update();
                                    app.canvas.refreshCSS();
                                    app.canvas.update()
                                }
                            }

                            function redo() {
                                app.updatePackage(pkg, {
                                    css: newCSS,
                                    fonts: newFonts,
                                    images: newImages,
                                    version: newVersion,
                                    components: newComponents
                                });
                                obj.css.forEach(function(c) {
                                    return c.associateWithPackage(pkg)
                                });
                                component.associateWithPackage(pkg)
                            }

                            function undo() {
                                app.updatePackage(pkg, {
                                    css: oldCSS,
                                    fonts: oldFonts,
                                    images: oldImages,
                                    version: oldVersion,
                                    components: oldComponents
                                });
                                obj.css.forEach(function(c, index) {
                                    if (cssAssociations[index]) {
                                        c.associateWithPackage(cssAssociations[index])
                                    } else {
                                        c.removePackageAssociation()
                                    }
                                });
                                component.associateWithPackage(pkg)
                            }
                        }
                    })
                }
            }, {
                key: "pullFromLibraryAction",
                value: function pullFromLibraryAction() {
                    var pkg = this.getAssociatedPackage();
                    var context = this.context();
                    var component = this;
                    var op = context.updatePackageInstancesOperation(pkg, component);
                    op["do"]();
                    refresh(context);
                    context.history.add({
                        name: "Pull From Library",
                        undo: function undo() {
                            op.undo();
                            refresh(context)
                        },
                        redo: function redo() {
                            op["do"]();
                            refresh(context)
                        }
                    });

                    function refresh(ctx) {
                        if (ctx.isActive()) {
                            app.assetsPane.update();
                            app.canvas.refreshCSS();
                            app.canvas.update()
                        }
                    }
                }
            }, {
                key: "associateWithPackage",
                value: function associateWithPackage(pkg) {
                    this.properties.packageID = pkg.id;
                    this.properties.packageVersion = pkg.version
                }
            }, {
                key: "getAssociatedPackage",
                value: function getAssociatedPackage() {
                    if (!this.properties.packageID) return false;
                    return app.getPackageById(this.properties.packageID)
                }
            }, {
                key: "removePackageAssociation",
                value: function removePackageAssociation() {
                    this.properties.packageID = null;
                    this.properties.packageVersion = null
                }
            }, {
                key: "duplicateAction",
                value: function duplicateAction() {
                    var parent = this.parent;
                    var index = this.parent.childIndex(this) + 1;
                    var clone = duplicateComponentTree(this);
                    parent.insertAt(clone, index);
                    setTimeout(function() {
                        parent.update()
                    }, 0);
                    app.context.history.add({
                        name: "Duplicate Component",
                        undo: function undo() {
                            clone.remove();
                            parent.update()
                        },
                        redo: function redo() {
                            parent.insertAt(clone, index);
                            parent.update()
                        }
                    })
                }
            }, {
                key: "deleteAction",
                value: function deleteAction() {
                    var that = this;
                    var parent = that.parent;
                    var index = that.parent.childIndex(that);
                    that.remove();
                    parent.update();
                    app.context.history.add({
                        name: "Delete Component",
                        undo: function undo() {
                            parent.insertAt(that, index);
                            parent.update()
                        },
                        redo: function redo() {
                            that.remove();
                            parent.update()
                        }
                    })
                }
            }, {
                key: "updateID",
                value: function updateID() {
                    var newID = arguments.length <= 0 || arguments[0] === undefined ? "" : arguments[0];
                    var path = arguments.length <= 1 || arguments[1] === undefined ? "/" : arguments[1];
                    var status = this.isIDValid(newID, path);
                    if (status !== 1) {
                        return status
                    }
                    this.overrides.ids[path] = newID;
                    return 1
                }
            }, {
                key: "isIDValid",
                value: function isIDValid() {
                    var newID = arguments.length <= 0 || arguments[0] === undefined ? "" : arguments[0];
                    var path = arguments.length <= 1 || arguments[1] === undefined ? "/" : arguments[1];
                    newID = String(newID).trim();
                    if (this.overrides.ids[path] == newID) return 1;
                    if (!newID.length) {
                        this.overrides.ids[path] = "";
                        return 1
                    }
                    if (/^[_-]|[^_a-zA-Z0-9-]/.test(newID)) return -2;
                    try {
                        if (app.canvas.isThereDOMNodeWithID(newID)) return -3
                    } catch (e) {
                        return -2
                    }
                    return 1
                }
            }, {
                key: "setUniqueID",
                value: function setUniqueID() {
                    var prefix = this.constructor.name.toLowerCase().replace(/[auoe]/g, "").slice(0, 6);
                    return this.updateID(app.canvas.generateUniqueID(prefix))
                }
            }, {
                key: "context",
                value: function context() {
                    if (this._context) return this._context;
                    if (this.parent) {
                        return this._context = this.parent.context()
                    }
                }
            }, {
                key: "hoverDrag",
                value: function hoverDrag() {
                    var offset = arguments.length <= 0 || arguments[0] === undefined ? 10 : arguments[0];
                    if (this.parent) {
                        return this.parent.hoverDrag(offset)
                    }
                    return false
                }
            }, {
                key: "onDoubleClick",
                value: function onDoubleClick() {
                    return false
                }
            }, {
                key: "onMouseup",
                value: function onMouseup(e) {
                    return false
                }
            }, {
                key: "onMousedown",
                value: function onMousedown(e) {
                    if (!this.isFocused()) {
                        this.focus()
                    }
                    if (e.button == 2) {
                        this.onRightClick();
                        return
                    }
                    var now = Date.now();
                    if (this._lastClickTime && now - this._lastClickTime < 500) {
                        this.onDoubleClick(e)
                    } else {
                        this._lastClickTime = now
                    }
                }
            }, {
                key: "onRightClick",
                value: function onRightClick() {
                    this.showContextMenu();
                    if (!this.isFocused()) {
                        this.focus()
                    }
                }
            }, {
                key: "isChildElementBlacklisted",
                value: function isChildElementBlacklisted(node) {
                    var path = this.getPathForChildElement(node);
                    if (!path) return false;
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;
                    try {
                        for (var _iterator = this.overrideBlacklist[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var black = _step.value;
                            if (path == black || path.indexOf(black) === 0) {
                                return true
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator["return"]) {
                                _iterator["return"]()
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError
                            }
                        }
                    }
                    return false
                }
            }, {
                key: "findChildElementByPath",
                value: function findChildElementByPath(path) {
                    var node = this.element[0],
                        context = this.context(),
                        index, selector;
                    var reg = /\/(\d*)/g;
                    var indexRegex = /^\/(\d+)$/;
                    var parsed = path.match(reg);
                    if (parsed.length == 1 && parsed[0] == "/") return node;
                    for (var i = 0; i < parsed.length; i++) {
                        index = parsed[i].match(indexRegex)[1];
                        selector = null;
                        if (!node.children || !node.children[index]) {
                            return null
                        }
                        if (context.domToComponent.has(node.children[index])) {
                            return null
                        }
                        node = node.children[index]
                    }
                    return node
                }
            }, {
                key: "getPathForChildElement",
                value: function getPathForChildElement(element) {
                    var comp = this.context().findComponentForElement(element);
                    if (!comp || comp !== this) return null;
                    var indexes = [],
                        current = 0;
                    var node = element;
                    while (true) {
                        if (node == this.element[0] || !node) break;
                        if (node.previousSibling) {
                            node = node.previousSibling;
                            current++
                        } else {
                            indexes.unshift(current);
                            current = 0;
                            node = node.parentNode
                        }
                    }
                    return "/" + indexes.join("/")
                }
            }, {
                key: "showContextMenu",
                value: function showContextMenu() {
                    if (!this.parent) return;
                    var pos = app.mousePosition;
                    var options = this.getVisibleActions().filter(function(a) {
                        return a.showInContextMenu
                    }).map(function(a) {
                        return {
                            name: a.label,
                            action: a.action
                        }
                    });
                    options.unshift({
                        name: "Select Parent",
                        action: this.focusParent.bind(this)
                    });
                    options.unshift({
                        name: this.getName(),
                        type: "heading"
                    });
                    app.contextMenu.show(pos.x, pos.y, options)
                }
            }, {
                key: "getMainOptionsGroup",
                value: function getMainOptionsGroup() {
                    return app.optionsPane.getById(this.constructor.name.toLowerCase() + "-options")
                }
            }, {
                key: "isFocused",
                value: function isFocused() {
                    return this.context().isFocused(this)
                }
            }, {
                key: "focusParent",
                value: function focusParent() {
                    if (this.parent) {
                        this.parent.focus()
                    }
                }
            }, {
                key: "focusNextSibling",
                value: function focusNextSibling() {
                    if (this.parent) {
                        var next = this.parent.findNextComponentChild(this);
                        next && next.focus()
                    }
                }
            }, {
                key: "focusPreviousSibling",
                value: function focusPreviousSibling() {
                    if (this.parent) {
                        var prev = this.parent.findPreviousComponentChild(this);
                        prev && prev.focus()
                    }
                }
            }, {
                key: "focus",
                value: function focus() {
                    var that = this;
                    app.context.focusedComponent = this;
                    app.trigger("component-focused", this);
                    app.optionsPane.empty();
                    var infoOpt = new InfoOption({
                        id: "info-option",
                        component: this
                    });
                    app.optionsPane.add(infoOpt);
                    this.parent && this.parent.childFocus(this);
                    var defaultGroup = new GroupOption({
                        id: this.constructor.name.toLowerCase() + "-options",
                        label: this.getName() + " Options"
                    });
                    app.optionsPane.add(defaultGroup);
                    var prop, history, item;
                    for (var i = 0; i < this._instanceOptionGroups.length; i++) {
                        prop = this._instanceOptionGroups[i];
                        item = new GroupOption({
                            id: prop.id,
                            label: prop.label
                        });
                        app.optionsPane.add(item, prop.weight)
                    }
                    for (var i = 0; i < this._instanceOptionProperties.length; i++) {
                        prop = this._instanceOptionProperties[i];
                        history = prop.history;
                        if (!history) {
                            history = "Change " + this.getName() + " " + prop.label;
                            if (prop.type == "checkbox") history += " State"
                        }
                        item = null;
                        switch (prop.type) {
                            case "checkbox":
                                item = new CheckBoxOption({
                                    id: prop.id,
                                    label: prop.label,
                                    value: [this.properties, prop.id],
                                    visible: prop.visible,
                                    component: this,
                                    history: history
                                });
                                break;
                            case "textbox":
                                item = new TextBoxOption({
                                    id: prop.id,
                                    label: prop.label,
                                    value: [this.properties, prop.id],
                                    visible: prop.visible,
                                    component: this,
                                    history: history
                                });
                                break;
                            case "select":
                                item = new SelectOption({
                                    id: prop.id,
                                    label: prop.label,
                                    value: [this.properties, prop.id],
                                    visible: prop.visible,
                                    options: prop.options,
                                    component: this,
                                    history: history
                                });
                                break;
                            default:
                                throw new Error("Ivalid type")
                        }
                        if (prop.group) {
                            app.optionsPane.getById(prop.group).add(item, prop.weight)
                        } else {
                            defaultGroup.add(item, prop.weight)
                        }
                    }
                    app.optionsPane.add(new BreadcrumbsOption({
                        component: this
                    }), 0);
                    var actionsGroup = new GroupOption({
                        id: "actions",
                        label: ""
                    });
                    app.optionsPane.add(actionsGroup, 0);
                    for (var i = 0; i < this._instanceActions.length; i++) {
                        var obj = this._instanceActions[i];
                        if (obj.showInOptionsPane) {
                            actionsGroup.add(new ButtonOption({
                                icon: obj.icon,
                                text: obj.label,
                                onClick: obj.action,
                                visible: obj.visible
                            }), obj.weight)
                        }
                    }
                    var rv = new GroupOption({
                        id: "responsive-visibility",
                        label: "Responsive Visibility",
                        collapsed: true
                    });
                    app.optionsPane.add(rv, 70);
                    responsiveVisibilityClasses.forEach(function(cls) {
                        rv.add(new CheckBoxOption({
                            label: cls,
                            value: [that.properties, cls],
                            component: that,
                            history: "Modify " + that.getName() + " Visibility"
                        }))
                    });
                    var acc = new GroupOption({
                        id: "accessibility",
                        label: "Accessibility",
                        collapsed: true
                    });
                    app.optionsPane.add(acc, 80);
                    accessibilityClasses.forEach(function(cls) {
                        acc.add(new CheckBoxOption({
                            label: cls,
                            value: [that.properties, cls],
                            component: that,
                            history: "Modify " + that.getName() + " Accessibility"
                        }))
                    })
                }
            }, {
                key: "getCSSClasses",
                value: function getCSSClasses() {
                    var systemClasses = "";
                    if (typeof this.cssClasses.system == "string") {
                        systemClasses = this.cssClasses.system
                    } else {
                        for (var k in this.cssClasses.system)
                            if (this.cssClasses.system.hasOwnProperty(k)) {
                                systemClasses += this.cssClasses.system[k] + " "
                            }
                    }
                    return (systemClasses + " " + this.cssClasses.parent).trim().replace(/\s+/g, " ")
                }
            }, {
                key: "blur",
                value: function blur() {
                    app.optionsPane.empty();
                    app.context.focusedComponent = null;
                    this.onBlur()
                }
            }, {
                key: "onBlur",
                value: function onBlur() {
                    app.trigger("component-blurred", this)
                }
            }, {
                key: "remove",
                value: function remove() {
                    if (!this.parent) return;
                    if (this.isFocused()) {
                        if (this.context().isActive()) {
                            this.parent.focus()
                        } else {
                            this.context().focusedComponent = this.parent
                        }
                    }
                    this.parent.removeChild(this)
                }
            }, {
                key: "replaceWithOperation",
                value: function replaceWithOperation(component) {
                    var parent = this.parent;
                    var index = this.parent.childIndex(this);
                    var original = this;
                    return {
                        "do": function _do() {
                            original.remove();
                            parent.insertAt(component, index)
                        },
                        undo: function undo() {
                            component.remove();
                            parent.insertAt(original, index)
                        }
                    }
                }
            }, {
                key: "startDragging",
                value: function startDragging() {
                    app.canvas.markAsDragged(this);
                    app.overviewPane.markAsDragged(this)
                }
            }, {
                key: "stopDragging",
                value: function stopDragging() {
                    app.canvas.markAsNotDragged(this);
                    app.overviewPane.markAsNotDragged(this)
                }
            }, {
                key: "afterDuplicate",
                value: function afterDuplicate() {
                    if (this.id) {
                        var oldID = this.id;
                        this.setUniqueID();
                        app.changedIDMap[oldID] = this.id
                    }
                }
            }, {
                key: "isChildOf",
                value: function isChildOf(component) {
                    var parent = this;
                    while (parent = parent.parent) {
                        if (parent == component) {
                            return true
                        }
                    }
                    return false
                }
            }, {
                key: "hasParent",
                value: function hasParent(type) {
                    var parent = this;
                    while (parent = parent.parent) {
                        if (parent instanceof type) {
                            return true
                        }
                    }
                    return false
                }
            }, {
                key: "hasChild",
                value: function hasChild() {
                    return false
                }
            }, {
                key: "update",
                value: function update() {
                    this.startUpdate();
                    return this.finishUpdate()
                }
            }, {
                key: "startUpdate",
                value: function startUpdate() {
                    this.updateDimensionsBeforeUpdate();
                    this.parent && this.parent.childUpdate(this);
                    this.element.removeAttr("class");
                    var cssClasses = this.getCSSClasses();
                    if (cssClasses) {
                        this.element.attr("class", cssClasses)
                    }
                    for (var i = 0; i < accessibilityClasses.length; i++) {
                        var cls = accessibilityClasses[i];
                        if (this.properties[cls]) {
                            this.element[0].classList.add(cls)
                        }
                    }
                    for (var i = 0; i < responsiveVisibilityClasses.length; i++) {
                        var cls = responsiveVisibilityClasses[i];
                        if (this.properties[cls]) {
                            this.element[0].classList.add(cls)
                        }
                    }
                }
            }, {
                key: "finishUpdate",
                value: function finishUpdate() {
                    var attr;
                    for (var i = 0; i < this.element[0].attributes.length; i++) {
                        attr = this.element[0].attributes[i].name;
                        if (attr == "class") continue;
                        if (!this.attributes.hasOwnProperty(attr)) {
                            this.element[0].removeAttribute(attr)
                        }
                    }
                    for (var prop in this.attributes)
                        if (this.attributes.hasOwnProperty(prop)) {
                            if (this.element[0].getAttribute(prop) != this.attributes[prop]) {
                                this.element[0].setAttribute(prop, this.attributes[prop])
                            }
                        }
                    var css, id, node, tmp;
                    for (var path in this.overrides.ids)
                        if (this.overrides.ids.hasOwnProperty(path)) {
                            id = this.overrides.ids[path];
                            node = this.findChildElementByPath(path);
                            if (!node || !id) continue;
                            node.setAttribute("id", id)
                        }
                    for (var path in this.overrides.css)
                        if (this.overrides.css.hasOwnProperty(path)) {
                            css = this.overrides.css[path];
                            node = this.findChildElementByPath(path);
                            if (!node || !css) continue;
                            tmp = node.getAttribute("class");
                            if (tmp) {
                                css = tmp + " " + css
                            }
                            node.setAttribute("class", css.replace(/\s+/g, " ").trim())
                        }
                    app.trigger("component-updated", this);
                    return this.element
                }
            }, {
                key: "updateDimensions",
                value: function updateDimensions() {
                    var box = this.element[0].getBoundingClientRect();
                    _get(Object.getPrototypeOf(Component.prototype), "updateDimensions", this).call(this, box.left, box.top, box.width, box.height);
                    app.trigger("component-dimensions-updated", this)
                }
            }, {
                key: "updateDimensionsBeforeUpdate",
                value: function updateDimensionsBeforeUpdate() {
                    this._dimensionsBeforeUpdate.width = this.width;
                    this._dimensionsBeforeUpdate.height = this.height;
                    this._dimensionsBeforeUpdate.x = this.x;
                    this._dimensionsBeforeUpdate.y = this.y
                }
            }, {
                key: "haveDimensionsChanged",
                value: function haveDimensionsChanged() {
                    return this._dimensionsBeforeUpdate.width != this.width || this._dimensionsBeforeUpdate.height != this.height || this._dimensionsBeforeUpdate.x != this.x || this._dimensionsBeforeUpdate.y != this.y
                }
            }, {
                key: "serialize",
                value: function serialize() {
                    var obj = {};
                    obj["class"] = this.constructor.name;
                    obj.cssClasses = clone(this.cssClasses);
                    obj.overrides = clone(this.overrides);
                    obj.flags = clone(this.flags);
                    obj.properties = clone(this.properties);
                    return obj
                }
            }, {
                key: "unserialize",
                value: function unserialize(obj) {
                    if (obj.cssClasses) {
                        this.cssClasses = clone(obj.cssClasses)
                    }
                    if (obj.overrides) {
                        this.overrides = clone(obj.overrides)
                    }
                    if (obj.flags) {
                        this.flags = clone(obj.flags)
                    }
                    if (obj.properties) {
                        this.properties = clone(obj.properties)
                    }
                }
            }, {
                key: "canBeDroppedIn",
                value: function canBeDroppedIn(component) {
                    return component != this && !component.isChildOf(this)
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(component) {
                    return false
                }
            }, {
                key: "isVisible",
                value: function isVisible() {
                    return this.parent && this.x + this.width > 0 && this.x < app.context.canvasDimensions.width && this.y + this.height > 0 && this.y < app.context.canvasDimensions.height && (this.width > 0 || this.height > 0)
                }
            }], [{
                key: "getName",
                value: function getName() {
                    if (this.hasOwnProperty("prettyName")) return this.prettyName;
                    return this.name
                }
            }]);
            return Component
        }(Box);
        var responsiveVisibilityClasses = ["visible-xs-block", "visible-sm-block", "visible-md-block", "visible-lg-block", "visible-xs-inline", "visible-sm-inline", "visible-md-inline", "visible-lg-inline", "visible-xs-inline-block", "visible-sm-inline-block", "visible-md-inline-block", "visible-lg-inline-block", "hidden-xs", "hidden-sm", "hidden-md", "hidden-lg"];
        var accessibilityClasses = ["show", "hidden", "sr-only"];
        module.exports = Component
    }, {
        "../base/Box": 8,
        "../base/Package": 16,
        "../helpers/duplicateComponentTree": 161,
        "../helpers/getSmartProp": 170,
        "../panes/BreadcrumbsOption": 427,
        "../panes/ButtonOption": 428,
        "../panes/CheckBoxOption": 429,
        "../panes/GroupOption": 432,
        "../panes/InfoOption": 435,
        "../panes/SelectOption": 441,
        "../panes/TextBoxOption": 444,
        clone: 385
    }],
    39: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Component = require("./Component");
        var canParentTakeChild = require("../helpers/canParentTakeChild");
        var ComponentWithChildren = function(_Component) {
            _inherits(ComponentWithChildren, _Component);

            function ComponentWithChildren() {
                _classCallCheck(this, ComponentWithChildren);
                _get(Object.getPrototypeOf(ComponentWithChildren.prototype), "constructor", this).call(this);
                this.children = [];
                this._instanceCache = {}
            }
            _createClass(ComponentWithChildren, [{
                key: "childIndex",
                value: function childIndex(child) {
                    return this.children.indexOf(child)
                }
            }, {
                key: "findFirstComponentChild",
                value: function findFirstComponentChild() {
                    return this.children[0] || false
                }
            }, {
                key: "findNextComponentChild",
                value: function findNextComponentChild(current) {
                    var currentIndex = this.childIndex(current);
                    return this.children[currentIndex + 1] || false
                }
            }, {
                key: "findPreviousComponentChild",
                value: function findPreviousComponentChild(current) {
                    var currentIndex = this.childIndex(current);
                    return this.children[currentIndex - 1] || false
                }
            }, {
                key: "createOrSelectInstance",
                value: function createOrSelectInstance(type) {
                    var name = type.name;
                    if (this._instanceCache[name]) {
                        return this._instanceCache[name]
                    }
                    for (var i = 0; i < this.children.length; i++) {
                        if (this.children[i] instanceof type) {
                            this._instanceCache[name] = this.children[i];
                            return this.children[i]
                        }
                    }
                    this._instanceCache[name] = new type;
                    this._instanceCache[name].initialize();
                    this._instanceCache[name].fixate();
                    return this._instanceCache[name]
                }
            }, {
                key: "createCheckBoxForSubComponent",
                value: function createCheckBoxForSubComponent(property, title, type, insertAction) {
                    var CheckBoxOption = require("../panes/CheckBoxOption");
                    var component = this;
                    return new CheckBoxOption({
                        label: "Show " + title,
                        value: [component.properties, property],
                        onChange: function onChange(val, oldVal) {
                            var instance = component.createOrSelectInstance(type);
                            if (val) {
                                insertAction(component, instance);
                                component.update();
                                app.context.history.add({
                                    name: "Show " + title,
                                    undo: function undo() {
                                        component.properties[property] = oldVal;
                                        instance.remove();
                                        component.update()
                                    },
                                    redo: function redo() {
                                        component.properties[property] = val;
                                        insertAction(component, instance);
                                        component.update()
                                    }
                                })
                            } else {
                                var index = component.childIndex(instance);
                                instance.remove();
                                component.update();
                                app.context.history.add({
                                    name: "Hide " + title,
                                    undo: function undo() {
                                        component.properties[property] = oldVal;
                                        insertAction(component, instance, index);
                                        component.update()
                                    },
                                    redo: function redo() {
                                        component.properties[property] = val;
                                        instance.remove();
                                        component.update()
                                    }
                                })
                            }
                        }
                    })
                }
            }, {
                key: "hoverDrag",
                value: function hoverDrag() {
                    var offset = arguments.length <= 0 || arguments[0] === undefined ? 10 : arguments[0];
                    if (!canParentTakeChild(this, app.draggedComponent)) {
                        return this.parent && this.parent.hoverDrag(offset)
                    }
                    if (!this.isPointWithinOffset(app.canvas.mousePosition, offset) && this.parent) {
                        return this.parent.hoverDrag(offset)
                    }
                    app.canvas.highlight(this);
                    var children = this.children;
                    if (!children.length) {
                        app.dropCall = {
                            object: this,
                            method: "insertLast",
                            arguments: [app.draggedComponent]
                        };
                        return true
                    }
                    var minDistance = Infinity,
                        closest = null,
                        tmp;
                    for (var i = 0; i < children.length; i++) {
                        tmp = children[i].distanceToPoint(app.canvas.mousePosition);
                        if (tmp < minDistance) {
                            minDistance = tmp;
                            closest = children[i]
                        }
                    }
                    if (!closest) return;
                    var elementToTheLeft = false,
                        elementToTheRight = false,
                        elementToTheTop = false,
                        elementToTheBottom = false;
                    var leftDistance = Infinity,
                        bottomDistance = Infinity,
                        rightDistance = Infinity,
                        topDistance = Infinity;
                    var centerClosest = closest.x + closest.width / 2,
                        centerChild;
                    for (var i = 0; i < children.length; i++) {
                        if (children[i] === closest) continue;
                        centerChild = children[i].x + children[i].width / 2;
                        if (closest.onTheSameRowWith(children[i])) {
                            if (centerClosest >= centerChild && closest.x - children[i].x2 < 100) {
                                elementToTheLeft = true;
                                leftDistance = Math.min(Math.max(closest.x - children[i].x2, 0), leftDistance)
                            }
                            if (centerChild >= centerClosest && children[i].x - closest.x2 < 100) {
                                elementToTheRight = true;
                                rightDistance = Math.min(Math.max(children[i].x - closest.x2, 0), rightDistance)
                            }
                        } else if (closest.onTheSameColumnWith(children[i])) {
                            if (closest.y >= children[i].y2 && closest.y - children[i].y2 < 100) {
                                elementToTheTop = true;
                                topDistance = Math.min(closest.y - children[i].y2, topDistance)
                            }
                            if (children[i].y >= closest.y2 && children[i].y - closest.y2 < 100) {
                                elementToTheBottom = true;
                                bottomDistance = Math.min(children[i].y - closest.y2, bottomDistance)
                            }
                        }
                    }
                    var hoverOffsetX = 0;
                    var hoverOffsetY = 0;
                    app.dropCall = {
                        object: this,
                        method: null,
                        arguments: null
                    };
                    if (closest.distanceToPoint(app.canvas.mousePosition) == 0) {
                        hoverOffsetX = Math.min(closest.width / 3, 40);
                        hoverOffsetY = Math.min(closest.height / 3, 40)
                    }
                    if (app.canvas.mousePosition.x <= closest.x + hoverOffsetX) {
                        app.dropCall.method = "insertBefore";
                        app.dropCall.arguments = [app.draggedComponent, closest];
                        if (elementToTheLeft) {
                            app.canvas.drawVerticalLine(closest.x - leftDistance / 2, closest.y, closest.height, "left right")
                        } else {
                            app.canvas.drawVerticalLine(closest.x, closest.y, closest.height, "left")
                        }
                    } else if (app.canvas.mousePosition.x >= closest.x2 - hoverOffsetX) {
                        app.dropCall.method = "insertAfter";
                        app.dropCall.arguments = [app.draggedComponent, closest];
                        if (elementToTheRight) {
                            app.canvas.drawVerticalLine(closest.x2 + rightDistance / 2, closest.y, closest.height, "left right")
                        } else {
                            app.canvas.drawVerticalLine(closest.x2, closest.y, closest.height, "right")
                        }
                    } else if (app.canvas.mousePosition.y <= closest.y + hoverOffsetY) {
                        app.dropCall.method = "insertBefore";
                        app.dropCall.arguments = [app.draggedComponent, closest];
                        if (elementToTheTop) {
                            app.canvas.drawHorizontalLine(closest.x, closest.y - topDistance / 2, closest.width, "top bottom")
                        } else {
                            app.canvas.drawHorizontalLine(closest.x, closest.y, closest.width, "top")
                        }
                    } else if (app.canvas.mousePosition.y >= closest.y2 - hoverOffsetY) {
                        app.dropCall.method = "insertAfter";
                        app.dropCall.arguments = [app.draggedComponent, closest];
                        if (elementToTheBottom) {
                            app.canvas.drawHorizontalLine(closest.x, closest.y2 + bottomDistance / 2, closest.width, "top bottom")
                        } else {
                            app.canvas.drawHorizontalLine(closest.x, closest.y2, closest.width, "bottom")
                        }
                    } else {
                        app.dropCall = null
                    }
                    return true
                }
            }, {
                key: "hasChild",
                value: function hasChild(type) {
                    for (var i = 0; i < this.children.length; i++) {
                        if (this.children[i] instanceof type) return true;
                        if (this.children[i].hasChild(type)) return true
                    }
                    return false
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(component) {
                    return true
                }
            }, {
                key: "insertFirst",
                value: function insertFirst(component) {
                    component = this.drop(component);
                    this.adoptChild(component);
                    this.children.unshift(component);
                    return true
                }
            }, {
                key: "insertLast",
                value: function insertLast(component) {
                    component = this.drop(component);
                    this.adoptChild(component);
                    this.children.push(component);
                    return true
                }
            }, {
                key: "insertBefore",
                value: function insertBefore(component, componentToInsertBefore) {
                    if (component === componentToInsertBefore) {
                        return true
                    }
                    var index = this.childIndex(componentToInsertBefore);
                    if (index == -1) return false;
                    component = this.drop(component);
                    this.adoptChild(component);
                    this.children.splice(this.children.indexOf(componentToInsertBefore), 0, component);
                    return true
                }
            }, {
                key: "insertAfter",
                value: function insertAfter(component, componentToInsertAfter) {
                    if (component === componentToInsertAfter) {
                        return true
                    }
                    var index = this.childIndex(componentToInsertAfter);
                    if (index == -1) return false;
                    component = this.drop(component);
                    this.adoptChild(component);
                    this.children.splice(this.children.indexOf(componentToInsertAfter) + 1, 0, component);
                    return true
                }
            }, {
                key: "insertAt",
                value: function insertAt(component, index) {
                    if (index > this.children.length) {
                        return false
                    }
                    component = this.drop(component);
                    this.adoptChild(component);
                    this.children.splice(index, 0, component);
                    return true
                }
            }, {
                key: "removeChild",
                value: function removeChild(component) {
                    component = this.undrop(component);
                    if (this.children.length == 0) return false;
                    var index = this.children.indexOf(component);
                    if (index == -1) return false;
                    this.children.splice(index, 1);
                    if (component.parent) {
                        component.parent = null
                    }
                    return true
                }
            }, {
                key: "adoptChild",
                value: function adoptChild(component) {
                    if (component.parent) {
                        component.parent.removeChild(component)
                    }
                    component.parent = this;
                    return true
                }
            }, {
                key: "childUpdate",
                value: function childUpdate() {}
            }, {
                key: "childFocus",
                value: function childFocus() {}
            }, {
                key: "beforeDrop",
                value: function beforeDrop() {
                    return false
                }
            }, {
                key: "drop",
                value: function drop(component) {
                    return component
                }
            }, {
                key: "undrop",
                value: function undrop(component) {
                    return component
                }
            }, {
                key: "remove",
                value: function remove() {
                    if (this.context().focusedComponent && this.context().focusedComponent.isChildOf(this)) {
                        if (this.context().isActive()) {
                            app.canvas.html.body.focus()
                        } else {
                            this.context().focusedComponent = this.context().html.body
                        }
                    }
                    _get(Object.getPrototypeOf(ComponentWithChildren.prototype), "remove", this).call(this)
                }
            }, {
                key: "startUpdate",
                value: function startUpdate() {
                    this.element[0].innerHTML = "";
                    var fragment = document.createDocumentFragment();
                    if (this.children.length) {
                        for (var i = 0; i < this.children.length; i++) {
                            fragment.appendChild(this.children[i].update()[0])
                        }
                    }
                    this.element[0].appendChild(fragment);
                    _get(Object.getPrototypeOf(ComponentWithChildren.prototype), "startUpdate", this).call(this)
                }
            }, {
                key: "updateDimensions",
                value: function updateDimensions() {
                    _get(Object.getPrototypeOf(ComponentWithChildren.prototype), "updateDimensions", this).call(this);
                    this.children.forEach(function(child) {
                        return child.updateDimensions()
                    })
                }
            }, {
                key: "serialize",
                value: function serialize() {
                    var obj = _get(Object.getPrototypeOf(ComponentWithChildren.prototype), "serialize", this).call(this);
                    obj.children = this.children.map(function(c) {
                        return c.serialize()
                    });
                    return obj
                }
            }]);
            return ComponentWithChildren
        }(Component);
        module.exports = ComponentWithChildren
    }, {
        "../helpers/canParentTakeChild": 154,
        "../panes/CheckBoxOption": 429,
        "./Component": 38
    }],
    40: [function(require, module, exports) {
        "use strict";
        var _slicedToArray = function() {
            function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = undefined;
                try {
                    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                        _arr.push(_s.value);
                        if (i && _arr.length === i) break
                    }
                } catch (err) {
                    _d = true;
                    _e = err
                } finally {
                    try {
                        if (!_n && _i["return"]) _i["return"]()
                    } finally {
                        if (_d) throw _e
                    }
                }
                return _arr
            }
            return function(arr, i) {
                if (Array.isArray(arr)) {
                    return arr
                } else if (Symbol.iterator in Object(arr)) {
                    return sliceIterator(arr, i)
                } else {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance")
                }
            }
        }();
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x3, _x4, _x5) {
            var _again = true;
            _function: while (_again) {
                var object = _x3,
                    property = _x4,
                    receiver = _x5;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x3 = parent;
                        _x4 = property;
                        _x5 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Component = require("./Component");
        var InlineWrapper = require("./InlineWrapper");
        var InlineCharacter = require("./InlineCharacter");
        var inlineToHTML = require("../helpers/inlineToHTML");
        var inlineToDOM = require("../helpers/inlineToDOM");
        var inlineCompare = require("../helpers/inlineCompare");
        var htmlToInline = require("../helpers/htmlToInline");
        var htmlToText = require("../helpers/htmlToText");
        var canParentTakeChild = require("../helpers/canParentTakeChild");
        var ButtonOption = require("../panes/ButtonOption");
        var keyChecker = require("../helpers/keyChecker");
        var ComponentWithInlineEditing = function(_ComponentWithChildren) {
            _inherits(ComponentWithInlineEditing, _ComponentWithChildren);

            function ComponentWithInlineEditing(content) {
                _classCallCheck(this, ComponentWithInlineEditing);
                _get(Object.getPrototypeOf(ComponentWithInlineEditing.prototype), "constructor", this).call(this);
                if (content) {
                    this.children = htmlToInline(content)
                }
                this.element = $();
                this.flags.canBeEdited = true;
                this.caretIndex = 0;
                this.isInlineEditingActivated = false;
                this.caretPosition = "before";
                this._numberOfClicks = 1;
                this._lastClickedCharIndex = 0;
                this.contextCache = new WeakMap;
                this.blacklist = [];
                this.defineActions({
                    label: "Edit",
                    icon: "edit",
                    visible: this.isVisible.bind(this),
                    action: this.activateInlineEditingAndMoveCaretToEnd.bind(this),
                    showInOptionsPane: true,
                    showInContextMenu: true,
                    showInApplicationMenu: true
                })
            }
            _createClass(ComponentWithInlineEditing, [{
                key: "initialize",
                value: function initialize() {
                    var str = arguments.length <= 0 || arguments[0] === undefined ? "Text" : arguments[0];
                    this.children = htmlToInline(str)
                }
            }, {
                key: "setContent",
                value: function setContent(str) {
                    this.children = htmlToInline(str)
                }
            }, {
                key: "getContent",
                value: function getContent(content) {
                    return inlineToHTML(this.children)
                }
            }, {
                key: "childIndex",
                value: function childIndex(child) {
                    for (var i = 0; i < this.children.length; i++) {
                        if (this.children[i] instanceof InlineWrapper && this.children[i].component === child) {
                            return i
                        }
                    }
                    return -1
                }
            }, {
                key: "findFirstComponentChild",
                value: function findFirstComponentChild() {
                    for (var i = 0; i < this.children.length; i++) {
                        if (this.children[i] instanceof InlineWrapper) {
                            return this.children[i].component
                        }
                    }
                    return false
                }
            }, {
                key: "findNextComponentChild",
                value: function findNextComponentChild(current) {
                    var currentIndex = this.childIndex(current);
                    for (var i = currentIndex + 1; i < this.children.length; i++) {
                        if (this.children[i] instanceof InlineWrapper) {
                            return this.children[i].component
                        }
                    }
                    return false
                }
            }, {
                key: "findPreviousComponentChild",
                value: function findPreviousComponentChild(current) {
                    var currentIndex = this.childIndex(current);
                    for (var i = currentIndex - 1; i >= 0; i--) {
                        if (this.children[i] instanceof InlineWrapper) {
                            return this.children[i].component
                        }
                    }
                    return false
                }
            }, {
                key: "findWrapperForComponent",
                value: function findWrapperForComponent(component) {
                    if (!component instanceof Component) return false;
                    return this.children[this.childIndex(component)] || false
                }
            }, {
                key: "copyChildrenFrom",
                value: function copyChildrenFrom(other) {
                    this.children.length = 0;
                    this.children.push.apply(this.children, other.children.map(function(c) {
                        return c.clone()
                    }))
                }
            }, {
                key: "showContextMenu",
                value: function showContextMenu() {
                    if (this.isInlineEditingActivated) {
                        return false
                    }
                    _get(Object.getPrototypeOf(ComponentWithInlineEditing.prototype), "showContextMenu", this).call(this)
                }
            }, {
                key: "isChildElementBlacklisted",
                value: function isChildElementBlacklisted(node) {
                    return node != this.element[0]
                }
            }, {
                key: "hoverDrag",
                value: function hoverDrag() {
                    var offset = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
                    if (!canParentTakeChild(this, app.draggedComponent)) {
                        return this.parent && this.parent.hoverDrag(offset)
                    }
                    if (!this.isPointWithinOffset(app.canvas.mousePosition, offset) && this.parent) {
                        return this.parent.hoverDrag(offset)
                    }
                    app.canvas.highlight(this);
                    app.dropCall = {
                        object: this,
                        method: null,
                        arguments: null
                    };
                    var index = this.children.indexOf(app.context.hoveredInlineElement);
                    var offset = 0;
                    if (app.draggedComponent.isChildOf(this)) {
                        var childIndex = this.childIndex(app.draggedComponent);
                        if (childIndex <= index || index == -1) {
                            offset = -1
                        }
                    }
                    if (app.context.hoveredInlineElement && index != -1) {
                        var characterOffset = app.context.hoveredInlineElement.element.offset(),
                            characterWidth = app.context.hoveredInlineElement.element.outerWidth(),
                            characterHeight = app.context.hoveredInlineElement.element.outerHeight();
                        if (characterOffset.left + characterWidth / 2 >= app.canvas.mousePosition.x) {
                            app.dropCall.method = "insertAt";
                            app.dropCall.arguments = [app.draggedComponent, index + offset];
                            app.canvas.drawVerticalLine(characterOffset.left, characterOffset.top, characterHeight)
                        } else {
                            app.dropCall.method = "insertAt";
                            app.dropCall.arguments = [app.draggedComponent, index + 1 + offset];
                            app.canvas.drawVerticalLine(characterOffset.left + characterWidth, characterOffset.top, characterHeight)
                        }
                    } else {
                        app.dropCall.method = "insertAt";
                        app.dropCall.arguments = [app.draggedComponent, this.children.length + offset]
                    }
                    return true
                }
            }, {
                key: "drop",
                value: function drop(component) {
                    if (component instanceof InlineWrapper || component instanceof InlineCharacter) {
                        return component
                    }
                    this.adoptChild(component);
                    return new InlineWrapper(component)
                }
            }, {
                key: "undrop",
                value: function undrop(component) {
                    return this.findWrapperForComponent(component) || component
                }
            }, {
                key: "insertAt",
                value: function insertAt(component, index) {
                    var result = _get(Object.getPrototypeOf(ComponentWithInlineEditing.prototype), "insertAt", this).call(this, component, index);
                    if (result && index - 1 > 0) {
                        var wrapper = this.children[index];
                        wrapper.copyStyles(this.children[index - 1])
                    }
                    return result
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(child) {
                    return !!child.inline
                }
            }, {
                key: "hasChild",
                value: function hasChild(type) {
                    for (var i = 0; i < this.children.length; i++) {
                        if (!(this.children[i] instanceof InlineWrapper)) {
                            continue
                        }
                        if (this.children[i].component instanceof type) return true;
                        if (this.children[i].component.hasChild(type)) return true
                    }
                    return false
                }
            }, {
                key: "onDoubleClick",
                value: function onDoubleClick() {
                    if (!this.flags.canBeEdited) return false;
                    if (!this.isInlineEditingActivated) {
                        this.placeCaretNearClosestElement();
                        this.activateInlineEditing();
                        app.inlineEditingBar.matchCharacterStyles(this.children[this.caretIndex])
                    }
                }
            }, {
                key: "onBlur",
                value: function onBlur() {
                    _get(Object.getPrototypeOf(ComponentWithInlineEditing.prototype), "onBlur", this).call(this);
                    this.commit()
                }
            }, {
                key: "placeCaretNearClosestElement",
                value: function placeCaretNearClosestElement() {
                    if (app.context.hoveredInlineElement) {
                        var _hoveredInlineElementToPosition = this.hoveredInlineElementToPosition();
                        var _hoveredInlineElementToPosition2 = _slicedToArray(_hoveredInlineElementToPosition, 2);
                        this.caretPosition = _hoveredInlineElementToPosition2[0];
                        this.caretIndex = _hoveredInlineElementToPosition2[1]
                    }
                }
            }, {
                key: "hoveredInlineElementToPosition",
                value: function hoveredInlineElementToPosition() {
                    var index = this.children.indexOf(app.context.hoveredInlineElement);
                    if (index == -1) {
                        return ["before", 0]
                    }
                    app.context.hoveredInlineElement.updateDimensionsIfNeeded();
                    var characterOffset = app.context.hoveredInlineElement.element.offset(),
                        characterWidth = app.context.hoveredInlineElement.element.outerWidth();
                    if (characterOffset.left + characterWidth / 2 >= app.canvas.mousePosition.x) {
                        if (this.isFirstOfLine(index)) {
                            return ["before", index]
                        } else {
                            return ["after", this.findPrevious(index)]
                        }
                    } else {
                        return ["after", index]
                    }
                }
            }, {
                key: "onMousedown",
                value: function onMousedown(e) {
                    _get(Object.getPrototypeOf(ComponentWithInlineEditing.prototype), "onMousedown", this).call(this, e);
                    if (this.isInlineEditingActivated) {
                        var resetClicks = function resetClicks() {
                            that._numberOfClicks = 1;
                            that._lastClickedCharIndex = -1
                        };
                        this.placeCaretNearClosestElement();
                        var startIndex = this.caretIndex,
                            startPosition = this.caretPosition;
                        var that = this;
                        if (app.context.hoveredInlineElement && this._lastClickedCharIndex == this.caretIndex) {
                            this._numberOfClicks++
                        } else {
                            resetClicks();
                            this._lastClickedCharIndex = this.caretIndex
                        }
                        if (this.children[this.caretIndex]) {
                            if (this._numberOfClicks == 1) {
                                this.clearSelection();
                                app.inlineEditingBar.matchCharacterStyles(this.children[this.caretIndex]);
                                this.drawCaret()
                            } else if (this._numberOfClicks == 2) {
                                var _findBoundariesOfCurrentWord = this.findBoundariesOfCurrentWord(this.caretIndex);
                                var _findBoundariesOfCurrentWord2 = _slicedToArray(_findBoundariesOfCurrentWord, 2);
                                var closestStart = _findBoundariesOfCurrentWord2[0];
                                var closestEnd = _findBoundariesOfCurrentWord2[1];
                                this.makeSelection(closestStart, closestEnd)
                            } else if (this._numberOfClicks >= 3) {
                                this.selectEntireLine()
                            }
                        }
                        clearTimeout(this._clickTimeout);
                        this._clickTimeout = setTimeout(resetClicks, 400);
                        app.on("mousemove.inline-editing", function() {
                            if (!that.isPointWithin(app.canvas.mousePosition)) return;
                            var _that$hoveredInlineElementToPosition = that.hoveredInlineElementToPosition();
                            var _that$hoveredInlineElementToPosition2 = _slicedToArray(_that$hoveredInlineElementToPosition, 2);
                            that.caretPosition = _that$hoveredInlineElementToPosition2[0];
                            that.caretIndex = _that$hoveredInlineElementToPosition2[1];
                            var _that$rangeToIndexes = that.rangeToIndexes(startIndex, startPosition, that.caretIndex, that.caretPosition);
                            var _that$rangeToIndexes2 = _slicedToArray(_that$rangeToIndexes, 2);
                            var start = _that$rangeToIndexes2[0];
                            var end = _that$rangeToIndexes2[1];
                            that.makeSelection(start, end)
                        });
                        app.on("mouseup.inline-editing", function() {
                            app.off(".inline-editing")
                        })
                    }
                }
            }, {
                key: "selectEntireLine",
                value: function selectEntireLine() {
                    var startOfLine = this.findStartOfLine(this.caretIndex);
                    var endOfLine = this.findEndOfLine(this.caretIndex);
                    if (startOfLine !== false && endOfLine !== false) {
                        this.makeSelection(startOfLine, endOfLine)
                    }
                }
            }, {
                key: "selectAll",
                value: function selectAll() {
                    if (this.children.length) {
                        this.makeSelection(0, this.children.length - 1)
                    }
                }
            }, {
                key: "keydownHandler",
                value: function keydownHandler(e) {
                    var old_caret_index = this.caretIndex;
                    var old_caret_position = this.caretPosition;
                    var movement = false;
                    var self = this;
                    if (e.which == 38 || e.which == 40) {
                        if (shouldClearSelection()) {
                            var selection = this.getSelection();
                            if (e.which == 38) {
                                this.caretPosition = selection.startPosition;
                                this.caretIndex = selection.startIndex
                            } else {
                                this.caretPosition = selection.endPosition;
                                this.caretIndex = selection.endIndex
                            }
                            this.clearSelection()
                        }
                        var elements = null;
                        if (e.which == 38) {
                            elements = this.findPreviousLine(this.caretIndex)
                        } else {
                            elements = this.findNextLine(this.caretIndex)
                        }
                        if (elements !== false) {
                            var currentLeftOffset = this.calcCaretPosition().left;
                            var min = Infinity,
                                closestElement = null;
                            for (var i = 0; i < elements.length; i++) {
                                if (Math.abs(currentLeftOffset - (elements[i].x + elements[i].width / 2)) < min) {
                                    min = Math.abs(currentLeftOffset - (elements[i].x + elements[i].width / 2));
                                    closestElement = elements[i]
                                }
                            }
                            if (currentLeftOffset < closestElement.x + closestElement.width / 2) {
                                if (closestElement == elements[0]) {
                                    this.caretIndex = this.children.indexOf(closestElement);
                                    this.caretPosition = "before"
                                } else {
                                    this.caretIndex = this.children.indexOf(closestElement) - 1;
                                    this.caretPosition = "after"
                                }
                            } else {
                                this.caretIndex = this.children.indexOf(closestElement);
                                this.caretPosition = "after"
                            }
                            movement = true
                        }
                        e.preventDefault()
                    } else if (e.which == 37 && !e.metaKey) {
                        if (shouldClearSelection()) {
                            var selection = this.getSelection();
                            this.caretPosition = selection.startPosition;
                            this.caretIndex = selection.startIndex;
                            return clearAndDraw()
                        }
                        movement = true;
                        if (e.ctrlKey || e.altKey) {
                            var closestStartOfWord = false;
                            if (this.caretPosition == "before") {
                                var previous = this.findPrevious(this.caretIndex);
                                if (previous !== false) {
                                    closestStartOfWord = this.findClosestStartOfWord(previous)
                                }
                            } else {
                                closestStartOfWord = this.findClosestStartOfWord(this.caretIndex)
                            }
                            if (closestStartOfWord === false) {
                                return clearAndDraw()
                            }
                            if (this.isFirstOfLine(closestStartOfWord)) {
                                this.caretIndex = closestStartOfWord;
                                this.caretPosition = "before"
                            } else {
                                this.caretIndex = this.findPrevious(closestStartOfWord);
                                this.caretPosition = "after"
                            }
                        } else if (this.isFirstOfLine(this.caretIndex)) {
                            if (this.caretPosition == "after") {
                                this.caretPosition = "before"
                            } else {
                                var previous = this.findEndOfPreviousLine(this.caretIndex);
                                if (previous !== false) {
                                    this.caretPosition = "after";
                                    this.caretIndex = previous
                                } else {
                                    movement = false
                                }
                            }
                        } else {
                            this.caretPosition = "after";
                            this.caretIndex = this.findPrevious(this.caretIndex)
                        }
                        e.preventDefault()
                    } else if (e.which == 39 && !e.metaKey) {
                        if (shouldClearSelection()) {
                            var selection = this.getSelection();
                            this.caretPosition = selection.endPosition;
                            this.caretIndex = selection.endIndex;
                            return clearAndDraw()
                        }
                        movement = true;
                        if (e.ctrlKey || e.altKey) {
                            var closestEndOfWord = false;
                            if (this.caretPosition == "before") {
                                var next = this.findNext(this.caretIndex);
                                if (this.children[this.caretIndex].char != " " && next && this.children[next].char == " ") {
                                    closestEndOfWord = this.caretIndex
                                } else {
                                    var previous = this.findPrevious(this.caretIndex);
                                    if (previous !== false) {
                                        closestEndOfWord = this.findClosestEndOfWord(previous)
                                    } else {
                                        closestEndOfWord = this.findClosestEndOfWord(this.caretIndex)
                                    }
                                }
                            } else {
                                closestEndOfWord = this.findClosestEndOfWord(this.caretIndex)
                            }
                            if (closestEndOfWord === false) {
                                return clearAndDraw()
                            }
                            this.caretIndex = closestEndOfWord;
                            this.caretPosition = "after"
                        } else if (this.isLastOfLine(this.caretIndex) && this.caretPosition == "after") {
                            var next = this.findStartOfNextLine(this.caretIndex);
                            if (next !== false) {
                                this.caretPosition = "before";
                                this.caretIndex = next
                            } else {
                                movement = false
                            }
                        } else if (this.caretPosition == "before") {
                            this.caretPosition = "after"
                        } else {
                            var next = this.findNext(this.caretIndex);
                            if (next !== false) {
                                this.caretIndex = next
                            }
                        }
                        e.preventDefault()
                    } else if (e.which == 36 || e.metaKey && e.which == 37) {
                        var first = this.findStartOfLine(this.caretIndex);
                        if (first !== false) {
                            this.caretIndex = first;
                            this.caretPosition = "before"
                        }
                        if (shouldClearSelection()) {
                            return clearAndDraw()
                        }
                        movement = true;
                        e.preventDefault()
                    } else if (e.which == 35 || e.metaKey && e.which == 39) {
                        var last = this.findEndOfLine(this.caretIndex);
                        if (last !== false) {
                            this.caretIndex = last;
                            this.caretPosition = "after"
                        }
                        if (shouldClearSelection()) {
                            return clearAndDraw()
                        }
                        movement = true;
                        e.preventDefault()
                    } else if (e.which == 9) {
                        e.preventDefault()
                    } else if (e.which == 8) {
                        if (self.isThereSelection() || e.ctrlKey || e.altKey) {
                            var selection = [];
                            if (self.isThereSelection()) {
                                selection = this.getSelectedIndexes()
                            } else {
                                var closestStartOfWord = false;
                                var endOfSelection = this.caretIndex;
                                if (this.caretPosition == "before") {
                                    var previous = this.findPrevious(this.caretIndex);
                                    if (previous !== false) {
                                        closestStartOfWord = this.findClosestStartOfWord(previous)
                                    }
                                    endOfSelection--
                                } else {
                                    closestStartOfWord = this.findClosestStartOfWord(this.caretIndex)
                                }
                                if (closestStartOfWord === false) {
                                    return clearAndDraw()
                                }
                                for (var i = closestStartOfWord; i <= endOfSelection; i++) {
                                    selection.push(i)
                                }
                            }
                            var indexBeforeSelection = this.findPrevious(selection[0]);
                            var indexAfterSelection = this.findNext(selection[selection.length - 1]);
                            if (this.children[indexBeforeSelection] && this.children[indexBeforeSelection].char == " " && this.children[indexAfterSelection] && this.children[indexAfterSelection].char == " ") {
                                this.deleteCharsFromTo(selection[0], indexAfterSelection)
                            } else {
                                this.deleteCharsFromTo(selection[0], selection[selection.length - 1])
                            }
                            if (this.children[indexBeforeSelection]) {
                                if (this.isLastOfLine(indexBeforeSelection)) {
                                    var nextChild = this.findStartOfNextLine(indexBeforeSelection);
                                    if (nextChild) {
                                        this.caretIndex = nextChild;
                                        this.caretPosition = "before"
                                    } else {
                                        this.caretIndex = indexBeforeSelection;
                                        this.caretPosition = "after"
                                    }
                                } else {
                                    this.caretIndex = indexBeforeSelection;
                                    this.caretPosition = "after"
                                }
                            } else {
                                if (this.children[0]) {
                                    this.caretIndex = 0;
                                    this.caretPosition = "before"
                                } else {
                                    this.positionCaretInEmptyElement();
                                    return false
                                }
                            }
                            return clearAndDraw()
                        }
                        if (this.caretPosition == "after") {
                            var next = this.findNext(this.caretIndex);
                            var previous = this.findPrevious(this.caretIndex);
                            var firstOfLine = this.isFirstOfLine(this.caretIndex);
                            if (this.children[next] && this.children[next].char == " " && this.children[previous] && this.children[previous].char == " ") {
                                this.deleteCharsFromTo(this.caretIndex, next)
                            } else {
                                this.deleteCharsFromTo(this.caretIndex)
                            }
                            if (firstOfLine && this.children[this.caretIndex]) {
                                this.caretPosition = "before"
                            } else if (this.children[previous]) {
                                this.caretIndex = previous
                            } else {
                                if (this.children[0]) {
                                    this.caretIndex = 0;
                                    this.caretPosition = "before"
                                } else {
                                    this.positionCaretInEmptyElement();
                                    return false
                                }
                            }
                        } else {
                            var previous = this.findPrevious(this.caretIndex);
                            if (previous !== false) {
                                var beforePrevious = this.findPrevious(previous);
                                if (this.children[beforePrevious] && this.children[beforePrevious].char == " " && this.caretIndex.char == " ") {
                                    this.deleteCharsFromTo(beforePrevious, previous)
                                } else {
                                    this.deleteCharsFromTo(previous)
                                }
                                this.caretIndex = beforePrevious;
                                this.caretPosition = "after"
                            } else {}
                        }
                        e.preventDefault()
                    } else if (e.which == 46) {
                        if (self.isThereSelection() || e.ctrlKey || e.altKey) {
                            var selection = [];
                            if (self.isThereSelection()) {
                                selection = this.getSelectedIndexes()
                            } else {
                                var closestEndOfWord = false;
                                var startOfSelection = this.caretIndex;
                                if (this.caretPosition == "before") {
                                    var next = this.findNext(this.caretIndex);
                                    if (this.children[this.caretIndex].char != " " && next && this.children[next].char == " ") {
                                        closestEndOfWord = this.caretIndex
                                    } else {
                                        var previous = this.findPrevious(this.caretIndex);
                                        if (previous !== false) {
                                            closestEndOfWord = this.findClosestEndOfWord(previous)
                                        } else {
                                            closestEndOfWord = this.findClosestEndOfWord(this.caretIndex)
                                        }
                                    }
                                } else {
                                    closestEndOfWord = this.findClosestEndOfWord(this.caretIndex)
                                }
                                if (this.caretPosition == "after") {
                                    startOfSelection++
                                }
                                if (closestEndOfWord === false) {
                                    return clearAndDraw()
                                }
                                for (var i = startOfSelection; i <= closestEndOfWord; i++) {
                                    selection.push(i)
                                }
                            }
                            var indexBeforeSelection = this.findPrevious(selection[0]);
                            var indexAfterSelection = this.findNext(selection[selection.length - 1]);
                            var previous = this.findPrevious(selection[0]);
                            if (this.children[indexBeforeSelection] && this.children[indexBeforeSelection].char == " " && this.children[indexAfterSelection] && this.children[indexAfterSelection].char == " ") {
                                this.deleteCharsFromTo(selection[0], indexAfterSelection)
                            } else {
                                this.deleteCharsFromTo(selection[0], selection[selection.length - 1])
                            }
                            if (this.children[selection[0]] && this.isFirstOfLine(selection[0])) {
                                this.caretPosition = "before";
                                this.caretIndex = selection[0]
                            } else {
                                if (previous !== false) {
                                    this.caretIndex = previous;
                                    this.caretPosition = "after"
                                } else {
                                    this.positionCaretInEmptyElement();
                                    return false
                                }
                            }
                            return clearAndDraw()
                        } else if (this.caretPosition == "before") {
                            var previous = this.findPrevious(this.caretIndex);
                            this.deleteCharsFromTo(this.caretIndex);
                            if (!this.children[this.caretIndex]) {
                                if (previous !== false) {
                                    this.caretPosition = "after";
                                    this.caretIndex = previous
                                } else {
                                    this.positionCaretInEmptyElement();
                                    return false
                                }
                            }
                        } else {
                            var next = this.findNext(this.caretIndex);
                            var afterNext = false;
                            if (next !== false) {
                                afterNext = this.findNext(next)
                            }
                            if (this.children[this.caretIndex] && this.children[this.caretIndex].char == " " && this.children[afterNext] && this.children[afterNext].char == " ") {
                                this.deleteCharsFromTo(next, afterNext)
                            } else if (next !== false) {
                                this.deleteCharsFromTo(next)
                            }
                        }
                    } else if (keyChecker(e.which == 88 && e.ctrlKey, e.which == 88 && e.metaKey)) {
                        if (this.isThereSelection()) {
                            var html = inlineToHTML(this.getSelectedChildren());
                            electron.clipboardSet(htmlToText(html), html);
                            this.keydownHandler({
                                which: 8,
                                preventDefault: function preventDefault() {}
                            });
                            return false
                        }
                    } else if (keyChecker(e.which == 67 && e.ctrlKey, e.which == 67 && e.metaKey)) {
                        if (this.isThereSelection()) {
                            var html = inlineToHTML(this.getSelectedChildren());
                            electron.clipboardSet(htmlToText(html), html);
                            return false
                        }
                    } else if (e.which == 91) {
                        e.preventDefault();
                        return false
                    }
                    if (movement && e.shiftKey) {
                        var _rangeToIndexes = this.rangeToIndexes(old_caret_index, old_caret_position, this.caretIndex, this.caretPosition);
                        var _rangeToIndexes2 = _slicedToArray(_rangeToIndexes, 2);
                        var start = _rangeToIndexes2[0];
                        var end = _rangeToIndexes2[1];
                        this.toggleSelection(start, end)
                    }
                    if (this.isThereSelection()) {
                        app.inlineEditingBar.matchCharacterStyles(this.getSelectedChildren())
                    } else if (movement) {
                        app.inlineEditingBar.matchCharacterStyles(this.children[this.caretIndex])
                    }
                    this.drawCaret();
                    return false;

                    function shouldClearSelection() {
                        return !e.shiftKey && self.isThereSelection()
                    }

                    function clearAndDraw() {
                        self.clearAndDraw();
                        e.preventDefault();
                        return false
                    }
                }
            }, {
                key: "clearAndDraw",
                value: function clearAndDraw() {
                    this.clearSelection();
                    this.drawCaret();
                    app.inlineEditingBar.matchCharacterStyles(this.children[this.caretIndex])
                }
            }, {
                key: "positionCaretInEmptyElement",
                value: function positionCaretInEmptyElement() {
                    if (!this.children.length) {
                        this.children.push(new InlineCharacter(" "));
                        this.update()
                    }
                    this.caretIndex = 0;
                    this.caretPosition = "before";
                    this.clearAndDraw()
                }
            }, {
                key: "inputHandler",
                value: function inputHandler(e) {
                    var content = app.focusTarget.html();
                    content = content.replace(/\s/, " ");
                    if (!content.length) return false;
                    var parsed = htmlToInline(content, app.inlineEditingBar, this.blacklist);
                    if (!parsed.length) return false;
                    if (this.isThereSelection()) {
                        var selection = this.getSelectedIndexes();
                        var indexBeforeSelection = this.findPrevious(selection[0]);
                        var indexAfterSelection = this.findNext(selection[selection.length - 1]);
                        var previous = this.findPrevious(selection[0]);
                        if (this.children[indexBeforeSelection] && this.children[indexBeforeSelection].char == " " && this.children[indexAfterSelection] && this.children[indexAfterSelection].char == " " && parsed[parsed.length - 1].char == " ") {
                            this.deleteCharsFromTo(selection[0], indexAfterSelection)
                        } else {
                            this.deleteCharsFromTo(selection[0], selection[selection.length - 1])
                        }
                        if (this.children[selection[0]] && this.isFirstOfLine(selection[0])) {
                            this.caretPosition = "before";
                            this.caretIndex = selection[0]
                        } else {
                            if (previous !== false) {
                                this.caretIndex = previous;
                                this.caretPosition = "after"
                            } else {
                                this.positionCaretInEmptyElement()
                            }
                        }
                    }
                    if (this.caretPosition == "before") {
                        if (parsed.length == 1 && parsed[0].char == " " && this.children[this.caretIndex].char == " ") {
                            this.caretPosition = "after"
                        } else {
                            if (this.children[this.caretIndex - 1] && this.children[this.caretIndex - 1].char == " " && parsed[0].char == " ") {
                                parsed.shift()
                            }
                            if (this.children[this.caretIndex] && this.children[this.caretIndex].char == " " && parsed[parsed.length - 1] && parsed[parsed.length - 1].char == " ") {
                                parsed.pop()
                            }
                            if (parsed.length) {
                                this.children.splice.apply(this.children, [this.caretIndex, 0].concat(parsed));
                                this.caretIndex = this.caretIndex + parsed.length - 1;
                                this.caretPosition = "after"
                            }
                        }
                    } else {
                        if (parsed.length == 1 && parsed[0].char == " " && this.children[this.caretIndex + 1] && this.children[this.caretIndex + 1].char == " ") {
                            var beforeSpace = this.children[this.caretIndex];
                            this.caretIndex++;
                            this.children[this.caretIndex].copyStyles(app.inlineEditingBar)
                        } else {
                            if (this.children[this.caretIndex] && this.children[this.caretIndex].char == " " && parsed[0].char == " ") {
                                parsed.shift()
                            }
                            if (this.children[this.caretIndex + 1] && this.children[this.caretIndex + 1].char == " " && parsed[parsed.length - 1] && parsed[parsed.length - 1].char == " ") {
                                parsed.pop()
                            }
                            this.children.splice.apply(this.children, [this.caretIndex + 1, 0].concat(parsed));
                            this.caretIndex = this.caretIndex + parsed.length
                        }
                    }
                    this.update();
                    this.updateDimensions();
                    this.drawCaret();
                    app.focusTarget.html("")
                }
            }, {
                key: "commit",
                value: function commit() {
                    if (this.isInlineEditingActivated) {
                        this.deactivateInlineEditing();
                        this.update();
                        this.focus();
                        if (!inlineCompare(this._originalChildren, this.children)) {
                            var original = this._originalChildren;
                            var current = this.children.map(function(c) {
                                return c.clone()
                            });
                            var that = this;
                            app.context.history.add({
                                name: "Edit Text",
                                undo: function undo() {
                                    that.children.length = 0;
                                    that.children.push.apply(that.children, original);
                                    that.update();
                                    that.updateDimensions()
                                },
                                redo: function redo() {
                                    that.children.length = 0;
                                    that.children.push.apply(that.children, current);
                                    that.update();
                                    that.updateDimensions()
                                }
                            })
                        }
                        this._originalChildren = null
                    }
                }
            }, {
                key: "discard",
                value: function discard() {
                    this.deactivateInlineEditing();
                    this.children.length = 0;
                    this.children.push.apply(this.children, this._originalChildren);
                    this._originalChildren = null;
                    this.update();
                    this.updateDimensions()
                }
            }, {
                key: "activateInlineEditingAndEmpty",
                value: function activateInlineEditingAndEmpty() {
                    this.activateInlineEditing();
                    this.children = [];
                    this.positionCaretInEmptyElement();
                    this.update()
                }
            }, {
                key: "activateInlineEditingAndMoveCaretToEnd",
                value: function activateInlineEditingAndMoveCaretToEnd() {
                    if (this.children.length) {
                        this.caretIndex = this.children.length - 1;
                        this.caretPosition = "after"
                    }
                    this.activateInlineEditing()
                }
            }, {
                key: "activateInlineEditing",
                value: function activateInlineEditing() {
                    if (!this.isFocused()) {
                        this.focus()
                    }
                    this.isInlineEditingActivated = true;
                    this.element.attr("bs-inline-edited", 1);
                    this.drawCaret();
                    this._originalChildren = this.children.map(function(c) {
                        return c.clone()
                    });
                    app.trigger("component-inlineediting-start", this);
                    app.focusTarget.html("");
                    app.focusTarget.off(".inlineEditing");
                    app.on("keydown.inlineEditing", this.keydownHandler.bind(this), 10);
                    app.focusTarget.on("input.inlineEditing", this.inputHandler.bind(this));
                    var self = this;
                    app.canvas.markAsFocused(this);
                    app.canvas.removeHighlight()
                }
            }, {
                key: "deactivateInlineEditing",
                value: function deactivateInlineEditing() {
                    if (!this.isInlineEditingActivated) return false;
                    this.caretPosition = "before";
                    this.caretIndex = 0;
                    this.element.removeAttr("bs-inline-edited");
                    app.off(".inlineEditing");
                    app.focusTarget.off(".inlineEditing");
                    this.isInlineEditingActivated = false;
                    this.hideCaret();
                    this.clearSelection();
                    app.trigger("component-inlineediting-end", this)
                }
            }, {
                key: "findContextParent",
                value: function findContextParent(inlineElement) {
                    if (this.contextCache.has(inlineElement)) {
                        return this.contextCache.get(inlineElement)
                    }
                    var element = inlineElement.element[0];
                    var float, position, margin;
                    while (element = element.parentNode) {
                        if (element == this.element[0]) {
                            this.contextCache.set(inlineElement, element);
                            return element
                        }
                        var style = window.getComputedStyle(element);
                        if (style["float"] != "none" || style["position"] != "static" || style["margin"] != "0px") {
                            this.contextCache.set(inlineElement, element);
                            return element
                        }
                    }
                    return null
                }
            }, {
                key: "findNext",
                value: function findNext(index) {
                    if (index >= this.children.length - 1) return false;
                    var currentContext = this.findContextParent(this.children[index]);
                    if (currentContext === this.findContextParent(this.children[index + 1])) {
                        return index + 1
                    }
                    return false
                }
            }, {
                key: "findPrevious",
                value: function findPrevious(index) {
                    if (index <= 0) return false;
                    if (!this.children[index]) return false;
                    var currentContext = this.findContextParent(this.children[index]);
                    if (currentContext === this.findContextParent(this.children[index - 1])) {
                        return index - 1
                    }
                    return false
                }
            }, {
                key: "findLine",
                value: function findLine(index) {
                    var line = [this.children[index]];
                    var current = this.children[index];
                    current.updateDimensionsIfNeeded();
                    var next = {};
                    var i = index;
                    while ((i = this.findPrevious(i)) !== false) {
                        next = this.children[i];
                        next.updateDimensionsIfNeeded();
                        if (current.onTheSameRowWith(next)) {
                            line.unshift(this.children[i])
                        } else {
                            break
                        }
                    }
                    i = index;
                    while (i = this.findNext(i)) {
                        next = this.children[i];
                        next.updateDimensionsIfNeeded();
                        if (current.onTheSameRowWith(next)) {
                            line.push(this.children[i])
                        } else {
                            break
                        }
                    }
                    if (line.length > 1 && line[line.length - 1].char == " ") {
                        line.length--
                    }
                    return line
                }
            }, {
                key: "findStartOfNextLine",
                value: function findStartOfNextLine(index) {
                    var current = this.children[index];
                    current.updateDimensionsIfNeeded();
                    var i = index;
                    while (i = this.findNext(i)) {
                        this.children[i].updateDimensionsIfNeeded();
                        if (!current.onTheSameRowWith(this.children[i])) {
                            return i
                        }
                    }
                    return false
                }
            }, {
                key: "findEndOfPreviousLine",
                value: function findEndOfPreviousLine(index) {
                    var current = this.children[index];
                    current.updateDimensionsIfNeeded();
                    var i = index;
                    var foundSpace = false;
                    while ((i = this.findPrevious(i)) !== false) {
                        this.children[i].updateDimensionsIfNeeded();
                        if (!current.onTheSameRowWith(this.children[i])) {
                            if (this.children[i].char == " " && !foundSpace) {
                                foundSpace = true;
                                continue
                            }
                            return i
                        }
                    }
                    return false
                }
            }, {
                key: "findClosestStartOfWord",
                value: function findClosestStartOfWord(index) {
                    if (index < 0) return false;
                    var inWord = this.children[index].char !== " ";
                    var lastWordIndex = inWord ? index : false;
                    var i = index;
                    while ((i = this.findPrevious(i)) !== false) {
                        if (this.children[i].char == " ") {
                            if (inWord) {
                                return lastWordIndex
                            }
                        } else {
                            inWord = true;
                            lastWordIndex = i
                        }
                    }
                    return lastWordIndex
                }
            }, {
                key: "findClosestEndOfWord",
                value: function findClosestEndOfWord(index) {
                    var inWord = false;
                    var lastWordIndex = false;
                    var i = index;
                    while (i = this.findNext(i)) {
                        if (this.children[i].char == " ") {
                            if (inWord) {
                                return lastWordIndex
                            }
                        } else {
                            inWord = true;
                            lastWordIndex = i
                        }
                    }
                    return lastWordIndex
                }
            }, {
                key: "findBoundariesOfCurrentWord",
                value: function findBoundariesOfCurrentWord(index) {
                    if (this.children[index].char == " ") {
                        return [index, index]
                    }
                    var i = index,
                        start = index;
                    while (i !== false) {
                        if (this.children[i].char == " ") {
                            break
                        }
                        start = i;
                        i = this.findPrevious(i)
                    }
                    var end = index;
                    i = index;
                    while (i) {
                        if (this.children[i].char == " ") {
                            break
                        }
                        end = i;
                        i = this.findNext(i)
                    }
                    return [start, end]
                }
            }, {
                key: "findNextLine",
                value: function findNextLine(index) {
                    var startOfNext = this.findStartOfNextLine(index);
                    if (startOfNext === false) return false;
                    return this.findLine(startOfNext)
                }
            }, {
                key: "findPreviousLine",
                value: function findPreviousLine(index) {
                    var endOfPrevious = this.findEndOfPreviousLine(index);
                    if (endOfPrevious === false) return false;
                    return this.findLine(endOfPrevious)
                }
            }, {
                key: "findStartOfLine",
                value: function findStartOfLine(index) {
                    var first = this.findFirstOfLine(index);
                    var i = this.children.indexOf(first);
                    return i == -1 ? false : i
                }
            }, {
                key: "findEndOfLine",
                value: function findEndOfLine(index) {
                    var last = this.findLastOfLine(index);
                    var i = this.children.indexOf(last);
                    return i == -1 ? false : i
                }
            }, {
                key: "findFirstOfLine",
                value: function findFirstOfLine(index) {
                    return this.findLine(index)[0]
                }
            }, {
                key: "findLastOfLine",
                value: function findLastOfLine(index) {
                    return this.findLine(index).pop()
                }
            }, {
                key: "isFirstOfLine",
                value: function isFirstOfLine(index) {
                    return this.children[index] == this.findFirstOfLine(index)
                }
            }, {
                key: "isLastOfLine",
                value: function isLastOfLine(index) {
                    return this.children[index] == this.findLastOfLine(index)
                }
            }, {
                key: "rangeToIndexes",
                value: function rangeToIndexes(startIndex, startPosition, endIndex, endPosition) {
                    if (startIndex > endIndex || startIndex == endIndex && startPosition == "after" && endPosition == "before") {
                        var tmp = startIndex;
                        startIndex = endIndex;
                        endIndex = tmp;
                        tmp = startPosition;
                        startPosition = endPosition;
                        endPosition = tmp
                    }
                    var start = startIndex;
                    if (startPosition == "after") {
                        start++
                    }
                    var end = endIndex;
                    if (endPosition == "before") {
                        end--
                    }
                    return [start, end]
                }
            }, {
                key: "toggleSelection",
                value: function toggleSelection(start, end) {
                    for (var i = start; i <= end; i++) {
                        this.children[i].selected = !this.children[i].selected;
                        this.children[i].update()
                    }
                    var selectionsCount = 0,
                        previousSelected = false;
                    for (var i = 0; i < this.children.length; i++) {
                        if (!previousSelected && this.children[i].selected) {
                            selectionsCount++
                        }
                        previousSelected = this.children[i].selected
                    }
                    if (selectionsCount > 1) {
                        for (var i = 0; i < start; i++) {
                            this.children[i].selected = false;
                            this.children[i].update()
                        }
                        for (var i = end + 1; i < this.children.length; i++) {
                            this.children[i].selected = false;
                            this.children[i].update()
                        }
                    }
                }
            }, {
                key: "makeSelection",
                value: function makeSelection(start, end) {
                    var selected = [];
                    for (var i = 0; i < this.children.length; i++) {
                        if (i >= start && i <= end) {
                            if (!this.children[i].selected) {
                                this.children[i].selected = true;
                                this.children[i].update()
                            }
                            selected.push(this.children[i])
                        } else {
                            if (this.children[i].selected) {
                                this.children[i].selected = false;
                                this.children[i].update()
                            }
                        }
                    }
                    this.drawCaret();
                    if (selected.length) {
                        app.inlineEditingBar.matchCharacterStyles(selected)
                    }
                }
            }, {
                key: "clearSelection",
                value: function clearSelection() {
                    for (var i = 0; i < this.children.length; i++) {
                        if (this.children[i].selected) {
                            this.children[i].selected = false;
                            this.children[i].update()
                        }
                    }
                }
            }, {
                key: "isThereSelection",
                value: function isThereSelection() {
                    for (var i = 0; i < this.children.length; i++) {
                        if (this.children[i].selected) {
                            return true
                        }
                    }
                    return false
                }
            }, {
                key: "getSelection",
                value: function getSelection() {
                    var selection = {
                        startPosition: "before",
                        startIndex: -1,
                        endPosition: "after",
                        endIndex: -1
                    };
                    for (var i = 0; i < this.children.length; i++) {
                        if (this.children[i].selected) {
                            if (selection.startIndex == -1) {
                                selection.startIndex = i
                            }
                            selection.endIndex = i
                        }
                    }
                    if (!this.isFirstOfLine(selection.startIndex)) {
                        selection.startIndex = this.findPrevious(selection.startIndex);
                        selection.startPosition = "after"
                    }
                    return selection
                }
            }, {
                key: "getSelectedIndexes",
                value: function getSelectedIndexes() {
                    var selectedIndexes = [];
                    for (var i = 0; i < this.children.length; i++) {
                        if (this.children[i].selected) {
                            selectedIndexes.push(i)
                        }
                    }
                    return selectedIndexes
                }
            }, {
                key: "getSelectedChildren",
                value: function getSelectedChildren() {
                    var selected = [];
                    for (var i = 0; i < this.children.length; i++) {
                        if (this.children[i].selected) {
                            selected.push(this.children[i])
                        }
                    }
                    return selected
                }
            }, {
                key: "deleteCharsFromTo",
                value: function deleteCharsFromTo(start, end) {
                    if (end !== undefined) {
                        this.children.splice(start, end - start + 1)
                    } else {
                        this.children.splice(start, 1)
                    }
                    this.update();
                    this.updateDimensions()
                }
            }, {
                key: "calcCaretPosition",
                value: function calcCaretPosition(index, position) {
                    index = index || this.caretIndex;
                    position = position || this.caretPosition;
                    var where = this.children[index];
                    if (!where) return false;
                    where.updateDimensionsIfNeeded();
                    var zoom = app.context.canvasDimensions.zoom;
                    return {
                        left: (position == "before" ? where.x + 1 : where.x2 - 1) * zoom,
                        top: where.y * zoom,
                        height: where.caretHeight() * zoom
                    }
                }
            }, {
                key: "drawCaret",
                value: function drawCaret() {
                    var position = this.calcCaretPosition();
                    if (!position) {
                        return
                    }
                    if (this.isThereSelection()) {
                        app.canvas.inlineCaret.hide();
                        return
                    }
                    app.canvas.inlineCaret.show();
                    app.canvas.inlineCaret.css(position);
                    app.canvas.inlineCaret.addClass("no-blink");
                    clearTimeout(this._noBlinkTimeout);
                    this._noBlinkTimeout = setTimeout(function() {
                        app.canvas.inlineCaret.removeClass("no-blink")
                    }, 500)
                }
            }, {
                key: "hideCaret",
                value: function hideCaret() {
                    app.canvas.inlineCaret.hide()
                }
            }, {
                key: "startUpdate",
                value: function startUpdate() {
                    if (this.isInlineEditingActivated) {
                        this.contextCache = new WeakMap;
                        this.attributes["bs-inline-edited"] = 1
                    } else {
                        delete this.attributes["bs-inline-edited"]
                    }
                    for (var i = 0; i < this.children.length; i++) {
                        this.children[i].update()
                    }
                    if (this.context().isExport) {
                        this.element.html(inlineToHTML(this.children));
                        Component.prototype.startUpdate.call(this);
                        return this.element
                    }
                    for (var i = 0; i < this.children.length; i++) {
                        this.context().inlineDOMToComponent.set(this.children[i].element[0], this.children[i])
                    }
                    var tree = inlineToDOM(this.children);
                    this.element.empty();
                    this.element.append(tree);
                    Component.prototype.startUpdate.call(this);
                    return this.element
                }
            }, {
                key: "updateDimensions",
                value: function updateDimensions() {
                    Component.prototype.updateDimensions.call(this);
                    for (var i = 0; i < this.children.length; i++) {
                        if (this.children[i] instanceof InlineWrapper) {
                            this.children[i].updateDimensions()
                        } else {
                            this.children[i].needsDimensionUpdate = true
                        }
                    }
                    if (this.isInlineEditingActivated) {
                        app.canvas.markAsFocused(this)
                    }
                }
            }]);
            return ComponentWithInlineEditing
        }(ComponentWithChildren);
        module.exports = ComponentWithInlineEditing
    }, {
        "../helpers/canParentTakeChild": 154,
        "../helpers/htmlToInline": 171,
        "../helpers/htmlToText": 172,
        "../helpers/inlineCompare": 173,
        "../helpers/inlineToDOM": 174,
        "../helpers/inlineToHTML": 175,
        "../helpers/keyChecker": 176,
        "../panes/ButtonOption": 428,
        "./Component": 38,
        "./ComponentWithChildren": 39,
        "./InlineCharacter": 62,
        "./InlineWrapper": 63
    }],
    41: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Container = function(_ComponentWithChildren) {
            _inherits(Container, _ComponentWithChildren);

            function Container() {
                _classCallCheck(this, Container);
                _get(Object.getPrototypeOf(Container.prototype), "constructor", this).call(this);
                this.element = $("<div>");
                this.defineProperties({
                    id: "fluid",
                    label: "Fluid",
                    type: "checkbox",
                    value: false
                })
            }
            _createClass(Container, [{
                key: "canBeDroppedIn",
                value: function canBeDroppedIn(component) {
                    return _get(Object.getPrototypeOf(Container.prototype), "canBeDroppedIn", this).call(this, component) && !(component instanceof Container) && !component.hasParent(Container)
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = "container";
                    if (this.properties.fluid) {
                        this.cssClasses.system = "container-fluid"
                    }
                    return _get(Object.getPrototypeOf(Container.prototype), "update", this).call(this)
                }
            }]);
            return Container
        }(ComponentWithChildren);
        Container.suggestedComponents = ["Row"];
        module.exports = Container
    }, {
        "./ComponentWithChildren": 39
    }],
    42: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Div = function(_ComponentWithChildren) {
            _inherits(Div, _ComponentWithChildren);

            function Div() {
                _classCallCheck(this, Div);
                _get(Object.getPrototypeOf(Div.prototype), "constructor", this).call(this);
                this.element = $("<div>")
            }
            return Div
        }(ComponentWithChildren);
        module.exports = Div
    }, {
        "./ComponentWithChildren": 39
    }],
    43: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Component = require("./Component");
        var ComponentWithChildren = require("./ComponentWithChildren");
        var ComponentListOption = require("../panes/ComponentListOption");
        var SelectOption = require("../panes/SelectOption");
        var Button = require("./Button");
        var Caret = require("./Caret");
        var Anchor = require("./Anchor");
        var DropdownMenuItem = require("./DropdownMenuItem");
        var DropdownDivider = require("./DropdownDivider");
        var DropdownHeader = require("./DropdownHeader");
        var ButtonGroup = require("./ButtonGroup");
        var Nav = require("./Nav");
        var Dropdown = function(_ComponentWithChildren) {
            _inherits(Dropdown, _ComponentWithChildren);

            function Dropdown() {
                _classCallCheck(this, Dropdown);
                _get(Object.getPrototypeOf(Dropdown.prototype), "constructor", this).call(this);
                this.defineGroups({
                    id: "dropdown-items",
                    label: "Items",
                    weight: 9
                });
                this.defineProperties([{
                    id: "type",
                    label: "Type",
                    type: "select",
                    value: "dropdown",
                    options: [{
                        value: "dropdown",
                        label: "Dropdown"
                    }, {
                        value: "dropup",
                        label: "Dropup"
                    }]
                }, {
                    id: "expanded",
                    label: "Expanded",
                    type: "checkbox",
                    value: false
                }, {
                    id: "alignment",
                    label: "Alignment",
                    type: "select",
                    value: "",
                    options: [{
                        value: "",
                        label: "Default"
                    }, {
                        value: "left",
                        label: "Left"
                    }, {
                        value: "right",
                        label: "Right"
                    }]
                }]);
                this.dropdownItemsOffset = 1;
                this.element = $("<div>");
                this._button = new Button;
                this._button.initialize("Dropdown ");
                this._button.cssClasses.parent = "dropdown-toggle";
                this._button.fixate();
                this._link = new Anchor;
                this._link.initialize();
                this._link.cssClasses.parent = "dropdown-toggle";
                this._link.fixate()
            }
            _createClass(Dropdown, [{
                key: "initialize",
                value: function initialize() {
                    this.insertFirst(this._button);
                    var caret = new Caret;
                    caret.initialize();
                    caret.freeze();
                    this._button.insertLast(caret);
                    var d = new DropdownMenuItem;
                    d.initialize("First Item", "#");
                    this.insertLast(d);
                    d = new DropdownMenuItem;
                    d.initialize("Second Item", "#");
                    this.insertLast(d);
                    d = new DropdownMenuItem;
                    d.initialize("Third Item", "#");
                    this.insertLast(d)
                }
            }, {
                key: "focus",
                value: function focus() {
                    _get(Object.getPrototypeOf(Dropdown.prototype), "focus", this).call(this);
                    var dropdown = this;
                    var dropdownItemsGroup = app.optionsPane.getById("dropdown-items");
                    var listOption = new ComponentListOption({
                        component: this,
                        items: function items(_items) {
                            if (_items) {
                                dropdown.children = dropdown.children.slice(0, dropdown.dropdownItemsOffset);
                                for (var i = 0; i < _items.length; i++) {
                                    dropdown.insertLast(_items[i])
                                }
                                return
                            }
                            return dropdown.children.slice(dropdown.dropdownItemsOffset)
                        },
                        itemRepresentation: function itemRepresentation(item) {
                            var text = item.element.text().trim();
                            if (!text.length) {
                                if (item instanceof DropdownMenuItem) {
                                    text = "<Menu Item>"
                                } else if (item instanceof DropdownHeader) {
                                    text = "<Header>"
                                } else {
                                    text = "<Divider>"
                                }
                            }
                            return text
                        },
                        actions: {
                            edit: {
                                condition: function condition(item) {
                                    return item instanceof DropdownMenuItem || item instanceof DropdownHeader
                                },
                                action: function action(item) {
                                    if (!dropdown.properties.expanded) {
                                        dropdown.properties.expanded = true;
                                        dropdown.update();
                                        app.context.history.add({
                                            name: "Expand Dropdown",
                                            undo: function undo() {
                                                dropdown.properties.expanded = false;
                                                dropdown.update()
                                            },
                                            redo: function redo() {
                                                dropdown.properties.expanded = true;
                                                dropdown.update()
                                            }
                                        })
                                    }
                                    if (item instanceof DropdownMenuItem) {
                                        var link = item.children[0];
                                        link.focus();
                                        link.activateInlineEditing()
                                    } else {
                                        item.focus();
                                        item.activateInlineEditing()
                                    }
                                }
                            },
                            "delete": true
                        },
                        addForm: function addForm() {
                            var selectBox = new SelectOption({
                                label: "Type",
                                value: "DropdownMenuItem",
                                options: [{
                                    label: "Menu Item",
                                    value: "DropdownMenuItem"
                                }, {
                                    label: "Header",
                                    value: "DropdownHeader"
                                }, {
                                    label: "Divider",
                                    value: "DropdownDivider"
                                }]
                            });
                            return [selectBox]
                        },
                        onFormSave: function onFormSave(fields) {
                            var type = fields[0].val();
                            var item = null;
                            if (type == "DropdownMenuItem") {
                                item = new DropdownMenuItem;
                                item.initialize("Menu Item")
                            } else if (type == "DropdownHeader") {
                                item = new DropdownHeader;
                                item.initialize("Header")
                            } else {
                                item = new DropdownDivider;
                                item.initialize()
                            }
                            return item
                        }
                    });
                    dropdownItemsGroup.add(listOption)
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(component) {
                    return false
                }
            }, {
                key: "update",
                value: function update() {
                    var tmp;
                    var showLink = false;
                    this.cssClasses.system = this.properties.type;
                    delete this.attributes.role;
                    var InputGroupAddon = require("./InputGroupAddon");
                    if (this.parent instanceof ButtonGroup || this.parent instanceof InputGroupAddon) {
                        tmp = $("<div>" + '<ul class="dropdown-menu" role="menu"></ul>' + "</div>");
                        this.attributes.role = "group";
                        this.cssClasses.system += " btn-group"
                    } else if (this.parent instanceof Nav) {
                        tmp = $("<li>" + '<ul class="dropdown-menu" role="menu"></ul>' + "</li>");
                        showLink = true
                    } else {
                        tmp = $("<div>" + '<ul class="dropdown-menu" role="menu"></ul>' + "</div>")
                    }
                    this.element.replaceWith(tmp);
                    this.element = tmp;
                    if (showLink && this.children[0] instanceof Button) {
                        this._button = this.children[0];
                        this._button.remove();
                        this._link.copyChildrenFrom(this._button);
                        this.insertFirst(this._link)
                    }
                    if (!showLink && this.children[0] instanceof Anchor) {
                        this._link = this.children[0];
                        this._link.remove();
                        this._button.copyChildrenFrom(this._link);
                        this.insertFirst(this._button)
                    }
                    if (this.properties.expanded) {
                        this.cssClasses.system += " open"
                    }
                    this.children[0].attributes["data-toggle"] = "dropdown";
                    Component.prototype.startUpdate.call(this);
                    this.children[0].attributes["aria-expanded"] = "false";
                    if (this.properties.expanded) {
                        this.children[0].attributes["aria-expanded"] = "true"
                    }
                    this.element.prepend(this.children[0].update());
                    this.updateMenu();
                    return Component.prototype.finishUpdate.call(this)
                }
            }, {
                key: "updateMenu",
                value: function updateMenu() {
                    var ul = this.element.find("ul");
                    ul.toggleClass("dropdown-menu-left", this.properties.alignment == "left");
                    ul.toggleClass("dropdown-menu-right", this.properties.alignment == "right");
                    ul.empty();
                    for (var i = this.dropdownItemsOffset; i < this.children.length; i++) {
                        ul.append(this.children[i].update())
                    }
                }
            }]);
            return Dropdown
        }(ComponentWithChildren);
        module.exports = Dropdown
    }, {
        "../panes/ComponentListOption": 430,
        "../panes/SelectOption": 441,
        "./Anchor": 20,
        "./Button": 29,
        "./ButtonGroup": 30,
        "./Caret": 33,
        "./Component": 38,
        "./ComponentWithChildren": 39,
        "./DropdownDivider": 44,
        "./DropdownHeader": 45,
        "./DropdownMenuItem": 46,
        "./InputGroupAddon": 71,
        "./Nav": 95
    }],
    44: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Component = require("./Component");
        var DropdownDivider = function(_Component) {
            _inherits(DropdownDivider, _Component);

            function DropdownDivider() {
                _classCallCheck(this, DropdownDivider);
                _get(Object.getPrototypeOf(DropdownDivider.prototype), "constructor", this).call(this);
                this.cssClasses.system = "divider";
                this.element = $('<li role="presentation"></li>');
                this.flags.canBeMoved = false
            }
            return DropdownDivider
        }(Component);
        DropdownDivider.prettyName = "Dropdown Divider";
        module.exports = DropdownDivider
    }, {
        "./Component": 38
    }],
    45: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithInlineEditing = require("./ComponentWithInlineEditing");
        var DropdownHeader = function(_ComponentWithInlineEditing) {
            _inherits(DropdownHeader, _ComponentWithInlineEditing);

            function DropdownHeader() {
                _classCallCheck(this, DropdownHeader);
                _get(Object.getPrototypeOf(DropdownHeader.prototype), "constructor", this).call(this);
                this.cssClasses.system = "dropdown-header";
                this.element = $('<li role="presentation"></li>');
                this.flags.canBeMoved = false
            }
            _createClass(DropdownHeader, [{
                key: "initialize",
                value: function initialize() {
                    var text = arguments.length <= 0 || arguments[0] === undefined ? "Header" : arguments[0];
                    _get(Object.getPrototypeOf(DropdownHeader.prototype), "initialize", this).call(this, text)
                }
            }]);
            return DropdownHeader
        }(ComponentWithInlineEditing);
        DropdownHeader.prettyName = "Dropdown Header";
        module.exports = DropdownHeader
    }, {
        "./ComponentWithInlineEditing": 40
    }],
    46: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x3, _x4, _x5) {
            var _again = true;
            _function: while (_again) {
                var object = _x3,
                    property = _x4,
                    receiver = _x5;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x3 = parent;
                        _x4 = property;
                        _x5 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Anchor = require("./Anchor");
        var DropdownMenuItem = function(_ComponentWithChildren) {
            _inherits(DropdownMenuItem, _ComponentWithChildren);

            function DropdownMenuItem() {
                _classCallCheck(this, DropdownMenuItem);
                _get(Object.getPrototypeOf(DropdownMenuItem.prototype), "constructor", this).call(this);
                this.element = $('<li role="presentation"></li>');
                this.flags.canBeMoved = false;
                this.defineProperties({
                    id: "disabled",
                    label: "Disabled",
                    type: "checkbox",
                    value: false
                })
            }
            _createClass(DropdownMenuItem, [{
                key: "initialize",
                value: function initialize() {
                    var text = arguments.length <= 0 || arguments[0] === undefined ? "Dropdown Item" : arguments[0];
                    var url = arguments.length <= 1 || arguments[1] === undefined ? "#" : arguments[1];
                    var link = new Anchor;
                    link.initialize(text, url);
                    link.fixate();
                    this.insertFirst(link)
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild() {
                    return false
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = "";
                    if (this.properties.disabled) {
                        this.cssClasses.system = "disabled"
                    }
                    return _get(Object.getPrototypeOf(DropdownMenuItem.prototype), "update", this).call(this)
                }
            }]);
            return DropdownMenuItem
        }(ComponentWithChildren);
        DropdownMenuItem.prettyName = "Dropdown Menu Item";
        module.exports = DropdownMenuItem
    }, {
        "./Anchor": 20,
        "./ComponentWithChildren": 39
    }],
    47: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithInlineEditing = require("./ComponentWithInlineEditing");
        var htmlToInline = require("../helpers/htmlToInline");
        var FieldLabel = function(_ComponentWithInlineEditing) {
            _inherits(FieldLabel, _ComponentWithInlineEditing);

            function FieldLabel() {
                _classCallCheck(this, FieldLabel);
                _get(Object.getPrototypeOf(FieldLabel.prototype), "constructor", this).call(this);
                this.inline = true;
                this.element = $("<label>");
                this.defineProperties({
                    id: "for",
                    label: "For",
                    type: "textbox",
                    value: "",
                    history: 'Change Label "For" Attribute'
                })
            }
            _createClass(FieldLabel, [{
                key: "initialize",
                value: function initialize() {
                    var text = arguments.length <= 0 || arguments[0] === undefined ? "Label" : arguments[0];
                    this.children = htmlToInline(text)
                }
            }, {
                key: "afterDuplicate",
                value: function afterDuplicate() {
                    if (this.properties["for"]) {
                        setTimeout(function() {
                            if (this.properties["for"] in app.changedIDMap) {
                                this.properties["for"] = app.changedIDMap[this.properties["for"]]
                            }
                        }.bind(this), 0)
                    }
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(c) {
                    return _get(Object.getPrototypeOf(FieldLabel.prototype), "canTakeChild", this).call(this, c) && !(c instanceof FieldLabel)
                }
            }, {
                key: "update",
                value: function update() {
                    delete this.attributes["for"];
                    if (this.properties["for"]) {
                        this.attributes["for"] = this.properties["for"]
                    }
                    this.cssClasses.system = "";
                    if (this.hasParent(require("./FormGroup"))) {
                        this.cssClasses.system = "control-label"
                    }
                    return _get(Object.getPrototypeOf(FieldLabel.prototype), "update", this).call(this)
                }
            }]);
            return FieldLabel
        }(ComponentWithInlineEditing);
        FieldLabel.prettyName = "Field Label";
        module.exports = FieldLabel
    }, {
        "../helpers/htmlToInline": 171,
        "./ComponentWithInlineEditing": 40,
        "./FormGroup": 53
    }],
    48: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithInlineEditing = require("./ComponentWithInlineEditing");
        var Figure = require("./Figure");
        var Figcaption = function(_ComponentWithInlineEditing) {
            _inherits(Figcaption, _ComponentWithInlineEditing);

            function Figcaption() {
                _classCallCheck(this, Figcaption);
                _get(Object.getPrototypeOf(Figcaption.prototype), "constructor", this).call(this);
                this.element = $("<figcaption>")
            }
            _createClass(Figcaption, [{
                key: "canBeDroppedIn",
                value: function canBeDroppedIn(parent) {
                    return _get(Object.getPrototypeOf(Figcaption.prototype), "canBeDroppedIn", this).call(this, parent) && parent instanceof Figure
                }
            }, {
                key: "initialize",
                value: function initialize() {
                    var txt = arguments.length <= 0 || arguments[0] === undefined ? "Caption" : arguments[0];
                    _get(Object.getPrototypeOf(Figcaption.prototype), "initialize", this).call(this, txt)
                }
            }]);
            return Figcaption
        }(ComponentWithInlineEditing);
        module.exports = Figcaption
    }, {
        "./ComponentWithInlineEditing": 40,
        "./Figure": 49
    }],
    49: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Figure = function(_ComponentWithChildren) {
            _inherits(Figure, _ComponentWithChildren);

            function Figure() {
                _classCallCheck(this, Figure);
                _get(Object.getPrototypeOf(Figure.prototype), "constructor", this).call(this);
                this.element = $("<figure>")
            }
            return Figure
        }(ComponentWithChildren);
        Figure.suggestedComponents = ["Image", "Figcaption"];
        module.exports = Figure
    }, {
        "./ComponentWithChildren": 39
    }],
    50: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Footer = function(_ComponentWithChildren) {
            _inherits(Footer, _ComponentWithChildren);

            function Footer() {
                _classCallCheck(this, Footer);
                _get(Object.getPrototypeOf(Footer.prototype), "constructor", this).call(this);
                this.element = $("<footer>")
            }
            return Footer
        }(ComponentWithChildren);
        module.exports = Footer
    }, {
        "./ComponentWithChildren": 39
    }],
    51: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var InputCheckbox = require("./InputCheckbox");
        var InputRadio = require("./InputRadio");
        var CheckboxHolder = require("./CheckboxHolder");
        var RadioHolder = require("./RadioHolder");
        var NavBar = require("./NavBar");
        var FormGroup = require("./FormGroup");
        var FieldLabel = require("./FieldLabel");
        var InputText = require("./InputText");
        var Button = require("./Button");
        var SelectOption = require("../panes/SelectOption");
        var wrapInAutomaticElement = require("../helpers/wrapInAutomaticElement");
        var Form = function(_ComponentWithChildren) {
            _inherits(Form, _ComponentWithChildren);

            function Form() {
                _classCallCheck(this, Form);
                _get(Object.getPrototypeOf(Form.prototype), "constructor", this).call(this);
                this.element = $("<form>");
                this.properties.type = "";
                this.defineProperties([{
                    id: "action",
                    label: "Action",
                    type: "textbox",
                    value: ""
                }, {
                    id: "method",
                    label: "Method",
                    type: "select",
                    value: "",
                    options: Form.possibleMethods
                }, {
                    id: "target",
                    label: "Target",
                    type: "select",
                    value: "",
                    options: Form.possibleTargets
                }, {
                    id: "enctype",
                    label: "Encoding",
                    type: "select",
                    value: "",
                    options: Form.possibleEnctypes
                }])
            }
            _createClass(Form, [{
                key: "canTakeChild",
                value: function canTakeChild(child) {
                    return !(child instanceof Form)
                }
            }, {
                key: "focus",
                value: function focus() {
                    _get(Object.getPrototypeOf(Form.prototype), "focus", this).call(this);
                    var form = this;
                    var formOptionsGroup = this.getMainOptionsGroup();
                    formOptionsGroup.add(new SelectOption({
                        label: "Type",
                        visible: function visible() {
                            return !(form.parent instanceof NavBar)
                        },
                        value: [this.properties, "type"],
                        options: Form.possibleTypes,
                        onChange: function onChange(newValue, oldValue) {
                            var subEntries = [];
                            if (oldValue != "form-horizontal" && newValue == "form-horizontal") {
                                for (var i = 0; i < form.children.length; i++) {
                                    if (form.children[i] instanceof FormGroup) {
                                        subEntries.push(form.children[i].convertToHorizontalFormat())
                                    }
                                }
                            } else if (oldValue == "form-horizontal" && newValue != "form-horizontal") {
                                for (var i = 0; i < form.children.length; i++) {
                                    if (form.children[i] instanceof FormGroup) {
                                        subEntries.push(form.children[i].convertToRegularFormat())
                                    }
                                }
                            }
                            form.properties.type = newValue;
                            form.update();
                            app.context.history.add({
                                name: "Change Form Type",
                                undo: function undo() {
                                    form.properties.type = oldValue;
                                    subEntries.forEach(function(e) {
                                        e.undo()
                                    });
                                    form.update()
                                },
                                redo: function redo() {
                                    form.properties.type = newValue;
                                    subEntries.forEach(function(e) {
                                        e.redo()
                                    });
                                    form.update()
                                }
                            })
                        }
                    }), 0)
                }
            }, {
                key: "beforeDrop",
                value: function beforeDrop() {
                    if (app.draggedComponent instanceof InputCheckbox) {
                        var holder = new CheckboxHolder;
                        holder.initialize();
                        holder.removeCheckbox();
                        wrapInAutomaticElement(holder, holder.children[0]);
                        return
                    }
                    if (app.draggedComponent instanceof InputRadio) {
                        var holder = new RadioHolder;
                        holder.initialize();
                        holder.removeCheckbox();
                        wrapInAutomaticElement(holder, holder.children[0]);
                        return
                    }
                }
            }, {
                key: "update",
                value: function update() {
                    delete this.attributes.action;
                    delete this.attributes.method;
                    delete this.attributes.target;
                    delete this.attributes.enctype;
                    this.cssClasses.system = "";
                    if (this.parent instanceof NavBar) {
                        this.cssClasses.system = "navbar-form"
                    } else if (this.properties.type) {
                        this.cssClasses.system = this.properties.type
                    }
                    if (this.properties.action) {
                        this.attributes.action = this.properties.action
                    }
                    if (this.properties.method) {
                        this.attributes.method = this.properties.method
                    }
                    if (this.properties.target) {
                        this.attributes.target = this.properties.target
                    }
                    if (this.properties.enctype) {
                        this.attributes.enctype = this.properties.enctype
                    }
                    return _get(Object.getPrototypeOf(Form.prototype), "update", this).call(this)
                }
            }]);
            return Form
        }(ComponentWithChildren);
        Form.possibleTypes = [{
            label: "Default",
            value: ""
        }, {
            label: "Inline",
            value: "form-inline"
        }, {
            label: "Horizontal",
            value: "form-horizontal"
        }];
        Form.possibleMethods = [{
            label: "Default",
            value: ""
        }, {
            label: "Get",
            value: "get"
        }, {
            label: "Post",
            value: "post"
        }];
        Form.possibleTargets = [{
            label: "Default",
            value: ""
        }, {
            label: "Self",
            value: "_self"
        }, {
            label: "Blank",
            value: "_blank"
        }, {
            label: "Parent",
            value: "_parent"
        }, {
            label: "Top",
            value: "_top"
        }];
        Form.possibleEnctypes = [{
            label: "Default",
            value: ""
        }, {
            label: "URL Encoded",
            value: "application/x-www-form-urlencoded"
        }, {
            label: "Multipart",
            value: "multipart/form-data"
        }, {
            label: "Plain",
            value: "text/plain"
        }];
        Form.suggestedComponents = ["FormGroup"];
        module.exports = Form
    }, {
        "../helpers/wrapInAutomaticElement": 193,
        "../panes/SelectOption": 441,
        "./Button": 29,
        "./CheckboxHolder": 34,
        "./ComponentWithChildren": 39,
        "./FieldLabel": 47,
        "./FormGroup": 53,
        "./InputCheckbox": 65,
        "./InputRadio": 77,
        "./InputText": 82,
        "./NavBar": 96,
        "./RadioHolder": 113
    }],
    52: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Icon = require("./Icon");
        var FormControlFeedback = function(_Icon) {
            _inherits(FormControlFeedback, _Icon);

            function FormControlFeedback() {
                _classCallCheck(this, FormControlFeedback);
                _get(Object.getPrototypeOf(FormControlFeedback.prototype), "constructor", this).call(this);
                this.cssClasses.system.feedback = "form-control-feedback";
                this.attributes["aria-hidden"] = true
            }
            _createClass(FormControlFeedback, [{
                key: "canBeDroppedIn",
                value: function canBeDroppedIn(component) {
                    var FormGroup = require("./FormGroup");
                    return _get(Object.getPrototypeOf(FormControlFeedback.prototype), "canBeDroppedIn", this).call(this, component) && component instanceof FormGroup
                }
            }]);
            return FormControlFeedback
        }(Icon);
        FormControlFeedback.prettyName = "Form Control Feedback";
        module.exports = FormControlFeedback
    }, {
        "./FormGroup": 53,
        "./Icon": 60
    }],
    53: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var FormControlFeedback = require("./FormControlFeedback");
        var Column = require("./Column");
        var FieldLabel = require("./FieldLabel");
        var FormGroup = function(_ComponentWithChildren) {
            _inherits(FormGroup, _ComponentWithChildren);

            function FormGroup() {
                _classCallCheck(this, FormGroup);
                _get(Object.getPrototypeOf(FormGroup.prototype), "constructor", this).call(this);
                this.element = $("<div>");
                this.defineProperties({
                    id: "validation",
                    label: "Validation State",
                    type: "select",
                    value: "",
                    options: FormGroup.possibleValidationStates
                })
            }
            _createClass(FormGroup, [{
                key: "convertToHorizontalFormat",
                value: function convertToHorizontalFormat() {
                    if (!this.children.length) {
                        return {
                            undo: function undo() {},
                            redo: function redo() {}
                        }
                    }
                    var oldChildren = this.children.slice();
                    this.children = [];
                    var c1 = new Column;
                    c1.initialize();
                    c1.properties.colmd = -1;
                    c1.properties.colsm = 4;
                    var c2 = new Column;
                    c2.initialize();
                    c2.properties.colmd = -1;
                    c2.properties.colsm = 8;
                    if (oldChildren.length == 1 && !(oldChildren[0] instanceof FieldLabel)) {
                        c1 = null;
                        c2.properties.colsmOffset = 4
                    }
                    var tmp = oldChildren.slice();
                    var newChildren = [
                        [],
                        []
                    ];
                    for (var i = 0; i < tmp.length; i++) {
                        if (tmp[i] instanceof FieldLabel) {
                            c1.insertLast(tmp[i]);
                            newChildren[0].push(tmp[i]);
                            tmp.splice(i, 1);
                            break
                        }
                    }
                    for (var i = 0; i < tmp.length; i++) {
                        c2.insertLast(tmp[i]);
                        newChildren[1].push(tmp[i])
                    }
                    var self = this;
                    c1 && this.insertLast(c1);
                    this.insertLast(c2);
                    return {
                        undo: function undo() {
                            self.children = [];
                            oldChildren.forEach(function(c) {
                                self.insertLast(c)
                            })
                        },
                        redo: function redo() {
                            self.children = [];
                            c1 && self.insertLast(c1);
                            self.insertLast(c2);
                            newChildren[0].forEach(function(c) {
                                c1.insertLast(c)
                            });
                            newChildren[1].forEach(function(c) {
                                c2.insertLast(c)
                            })
                        }
                    }
                }
            }, {
                key: "convertToRegularFormat",
                value: function convertToRegularFormat() {
                    if (!this.children.length) {
                        return {
                            undo: function undo() {},
                            redo: function redo() {}
                        }
                    }
                    var self = this;
                    var oldChildren = this.children.slice();
                    this.children = [];
                    var columnChildren = {};
                    for (var i = 0; i < oldChildren.length; i++) {
                        if (oldChildren[i] instanceof Column) {
                            columnChildren[i] = oldChildren[i].children.slice();
                            oldChildren[i].children.slice().forEach(function(c) {
                                self.insertLast(c)
                            })
                        } else {
                            this.insertLast(oldChildren[i])
                        }
                    }
                    var newChildren = this.children.slice();
                    return {
                        undo: function undo() {
                            self.children = [];
                            for (var i = 0; i < oldChildren.length; i++) {
                                self.insertLast(oldChildren[i]);
                                if (oldChildren[i] instanceof Column) {
                                    columnChildren[i].slice().forEach(function(c) {
                                        oldChildren[i].insertLast(c)
                                    })
                                }
                            }
                        },
                        redo: function redo() {
                            self.children = [];
                            for (var i = 0; i < newChildren.length; i++) {
                                self.insertLast(newChildren[i])
                            }
                        }
                    }
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(child) {
                    return !(child instanceof FormGroup)
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = "form-group";
                    if (this.properties.validation) {
                        this.cssClasses.system += " has-" + this.properties.validation
                    }
                    if (this.hasChild(FormControlFeedback)) {
                        this.cssClasses.system += " has-feedback"
                    }
                    return _get(Object.getPrototypeOf(FormGroup.prototype), "update", this).call(this)
                }
            }]);
            return FormGroup
        }(ComponentWithChildren);
        FormGroup.possibleValidationStates = [{
            label: "None",
            value: ""
        }, {
            label: "Success",
            value: "success"
        }, {
            label: "Warning",
            value: "warning"
        }, {
            label: "Error",
            value: "error"
        }];
        FormGroup.prettyName = "Form Group";
        module.exports = FormGroup
    }, {
        "./Column": 37,
        "./ComponentWithChildren": 39,
        "./FieldLabel": 47,
        "./FormControlFeedback": 52
    }],
    54: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Component = require("./Component");
        var Body = require("./Body");
        var escapeInlineStyleContent = require("../helpers/escapeInlineStyleContent");
        var HTML = function(_ComponentWithChildren) {
            _inherits(HTML, _ComponentWithChildren);

            function HTML() {
                _classCallCheck(this, HTML);
                _get(Object.getPrototypeOf(HTML.prototype), "constructor", this).call(this);
                this.element = $("<html>");
                this.element.html('<head> \n				<meta charset="utf-8" />\n				<meta name="viewport" content="width=device-width, initial-scale=1.0" />\n				<title></title>\n			</head>\n			<body>\n			</body>');
                this.attributesMask.manifest = null;
                this.fontAwesomeCSS = null;
                this.iframeCSS = null;
                this.userStylesheet = null;
                this.head = this.element.find("head");
                this.bootstrapActiveTheme = null;
                this.themeCSS = $();
                this.userFontIncludes = [];
                this.overrideBlacklist = ["/0"];
                this.fixate()
            }
            _createClass(HTML, [{
                key: "setContext",
                value: function setContext(context) {
                    this._context = context
                }
            }, {
                key: "context",
                value: function context() {
                    return this._context
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild() {
                    return false
                }
            }, {
                key: "canBeDroppedIn",
                value: function canBeDroppedIn() {
                    return false
                }
            }, {
                key: "fillUserStylesheet",
                value: function fillUserStylesheet(css) {
                    this.userStylesheet.html(escapeInlineStyleContent(css))
                }
            }, {
                key: "update",
                value: function update() {
                    var context = this.context();
                    if (context.isExport) {
                        this.head.append('<link rel="stylesheet" href="' + context.getStylesheetForActiveTheme() + '">')
                    } else {
                        if (!this.head.find("base").length) {
                            this.head.prepend('<base href="' + document.baseURI + '" bs-system-element bs-hidden></base>')
                        }
                        if (!this.themeCSS.length || this.bootstrapActiveTheme != context.theme) {
                            this.themeCSS.remove();
                            if (context.isThemeUserMade()) {
                                this.themeCSS = $("<style>").text(context.getActiveTheme().raw)
                            } else {
                                var sheet = context.getStylesheetForActiveTheme();
                                this.themeCSS = $('<link rel="stylesheet" href="' + sheet + '">')
                            }
                            this.head.find("title").after(this.themeCSS);
                            this.bootstrapActiveTheme = context.theme
                        }
                    }
                    outer: for (var i = 0; i < context.assets.fonts.length; i++) {
                        var font = context.assets.fonts[i];
                        for (var j = 0; j < this.userFontIncludes.length; j++) {
                            if (this.userFontIncludes[j].font == font) {
                                continue outer
                            }
                        }
                        var tmp = $('<link rel="stylesheet">');
                        tmp.attr("href", font.url);
                        tmp.font = font;
                        this.head.append(tmp);
                        this.userFontIncludes.push(tmp)
                    }
                    var tmpIncludes = [];
                    outer: for (var i = 0; i < this.userFontIncludes.length; i++) {
                        for (var j = 0; j < context.assets.fonts.length; j++) {
                            var font = context.assets.fonts[j];
                            if (this.userFontIncludes[i].font == font) {
                                tmpIncludes.push(this.userFontIncludes[i]);
                                continue outer
                            }
                        }
                        this.userFontIncludes[i].remove()
                    }
                    this.userFontIncludes = tmpIncludes;
                    if (context.isExport) {
                        this.head.append('<link rel="stylesheet" href="' + context.assetPath + 'css/user.css">')
                    } else {
                        if (!this.userStylesheet) {
                            this.userStylesheet = $("<style bs-system-element></style>");
                            this.head.append(this.userStylesheet)
                        }
                        if (!this.iframeStyles) {
                            this.iframeStyles = $('<link rel="stylesheet" href="' + context.assetPath + 'iframe-styles.css" bs-system-element bs-hidden>');
                            this.head.append(this.iframeStyles)
                        }
                    }
                    if (context.shouldIncludeFontAwesome() && !this.fontAwesomeCSS) {
                        this.fontAwesomeCSS = $('<link rel="stylesheet" href="' + context.assetPath + 'bootstrap/fonts/font-awesome.min.css">');
                        this.head.append(this.fontAwesomeCSS)
                    }
                    Component.prototype.startUpdate.call(this);
                    var body = this.element.find("body");
                    body.replaceWith(this.body.update());
                    this.element.find("title").text(context.name);
                    if (context.isExport) {
                        var s1 = document.createElement("script");
                        s1.src = context.assetPath + "js/jquery.min.js";
                        var s2 = document.createElement("script");
                        s2.src = context.assetPath + "bootstrap/js/bootstrap.min.js";
                        this.body.element.append(s1);
                        this.body.element.append(s2)
                    }
                    return Component.prototype.finishUpdate.call(this)
                }
            }, {
                key: "body",
                get: function get() {
                    return this.children[0]
                }
            }]);
            return HTML
        }(ComponentWithChildren);
        module.exports = HTML
    }, {
        "../helpers/escapeInlineStyleContent": 163,
        "./Body": 26,
        "./Component": 38,
        "./ComponentWithChildren": 39
    }],
    55: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Header = function(_ComponentWithChildren) {
            _inherits(Header, _ComponentWithChildren);

            function Header() {
                _classCallCheck(this, Header);
                _get(Object.getPrototypeOf(Header.prototype), "constructor", this).call(this);
                this.element = $("<header>")
            }
            return Header
        }(ComponentWithChildren);
        module.exports = Header
    }, {
        "./ComponentWithChildren": 39
    }],
    56: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithInlineEditing = require("./ComponentWithInlineEditing");
        var textOptions = require("../helpers/textOptions");
        var Heading = function(_ComponentWithInlineEditing) {
            _inherits(Heading, _ComponentWithInlineEditing);

            function Heading() {
                _classCallCheck(this, Heading);
                _get(Object.getPrototypeOf(Heading.prototype), "constructor", this).call(this);
                this.defineProperties({
                    id: "type",
                    label: "Type",
                    type: "select",
                    value: "h1",
                    options: Heading.possibleTypes
                });
                this.element = $("<h1>");
                textOptions.construct(this)
            }
            _createClass(Heading, [{
                key: "initialize",
                value: function initialize() {
                    var str = arguments.length <= 0 || arguments[0] === undefined ? "Heading" : arguments[0];
                    _get(Object.getPrototypeOf(Heading.prototype), "initialize", this).call(this, str)
                }
            }, {
                key: "update",
                value: function update() {
                    var tmp = $("<" + this.properties.type + ">");
                    this.element.replaceWith(tmp);
                    this.element = tmp;
                    this.cssClasses.system = {};
                    textOptions.update(this);
                    return _get(Object.getPrototypeOf(Heading.prototype), "update", this).call(this)
                }
            }]);
            return Heading
        }(ComponentWithInlineEditing);
        Heading.possibleTypes = [{
            label: "H1",
            value: "h1"
        }, {
            label: "H2",
            value: "h2"
        }, {
            label: "H3",
            value: "h3"
        }, {
            label: "H4",
            value: "h4"
        }, {
            label: "H5",
            value: "h5"
        }, {
            label: "H6",
            value: "h6"
        }];
        module.exports = Heading
    }, {
        "../helpers/textOptions": 192,
        "./ComponentWithInlineEditing": 40
    }],
    57: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Paragraph = require("./Paragraph");
        var HelpTextBlock = function(_Paragraph) {
            _inherits(HelpTextBlock, _Paragraph);

            function HelpTextBlock() {
                _classCallCheck(this, HelpTextBlock);
                _get(Object.getPrototypeOf(HelpTextBlock.prototype), "constructor", this).call(this);
                this.cssClasses.system = "help-block"
            }
            _createClass(HelpTextBlock, [{
                key: "initialize",
                value: function initialize() {
                    var str = arguments.length <= 0 || arguments[0] === undefined ? "Help text for a form field." : arguments[0];
                    _get(Object.getPrototypeOf(HelpTextBlock.prototype), "initialize", this).call(this, str)
                }
            }]);
            return HelpTextBlock
        }(Paragraph);
        HelpTextBlock.prettyName = "Help Text Block";
        module.exports = HelpTextBlock
    }, {
        "./Paragraph": 110
    }],
    58: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Heading = require("./Heading");
        var Hgroup = function(_ComponentWithChildren) {
            _inherits(Hgroup, _ComponentWithChildren);

            function Hgroup() {
                _classCallCheck(this, Hgroup);
                _get(Object.getPrototypeOf(Hgroup.prototype), "constructor", this).call(this);
                this.element = $("<hgroup>")
            }
            _createClass(Hgroup, [{
                key: "canTakeChild",
                value: function canTakeChild(child) {
                    return _get(Object.getPrototypeOf(Hgroup.prototype), "canTakeChild", this).call(this, child) && child instanceof Heading
                }
            }]);
            return Hgroup
        }(ComponentWithChildren);
        Hgroup.suggestedComponents = ["Heading"];
        module.exports = Hgroup
    }, {
        "./ComponentWithChildren": 39,
        "./Heading": 56
    }],
    59: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Component = require("./Component");
        var Hr = function(_Component) {
            _inherits(Hr, _Component);

            function Hr() {
                _classCallCheck(this, Hr);
                _get(Object.getPrototypeOf(Hr.prototype), "constructor", this).call(this);
                this.element = $("<hr>")
            }
            return Hr
        }(Component);
        module.exports = Hr
    }, {
        "./Component": 38
    }],
    60: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Component = require("./Component");
        var IconPreviewOption = require("../panes/IconPreviewOption");
        var Icon = function(_Component) {
            _inherits(Icon, _Component);

            function Icon() {
                _classCallCheck(this, Icon);
                _get(Object.getPrototypeOf(Icon.prototype), "constructor", this).call(this);
                this.inline = true;
                this.cssClasses.system = {};
                this.properties.icon = "glyphicon glyphicon-star";
                this.element = $("<span>")
            }
            _createClass(Icon, [{
                key: "usesFontAwesome",
                value: function usesFontAwesome() {
                    return /^fa/.test(this.properties.icon)
                }
            }, {
                key: "focus",
                value: function focus() {
                    _get(Object.getPrototypeOf(Icon.prototype), "focus", this).call(this);
                    var iconOptionsGroup = this.getMainOptionsGroup();
                    iconOptionsGroup.add(new IconPreviewOption({
                        value: [this.properties, "icon"],
                        component: this,
                        history: "Change Icon"
                    }))
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system.icon = this.properties.icon;
                    return _get(Object.getPrototypeOf(Icon.prototype), "update", this).call(this)
                }
            }]);
            return Icon
        }(Component);
        module.exports = Icon
    }, {
        "../panes/IconPreviewOption": 433,
        "./Component": 38
    }],
    61: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Component = require("./Component");
        var ButtonOption = require("../panes/ButtonOption");
        var Image = function(_Component) {
            _inherits(Image, _Component);

            function Image() {
                _classCallCheck(this, Image);
                _get(Object.getPrototypeOf(Image.prototype), "constructor", this).call(this);
                this.inline = true;
                this.element = $("<img />");
                this.defineProperties([{
                    id: "src",
                    label: "Source URL",
                    type: "textbox",
                    value: "",
                    weight: 1
                }, {
                    id: "width",
                    label: "Width",
                    type: "textbox",
                    value: "",
                    weight: 10
                }, {
                    id: "height",
                    label: "Height",
                    type: "textbox",
                    value: "",
                    weight: 10
                }, {
                    id: "alt",
                    label: "Alt",
                    type: "textbox",
                    value: "",
                    weight: 10
                }, {
                    id: "style",
                    label: "Style",
                    type: "select",
                    value: "",
                    options: Image.possibleStyles,
                    weight: 10
                }, {
                    id: "responsive",
                    label: "Responsive",
                    type: "checkbox",
                    value: false,
                    weight: 10
                }])
            }
            _createClass(Image, [{
                key: "isInstanceOfImageAsset",
                value: function isInstanceOfImageAsset(img) {
                    return this.properties.src == img.name
                }
            }, {
                key: "focus",
                value: function focus() {
                    _get(Object.getPrototypeOf(Image.prototype), "focus", this).call(this);
                    var imageGroup = this.getMainOptionsGroup();
                    var that = this;
                    imageGroup.add(new ButtonOption({
                        text: "From Library",
                        layout: "row-right",
                        onClick: function onClick() {
                            app.imagesDialog.open({
                                selected: that.properties.src,
                                onSave: function onSave(newValue) {
                                    var oldValue = that.properties.src;
                                    that.properties.src = newValue;
                                    that.update();
                                    app.context.history.add({
                                        name: "Change Image Source",
                                        undo: function undo() {
                                            that.properties.src = oldValue;
                                            that.update()
                                        },
                                        redo: function redo() {
                                            that.properties.src = newValue;
                                            that.update()
                                        }
                                    })
                                }
                            })
                        }
                    }));
                    imageGroup.add("")
                }
            }, {
                key: "update",
                value: function update() {
                    delete this.attributes.width;
                    delete this.attributes.height;
                    delete this.attributes.alt;
                    delete this.attributes.src;
                    delete this.attributesMask.src;
                    if (this.properties.src) {
                        var src = this.context().transformImageAsset(this.properties.src);
                        if (!src) {
                            src = this.properties.src
                        }
                        this.attributesMask.src = this.properties.src;
                        this.attributes.src = src
                    }
                    if (this.properties.alt) {
                        this.attributes.alt = this.properties.alt
                    }
                    if (this.properties.width) {
                        this.attributes.width = this.properties.width
                    }
                    if (this.properties.height) {
                        this.attributes.height = this.properties.height
                    }
                    this.cssClasses.system = "";
                    if (this.properties.style) {
                        this.cssClasses.system = this.properties.style
                    }
                    if (this.properties.responsive) {
                        this.cssClasses.system += " img-responsive"
                    }
                    return _get(Object.getPrototypeOf(Image.prototype), "update", this).call(this)
                }
            }]);
            return Image
        }(Component);
        Image.possibleStyles = [{
            label: "Default",
            value: ""
        }, {
            label: "Rounded",
            value: "img-rounded"
        }, {
            label: "Circle",
            value: "img-circle"
        }, {
            label: "Thumbnail",
            value: "img-thumbnail"
        }];
        module.exports = Image
    }, {
        "../panes/ButtonOption": 428,
        "./Component": 38
    }],
    62: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Box = require("../base/Box");
        var equal = require("deep-equal");
        var InlineCharacter = function(_Box) {
            _inherits(InlineCharacter, _Box);

            function InlineCharacter(char) {
                _classCallCheck(this, InlineCharacter);
                _get(Object.getPrototypeOf(InlineCharacter.prototype), "constructor", this).call(this);
                this.reset();
                this.selected = false;
                this.char = char;
                this.element = $("<inline-character>");
                this.needsDimensionUpdate = true
            }
            _createClass(InlineCharacter, [{
                key: "reset",
                value: function reset() {
                    this.bold = false;
                    this.italic = false;
                    this.strike = false;
                    this.underline = false;
                    this.link = false
                }
            }, {
                key: "copyStyles",
                value: function copyStyles(character) {
                    this.bold = character.bold;
                    this.italic = character.italic;
                    this.strike = character.strike;
                    this.underline = character.underline;
                    this.link = false;
                    if (character.link) {
                        this.link = {
                            href: character.link.href,
                            target: character.link.target
                        }
                    }
                }
            }, {
                key: "sameAs",
                value: function sameAs(other) {
                    return this.constructor == other.constructor && this.char == other.char && this.bold == other.bold && this.italic == other.italic && this.strike == other.strike && this.underline == other.underline && equal(this.link, other.link)
                }
            }, {
                key: "caretHeight",
                value: function caretHeight() {
                    return parseInt(this.element.css("line-height"), 10) || Math.round(this.height)
                }
            }, {
                key: "update",
                value: function update() {
                    this.element.toggleClass("selected", this.selected);
                    this.element.toggleClass("space", this.char == " ");
                    return this.element.text(this.char)
                }
            }, {
                key: "updateDimensions",
                value: function updateDimensions() {
                    var box = this.element[0].getBoundingClientRect();
                    var lineHeight = parseInt(this.element.css("line-height"), 10) || Math.round(box.height);
                    _get(Object.getPrototypeOf(InlineCharacter.prototype), "updateDimensions", this).call(this, box.left, box.top + (box.height - lineHeight) / 2, box.width, lineHeight);
                    this.needsDimensionUpdate = false
                }
            }, {
                key: "updateDimensionsIfNeeded",
                value: function updateDimensionsIfNeeded() {
                    if (this.needsDimensionUpdate) {
                        this.updateDimensions()
                    }
                }
            }, {
                key: "isFocused",
                value: function isFocused() {
                    return false
                }
            }, {
                key: "isVisible",
                value: function isVisible() {
                    return true
                }
            }, {
                key: "clone",
                value: function clone() {
                    var n = new InlineCharacter(this.char);
                    n.copyStyles(this);
                    return n
                }
            }, {
                key: "serialize",
                value: function serialize() {
                    return {
                        "class": "InlineCharacter",
                        "char": this.char,
                        bold: this.bold,
                        italic: this.italic,
                        strike: this.strike,
                        underline: this.underline,
                        link: this.link
                    }
                }
            }, {
                key: "unserialize",
                value: function unserialize(obj) {
                    this.char = obj.char;
                    this.copyStyles(obj)
                }
            }]);
            return InlineCharacter
        }(Box);
        module.exports = InlineCharacter
    }, {
        "../base/Box": 8,
        "deep-equal": 409
    }],
    63: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InlineCharacter = require("./InlineCharacter");
        var InlineWrapper = function(_InlineCharacter) {
            _inherits(InlineWrapper, _InlineCharacter);

            function InlineWrapper(component) {
                _classCallCheck(this, InlineWrapper);
                _get(Object.getPrototypeOf(InlineWrapper.prototype), "constructor", this).call(this);
                this.children = [];
                if (component) {
                    this.children.push(component)
                }
                this.element = $("<inline-wrapper>")
            }
            _createClass(InlineWrapper, [{
                key: "hoverDrag",
                value: function hoverDrag() {
                    return this.component.hoverDrag.apply(this.component, arguments)
                }
            }, {
                key: "isFocused",
                value: function isFocused() {
                    return this.component.isFocused()
                }
            }, {
                key: "sameAs",
                value: function sameAs(other) {
                    return _get(Object.getPrototypeOf(InlineWrapper.prototype), "sameAs", this).call(this, other) && this.component.outerHTML == other.component.outerHTML
                }
            }, {
                key: "update",
                value: function update() {
                    this.element.empty();
                    this.element.toggleClass("selected", this.selected);
                    this.element.append(this.component.update.apply(this.component, arguments));
                    return this.element
                }
            }, {
                key: "updateDimensions",
                value: function updateDimensions() {
                    return this.component.updateDimensions.apply(this.component, arguments)
                }
            }, {
                key: "caretHeight",
                value: function caretHeight() {
                    return this.height
                }
            }, {
                key: "clone",
                value: function clone() {
                    var n = new InlineWrapper(this.component);
                    n.copyStyles(this);
                    return n
                }
            }, {
                key: "serialize",
                value: function serialize() {
                    return {
                        "class": "InlineWrapper",
                        children: [this.children[0].serialize()]
                    }
                }
            }, {
                key: "insertLast",
                value: function insertLast(component) {
                    this.children[0] = component;
                    component.parent = this.parent
                }
            }, {
                key: "unserialize",
                value: function unserialize(obj) {}
            }, {
                key: "component",
                get: function get() {
                    return this.children[0]
                },
                set: function set(component) {
                    this.children[0] = component
                }
            }, {
                key: "x",
                get: function get() {
                    return this.component.x
                }
            }, {
                key: "x2",
                get: function get() {
                    return this.component.x2
                }
            }, {
                key: "y",
                get: function get() {
                    return this.component.y
                }
            }, {
                key: "y2",
                get: function get() {
                    return this.component.y2
                }
            }, {
                key: "width",
                get: function get() {
                    return this.component.width
                }
            }, {
                key: "height",
                get: function get() {
                    return this.component.height
                }
            }]);
            return InlineWrapper
        }(InlineCharacter);
        module.exports = InlineWrapper
    }, {
        "./InlineCharacter": 62
    }],
    64: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Component = require("./Component");
        var ComponentWithInlineEditing = require("./ComponentWithInlineEditing");
        var InputBase = function(_Component) {
            _inherits(InputBase, _Component);

            function InputBase() {
                _classCallCheck(this, InputBase);
                _get(Object.getPrototypeOf(InputBase.prototype), "constructor", this).call(this);
                this.inline = true;
                this.element = $("<input>");
                this.defineGroups([{
                    id: "input-main",
                    label: "Main",
                    weight: 10
                }, {
                    id: "input-state",
                    label: "State",
                    weight: 20
                }, {
                    id: "input-input",
                    label: "Input",
                    collapsed: true,
                    weight: 20
                }, {
                    id: "input-validation",
                    label: "Validation",
                    collapsed: true,
                    weight: 20
                }]);
                this.addCapabilities(["name", "value", "disabled", "readonly", "required"])
            }
            _createClass(InputBase, [{
                key: "canBeDroppedIn",
                value: function canBeDroppedIn(parent) {
                    return _get(Object.getPrototypeOf(InputBase.prototype), "canBeDroppedIn", this).call(this, parent) && !(parent instanceof ComponentWithInlineEditing)
                }
            }, {
                key: "addCapabilities",
                value: function addCapabilities(arr) {
                    if (!Array.isArray(arr)) {
                        arr = [arr]
                    }
                    this.defineProperties(arr.map(function(i) {
                        return inputCapabilities[i]
                    }))
                }
            }, {
                key: "removeCapabilities",
                value: function removeCapabilities(arr) {
                    this.deleteProperties(arr)
                }
            }, {
                key: "shouldAddTheFormControlClass",
                value: function shouldAddTheFormControlClass() {
                    var Form = require("./Form");
                    var InputGroup = require("./InputGroup");
                    return this.hasParent(Form) || this.parent instanceof InputGroup
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = "";
                    if (this.shouldAddTheFormControlClass()) {
                        this.cssClasses.system += " form-control"
                    }
                    if (this.properties.size) {
                        this.cssClasses.system += " input-" + this.properties.size
                    }
                    delete this.attributes.name;
                    delete this.attributes.value;
                    delete this.attributes.disabled;
                    delete this.attributes.readonly;
                    delete this.attributes.required;
                    delete this.attributes.checked;
                    delete this.attributes.multiple;
                    delete this.attributes.placeholder;
                    delete this.attributes.maxlength;
                    delete this.attributes.minlength;
                    delete this.attributes.pattern;
                    delete this.attributes.autofocus;
                    delete this.attributes.autocomplete;
                    delete this.attributes.inputmode;
                    delete this.attributes.min;
                    delete this.attributes.max;
                    delete this.attributes.step;
                    if (this.properties.name) {
                        this.attributes.name = this.properties.name
                    }
                    if (this.properties.value) {
                        this.attributes.value = this.properties.value
                    }
                    if (this.properties.disabled) {
                        this.attributes.disabled = ""
                    }
                    if (this.properties.readonly) {
                        this.attributes.readonly = ""
                    }
                    if (this.properties.required) {
                        this.attributes.required = ""
                    }
                    if (this.properties.checked) {
                        this.attributes.checked = ""
                    }
                    if (this.properties.multiple) {
                        this.attributes.multiple = ""
                    }
                    if (this.properties.placeholder) {
                        this.attributes.placeholder = this.properties.placeholder
                    }
                    if (this.properties.maxlength > 0) {
                        this.attributes.maxlength = this.properties.maxlength
                    }
                    if (this.properties.minlength > 0) {
                        this.attributes.minlength = this.properties.minlength
                    }
                    if (this.properties.pattern) {
                        this.attributes.pattern = this.properties.pattern
                    }
                    if (this.properties.autofocus) {
                        this.attributes.autofocus = ""
                    }
                    if (this.properties.autocomplete) {
                        this.attributes.autocomplete = this.properties.autocomplete
                    }
                    if (this.properties.inputmode) {
                        this.attributes.inputmode = this.properties.inputmode
                    }
                    if (this.properties.min) {
                        this.attributes.min = this.properties.min
                    }
                    if (this.properties.max) {
                        this.attributes.max = this.properties.max
                    }
                    if (this.properties.step) {
                        this.attributes.step = this.properties.step
                    }
                    return _get(Object.getPrototypeOf(InputBase.prototype), "update", this).call(this)
                }
            }]);
            return InputBase
        }(Component);
        InputBase.possibleSizes = [{
            label: "Default",
            value: ""
        }, {
            label: "Large",
            value: "lg"
        }, {
            label: "Small",
            value: "sm"
        }];
        InputBase.possibleAutocompleteValues = [{
            label: "Default",
            value: ""
        }, {
            label: "On",
            value: "on"
        }, {
            label: "Off",
            value: "off"
        }];
        InputBase.possibleInputModeValues = [{
            label: "Default",
            value: ""
        }, {
            label: "Verbatim",
            value: "verbatim"
        }, {
            label: "Latin",
            value: "latin"
        }, {
            label: "Latin name",
            value: "latin-name"
        }, {
            label: "Latin prose",
            value: "latin-prose"
        }, {
            label: "Full width latin",
            value: "full-width-latin"
        }, {
            label: "Kana",
            value: "kana"
        }, {
            label: "Katakana",
            value: "katakana"
        }, {
            label: "Numeric",
            value: "numeric"
        }, {
            label: "Tel",
            value: "tel"
        }, {
            label: "Email",
            value: "email"
        }, {
            label: "Url",
            value: "url"
        }];
        var inputCapabilities = {
            name: {
                id: "name",
                label: "Name",
                type: "textbox",
                value: "",
                group: "input-main"
            },
            value: {
                id: "value",
                label: "Value",
                type: "textbox",
                value: "",
                group: "input-main"
            },
            disabled: {
                id: "disabled",
                label: "Disabled",
                type: "checkbox",
                value: false,
                group: "input-state"
            },
            readonly: {
                id: "readonly",
                label: "Readonly",
                type: "checkbox",
                value: false,
                group: "input-state"
            },
            required: {
                id: "required",
                label: "Required",
                type: "checkbox",
                value: false,
                group: "input-validation"
            },
            checked: {
                id: "checked",
                label: "Checked",
                type: "checkbox",
                value: false,
                group: "input-main"
            },
            multiple: {
                id: "multiple",
                label: "Multiple",
                type: "checkbox",
                value: false,
                group: "input-input"
            },
            size: {
                id: "size",
                label: "Size",
                type: "select",
                value: "",
                options: InputBase.possibleSizes,
                group: "input-main"
            },
            placeholder: {
                id: "placeholder",
                label: "Placeholder",
                type: "textbox",
                value: "",
                group: "input-main"
            },
            maxlength: {
                id: "maxlength",
                label: "Max Length",
                type: "textbox",
                value: "",
                group: "input-validation"
            },
            minlength: {
                id: "minlength",
                label: "Min Length",
                type: "textbox",
                value: "",
                group: "input-validation"
            },
            pattern: {
                id: "pattern",
                label: "Validation Pattern",
                type: "textbox",
                value: "",
                group: "input-validation"
            },
            autofocus: {
                id: "autofocus",
                label: "Autofocus",
                type: "checkbox",
                value: false,
                group: "input-input"
            },
            autocomplete: {
                id: "autocomplete",
                label: "Autocomplete",
                type: "select",
                value: "",
                group: "input-input",
                options: InputBase.possibleAutocompleteValues
            },
            inputmode: {
                id: "inputmode",
                label: "Input Mode",
                type: "select",
                value: "",
                group: "input-input",
                options: InputBase.possibleInputModeValues
            },
            min: {
                id: "min",
                label: "Min",
                type: "textbox",
                value: "",
                group: "input-main"
            },
            max: {
                id: "max",
                label: "Max",
                type: "textbox",
                value: "",
                group: "input-main"
            },
            step: {
                id: "step",
                label: "Step",
                type: "textbox",
                value: "",
                group: "input-main"
            }
        };
        module.exports = InputBase
    }, {
        "./Component": 38,
        "./ComponentWithInlineEditing": 40,
        "./Form": 51,
        "./InputGroup": 70
    }],
    65: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InputRadioCheckBase = require("./InputRadioCheckBase");
        var InputCheckbox = function(_InputRadioCheckBase) {
            _inherits(InputCheckbox, _InputRadioCheckBase);

            function InputCheckbox() {
                _classCallCheck(this, InputCheckbox);
                _get(Object.getPrototypeOf(InputCheckbox.prototype), "constructor", this).call(this);
                this.attributes.type = "checkbox"
            }
            return InputCheckbox
        }(InputRadioCheckBase);
        InputCheckbox.prettyName = "Checkbox";
        module.exports = InputCheckbox
    }, {
        "./InputRadioCheckBase": 78
    }],
    66: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InputBase = require("./InputBase");
        var InputColor = function(_InputBase) {
            _inherits(InputColor, _InputBase);

            function InputColor() {
                _classCallCheck(this, InputColor);
                _get(Object.getPrototypeOf(InputColor.prototype), "constructor", this).call(this);
                this.attributes.type = "color";
                this.removeCapabilities("readonly")
            }
            _createClass(InputColor, [{
                key: "shouldAddTheFormControlClass",
                value: function shouldAddTheFormControlClass() {
                    return false
                }
            }]);
            return InputColor
        }(InputBase);
        InputColor.prettyName = "Color Input";
        module.exports = InputColor
    }, {
        "./InputBase": 64
    }],
    67: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InputBase = require("./InputBase");
        var InputDateAndTime = function(_InputBase) {
            _inherits(InputDateAndTime, _InputBase);

            function InputDateAndTime() {
                _classCallCheck(this, InputDateAndTime);
                _get(Object.getPrototypeOf(InputDateAndTime.prototype), "constructor", this).call(this);
                this.addCapabilities(["min", "max", "step", "size"]);
                this.defineProperties({
                    id: "type",
                    label: "Type",
                    type: "select",
                    value: "date",
                    options: InputDateAndTime.possibleTypes,
                    group: "input-main"
                })
            }
            _createClass(InputDateAndTime, [{
                key: "update",
                value: function update() {
                    this.attributes.type = this.properties.type;
                    return _get(Object.getPrototypeOf(InputDateAndTime.prototype), "update", this).call(this)
                }
            }]);
            return InputDateAndTime
        }(InputBase);
        InputDateAndTime.possibleTypes = [{
            label: "Date",
            value: "date"
        }, {
            label: "Time",
            value: "time"
        }, {
            label: "Datetime Local",
            value: "datetime-local"
        }, {
            label: "Month",
            value: "month"
        }, {
            label: "Week",
            value: "week"
        }];
        InputDateAndTime.prettyName = "Date And Time Input";
        module.exports = InputDateAndTime
    }, {
        "./InputBase": 64
    }],
    68: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InputText = require("./InputText");
        var InputEmail = function(_InputText) {
            _inherits(InputEmail, _InputText);

            function InputEmail() {
                _classCallCheck(this, InputEmail);
                _get(Object.getPrototypeOf(InputEmail.prototype), "constructor", this).call(this);
                this.attributes.type = "email";
                this.addCapabilities("multiple")
            }
            return InputEmail
        }(InputText);
        InputEmail.prettyName = "Email Input";
        module.exports = InputEmail
    }, {
        "./InputText": 82
    }],
    69: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InputBase = require("./InputBase");
        var SelectOption = require("../panes/SelectOption");
        var TextBoxOption = require("../panes/TextBoxOption");
        var InputFile = function(_InputBase) {
            _inherits(InputFile, _InputBase);

            function InputFile() {
                _classCallCheck(this, InputFile);
                _get(Object.getPrototypeOf(InputFile.prototype), "constructor", this).call(this);
                this.attributes.type = "file";
                this.addCapabilities("multiple");
                this.removeCapabilities("readonly");
                this.properties.accept = ""
            }
            _createClass(InputFile, [{
                key: "focus",
                value: function focus() {
                    _get(Object.getPrototypeOf(InputFile.prototype), "focus", this).call(this);
                    var input = this;
                    var validationGroup = app.optionsPane.getById("input-validation");
                    validationGroup.add(new SelectOption({
                        label: "Accept",
                        value: function value(val) {
                            if (val == undefined) {
                                if (isPossibleAcceptValue(input.properties.accept)) {
                                    return input.properties.accept
                                }
                                return "__custom"
                            }
                            if (val == "__custom") {
                                acceptInput.val("");
                                acceptInput.show();
                                return
                            }
                            var oldValue = input.properties.accept;
                            var newValue = val;
                            input.properties.accept = newValue;
                            input.update();
                            app.context.history.add({
                                name: "Change Accept Value",
                                undo: function undo() {
                                    input.properties.accept = oldValue;
                                    input.update()
                                },
                                redo: function redo() {
                                    input.properties.accept = newValue;
                                    input.update()
                                }
                            })
                        },
                        options: InputFile.possibleAcceptValues
                    }));
                    var acceptInput = new TextBoxOption({
                        label: "Custom Accept Value",
                        visible: function visible() {
                            return !isPossibleAcceptValue(input.properties.accept)
                        },
                        value: [input.properties, "accept"],
                        component: input,
                        history: "Change Accept Value"
                    });
                    validationGroup.add(acceptInput)
                }
            }, {
                key: "shouldAddTheFormControlClass",
                value: function shouldAddTheFormControlClass() {
                    return false
                }
            }, {
                key: "update",
                value: function update() {
                    delete this.attributes.multiple;
                    if (this.properties.multiple) {
                        this.attributes.multiple = this.properties.multiple
                    }
                    delete this.attributes.accept;
                    if (this.properties.accept) {
                        this.attributes.accept = this.properties.accept
                    }
                    return _get(Object.getPrototypeOf(InputFile.prototype), "update", this).call(this)
                }
            }]);
            return InputFile
        }(InputBase);

        function isPossibleAcceptValue(val) {
            var arr = InputFile.possibleAcceptValues;
            for (var i = 0; i < arr.length; i++) {
                if (arr[i].value == val) {
                    return true
                }
            }
            return false
        }
        InputFile.possibleAcceptValues = [{
            label: "Default",
            value: ""
        }, {
            label: "audio/*",
            value: "audio/*"
        }, {
            label: "video/*",
            value: "video/*"
        }, {
            label: "image/*",
            value: "image/*"
        }, {
            label: "Custom..",
            value: "__custom"
        }];
        InputFile.prettyName = "File Input";
        module.exports = InputFile
    }, {
        "../panes/SelectOption": 441,
        "../panes/TextBoxOption": 444,
        "./InputBase": 64
    }],
    70: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Div = require("./Div");
        var InputGroupAddonLeft = require("./InputGroupAddonLeft");
        var InputGroupAddonRight = require("./InputGroupAddonRight");
        var InputText = require("./InputText");
        var InputGroup = function(_Div) {
            _inherits(InputGroup, _Div);

            function InputGroup() {
                _classCallCheck(this, InputGroup);
                _get(Object.getPrototypeOf(InputGroup.prototype), "constructor", this).call(this);
                this.defineProperties([{
                    id: "size",
                    label: "Size",
                    type: "select",
                    value: "",
                    options: InputGroup.possibleSizes
                }])
            }
            _createClass(InputGroup, [{
                key: "initialize",
                value: function initialize() {
                    this.properties.showInputGroupAddonLeft = true;
                    this.properties.showInputGroupAddonRight = true;
                    this.insertFirst(this.createOrSelectInstance(InputGroupAddonLeft));
                    var it = new InputText;
                    it.initialize();
                    this.insertLast(it);
                    this.insertLast(this.createOrSelectInstance(InputGroupAddonRight))
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(component) {
                    return _get(Object.getPrototypeOf(InputGroup.prototype), "canTakeChild", this).call(this, component) && component instanceof InputText
                }
            }, {
                key: "focus",
                value: function focus() {
                    _get(Object.getPrototypeOf(InputGroup.prototype), "focus", this).call(this);
                    var igOptions = this.getMainOptionsGroup();
                    igOptions.add(this.createCheckBoxForSubComponent("showInputGroupAddonLeft", "Left Addon", InputGroupAddonLeft, function(parent, child, index) {
                        if (index > -1) {
                            parent.insertAt(child, index);
                            return
                        }
                        parent.insertFirst(child)
                    }));
                    igOptions.add(this.createCheckBoxForSubComponent("showInputGroupAddonRight", "Right Addon", InputGroupAddonRight, function(parent, child, index) {
                        if (index > -1) {
                            parent.insertAt(child, index);
                            return
                        }
                        parent.insertLast(child)
                    }))
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = "input-group";
                    if (this.properties.size) {
                        this.cssClasses.system += " " + this.properties.size
                    }
                    return _get(Object.getPrototypeOf(InputGroup.prototype), "update", this).call(this)
                }
            }]);
            return InputGroup
        }(Div);
        InputGroup.possibleSizes = [{
            label: "Small",
            value: "input-group-sm"
        }, {
            label: "Default",
            value: ""
        }, {
            label: "Large",
            value: "input-group-lg"
        }];
        InputGroup.prettyName = "Input Group";
        module.exports = InputGroup
    }, {
        "./Div": 42,
        "./InputGroupAddonLeft": 72,
        "./InputGroupAddonRight": 73,
        "./InputText": 82
    }],
    71: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Div = require("./Div");
        var Span = require("./Span");
        var Paragraph = require("./Paragraph");
        var Button = require("./Button");
        var ButtonGroup = require("./ButtonGroup");
        var Dropdown = require("./Dropdown");
        var InputRadioCheckBase = require("./InputRadioCheckBase");
        var InputGroupAddon = function(_Div) {
            _inherits(InputGroupAddon, _Div);

            function InputGroupAddon() {
                _classCallCheck(this, InputGroupAddon);
                _get(Object.getPrototypeOf(InputGroupAddon.prototype), "constructor", this).call(this);
                this.fixate()
            }
            _createClass(InputGroupAddon, [{
                key: "canTakeChild",
                value: function canTakeChild(child) {
                    if (!_get(Object.getPrototypeOf(InputGroupAddon.prototype), "canTakeChild", this).call(this, child)) {
                        return false
                    }
                    if (this.children.length > 1) {
                        return false
                    }
                    return child instanceof Span || child instanceof Paragraph || child instanceof Button || child instanceof ButtonGroup || child instanceof Dropdown || child instanceof InputRadioCheckBase
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = "input-group-addon";
                    if (this.children[0] instanceof Button || this.children[0] instanceof ButtonGroup || this.children[0] instanceof Dropdown) {
                        this.cssClasses.system = "input-group-btn"
                    }
                    return _get(Object.getPrototypeOf(InputGroupAddon.prototype), "update", this).call(this)
                }
            }]);
            return InputGroupAddon
        }(Div);
        InputGroupAddon.suggestedComponents = ["Span", "Button", "SplitButton", "Dropdown"];
        module.exports = InputGroupAddon
    }, {
        "./Button": 29,
        "./ButtonGroup": 30,
        "./Div": 42,
        "./Dropdown": 43,
        "./InputRadioCheckBase": 78,
        "./Paragraph": 110,
        "./Span": 119
    }],
    72: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InputGroupAddon = require("./InputGroupAddon");
        var Span = require("./Span");
        var InputGroupAddonLeft = function(_InputGroupAddon) {
            _inherits(InputGroupAddonLeft, _InputGroupAddon);

            function InputGroupAddonLeft() {
                _classCallCheck(this, InputGroupAddonLeft);
                _get(Object.getPrototypeOf(InputGroupAddonLeft.prototype), "constructor", this).apply(this, arguments)
            }
            _createClass(InputGroupAddonLeft, [{
                key: "initialize",
                value: function initialize() {
                    var span = new Span;
                    span.initialize("Addon");
                    this.insertFirst(span)
                }
            }]);
            return InputGroupAddonLeft
        }(InputGroupAddon);
        InputGroupAddonLeft.prettyName = "Input Group Left Addon";
        module.exports = InputGroupAddonLeft
    }, {
        "./InputGroupAddon": 71,
        "./Span": 119
    }],
    73: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InputGroupAddon = require("./InputGroupAddon");
        var Button = require("./Button");
        var InputGroupAddonRight = function(_InputGroupAddon) {
            _inherits(InputGroupAddonRight, _InputGroupAddon);

            function InputGroupAddonRight() {
                _classCallCheck(this, InputGroupAddonRight);
                _get(Object.getPrototypeOf(InputGroupAddonRight.prototype), "constructor", this).apply(this, arguments)
            }
            _createClass(InputGroupAddonRight, [{
                key: "initialize",
                value: function initialize() {
                    var button = new Button;
                    button.initialize("Go!");
                    this.insertFirst(button)
                }
            }]);
            return InputGroupAddonRight
        }(InputGroupAddon);
        InputGroupAddonRight.prettyName = "Input Group Right Addon";
        module.exports = InputGroupAddonRight
    }, {
        "./Button": 29,
        "./InputGroupAddon": 71
    }],
    74: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InputBase = require("./InputBase");
        var InputHidden = function(_InputBase) {
            _inherits(InputHidden, _InputBase);

            function InputHidden() {
                _classCallCheck(this, InputHidden);
                _get(Object.getPrototypeOf(InputHidden.prototype), "constructor", this).call(this);
                this.attributes.type = "hidden";
                this.removeCapabilities(["readonly", "required", "disabled"])
            }
            return InputHidden
        }(InputBase);
        InputHidden.prettyName = "Hidden Input";
        module.exports = InputHidden
    }, {
        "./InputBase": 64
    }],
    75: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InputBase = require("./InputBase");
        var InputNumber = function(_InputBase) {
            _inherits(InputNumber, _InputBase);

            function InputNumber() {
                _classCallCheck(this, InputNumber);
                _get(Object.getPrototypeOf(InputNumber.prototype), "constructor", this).call(this);
                this.attributes.type = "number";
                this.addCapabilities(["min", "max", "step", "placeholder", "size"])
            }
            return InputNumber
        }(InputBase);
        InputNumber.prettyName = "Number Input";
        module.exports = InputNumber
    }, {
        "./InputBase": 64
    }],
    76: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InputText = require("./InputText");
        var InputPassword = function(_InputText) {
            _inherits(InputPassword, _InputText);

            function InputPassword() {
                _classCallCheck(this, InputPassword);
                _get(Object.getPrototypeOf(InputPassword.prototype), "constructor", this).call(this);
                this.attributes.type = "password"
            }
            return InputPassword
        }(InputText);
        InputPassword.prettyName = "Password Input";
        module.exports = InputPassword
    }, {
        "./InputText": 82
    }],
    77: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InputRadioCheckBase = require("./InputRadioCheckBase");
        var InputRadio = function(_InputRadioCheckBase) {
            _inherits(InputRadio, _InputRadioCheckBase);

            function InputRadio() {
                _classCallCheck(this, InputRadio);
                _get(Object.getPrototypeOf(InputRadio.prototype), "constructor", this).call(this);
                this.attributes.type = "radio"
            }
            return InputRadio
        }(InputRadioCheckBase);
        InputRadio.prettyName = "Radio";
        module.exports = InputRadio
    }, {
        "./InputRadioCheckBase": 78
    }],
    78: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InputBase = require("./InputBase");
        var InputRadioCheckBase = function(_InputBase) {
            _inherits(InputRadioCheckBase, _InputBase);

            function InputRadioCheckBase() {
                _classCallCheck(this, InputRadioCheckBase);
                _get(Object.getPrototypeOf(InputRadioCheckBase.prototype), "constructor", this).call(this);
                this.attributes.type = "";
                this.addCapabilities("checked");
                this.removeCapabilities("readonly")
            }
            _createClass(InputRadioCheckBase, [{
                key: "shouldAddTheFormControlClass",
                value: function shouldAddTheFormControlClass() {
                    return false
                }
            }, {
                key: "update",
                value: function update() {
                    this.element.prop("checked", this.properties.checked);
                    return _get(Object.getPrototypeOf(InputRadioCheckBase.prototype), "update", this).call(this)
                }
            }]);
            return InputRadioCheckBase
        }(InputBase);
        module.exports = InputRadioCheckBase
    }, {
        "./InputBase": 64
    }],
    79: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InputBase = require("./InputBase");
        var InputRange = function(_InputBase) {
            _inherits(InputRange, _InputBase);

            function InputRange() {
                _classCallCheck(this, InputRange);
                _get(Object.getPrototypeOf(InputRange.prototype), "constructor", this).call(this);
                this.attributes.type = "range";
                this.addCapabilities(["min", "max", "step"]);
                this.removeCapabilities("readonly")
            }
            _createClass(InputRange, [{
                key: "shouldAddTheFormControlClass",
                value: function shouldAddTheFormControlClass() {
                    return false
                }
            }]);
            return InputRange
        }(InputBase);
        InputRange.prettyName = "Range Input";
        module.exports = InputRange
    }, {
        "./InputBase": 64
    }],
    80: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InputText = require("./InputText");
        var InputSearch = function(_InputText) {
            _inherits(InputSearch, _InputText);

            function InputSearch() {
                _classCallCheck(this, InputSearch);
                _get(Object.getPrototypeOf(InputSearch.prototype), "constructor", this).call(this);
                this.attributes.type = "search"
            }
            return InputSearch
        }(InputText);
        InputSearch.prettyName = "Search Input";
        module.exports = InputSearch
    }, {
        "./InputText": 82
    }],
    81: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InputText = require("./InputText");
        var InputTel = function(_InputText) {
            _inherits(InputTel, _InputText);

            function InputTel() {
                _classCallCheck(this, InputTel);
                _get(Object.getPrototypeOf(InputTel.prototype), "constructor", this).call(this);
                this.attributes.type = "tel"
            }
            return InputTel
        }(InputText);
        InputTel.prettyName = "Telephone Input";
        module.exports = InputTel
    }, {
        "./InputText": 82
    }],
    82: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InputBase = require("./InputBase");
        var InputText = function(_InputBase) {
            _inherits(InputText, _InputBase);

            function InputText() {
                _classCallCheck(this, InputText);
                _get(Object.getPrototypeOf(InputText.prototype), "constructor", this).call(this);
                this.attributes.type = "text";
                this.addCapabilities(["size", "placeholder", "maxlength", "minlength", "pattern", "autofocus", "autocomplete", "inputmode"])
            }
            return InputText
        }(InputBase);
        InputText.prettyName = "Text Input";
        module.exports = InputText
    }, {
        "./InputBase": 64
    }],
    83: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InputBase = require("./InputBase");
        var InputTextarea = function(_InputBase) {
            _inherits(InputTextarea, _InputBase);

            function InputTextarea() {
                _classCallCheck(this, InputTextarea);
                _get(Object.getPrototypeOf(InputTextarea.prototype), "constructor", this).call(this);
                this.element = $("<textarea>");
                this.defineProperties({
                    id: "textValue",
                    label: "Value",
                    type: "textbox",
                    value: "",
                    group: "input-main"
                });
                this.addCapabilities(["size", "placeholder", "maxlength", "minlength", "autofocus", "autocomplete", "inputmode"]);
                this.removeCapabilities("value");
                this.defineProperties({
                    id: "rows",
                    label: "Rows",
                    type: "textbox",
                    value: "",
                    group: "input-main"
                });
                this.defineProperties({
                    id: "cols",
                    label: "Columns",
                    type: "textbox",
                    value: "",
                    group: "input-main"
                });
                this.defineProperties({
                    id: "spellcheck",
                    label: "Spellcheck",
                    type: "select",
                    value: "",
                    options: InputTextarea.possibleSpellcheckValues,
                    group: "input-input"
                });
                this.defineProperties({
                    id: "wrap",
                    label: "Wrap text",
                    type: "checkbox",
                    value: false,
                    group: "input-input"
                })
            }
            _createClass(InputTextarea, [{
                key: "update",
                value: function update() {
                    delete this.attributes.rows;
                    delete this.attributes.cols;
                    delete this.attributes.spellcheck;
                    delete this.attributes.wrap;
                    if (this.properties.rows) {
                        this.attributes.rows = this.properties.rows
                    }
                    if (this.properties.cols) {
                        this.attributes.cols = this.properties.cols
                    }
                    if (this.properties.wrap) {
                        this.attributes.wrap = "hard"
                    }
                    if (this.properties.spellcheck) {
                        this.attributes.spellcheck = this.properties.spellcheck
                    }
                    this.element[0].textContent = this.properties.textValue;
                    return _get(Object.getPrototypeOf(InputTextarea.prototype), "update", this).call(this)
                }
            }]);
            return InputTextarea
        }(InputBase);
        InputTextarea.possibleSpellcheckValues = [{
            label: "Default",
            value: ""
        }, {
            label: "True",
            value: "true"
        }, {
            label: "False",
            value: "false"
        }];
        InputTextarea.prettyName = "Textarea";
        module.exports = InputTextarea
    }, {
        "./InputBase": 64
    }],
    84: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function;
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InputText = require("./InputText");
        var InputURL = function(_InputText) {
            _inherits(InputURL, _InputText);

            function InputURL() {
                _classCallCheck(this, InputURL);
                _get(Object.getPrototypeOf(InputURL.prototype), "constructor", this).call(this);
                this.attributes.type = "url"
            }
            return InputURL
        }(InputText);
        InputURL.prettyName = "URL Input";
        module.exports = InputURL
    }, {
        "./InputText": 82
    }],
    85: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Div = require("./Div");
        var Heading = require("./Heading");
        var Paragraph = require("./Paragraph");
        var Button = require("./Button");
        var Jumbotron = function(_Div) {
            _inherits(Jumbotron, _Div);

            function Jumbotron() {
                _classCallCheck(this, Jumbotron);
                _get(Object.getPrototypeOf(Jumbotron.prototype), "constructor", this).call(this);
                this.cssClasses.system = "jumbotron"
            }
            _createClass(Jumbotron, [{
                key: "initialize",
                value: function initialize() {
                    var h = new Heading;
                    h.initialize("Heading text");
                    this.insertLast(h);
                    var p = new Paragraph;
                    p.initialize("Nullam id dolor id nibh ultricies vehicula ut id elit. Cras justo odio, dapibus ac facilisis in, egestas eget quam.");
                    this.insertLast(p);
                    var p2 = new Paragraph;
                    p2.initialize("");
                    this.insertLast(p2);
                    var b = new Button;
                    b.properties.type = "Link";
                    b.initialize("Learn more");
                    p2.insertLast(b)
                }
            }]);
            return Jumbotron
        }(Div);
        module.exports = Jumbotron
    }, {
        "./Button": 29,
        "./Div": 42,
        "./Heading": 56,
        "./Paragraph": 110
    }],
    86: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithInlineEditing = require("./ComponentWithInlineEditing");
        var Label = function(_ComponentWithInlineEditing) {
            _inherits(Label, _ComponentWithInlineEditing);

            function Label() {
                _classCallCheck(this, Label);
                _get(Object.getPrototypeOf(Label.prototype), "constructor", this).call(this);
                this.inline = true;
                this.element = $("<span>");
                this.defineProperties({
                    id: "style",
                    label: "Style",
                    type: "select",
                    value: "label-default",
                    options: Label.possibleStyles
                })
            }
            _createClass(Label, [{
                key: "canTakeChild",
                value: function canTakeChild(component) {
                    return _get(Object.getPrototypeOf(Label.prototype), "canTakeChild", this).call(this, component) && !(component instanceof Label)
                }
            }, {
                key: "initialize",
                value: function initialize() {
                    var txt = arguments.length <= 0 || arguments[0] === undefined ? "Label" : arguments[0];
                    _get(Object.getPrototypeOf(Label.prototype), "initialize", this).call(this, txt)
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = "label " + this.properties.style;
                    return _get(Object.getPrototypeOf(Label.prototype), "update", this).call(this)
                }
            }]);
            return Label
        }(ComponentWithInlineEditing);
        Label.possibleStyles = [{
            label: "Default",
            value: "label-default"
        }, {
            label: "Primary",
            value: "label-primary"
        }, {
            label: "Success",
            value: "label-success"
        }, {
            label: "Info",
            value: "label-info"
        }, {
            label: "Warning",
            value: "label-warning"
        }, {
            label: "Danger",
            value: "label-danger"
        }];
        module.exports = Label
    }, {
        "./ComponentWithInlineEditing": 40
    }],
    87: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var ListItem = require("./ListItem");
        var List = function(_ComponentWithChildren) {
            _inherits(List, _ComponentWithChildren);

            function List() {
                var _this = this;
                _classCallCheck(this, List);
                _get(Object.getPrototypeOf(List.prototype), "constructor", this).call(this);
                this.element = $("<ul>");
                this.defineProperties([{
                    id: "style",
                    label: "Style",
                    type: "select",
                    value: "ul",
                    options: List.possibleStyles
                }, {
                    id: "type",
                    label: "Numbering Type",
                    type: "select",
                    value: "",
                    options: List.possibleTypes,
                    visible: function visible() {
                        return _this.properties.style == "ol"
                    }
                }, {
                    id: "start",
                    label: "Start",
                    type: "textbox",
                    value: "",
                    visible: function visible() {
                        return _this.properties.style == "ol"
                    }
                }, {
                    id: "reversed",
                    label: "Reversed",
                    type: "checkbox",
                    value: false,
                    visible: function visible() {
                        return _this.properties.style == "ol"
                    }
                }])
            }
            _createClass(List, [{
                key: "initialize",
                value: function initialize() {
                    var l = new ListItem;
                    l.initialize("Item 1");
                    this.insertLast(l);
                    l = new ListItem;
                    l.initialize("Item 2");
                    this.insertLast(l);
                    l = new ListItem;
                    l.initialize("Item 3");
                    this.insertLast(l);
                    l = new ListItem;
                    l.initialize("Item 4");
                    this.insertLast(l)
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(child) {
                    return _get(Object.getPrototypeOf(List.prototype), "canTakeChild", this).call(this, child) && child instanceof ListItem
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = "";
                    delete this.attributes.type;
                    delete this.attributes.start;
                    delete this.attributes.reversed;
                    var tmp;
                    if (this.properties.style == "ol") {
                        tmp = $("<ol>");
                        if (this.properties.type) {
                            this.attributes.type = this.properties.type
                        }
                        if (this.properties.reversed) {
                            this.attributes.reversed = this.properties.reversed
                        }
                        if (this.properties.start) {
                            this.attributes.start = this.properties.start
                        }
                    } else {
                        tmp = $("<ul>")
                    }
                    if (this.properties.style == "unstyled") {
                        this.cssClasses.system = "list-unstyled"
                    }
                    if (this.properties.style == "inline") {
                        this.cssClasses.system = "list-inline"
                    }
                    this.element.replaceWith(tmp);
                    this.element = tmp;
                    return _get(Object.getPrototypeOf(List.prototype), "update", this).call(this)
                }
            }]);
            return List
        }(ComponentWithChildren);
        List.possibleStyles = [{
            label: "Unordered (UL)",
            value: "ul"
        }, {
            label: "Ordered (OL)",
            value: "ol"
        }, {
            label: "Unstyled (UL)",
            value: "unstyled"
        }, {
            label: "Inline (UL)",
            value: "inline"
        }];
        List.possibleTypes = [{
            label: "Numbers (1,2,3..)",
            value: ""
        }, {
            label: "Letters (a,b,c..)",
            value: "a"
        }, {
            label: "Letters (A,B,C..)",
            value: "A"
        }, {
            label: "Roman (i,ii,iii..)",
            value: "i"
        }, {
            label: "Roman (I,II,III..)",
            value: "I"
        }];
        List.suggestedComponents = ["ListItem"];
        module.exports = List
    }, {
        "./ComponentWithChildren": 39,
        "./ListItem": 90
    }],
    88: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var ListGroupItem = require("./ListGroupItem");
        var ListGroup = function(_ComponentWithChildren) {
            _inherits(ListGroup, _ComponentWithChildren);

            function ListGroup() {
                _classCallCheck(this, ListGroup);
                _get(Object.getPrototypeOf(ListGroup.prototype), "constructor", this).call(this);
                this.element = $("<ul>");
                this.defineProperties({
                    id: "type",
                    label: "Type",
                    type: "select",
                    value: "ul",
                    options: ListGroup.possibleTypes
                })
            }
            _createClass(ListGroup, [{
                key: "initialize",
                value: function initialize() {
                    var lg1 = new ListGroupItem;
                    lg1.initialize("List Group Item 1");
                    this.insertLast(lg1);
                    var lg2 = new ListGroupItem;
                    lg2.initialize("List Group Item 2");
                    this.insertLast(lg2);
                    var lg3 = new ListGroupItem;
                    lg3.initialize("List Group Item 3");
                    this.insertLast(lg3)
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(component) {
                    return _get(Object.getPrototypeOf(ListGroup.prototype), "canTakeChild", this).call(this, component) && component instanceof ListGroupItem
                }
            }, {
                key: "update",
                value: function update() {
                    var tmp = $("<" + typeMap[this.properties.type] + ">");
                    this.element.replaceWith(tmp);
                    this.element = tmp;
                    this.cssClasses.system = "list-group";
                    return _get(Object.getPrototypeOf(ListGroup.prototype), "update", this).call(this)
                }
            }]);
            return ListGroup
        }(ComponentWithChildren);
        var typeMap = {
            ul: "ul",
            "div-with-links": "div",
            "div-with-buttons": "div"
        };
        ListGroup.possibleTypes = [{
            label: "Unordered List",
            value: "ul"
        }, {
            label: "Div With Links",
            value: "div-with-links"
        }, {
            label: "Div With Buttons",
            value: "div-with-buttons"
        }];
        ListGroup.prettyName = "List Group";
        ListGroup.suggestedComponents = ["ListGroupItem"];
        module.exports = ListGroup
    }, {
        "./ComponentWithChildren": 39,
        "./ListGroupItem": 89
    }],
    89: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Span = require("./Span");
        var Paragraph = require("./Paragraph");
        var Heading = require("./Heading");
        var linkOptions = require("../helpers/linkOptions");
        var ListGroupItem = function(_ComponentWithChildren) {
            _inherits(ListGroupItem, _ComponentWithChildren);

            function ListGroupItem() {
                _classCallCheck(this, ListGroupItem);
                _get(Object.getPrototypeOf(ListGroupItem.prototype), "constructor", this).call(this);
                this.element = $("<li>");
                this.defineProperties([{
                    id: "style",
                    label: "Style",
                    type: "select",
                    value: "",
                    options: ListGroupItem.possibleStyles
                }, {
                    id: "active",
                    label: "Active",
                    type: "checkbox",
                    value: false
                }, {
                    id: "disabled",
                    label: "Disabled",
                    type: "checkbox",
                    value: false
                }]);
                linkOptions.construct(this, "", this.isLink.bind(this))
            }
            _createClass(ListGroupItem, [{
                key: "initialize",
                value: function initialize() {
                    var text = arguments.length <= 0 || arguments[0] === undefined ? "List Group Item" : arguments[0];
                    var span = new Span;
                    span.initialize(text);
                    this.insertFirst(span)
                }
            }, {
                key: "drop",
                value: function drop(component) {
                    if (component instanceof Heading) {
                        component.cssClasses.parent = "list-group-item-heading"
                    }
                    if (component instanceof Paragraph) {
                        component.cssClasses.parent = "list-group-item-text"
                    }
                    return component
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(component) {
                    return _get(Object.getPrototypeOf(ListGroupItem.prototype), "canTakeChild", this).call(this, component) && !(component instanceof ListGroupItem)
                }
            }, {
                key: "canBeDroppedIn",
                value: function canBeDroppedIn(parent) {
                    var ListGroup = require("./ListGroup");
                    return _get(Object.getPrototypeOf(ListGroupItem.prototype), "canBeDroppedIn", this).call(this, parent) && parent instanceof ListGroup
                }
            }, {
                key: "undrop",
                value: function undrop(component) {
                    component.cssClasses.parent = "";
                    return component
                }
            }, {
                key: "isLink",
                value: function isLink() {
                    return this.parent && this.parent.properties.type == "div-with-links"
                }
            }, {
                key: "isButton",
                value: function isButton() {
                    return this.parent && this.parent.properties.type == "div-with-buttons"
                }
            }, {
                key: "update",
                value: function update() {
                    var tmp;
                    if (this.isLink()) {
                        tmp = $("<a>")
                    } else if (this.isButton()) {
                        tmp = $("<button>")
                    } else {
                        tmp = $("<li>")
                    }
                    this.element.replaceWith(tmp);
                    this.element = tmp;
                    linkOptions.update(this);
                    this.cssClasses.system = "list-group-item";
                    if (this.properties.style) {
                        this.cssClasses.system += " " + this.properties.style
                    }
                    if (this.properties.active) {
                        this.cssClasses.system += " active"
                    }
                    if (this.properties.disabled) {
                        this.cssClasses.system += " disabled"
                    }
                    return _get(Object.getPrototypeOf(ListGroupItem.prototype), "update", this).call(this)
                }
            }]);
            return ListGroupItem
        }(ComponentWithChildren);
        ListGroupItem.possibleStyles = [{
            label: "Default",
            value: ""
        }, {
            label: "Success",
            value: "list-group-item-success"
        }, {
            label: "Info",
            value: "list-group-item-info"
        }, {
            label: "Warning",
            value: "list-group-item-warning"
        }, {
            label: "Danger",
            value: "list-group-item-danger"
        }];
        ListGroupItem.prettyName = "List Group Item";
        module.exports = ListGroupItem
    }, {
        "../helpers/linkOptions": 177,
        "./ComponentWithChildren": 39,
        "./Heading": 56,
        "./ListGroup": 88,
        "./Paragraph": 110,
        "./Span": 119
    }],
    90: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithInlineEditing = require("./ComponentWithInlineEditing");
        var ListItem = function(_ComponentWithInlineEditing) {
            _inherits(ListItem, _ComponentWithInlineEditing);

            function ListItem() {
                _classCallCheck(this, ListItem);
                _get(Object.getPrototypeOf(ListItem.prototype), "constructor", this).call(this);
                this.element = $("<li>")
            }
            _createClass(ListItem, [{
                key: "canBeDroppedIn",
                value: function canBeDroppedIn(parent) {
                    var List = require("./List");
                    return _get(Object.getPrototypeOf(ListItem.prototype), "canBeDroppedIn", this).call(this, parent) && parent instanceof List
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(child) {
                    var List = require("./List");
                    return _get(Object.getPrototypeOf(ListItem.prototype), "canTakeChild", this).call(this, child) || child instanceof List
                }
            }, {
                key: "initialize",
                value: function initialize() {
                    var txt = arguments.length <= 0 || arguments[0] === undefined ? "List Item" : arguments[0];
                    _get(Object.getPrototypeOf(ListItem.prototype), "initialize", this).call(this, txt)
                }
            }]);
            return ListItem
        }(ComponentWithInlineEditing);
        ListItem.prettyName = "List Item";
        module.exports = ListItem
    }, {
        "./ComponentWithInlineEditing": 40,
        "./List": 87
    }],
    91: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x4, _x5, _x6) {
            var _again = true;
            _function: while (_again) {
                var object = _x4,
                    property = _x5,
                    receiver = _x6;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x4 = parent;
                        _x5 = property;
                        _x6 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var MediaLeft = require("./MediaLeft");
        var MediaRight = require("./MediaRight");
        var MediaBody = require("./MediaBody");
        var Media = function(_ComponentWithChildren) {
            _inherits(Media, _ComponentWithChildren);

            function Media() {
                _classCallCheck(this, Media);
                _get(Object.getPrototypeOf(Media.prototype), "constructor", this).call(this);
                this.element = $("<div>");
                this.cssClasses.system = "media"
            }
            _createClass(Media, [{
                key: "initialize",
                value: function initialize() {
                    this.properties.showMediaLeft = true;
                    this.properties.showMediaBody = true;
                    this.properties.showMediaRight = false;
                    this.insertFirst(this.createOrSelectInstance(MediaLeft));
                    this.insertLast(this.createOrSelectInstance(MediaBody))
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(child) {
                    return child instanceof MediaLeft || child instanceof MediaRight || child instanceof MediaBody
                }
            }, {
                key: "focus",
                value: function focus() {
                    _get(Object.getPrototypeOf(Media.prototype), "focus", this).call(this);
                    var media = this;
                    var mediaOptions = this.getMainOptionsGroup();
                    mediaOptions.add(this.createCheckBoxForSubComponent("showMediaLeft", "Media Left", MediaLeft, function(parent, child) {
                        var index = arguments.length <= 2 || arguments[2] === undefined ? -1 : arguments[2];
                        if (index > -1) {
                            parent.insertAt(child, index);
                            return
                        }
                        parent.insertFirst(child)
                    }));
                    mediaOptions.add(this.createCheckBoxForSubComponent("showMediaBody", "Media Body", MediaBody, function(parent, child) {
                        var index = arguments.length <= 2 || arguments[2] === undefined ? -1 : arguments[2];
                        if (index > -1) {
                            parent.insertAt(child, index);
                            return
                        }
                        var index = 0;
                        for (var i = 0; i < parent.children.length; i++) {
                            if (parent.children[i] instanceof MediaRight) {
                                index = i;
                                break
                            }
                            if (parent.children[i] instanceof MediaLeft) {
                                index = i + 1;
                                break
                            }
                        }
                        parent.insertAt(child, index)
                    }));
                    mediaOptions.add(this.createCheckBoxForSubComponent("showMediaRight", "Media Right", MediaRight, function(parent, child) {
                        var index = arguments.length <= 2 || arguments[2] === undefined ? -1 : arguments[2];
                        if (index > -1) {
                            parent.insertAt(child, index);
                            return
                        }
                        parent.insertLast(child)
                    }))
                }
            }]);
            return Media
        }(ComponentWithChildren);
        module.exports = Media
    }, {
        "./ComponentWithChildren": 39,
        "./MediaBody": 92,
        "./MediaLeft": 93,
        "./MediaRight": 94
    }],
    92: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Heading = require("./Heading");
        var Paragraph = require("./Paragraph");
        var MediaBody = function(_ComponentWithChildren) {
            _inherits(MediaBody, _ComponentWithChildren);

            function MediaBody() {
                _classCallCheck(this, MediaBody);
                _get(Object.getPrototypeOf(MediaBody.prototype), "constructor", this).call(this);
                this.element = $("<div>");
                this.cssClasses.system = "media-body"
            }
            _createClass(MediaBody, [{
                key: "initialize",
                value: function initialize() {
                    var h = new Heading;
                    h.initialize("Media Heading");
                    h.properties.type = "h4";
                    h.cssClasses.parent = "media-heading";
                    this.insertFirst(h);
                    var p = new Paragraph;
                    p.initialize("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis maximus nisl ac diam feugiat, non vestibulum libero posuere. Vivamus pharetra leo non nulla egestas, nec malesuada orci finibus. ");
                    this.insertLast(p)
                }
            }, {
                key: "drop",
                value: function drop(component) {
                    if (component instanceof Heading) {
                        component.cssClasses.parent = "media-heading"
                    }
                    return component
                }
            }, {
                key: "undrop",
                value: function undrop(component) {
                    component.cssClasses.parent = "";
                    return component
                }
            }]);
            return MediaBody
        }(ComponentWithChildren);
        MediaBody.prettyName = "Media Body";
        module.exports = MediaBody
    }, {
        "./ComponentWithChildren": 39,
        "./Heading": 56,
        "./Paragraph": 110
    }],
    93: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Image = require("./Image");
        var linkOptions = require("../helpers/linkOptions");
        var MediaLeft = function(_ComponentWithChildren) {
            _inherits(MediaLeft, _ComponentWithChildren);

            function MediaLeft() {
                _classCallCheck(this, MediaLeft);
                _get(Object.getPrototypeOf(MediaLeft.prototype), "constructor", this).call(this);
                this.element = $("<div>");
                this.defineClassSpecificVariables();
                this.defineProperties([{
                    id: "position",
                    label: "Media Position",
                    type: "select",
                    value: "",
                    options: MediaLeft.possiblePositions
                }, {
                    id: "link",
                    label: "Show Link",
                    type: "checkbox",
                    value: true
                }]);
                linkOptions.construct(this, "", [this.properties, "link"])
            }
            _createClass(MediaLeft, [{
                key: "defineClassSpecificVariables",
                value: function defineClassSpecificVariables() {
                    this.className = "media-left"
                }
            }, {
                key: "initialize",
                value: function initialize() {
                    var img = new Image;
                    img.initialize();
                    img.cssClasses.parent = "media-object";
                    this.insertFirst(img)
                }
            }, {
                key: "drop",
                value: function drop(component) {
                    component.cssClasses.parent = "media-object";
                    return component
                }
            }, {
                key: "undrop",
                value: function undrop(component) {
                    component.cssClasses.parent = "";
                    return component
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = this.className;
                    if (this.properties.position) {
                        this.cssClasses.system += " " + this.properties.position
                    }
                    _get(Object.getPrototypeOf(MediaLeft.prototype), "startUpdate", this).call(this);
                    if (this.properties.link) {
                        var a = document.createElement("a");
                        linkOptions.updateDOMNode(this, a);
                        this.element.children().appendTo(a);
                        this.element.append(a)
                    }
                    return _get(Object.getPrototypeOf(MediaLeft.prototype), "finishUpdate", this).call(this)
                }
            }]);
            return MediaLeft
        }(ComponentWithChildren);
        MediaLeft.possiblePositions = [{
            label: "Default",
            value: ""
        }, {
            label: "Top",
            value: "media-top"
        }, {
            label: "Middle",
            value: "media-middle"
        }, {
            label: "Bottom",
            value: "media-bottom"
        }];
        MediaLeft.prettyName = "Media Left";
        module.exports = MediaLeft
    }, {
        "../helpers/linkOptions": 177,
        "./ComponentWithChildren": 39,
        "./Image": 61
    }],
    94: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var MediaLeft = require("./MediaLeft");
        var MediaRight = function(_MediaLeft) {
            _inherits(MediaRight, _MediaLeft);

            function MediaRight() {
                _classCallCheck(this, MediaRight);
                _get(Object.getPrototypeOf(MediaRight.prototype), "constructor", this).apply(this, arguments)
            }
            _createClass(MediaRight, [{
                key: "defineClassSpecificVariables",
                value: function defineClassSpecificVariables() {
                    this.className = "media-right"
                }
            }]);
            return MediaRight
        }(MediaLeft);
        MediaRight.prettyName = "Media Right";
        module.exports = MediaRight
    }, {
        "./MediaLeft": 93
    }],
    95: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var NavItem = require("./NavItem");
        var NavBar = require("./NavBar");
        var Nav = function(_ComponentWithChildren) {
            _inherits(Nav, _ComponentWithChildren);

            function Nav() {
                var _this = this;
                _classCallCheck(this, Nav);
                _get(Object.getPrototypeOf(Nav.prototype), "constructor", this).call(this);
                this.element = $("<ul>");
                this.defineProperties([{
                    id: "type",
                    label: "Nav Type",
                    type: "select",
                    value: "nav-tabs",
                    options: Nav.possibleTypes,
                    visible: function visible() {
                        return !_this.isParentNavbar()
                    }
                }, {
                    id: "stacked",
                    label: "Stacked",
                    type: "checkbox",
                    value: false,
                    visible: function visible() {
                        return _this.properties.type == "nav-pills"
                    }
                }, {
                    id: "justified",
                    label: "Justified",
                    type: "checkbox",
                    value: false,
                    visible: function visible() {
                        return !_this.isParentNavbar()
                    }
                }])
            }
            _createClass(Nav, [{
                key: "initialize",
                value: function initialize() {
                    var n = new NavItem;
                    n.initialize("First Item", "#", true);
                    this.insertLast(n);
                    var n = new NavItem;
                    n.initialize("Second Item", "#");
                    this.insertLast(n);
                    var n = new NavItem;
                    n.initialize("Third Item", "#");
                    this.insertLast(n)
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(component) {
                    var Dropdown = require("./Dropdown");
                    return component instanceof NavItem || component instanceof Dropdown
                }
            }, {
                key: "isParentNavbar",
                value: function isParentNavbar() {
                    return this.parent instanceof NavBar
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = "nav";
                    if (this.isParentNavbar()) {
                        this.cssClasses.system += " navbar-nav"
                    } else {
                        this.cssClasses.system += " " + this.properties.type;
                        if (this.properties.stacked) {
                            this.cssClasses.system += " nav-stacked"
                        }
                        if (this.properties.justified) {
                            this.cssClasses.system += " nav-justified"
                        }
                    }
                    return _get(Object.getPrototypeOf(Nav.prototype), "update", this).call(this)
                }
            }]);
            return Nav
        }(ComponentWithChildren);
        Nav.possibleTypes = [{
            label: "Tabs",
            value: "nav-tabs"
        }, {
            label: "Pills",
            value: "nav-pills"
        }];
        Nav.suggestedComponents = ["NavItem", "Dropdown"];
        module.exports = Nav
    }, {
        "./ComponentWithChildren": 39,
        "./Dropdown": 43,
        "./NavBar": 96,
        "./NavItem": 98
    }],
    96: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var SelectOption = require("../panes/SelectOption");
        var GroupOption = require("../panes/GroupOption");
        var Button = require("./Button");
        var Paragraph = require("./Paragraph");
        var Anchor = require("./Anchor");
        var NavBarBrand = require("./NavBarBrand");
        var NavBar = function(_ComponentWithChildren) {
            _inherits(NavBar, _ComponentWithChildren);

            function NavBar() {
                _classCallCheck(this, NavBar);
                _get(Object.getPrototypeOf(NavBar.prototype), "constructor", this).call(this);
                this.element = $("<nav>");
                this.defineProperties([{
                    id: "style",
                    label: "Style",
                    type: "select",
                    value: "navbar-default",
                    options: NavBar.possibleStyles
                }, {
                    id: "position",
                    label: "Position",
                    type: "select",
                    value: "",
                    options: NavBar.possiblePositions
                }, {
                    id: "fluid",
                    label: "Fluid",
                    type: "checkbox",
                    value: true
                }])
            }
            _createClass(NavBar, [{
                key: "initialize",
                value: function initialize() {
                    var Nav = require("./Nav");
                    var n = new Nav;
                    n.initialize();
                    this.insertLast(n);
                    this.properties.showBrand = true;
                    this.insertFirst(this.createOrSelectInstance(NavBarBrand));
                    this.resetNavCollapseID()
                }
            }, {
                key: "focus",
                value: function focus() {
                    _get(Object.getPrototypeOf(NavBar.prototype), "focus", this).call(this);
                    var navBarOptions = this.getMainOptionsGroup();
                    navBarOptions.add(this.createCheckBoxForSubComponent("showBrand", "Brand", NavBarBrand, function(parent, child) {
                        parent.insertFirst(child)
                    }))
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(component) {
                    var Nav = require("./Nav");
                    var Form = require("./Form");
                    return component instanceof Nav || component instanceof Form || component instanceof Anchor || component instanceof Button || component instanceof Paragraph
                }
            }, {
                key: "childFocus",
                value: function childFocus(child) {
                    var _this = this;
                    var group = new GroupOption({
                        id: child.constructor.name.toLowerCase() + "-in-navbar",
                        label: child.getName() + " In NavBar"
                    });
                    app.optionsPane.add(group);
                    group.add(new SelectOption({
                        id: "navbarAlignment",
                        label: "Alignment",
                        value: [child.properties, "navbarAlignment", ""],
                        options: [{
                            label: "Default",
                            value: ""
                        }, {
                            label: "Left",
                            value: "navbar-left"
                        }, {
                            label: "Right",
                            value: "navbar-right"
                        }],
                        component: child,
                        history: "Change Alignment In NavBar",
                        visible: function visible() {
                            return child.parent == _this
                        }
                    }))
                }
            }, {
                key: "childUpdate",
                value: function childUpdate(child) {
                    var parent = "";
                    if (child instanceof Button) {
                        parent = "navbar-btn"
                    } else if (child instanceof Paragraph) {
                        parent = "navbar-text"
                    }
                    if (child.properties.navbarAlignment) {
                        parent += " " + child.properties.navbarAlignment
                    }
                    child.cssClasses.parent = parent
                }
            }, {
                key: "undrop",
                value: function undrop(component) {
                    component.cssClasses.parent = "";
                    return component
                }
            }, {
                key: "resetNavCollapseID",
                value: function resetNavCollapseID() {
                    this.overrides.ids["/0/1"] = app.canvas.generateUniqueID("navcol")
                }
            }, {
                key: "afterDuplicate",
                value: function afterDuplicate() {
                    _get(Object.getPrototypeOf(NavBar.prototype), "afterDuplicate", this).call(this);
                    this.resetNavCollapseID()
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = "navbar " + this.properties.style;
                    if (this.properties.position) {
                        this.cssClasses.system += " " + this.properties.position
                    }
                    _get(Object.getPrototypeOf(NavBar.prototype), "startUpdate", this).call(this);
                    var container = $("<div>");
                    if (this.properties.fluid) {
                        container.addClass("container-fluid")
                    } else {
                        container.addClass("container")
                    }
                    var navbarHeader = $('<div class="navbar-header">');
                    container.append(navbarHeader);
                    navbarHeader.append('<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#' + this.overrides.ids["/0/1"] + '">\n			<span class="sr-only">Toggle navigation</span>\n			<span class="icon-bar"></span>\n			<span class="icon-bar"></span>\n			<span class="icon-bar"></span>\n		</button>');
                    if (this.properties.showBrand) {
                        this.element.children().first().appendTo(navbarHeader)
                    }
                    var collapse = $('<div class="collapse navbar-collapse">');
                    container.append(collapse);
                    this.element.children().appendTo(collapse);
                    this.element.empty();
                    this.element.append(container);
                    return _get(Object.getPrototypeOf(NavBar.prototype), "finishUpdate", this).call(this)
                }
            }]);
            return NavBar
        }(ComponentWithChildren);
        NavBar.possibleStyles = [{
            label: "Default",
            value: "navbar-default"
        }, {
            label: "Inverted colors",
            value: "navbar-inverse"
        }];
        NavBar.possiblePositions = [{
            label: "Default",
            value: ""
        }, {
            label: "Fixed to top",
            value: "navbar-fixed-top"
        }, {
            label: "Fixed to bottom",
            value: "navbar-fixed-bottom"
        }, {
            label: "Static top",
            value: "navbar-static-top"
        }];
        NavBar.prettyName = "Navbar";
        NavBar.suggestedComponents = ["Nav", "NavItem", "Dropdown", "Paragraph", "Anchor", "Button"];
        module.exports = NavBar
    }, {
        "../panes/GroupOption": 432,
        "../panes/SelectOption": 441,
        "./Anchor": 20,
        "./Button": 29,
        "./ComponentWithChildren": 39,
        "./Form": 51,
        "./Nav": 95,
        "./NavBarBrand": 97,
        "./Paragraph": 110
    }],
    97: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Anchor = require("./Anchor");
        var NavBarBrand = function(_Anchor) {
            _inherits(NavBarBrand, _Anchor);

            function NavBarBrand() {
                _classCallCheck(this, NavBarBrand);
                _get(Object.getPrototypeOf(NavBarBrand.prototype), "constructor", this).call(this);
                this.fixate();
                this.cssClasses.system.main = "navbar-brand"
            }
            _createClass(NavBarBrand, [{
                key: "initialize",
                value: function initialize() {
                    var txt = arguments.length <= 0 || arguments[0] === undefined ? "Brand" : arguments[0];
                    _get(Object.getPrototypeOf(NavBarBrand.prototype), "initialize", this).call(this, txt)
                }
            }]);
            return NavBarBrand
        }(Anchor);
        NavBarBrand.prettyName = "Navbar Brand";
        module.exports = NavBarBrand
    }, {
        "./Anchor": 20
    }],
    98: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x3, _x4, _x5) {
            var _again = true;
            _function: while (_again) {
                var object = _x3,
                    property = _x4,
                    receiver = _x5;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x3 = parent;
                        _x4 = property;
                        _x5 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Anchor = require("./Anchor");
        var NavItem = function(_ComponentWithChildren) {
            _inherits(NavItem, _ComponentWithChildren);

            function NavItem() {
                _classCallCheck(this, NavItem);
                _get(Object.getPrototypeOf(NavItem.prototype), "constructor", this).call(this);
                this.inline = true;
                this.element = $("<li>");
                this.defineProperties([{
                    id: "disabled",
                    label: "Disabled",
                    type: "checkbox",
                    value: false
                }, {
                    id: "active",
                    label: "Active",
                    type: "checkbox",
                    value: false
                }])
            }
            _createClass(NavItem, [{
                key: "initialize",
                value: function initialize(text, url) {
                    var active = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
                    var disabled = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
                    var link = new Anchor;
                    link.initialize(text, url);
                    link.fixate();
                    this.insertFirst(link);
                    this.properties.disabled = disabled;
                    this.properties.active = active
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(component) {
                    return false
                }
            }, {
                key: "canBeDroppedIn",
                value: function canBeDroppedIn(component) {
                    var Nav = require("./Nav");
                    return _get(Object.getPrototypeOf(NavItem.prototype), "canBeDroppedIn", this).call(this, component) && component instanceof Nav
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = "";
                    if (this.properties.disabled) {
                        this.cssClasses.system += "disabled "
                    }
                    if (this.properties.active) {
                        this.cssClasses.system += "active"
                    }
                    delete this.attributes.role;
                    if (this.parent.isParentNavbar()) {
                        this.attributes.role = "presentation"
                    }
                    return _get(Object.getPrototypeOf(NavItem.prototype), "update", this).call(this)
                }
            }]);
            return NavItem
        }(ComponentWithChildren);
        NavItem.prettyName = "Nav Item";
        module.exports = NavItem
    }, {
        "./Anchor": 20,
        "./ComponentWithChildren": 39,
        "./Nav": 95
    }],
    99: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Div = require("./Div");
        var Heading = require("./Heading");
        var Small = require("./Small");
        var PageHeader = function(_Div) {
            _inherits(PageHeader, _Div);

            function PageHeader() {
                _classCallCheck(this, PageHeader);
                _get(Object.getPrototypeOf(PageHeader.prototype), "constructor", this).call(this);
                this.cssClasses.system = "page-header"
            }
            _createClass(PageHeader, [{
                key: "initialize",
                value: function initialize() {
                    var h = new Heading;
                    h.initialize("Page header ");
                    this.insertLast(h);
                    var s = new Small;
                    s.initialize("Subtext for header");
                    h.insertLast(s)
                }
            }]);
            return PageHeader
        }(Div);
        PageHeader.prettyName = "Page Header";
        module.exports = PageHeader
    }, {
        "./Div": 42,
        "./Heading": 56,
        "./Small": 118
    }],
    100: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var PagerItemLeft = require("./PagerItemLeft");
        var PagerItemRight = require("./PagerItemRight");
        var Pager = function(_ComponentWithChildren) {
            _inherits(Pager, _ComponentWithChildren);

            function Pager() {
                _classCallCheck(this, Pager);
                _get(Object.getPrototypeOf(Pager.prototype), "constructor", this).call(this);
                this.element = $("<nav>");
                this.defineProperties([{
                    id: "distributed",
                    label: "Distributed",
                    type: "checkbox",
                    value: true
                }])
            }
            _createClass(Pager, [{
                key: "initialize",
                value: function initialize() {
                    this.properties.showPagerItemLeft = true;
                    this.properties.showPagerItemRight = true;
                    this.insertFirst(this.createOrSelectInstance(PagerItemLeft));
                    this.insertLast(this.createOrSelectInstance(PagerItemRight))
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild() {
                    return false
                }
            }, {
                key: "focus",
                value: function focus() {
                    _get(Object.getPrototypeOf(Pager.prototype), "focus", this).call(this);
                    var pagerOptions = this.getMainOptionsGroup();
                    pagerOptions.add(this.createCheckBoxForSubComponent("showPagerItemLeft", "Page Left", PagerItemLeft, function(parent, child) {
                        parent.insertFirst(child)
                    }));
                    pagerOptions.add(this.createCheckBoxForSubComponent("showPagerItemRight", "Page Right", PagerItemRight, function(parent, child) {
                        parent.insertLast(child)
                    }))
                }
            }, {
                key: "update",
                value: function update() {
                    _get(Object.getPrototypeOf(Pager.prototype), "startUpdate", this).call(this);
                    var ul = $('<ul class="pager">');
                    if (this.properties.size) {
                        ul.addClass(this.properties.size)
                    }
                    this.element.children().appendTo(ul);
                    this.element.append(ul);
                    return _get(Object.getPrototypeOf(Pager.prototype), "finishUpdate", this).call(this)
                }
            }]);
            return Pager
        }(ComponentWithChildren);
        module.exports = Pager
    }, {
        "./ComponentWithChildren": 39,
        "./PagerItemLeft": 102,
        "./PagerItemRight": 103
    }],
    101: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Anchor = require("./Anchor");
        var PagerItem = function(_ComponentWithChildren) {
            _inherits(PagerItem, _ComponentWithChildren);

            function PagerItem() {
                _classCallCheck(this, PagerItem);
                _get(Object.getPrototypeOf(PagerItem.prototype), "constructor", this).call(this);
                this.element = $("<li>");
                var that = this;
                this.defineProperties({
                    id: "disabled",
                    label: "Disabled",
                    type: "checkbox",
                    value: false
                });
                this.cssClass = "";
                this.fixate()
            }
            _createClass(PagerItem, [{
                key: "canTakeChild",
                value: function canTakeChild() {
                    return false
                }
            }, {
                key: "initialize",
                value: function initialize(txt) {
                    var link = new Anchor;
                    link.initialize(txt);
                    link.fixate();
                    this.insertFirst(link)
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = "";
                    if (this.parent.properties.distributed) {
                        this.cssClasses.system = this.cssClass
                    }
                    if (this.properties.disabled) {
                        this.cssClasses.system += " disabled"
                    }
                    return _get(Object.getPrototypeOf(PagerItem.prototype), "update", this).call(this)
                }
            }]);
            return PagerItem
        }(ComponentWithChildren);
        PagerItem.prettyName = "Pager Item";
        module.exports = PagerItem
    }, {
        "./Anchor": 20,
        "./ComponentWithChildren": 39
    }],
    102: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var PagerItem = require("./PagerItem");
        var Anchor = require("./Anchor");
        var PagerItemLeft = function(_PagerItem) {
            _inherits(PagerItemLeft, _PagerItem);

            function PagerItemLeft() {
                _classCallCheck(this, PagerItemLeft);
                _get(Object.getPrototypeOf(PagerItemLeft.prototype), "constructor", this).call(this);
                this.cssClass = "previous"
            }
            _createClass(PagerItemLeft, [{
                key: "initialize",
                value: function initialize() {
                    var txt = arguments.length <= 0 || arguments[0] === undefined ? "Older" : arguments[0];
                    _get(Object.getPrototypeOf(PagerItemLeft.prototype), "initialize", this).call(this, txt)
                }
            }]);
            return PagerItemLeft
        }(PagerItem);
        PagerItemLeft.prettyName = "Pager Item Left";
        module.exports = PagerItemLeft
    }, {
        "./Anchor": 20,
        "./PagerItem": 101
    }],
    103: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var PagerItem = require("./PagerItem");
        var Anchor = require("./Anchor");
        var PagerItemRight = function(_PagerItem) {
            _inherits(PagerItemRight, _PagerItem);

            function PagerItemRight() {
                _classCallCheck(this, PagerItemRight);
                _get(Object.getPrototypeOf(PagerItemRight.prototype), "constructor", this).call(this);
                this.cssClass = "next"
            }
            _createClass(PagerItemRight, [{
                key: "initialize",
                value: function initialize() {
                    var txt = arguments.length <= 0 || arguments[0] === undefined ? "Newer" : arguments[0];
                    _get(Object.getPrototypeOf(PagerItemRight.prototype), "initialize", this).call(this, txt)
                }
            }]);
            return PagerItemRight
        }(PagerItem);
        PagerItemRight.prettyName = "Pager Item Right";
        module.exports = PagerItemRight
    }, {
        "./Anchor": 20,
        "./PagerItem": 101
    }],
    104: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var PaginationItem = require("./PaginationItem");
        var Pagination = function(_ComponentWithChildren) {
            _inherits(Pagination, _ComponentWithChildren);

            function Pagination() {
                _classCallCheck(this, Pagination);
                _get(Object.getPrototypeOf(Pagination.prototype), "constructor", this).call(this);
                this.element = $("<nav>");
                this.defineProperties([{
                    id: "size",
                    label: "Size",
                    type: "select",
                    value: "",
                    options: Pagination.possibleSizes
                }])
            }
            _createClass(Pagination, [{
                key: "initialize",
                value: function initialize() {
                    var p = new PaginationItem;
                    p.initialize();
                    p.properties.type = "previous";
                    this.insertLast(p);
                    for (var i = 1; i < 6; i++) {
                        p = new PaginationItem;
                        p.initialize();
                        p.properties.value = i;
                        this.insertLast(p)
                    }
                    p = new PaginationItem;
                    p.initialize();
                    p.properties.type = "next";
                    this.insertLast(p)
                }
            }, {
                key: "update",
                value: function update() {
                    _get(Object.getPrototypeOf(Pagination.prototype), "startUpdate", this).call(this);
                    var ul = $('<ul class="pagination">');
                    if (this.properties.size) {
                        ul.addClass(this.properties.size)
                    }
                    this.element.children().appendTo(ul);
                    this.element.append(ul);
                    return _get(Object.getPrototypeOf(Pagination.prototype), "finishUpdate", this).call(this)
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(component) {
                    return component instanceof PaginationItem
                }
            }]);
            return Pagination
        }(ComponentWithChildren);
        Pagination.possibleSizes = [{
            label: "Small",
            value: "pagination-sm"
        }, {
            label: "Default",
            value: ""
        }, {
            label: "Large",
            value: "pagination-lg"
        }];
        module.exports = Pagination
    }, {
        "./ComponentWithChildren": 39,
        "./PaginationItem": 105
    }],
    105: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Component = require("./Component");
        var linkOptions = require("../helpers/linkOptions");
        var PaginationItem = function(_Component) {
            _inherits(PaginationItem, _Component);

            function PaginationItem() {
                _classCallCheck(this, PaginationItem);
                _get(Object.getPrototypeOf(PaginationItem.prototype), "constructor", this).call(this);
                this.element = $('<li><a href="#"></a></li>');
                var that = this;
                this.defineProperties([{
                    id: "type",
                    label: "Type",
                    type: "select",
                    value: "default",
                    options: PaginationItem.possibleTypes
                }, {
                    id: "disabled",
                    label: "Disabled",
                    type: "checkbox",
                    value: false
                }, {
                    id: "active",
                    label: "Active",
                    type: "checkbox",
                    value: false
                }, {
                    id: "value",
                    label: "Value",
                    type: "textbox",
                    value: "",
                    visible: function visible() {
                        return that.properties.type == "default"
                    }
                }]);
                linkOptions.construct(this)
            }
            _createClass(PaginationItem, [{
                key: "canBeDroppedIn",
                value: function canBeDroppedIn(component) {
                    var Pagination = require("./Pagination");
                    return component instanceof Pagination
                }
            }, {
                key: "update",
                value: function update() {
                    var link = this.element.find("a");
                    link.removeAttr("aria-label");
                    link.empty();
                    if (this.properties.type == "previous") {
                        link.attr("aria-label", "Previous");
                        link.html('<span aria-hidden="true">&laquo;</span>')
                    } else if (this.properties.type == "next") {
                        link.attr("aria-label", "Next");
                        link.html('<span aria-hidden="true">&raquo;</span>')
                    } else {
                        link.text(this.properties.value)
                    }
                    this.cssClasses.system = "";
                    if (this.properties.disabled) {
                        this.cssClasses.system += " disabled"
                    }
                    if (this.properties.active) {
                        this.cssClasses.system += " active";
                        link.add('<span class="sr-only">(current)</span>')
                    }
                    linkOptions.updateDOMNode(this, link[0]);
                    return _get(Object.getPrototypeOf(PaginationItem.prototype), "update", this).call(this)
                }
            }]);
            return PaginationItem
        }(Component);
        PaginationItem.possibleTypes = [{
            label: "Default",
            value: "default"
        }, {
            label: "Previous",
            value: "previous"
        }, {
            label: "Next",
            value: "next"
        }];
        PaginationItem.prettyName = "Pagination Item";
        module.exports = PaginationItem
    }, {
        "../helpers/linkOptions": 177,
        "./Component": 38,
        "./Pagination": 104
    }],
    106: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x4, _x5, _x6) {
            var _again = true;
            _function: while (_again) {
                var object = _x4,
                    property = _x5,
                    receiver = _x6;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x4 = parent;
                        _x5 = property;
                        _x6 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var CheckBoxOption = require("../panes/CheckBoxOption");
        var ComponentWithChildren = require("./ComponentWithChildren");
        var PanelBody = require("./PanelBody");
        var PanelHeading = require("./PanelHeading");
        var PanelFooter = require("./PanelFooter");
        var Panel = function(_ComponentWithChildren) {
            _inherits(Panel, _ComponentWithChildren);

            function Panel() {
                _classCallCheck(this, Panel);
                _get(Object.getPrototypeOf(Panel.prototype), "constructor", this).call(this);
                this.element = $("<div>");
                this.defineProperties({
                    id: "style",
                    label: "Style",
                    type: "select",
                    value: "panel-default",
                    options: Panel.possibleStyles
                })
            }
            _createClass(Panel, [{
                key: "initialize",
                value: function initialize() {
                    this.properties.showPanelHeading = true;
                    this.properties.showPanelBody = true;
                    this.properties.showPanelFooter = false;
                    this.insertFirst(this.createOrSelectInstance(PanelHeading));
                    this.insertLast(this.createOrSelectInstance(PanelBody))
                }
            }, {
                key: "focus",
                value: function focus() {
                    _get(Object.getPrototypeOf(Panel.prototype), "focus", this).call(this);
                    var panel = this;
                    var panelOptions = app.optionsPane.getById("panel-options");
                    panelOptions.add(this.createCheckBoxForSubComponent("showPanelHeading", "Panel Heading", PanelHeading, function(parent, child) {
                        var index = arguments.length <= 2 || arguments[2] === undefined ? -1 : arguments[2];
                        if (index > -1) {
                            parent.insertAt(child, index);
                            return
                        }
                        parent.insertFirst(child)
                    }));
                    panelOptions.add(this.createCheckBoxForSubComponent("showPanelBody", "Panel Body", PanelBody, function(parent, child) {
                        var index = arguments.length <= 2 || arguments[2] === undefined ? -1 : arguments[2];
                        if (index > -1) {
                            parent.insertAt(child, index);
                            return
                        }
                        var index = 0;
                        for (var i = 0; i < parent.children.length; i++) {
                            if (parent.children[i] instanceof PanelHeading) {
                                index = i + 1;
                                break
                            }
                        }
                        parent.insertAt(child, index)
                    }));
                    panelOptions.add(this.createCheckBoxForSubComponent("showPanelFooter", "Panel Footer", PanelFooter, function(parent, child) {
                        var index = arguments.length <= 2 || arguments[2] === undefined ? -1 : arguments[2];
                        if (index > -1) {
                            parent.insertAt(child, index);
                            return
                        }
                        parent.insertLast(child)
                    }))
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(component) {
                    return !(component instanceof Panel)
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = "panel " + this.properties.style;
                    return _get(Object.getPrototypeOf(Panel.prototype), "update", this).call(this)
                }
            }]);
            return Panel
        }(ComponentWithChildren);
        Panel.possibleStyles = [{
            label: "Default",
            value: "panel-default"
        }, {
            label: "Primary",
            value: "panel-primary"
        }, {
            label: "Success",
            value: "panel-success"
        }, {
            label: "Info",
            value: "panel-info"
        }, {
            label: "Warning",
            value: "panel-warning"
        }, {
            label: "Danger",
            value: "panel-danger"
        }];
        module.exports = Panel
    }, {
        "../panes/CheckBoxOption": 429,
        "./ComponentWithChildren": 39,
        "./PanelBody": 107,
        "./PanelFooter": 108,
        "./PanelHeading": 109
    }],
    107: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Div = require("./Div");
        var Span = require("./Span");
        var PanelBody = function(_Div) {
            _inherits(PanelBody, _Div);

            function PanelBody() {
                _classCallCheck(this, PanelBody);
                _get(Object.getPrototypeOf(PanelBody.prototype), "constructor", this).call(this);
                this.cssClasses.system = "panel-body"
            }
            _createClass(PanelBody, [{
                key: "initialize",
                value: function initialize() {
                    var txt = arguments.length <= 0 || arguments[0] === undefined ? "Panel Body" : arguments[0];
                    var span = new Span;
                    span.initialize(txt);
                    this.insertFirst(span)
                }
            }]);
            return PanelBody
        }(Div);
        PanelBody.prettyName = "Panel Body";
        module.exports = PanelBody
    }, {
        "./Div": 42,
        "./Span": 119
    }],
    108: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Div = require("./Div");
        var Span = require("./Span");
        var PanelFooter = function(_Div) {
            _inherits(PanelFooter, _Div);

            function PanelFooter() {
                _classCallCheck(this, PanelFooter);
                _get(Object.getPrototypeOf(PanelFooter.prototype), "constructor", this).call(this);
                this.cssClasses.system = "panel-footer"
            }
            _createClass(PanelFooter, [{
                key: "initialize",
                value: function initialize() {
                    var txt = arguments.length <= 0 || arguments[0] === undefined ? "Panel Footer" : arguments[0];
                    var span = new Span;
                    span.initialize(txt);
                    this.insertFirst(span)
                }
            }]);
            return PanelFooter
        }(Div);
        PanelFooter.prettyName = "Panel Footer";
        module.exports = PanelFooter
    }, {
        "./Div": 42,
        "./Span": 119
    }],
    109: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Div = require("./Div");
        var Heading = require("./Heading");
        var PanelHeading = function(_Div) {
            _inherits(PanelHeading, _Div);

            function PanelHeading() {
                _classCallCheck(this, PanelHeading);
                _get(Object.getPrototypeOf(PanelHeading.prototype), "constructor", this).call(this);
                this.cssClasses.system = "panel-heading"
            }
            _createClass(PanelHeading, [{
                key: "initialize",
                value: function initialize() {
                    var txt = arguments.length <= 0 || arguments[0] === undefined ? "Panel Heading" : arguments[0];
                    var heading = new Heading;
                    heading.initialize(txt);
                    heading.properties.type = "h3";
                    heading.cssClasses.parent = "panel-title";
                    this.insertFirst(heading)
                }
            }]);
            return PanelHeading
        }(Div);
        PanelHeading.prettyName = "Panel Heading";
        module.exports = PanelHeading
    }, {
        "./Div": 42,
        "./Heading": 56
    }],
    110: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithInlineEditing = require("./ComponentWithInlineEditing");
        var textOptions = require("../helpers/textOptions");
        var Paragraph = function(_ComponentWithInlineEditing) {
            _inherits(Paragraph, _ComponentWithInlineEditing);

            function Paragraph() {
                _classCallCheck(this, Paragraph);
                _get(Object.getPrototypeOf(Paragraph.prototype), "constructor", this).call(this);
                this.element = $("<p>");
                this.defineProperties([{
                    id: "text-lead",
                    label: "Lead",
                    type: "checkbox",
                    value: false
                }]);
                this.cssClasses.system = {};
                textOptions.construct(this)
            }
            _createClass(Paragraph, [{
                key: "initialize",
                value: function initialize() {
                    var str = arguments.length <= 0 || arguments[0] === undefined ? "Paragraph" : arguments[0];
                    _get(Object.getPrototypeOf(Paragraph.prototype), "initialize", this).call(this, str)
                }
            }, {
                key: "update",
                value: function update() {
                    delete this.cssClasses.system.main;
                    if (this.properties["text-lead"]) {
                        this.cssClasses.system.main = " lead"
                    }
                    textOptions.update(this);
                    return _get(Object.getPrototypeOf(Paragraph.prototype), "update", this).call(this)
                }
            }]);
            return Paragraph
        }(ComponentWithInlineEditing);
        module.exports = Paragraph
    }, {
        "../helpers/textOptions": 192,
        "./ComponentWithInlineEditing": 40
    }],
    111: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Component = require("./Component");
        var ProgressBar = function(_Component) {
            _inherits(ProgressBar, _Component);

            function ProgressBar() {
                _classCallCheck(this, ProgressBar);
                _get(Object.getPrototypeOf(ProgressBar.prototype), "constructor", this).call(this);
                this.defineProperties([{
                    id: "percentage",
                    label: "Percentage",
                    type: "textbox",
                    value: ""
                }, {
                    id: "style",
                    label: "Style",
                    type: "select",
                    value: "",
                    options: ProgressBar.possibleStyles
                }, {
                    id: "striped",
                    label: "Striped",
                    type: "checkbox",
                    value: false
                }, {
                    id: "animated",
                    label: "Animated",
                    type: "checkbox",
                    value: false
                }, {
                    id: "showLabel",
                    label: "Show Label",
                    type: "checkbox",
                    value: true
                }]);
                this.cssClasses.system = "progress";
                this.element = $("<div>\n			<div></div>\n		</div>")
            }
            _createClass(ProgressBar, [{
                key: "update",
                value: function update() {
                    var insideDiv = this.element.find("div");
                    insideDiv.attr("class", "progress-bar");
                    insideDiv.empty();
                    var percentage = this.properties.percentage || 0;
                    if (this.properties.showLabel) {
                        insideDiv.append(percentage + "%")
                    } else {
                        var span = $('<span class="sr-only">');
                        span.text(percentage + "%");
                        insideDiv.append(span)
                    }
                    if (this.properties.style) {
                        insideDiv.addClass(this.properties.style)
                    }
                    if (this.properties.striped) {
                        insideDiv.addClass("progress-bar-striped")
                    }
                    if (this.properties.animated) {
                        insideDiv.addClass("active")
                    }
                    insideDiv.attr("aria-valuenow", percentage);
                    insideDiv.attr("aria-valuemin", 0);
                    insideDiv.attr("aria-valuemax", 100);
                    insideDiv.css("width", percentage + "%");
                    return _get(Object.getPrototypeOf(ProgressBar.prototype), "update", this).call(this)
                }
            }]);
            return ProgressBar
        }(Component);
        ProgressBar.possibleStyles = [{
            label: "Default",
            value: ""
        }, {
            label: "Success",
            value: "progress-bar-success"
        }, {
            label: "Info",
            value: "progress-bar-info"
        }, {
            label: "Warning",
            value: "progress-bar-warning"
        }, {
            label: "Danger",
            value: "progress-bar-danger"
        }];
        ProgressBar.prettyName = "Progress Bar";
        module.exports = ProgressBar
    }, {
        "./Component": 38
    }],
    112: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var FieldLabel = require("./FieldLabel");
        var possibleValidationStates = require("./FormGroup").possibleValidationStates;
        var RadioCheckHolderBase = function(_ComponentWithChildren) {
            _inherits(RadioCheckHolderBase, _ComponentWithChildren);

            function RadioCheckHolderBase() {
                _classCallCheck(this, RadioCheckHolderBase);
                _get(Object.getPrototypeOf(RadioCheckHolderBase.prototype), "constructor", this).call(this);
                this.element = $("<div>");
                this.defineProperties([{
                    id: "disabled",
                    label: "Disabled",
                    type: "checkbox",
                    value: false
                }, {
                    id: "inline",
                    label: "Inline",
                    type: "checkbox",
                    value: false
                }, {
                    id: "validation",
                    label: "Validation State",
                    type: "select",
                    value: "",
                    options: possibleValidationStates
                }]);
                this.inlineClass = "";
                this.regularClass = "";
                this.componentConstructor = null
            }
            _createClass(RadioCheckHolderBase, [{
                key: "initialize",
                value: function initialize() {
                    var text = arguments.length <= 0 || arguments[0] === undefined ? "Label" : arguments[0];
                    var l = new FieldLabel(text);
                    l.initialize();
                    l.fixate();
                    var elem = new this.componentConstructor;
                    elem.initialize();
                    elem.fixate();
                    l.insertFirst(elem);
                    this.insertFirst(l)
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild() {
                    return false
                }
            }, {
                key: "removeMainComponent",
                value: function removeMainComponent() {
                    if (this.children[0].children[0] && this.children[0].children[0].component instanceof this.componentConstructor) {
                        return this.children[0].removeChild(this.children[0].children[0])
                    }
                    return false
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = "";
                    if (this.properties.inline) {
                        var tmp = $("<span>");
                        this.element.replaceWith(tmp);
                        this.element = tmp;
                        this.children[0].cssClasses.parent = this.inlineClass
                    } else {
                        var tmp = $("<div>");
                        this.element.replaceWith(tmp);
                        this.element = tmp;
                        this.cssClasses.system = this.regularClass;
                        this.children[0].cssClasses.parent = ""
                    }
                    if (this.properties.disabled) {
                        this.cssClasses.system += " disabled"
                    }
                    if (this.properties.validation) {
                        this.cssClasses.system += " has-" + this.properties.validation
                    }
                    return _get(Object.getPrototypeOf(RadioCheckHolderBase.prototype), "update", this).call(this)
                }
            }]);
            return RadioCheckHolderBase
        }(ComponentWithChildren);
        module.exports = RadioCheckHolderBase
    }, {
        "./ComponentWithChildren": 39,
        "./FieldLabel": 47,
        "./FormGroup": 53
    }],
    113: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var RadioCheckHolderBase = require("./RadioCheckHolderBase");
        var InputRadio = require("./InputRadio");
        var RadioHolder = function(_RadioCheckHolderBase) {
            _inherits(RadioHolder, _RadioCheckHolderBase);

            function RadioHolder() {
                _classCallCheck(this, RadioHolder);
                _get(Object.getPrototypeOf(RadioHolder.prototype), "constructor", this).call(this);
                this.inlineClass = "radio-inline";
                this.regularClass = "radio";
                this.componentConstructor = InputRadio
            }
            _createClass(RadioHolder, [{
                key: "removeRadio",
                value: function removeRadio() {
                    return this.removeMainComponent()
                }
            }]);
            return RadioHolder
        }(RadioCheckHolderBase);
        RadioHolder.prettyName = "Radio Holder";
        module.exports = RadioHolder
    }, {
        "./InputRadio": 77,
        "./RadioCheckHolderBase": 112
    }],
    114: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Component = require("./Component");
        var ButtonOption = require("../panes/ButtonOption");
        var ResponsiveEmbed = function(_Component) {
            _inherits(ResponsiveEmbed, _Component);

            function ResponsiveEmbed() {
                _classCallCheck(this, ResponsiveEmbed);
                _get(Object.getPrototypeOf(ResponsiveEmbed.prototype), "constructor", this).call(this);
                this.element = $('<div><iframe class="embed-responsive-item"></iframe></div>');
                this.iframe = this.element.find("iframe");
                this.defineProperties([{
                    id: "src",
                    label: "Source URL",
                    type: "textbox",
                    value: ""
                }, {
                    id: "aspect-ratio",
                    label: "Aspect Ratio",
                    type: "select",
                    value: "16by9",
                    options: ResponsiveEmbed.possibleRatios
                }, {
                    id: "allowfullscreen",
                    label: "Allow Fullscreen",
                    type: "checkbox",
                    value: false
                }])
            }
            _createClass(ResponsiveEmbed, [{
                key: "update",
                value: function update() {
                    this.cssClasses.system = "embed-responsive";
                    this.cssClasses.system += " embed-responsive-" + this.properties["aspect-ratio"];
                    if (this.properties.src) {
                        var src = this.iframe.attr("src");
                        if (src != this.properties.src) {
                            this.iframe.attr("src", this.properties.src)
                        }
                    } else {
                        this.iframe.removeAttr("src")
                    }
                    this.iframe.removeAttr("allowfullscreen");
                    if (this.properties["allowfullscreen"]) {
                        this.iframe.attr("allowfullscreen", "")
                    }
                    return _get(Object.getPrototypeOf(ResponsiveEmbed.prototype), "update", this).call(this)
                }
            }]);
            return ResponsiveEmbed
        }(Component);
        ResponsiveEmbed.possibleRatios = [{
            label: "16 by 9",
            value: "16by9"
        }, {
            label: "4 by 3",
            value: "4by3"
        }];
        ResponsiveEmbed.prettyName = "Responsive Embed";
        module.exports = ResponsiveEmbed
    }, {
        "../panes/ButtonOption": 428,
        "./Component": 38
    }],
    115: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Column = require("./Column");
        var Clearfix = require("./Clearfix");
        var wrapInAutomaticElement = require("../helpers/wrapInAutomaticElement");
        var Row = function(_ComponentWithChildren) {
            _inherits(Row, _ComponentWithChildren);

            function Row() {
                _classCallCheck(this, Row);
                _get(Object.getPrototypeOf(Row.prototype), "constructor", this).call(this);
                this.cssClasses.system = "row";
                this.element = $("<div>")
            }
            _createClass(Row, [{
                key: "canTakeChild",
                value: function canTakeChild(child) {
                    return !(child instanceof Row)
                }
            }, {
                key: "beforeDrop",
                value: function beforeDrop() {
                    if (app.draggedComponent instanceof Column || app.draggedComponent instanceof Clearfix) {
                        return
                    }
                    var col = new Column;
                    col.initialize();
                    wrapInAutomaticElement(col)
                }
            }]);
            return Row
        }(ComponentWithChildren);
        Row.suggestedComponents = ["Column", "Clearfix"];
        module.exports = Row
    }, {
        "../helpers/wrapInAutomaticElement": 193,
        "./Clearfix": 35,
        "./Column": 37,
        "./ComponentWithChildren": 39
    }],
    116: [function(require, module, exports) {
        "use strict";
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Section = function(_ComponentWithChildren) {
            _inherits(Section, _ComponentWithChildren);

            function Section() {
                _classCallCheck(this, Section);
                _get(Object.getPrototypeOf(Section.prototype), "constructor", this).call(this);
                this.element = $("<section>")
            }
            return Section
        }(ComponentWithChildren);
        module.exports = Section
    }, {
        "./ComponentWithChildren": 39
    }],
    117: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var InputBase = require("./InputBase");
        var ComponentListOption = require("../panes/ComponentListOption");
        var TextBoxOption = require("../panes/TextBoxOption");
        var SelectOption = require("../panes/SelectOption");
        var CheckBoxOption = require("../panes/CheckBoxOption");
        var clone = require("clone");
        var Select = function(_InputBase) {
            _inherits(Select, _InputBase);

            function Select() {
                _classCallCheck(this, Select);
                _get(Object.getPrototypeOf(Select.prototype), "constructor", this).call(this);
                this.element = $("<select>");
                this.addCapabilities(["size", "autofocus", "multiple"]);
                this.items = [];
                this.defineGroups({
                    id: "select-items",
                    label: "Items",
                    weight: 9
                })
            }
            _createClass(Select, [{
                key: "initialize",
                value: function initialize() {
                    this.items = [{
                        label: "This is a group",
                        type: "OptionGroup"
                    }, {
                        label: "This is item 1",
                        value: "12",
                        type: "OptionItem",
                        selected: true
                    }, {
                        label: "This is item 2",
                        value: "13",
                        type: "OptionItem"
                    }, {
                        label: "This is item 3",
                        value: "14",
                        type: "OptionItem"
                    }]
                }
            }, {
                key: "focus",
                value: function focus() {
                    _get(Object.getPrototypeOf(Select.prototype), "focus", this).call(this);
                    var select = this;
                    var selectItemsGroup = app.optionsPane.getById("select-items");
                    var listOption = new ComponentListOption({
                        component: this,
                        items: [this, "items"],
                        itemRepresentation: function itemRepresentation(item) {
                            var text = item.label.trim();
                            if (!text.length) {
                                text = "<" + item.type + ">"
                            }
                            return text
                        },
                        actions: {
                            "delete": true,
                            edit: true
                        },
                        addForm: function addForm() {
                            var type = new SelectOption({
                                label: "Type",
                                value: "OptionItem",
                                options: [{
                                    label: "Option",
                                    value: "OptionItem"
                                }, {
                                    label: "Option Group",
                                    value: "OptionGroup"
                                }],
                                onChange: function onChange(type) {
                                    selected.hide();
                                    value.hide();
                                    if (type == "OptionItem") {
                                        selected.show();
                                        value.show()
                                    }
                                }
                            });
                            var label = new TextBoxOption({
                                label: "Label",
                                value: ""
                            });
                            var value = new TextBoxOption({
                                label: "Value",
                                value: ""
                            });
                            var selected = new CheckBoxOption({
                                label: "Selected",
                                value: false
                            });
                            return [type, label, value, selected]
                        },
                        editForm: function editForm(item) {
                            var type = new SelectOption({
                                label: "Type",
                                value: item.type,
                                options: [{
                                    label: "Option",
                                    value: "OptionItem"
                                }, {
                                    label: "Option Group",
                                    value: "OptionGroup"
                                }],
                                onChange: function onChange(type) {
                                    selected.hide();
                                    value.hide();
                                    if (type == "OptionItem") {
                                        selected.show();
                                        value.show()
                                    }
                                }
                            });
                            var label = new TextBoxOption({
                                label: "Label",
                                value: item.label || ""
                            });
                            var value = new TextBoxOption({
                                label: "Value",
                                value: item.value || "",
                                visible: item.type == "OptionItem"
                            });
                            var selected = new CheckBoxOption({
                                label: "Selected",
                                value: item.selected || false,
                                visible: item.type == "OptionItem"
                            });
                            return [type, label, value, selected]
                        },
                        onFormSave: function onFormSave(fields) {
                            var type = fields[0].val();
                            var item = {
                                type: type,
                                label: fields[1].val()
                            };
                            if (type == "OptionItem") {
                                item.value = fields[2].val();
                                item.selected = fields[3].val()
                            }
                            return item
                        }
                    });
                    selectItemsGroup.add(listOption)
                }
            }, {
                key: "update",
                value: function update() {
                    this.element.empty();
                    var html = document.createDocumentFragment();
                    var item, group, option;
                    for (var i = 0; i < this.items.length; i++) {
                        item = this.items[i];
                        if (item.type == "OptionGroup") {
                            group = renderGroup(item);
                            html.appendChild(group);
                            continue
                        }
                        option = renderOption(item);
                        if (group) {
                            group.appendChild(option)
                        } else {
                            html.appendChild(option)
                        }
                    }
                    this.element.html(html);
                    return _get(Object.getPrototypeOf(Select.prototype), "update", this).call(this)
                }
            }, {
                key: "serialize",
                value: function serialize() {
                    var obj = _get(Object.getPrototypeOf(Select.prototype), "serialize", this).call(this);
                    obj.items = this.items;
                    return obj
                }
            }, {
                key: "unserialize",
                value: function unserialize(obj) {
                    _get(Object.getPrototypeOf(Select.prototype), "unserialize", this).call(this, obj);
                    if (Array.isArray(obj.items)) {
                        this.items = clone(obj.items)
                    }
                }
            }]);
            return Select
        }(InputBase);

        function renderOption(o) {
            var option = document.createElement("option");
            option.setAttribute("value", o.value);
            option.textContent = o.label;
            if (o.selected) {
                option.setAttribute("selected", "")
            }
            return option
        }

        function renderGroup(g) {
            var group = document.createElement("optgroup");
            group.setAttribute("label", g.label);
            if (g.disabled) {
                group.setAttribute("disabled", "")
            }
            return group
        }
        module.exports = Select
    }, {
        "../panes/CheckBoxOption": 429,
        "../panes/ComponentListOption": 430,
        "../panes/SelectOption": 441,
        "../panes/TextBoxOption": 444,
        "./InputBase": 64,
        clone: 385
    }],
    118: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithInlineEditing = require("./ComponentWithInlineEditing");
        var textOptions = require("../helpers/textOptions");
        var Small = function(_ComponentWithInlineEditing) {
            _inherits(Small, _ComponentWithInlineEditing);

            function Small() {
                _classCallCheck(this, Small);
                _get(Object.getPrototypeOf(Small.prototype), "constructor", this).call(this);
                this.inline = true;
                this.element = $("<small>");
                textOptions.construct(this, {
                    includeAlignment: false,
                    includeNowrap: false
                })
            }
            _createClass(Small, [{
                key: "update",
                value: function update() {
                    this.cssClasses.system = {};
                    textOptions.update(this);
                    return _get(Object.getPrototypeOf(Small.prototype), "update", this).call(this)
                }
            }]);
            return Small
        }(ComponentWithInlineEditing);
        module.exports = Small
    }, {
        "../helpers/textOptions": 192,
        "./ComponentWithInlineEditing": 40
    }],
    119: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithInlineEditing = require("./ComponentWithInlineEditing");
        var textOptions = require("../helpers/textOptions");
        var Span = function(_ComponentWithInlineEditing) {
            _inherits(Span, _ComponentWithInlineEditing);

            function Span() {
                _classCallCheck(this, Span);
                _get(Object.getPrototypeOf(Span.prototype), "constructor", this).call(this);
                this.inline = true;
                this.element = $("<span>");
                textOptions.construct(this, {
                    includeAlignment: false,
                    includeNowrap: false
                });
                this.cssClasses.system = {}
            }
            _createClass(Span, [{
                key: "update",
                value: function update() {
                    textOptions.update(this);
                    return _get(Object.getPrototypeOf(Span.prototype), "update", this).call(this)
                }
            }]);
            return Span
        }(ComponentWithInlineEditing);
        module.exports = Span
    }, {
        "../helpers/textOptions": 192,
        "./ComponentWithInlineEditing": 40
    }],
    120: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Button = require("./Button");
        var Caret = require("./Caret");
        var Component = require("./Component");
        var Dropdown = require("./Dropdown");
        var DropdownMenuItem = require("./DropdownMenuItem");
        var SplitButton = function(_Dropdown) {
            _inherits(SplitButton, _Dropdown);

            function SplitButton() {
                _classCallCheck(this, SplitButton);
                _get(Object.getPrototypeOf(SplitButton.prototype), "constructor", this).call(this);
                this.inline = true;
                this.dropdownItemsOffset = 2;
                this.element = $("<div>" + '<ul class="dropdown-menu" role="menu"></ul>' + "</div>")
            }
            _createClass(SplitButton, [{
                key: "initialize",
                value: function initialize() {
                    var button = new Button;
                    button.initialize("Button ");
                    button.fixate();
                    this.insertLast(button);
                    var button2 = new Button;
                    button2.initialize("");
                    button2.cssClasses.parent = "dropdown-toggle";
                    this.insertLast(button2);
                    var caret = new Caret;
                    caret.initialize();
                    button2.insertLast(caret);
                    var d = new DropdownMenuItem;
                    d.initialize("First Item", "#");
                    this.insertLast(d);
                    d = new DropdownMenuItem;
                    d.initialize("Second Item", "#");
                    this.insertLast(d);
                    d = new DropdownMenuItem;
                    d.initialize("Third Item", "#");
                    this.insertLast(d)
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = this.properties.type + " btn-group";
                    if (this.properties.expanded) {
                        this.cssClasses.system += " open"
                    }
                    Component.prototype.startUpdate.call(this);
                    this.children[1].attributes["data-toggle"] = "dropdown";
                    this.children[1].attributes["aria-expanded"] = "false";
                    if (this.properties.expanded) {
                        this.children[1].attributes["aria-expanded"] = "true"
                    }
                    this.element.prepend(this.children[1].update());
                    this.element.prepend(this.children[0].update());
                    this.updateMenu();
                    return Component.prototype.finishUpdate.call(this)
                }
            }]);
            return SplitButton
        }(Dropdown);
        SplitButton.prettyName = "Split Button";
        module.exports = SplitButton
    }, {
        "./Button": 29,
        "./Caret": 33,
        "./Component": 38,
        "./Dropdown": 43,
        "./DropdownMenuItem": 46
    }],
    121: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Paragraph = require("./Paragraph");
        var StaticControl = function(_Paragraph) {
            _inherits(StaticControl, _Paragraph);

            function StaticControl() {
                _classCallCheck(this, StaticControl);
                _get(Object.getPrototypeOf(StaticControl.prototype), "constructor", this).call(this);
                this.cssClasses.system = "form-static-control"
            }
            _createClass(StaticControl, [{
                key: "initialize",
                value: function initialize() {
                    var str = arguments.length <= 0 || arguments[0] === undefined ? "Static Value" : arguments[0];
                    _get(Object.getPrototypeOf(StaticControl.prototype), "initialize", this).call(this, str)
                }
            }]);
            return StaticControl
        }(Paragraph);
        StaticControl.prettyName = "Static Control";
        module.exports = StaticControl
    }, {
        "./Paragraph": 110
    }],
    122: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x4, _x5, _x6) {
            var _again = true;
            _function: while (_again) {
                var object = _x4,
                    property = _x5,
                    receiver = _x6;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x4 = parent;
                        _x5 = property;
                        _x6 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Div = require("./Div");
        var TableBody = require("./TableBody");
        var TableHeader = require("./TableHeader");
        var TableFooter = require("./TableFooter");
        var Caption = require("./Caption");
        var Table = function(_Div) {
            _inherits(Table, _Div);

            function Table() {
                _classCallCheck(this, Table);
                _get(Object.getPrototypeOf(Table.prototype), "constructor", this).call(this);
                this.defineProperties([{
                    id: "responsive",
                    label: "Responsive",
                    type: "checkbox",
                    value: true
                }, {
                    id: "striped",
                    label: "Striped",
                    type: "checkbox",
                    value: false
                }, {
                    id: "bordered",
                    label: "Bordered",
                    type: "checkbox",
                    value: false
                }, {
                    id: "hover",
                    label: "Hover",
                    type: "checkbox",
                    value: false
                }, {
                    id: "condensed",
                    label: "Condensed",
                    type: "checkbox",
                    value: false
                }])
            }
            _createClass(Table, [{
                key: "initialize",
                value: function initialize() {
                    var body = new TableBody;
                    body.initialize();
                    this.insertFirst(body);
                    this.properties.showTableHeader = true;
                    this.properties.showTableFooter = false;
                    this.properties.showCaption = false;
                    this.insertFirst(this.createOrSelectInstance(TableHeader))
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild() {
                    return false
                }
            }, {
                key: "focus",
                value: function focus() {
                    _get(Object.getPrototypeOf(Table.prototype), "focus", this).call(this);
                    var tableOptions = this.getMainOptionsGroup();
                    tableOptions.add(this.createCheckBoxForSubComponent("showTableHeader", "Table Header", TableHeader, function(parent, child) {
                        var index = arguments.length <= 2 || arguments[2] === undefined ? -1 : arguments[2];
                        if (index > -1) {
                            parent.insertAt(child, index);
                            return
                        }
                        parent.insertFirst(child)
                    }));
                    tableOptions.add(this.createCheckBoxForSubComponent("showCaption", "Caption", Caption, function(parent, child) {
                        var index = arguments.length <= 2 || arguments[2] === undefined ? -1 : arguments[2];
                        if (index > -1) {
                            parent.insertAt(child, index);
                            return
                        }
                        parent.insertLast(child)
                    }));
                    tableOptions.add(this.createCheckBoxForSubComponent("showTableFooter", "Table Footer", TableFooter, function(parent, child) {
                        var index = arguments.length <= 2 || arguments[2] === undefined ? -1 : arguments[2];
                        if (index > -1) {
                            parent.insertAt(child, index);
                            return
                        }
                        var index = 0;
                        for (var i = 0; i < parent.children.length; i++) {
                            if (parent.children[i] instanceof TableBody) {
                                index = i + 1
                            }
                        }
                        parent.insertLast(child)
                    }))
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = "";
                    if (this.properties.responsive) {
                        this.cssClasses.system = "table-responsive"
                    }
                    _get(Object.getPrototypeOf(Table.prototype), "startUpdate", this).call(this);
                    var table = $("<table>");
                    var css = "table";
                    for (var i = 0; i < props.length; i++) {
                        if (this.properties[props[i]]) {
                            css += " table-" + props[i]
                        }
                    }
                    table.attr("class", css);
                    this.element.children().appendTo(table);
                    this.element.append(table);
                    return _get(Object.getPrototypeOf(Table.prototype), "finishUpdate", this).call(this)
                }
            }]);
            return Table
        }(Div);
        var props = ["striped", "bordered", "hover", "condensed"];
        module.exports = Table
    }, {
        "./Caption": 32,
        "./Div": 42,
        "./TableBody": 123,
        "./TableFooter": 125,
        "./TableHeader": 126
    }],
    123: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var TableRow = require("./TableRow");
        var TableCell = require("./TableCell");
        var TableBody = function(_ComponentWithChildren) {
            _inherits(TableBody, _ComponentWithChildren);

            function TableBody() {
                _classCallCheck(this, TableBody);
                _get(Object.getPrototypeOf(TableBody.prototype), "constructor", this).call(this);
                this.element = $("<tbody>");
                this.fixate()
            }
            _createClass(TableBody, [{
                key: "initialize",
                value: function initialize() {
                    var row = new TableRow;
                    row.initialize();
                    this.insertLast(row);
                    var cell = new TableCell;
                    cell.initialize("Cell 1");
                    row.insertLast(cell);
                    cell = new TableCell;
                    cell.initialize("Cell 2");
                    row.insertLast(cell);
                    row = new TableRow;
                    row.initialize();
                    this.insertLast(row);
                    cell = new TableCell;
                    cell.initialize("Cell 3");
                    row.insertLast(cell);
                    cell = new TableCell;
                    cell.initialize("Cell 4");
                    row.insertLast(cell)
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(child) {
                    return _get(Object.getPrototypeOf(TableBody.prototype), "canTakeChild", this).call(this, child) && child instanceof TableRow
                }
            }]);
            return TableBody
        }(ComponentWithChildren);
        TableBody.prettyName = "Table Body";
        module.exports = TableBody
    }, {
        "./ComponentWithChildren": 39,
        "./TableCell": 124,
        "./TableRow": 127
    }],
    124: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithInlineEditing = require("./ComponentWithInlineEditing");
        var TableCell = function(_ComponentWithInlineEditing) {
            _inherits(TableCell, _ComponentWithInlineEditing);

            function TableCell() {
                _classCallCheck(this, TableCell);
                _get(Object.getPrototypeOf(TableCell.prototype), "constructor", this).call(this);
                this.element = $("<td>");
                this.defineProperties([{
                    id: "style",
                    label: "Style",
                    type: "select",
                    value: "",
                    options: TableCell.possibleStyles
                }, {
                    id: "rowspan",
                    label: "Rowspan",
                    type: "textbox",
                    value: ""
                }, {
                    id: "colspan",
                    label: "Colspan",
                    type: "textbox",
                    value: ""
                }])
            }
            _createClass(TableCell, [{
                key: "canBeDroppedIn",
                value: function canBeDroppedIn(parent) {
                    var TableRow = require("./TableRow");
                    return _get(Object.getPrototypeOf(TableCell.prototype), "canBeDroppedIn", this).call(this, parent) && parent instanceof TableRow
                }
            }, {
                key: "update",
                value: function update() {
                    var TableHeader = require("./TableHeader");
                    var tmp;
                    if (this.hasParent(TableHeader)) {
                        tmp = $("<th>")
                    } else {
                        tmp = $("<td>")
                    }
                    this.element.replaceWith(tmp);
                    this.element = tmp;
                    delete this.attributes.rowspan;
                    delete this.attributes.colspan;
                    if (this.properties.rowspan) {
                        this.attributes.rowspan = this.properties.rowspan
                    }
                    if (this.properties.colspan) {
                        this.attributes.colspan = this.properties.colspan
                    }
                    this.cssClasses.system = "";
                    if (this.properties.style) {
                        this.cssClasses.system = this.properties.style
                    }
                    return _get(Object.getPrototypeOf(TableCell.prototype), "update", this).call(this)
                }
            }]);
            return TableCell
        }(ComponentWithInlineEditing);
        TableCell.possibleStyles = [{
            label: "Default",
            value: ""
        }, {
            label: "Active",
            value: "active"
        }, {
            label: "Success",
            value: "success"
        }, {
            label: "Info",
            value: "info"
        }, {
            label: "Warning",
            value: "warning"
        }, {
            label: "Danger",
            value: "danger"
        }];
        TableCell.prettyName = "Table Cell";
        module.exports = TableCell
    }, {
        "./ComponentWithInlineEditing": 40,
        "./TableHeader": 126,
        "./TableRow": 127
    }],
    125: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var TableRow = require("./TableRow");
        var TableCell = require("./TableCell");
        var TableFooter = function(_ComponentWithChildren) {
            _inherits(TableFooter, _ComponentWithChildren);

            function TableFooter() {
                _classCallCheck(this, TableFooter);
                _get(Object.getPrototypeOf(TableFooter.prototype), "constructor", this).call(this);
                this.element = $("<tfoot>");
                this.fixate()
            }
            _createClass(TableFooter, [{
                key: "initialize",
                value: function initialize() {
                    var row = new TableRow;
                    row.initialize();
                    row.fixate();
                    this.insertLast(row);
                    var cell = new TableCell;
                    cell.initialize("Summary 1");
                    row.insertLast(cell);
                    cell = new TableCell;
                    cell.initialize("Summary 2");
                    row.insertLast(cell)
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild() {
                    return false
                }
            }]);
            return TableFooter
        }(ComponentWithChildren);
        TableFooter.prettyName = "Table Footer";
        module.exports = TableFooter
    }, {
        "./ComponentWithChildren": 39,
        "./TableCell": 124,
        "./TableRow": 127
    }],
    126: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var TableRow = require("./TableRow");
        var TableCell = require("./TableCell");
        var TableHeader = function(_ComponentWithChildren) {
            _inherits(TableHeader, _ComponentWithChildren);

            function TableHeader() {
                _classCallCheck(this, TableHeader);
                _get(Object.getPrototypeOf(TableHeader.prototype), "constructor", this).call(this);
                this.element = $("<thead>");
                this.fixate()
            }
            _createClass(TableHeader, [{
                key: "initialize",
                value: function initialize() {
                    var row = new TableRow;
                    row.initialize();
                    row.fixate();
                    this.insertLast(row);
                    var cell = new TableCell;
                    cell.initialize("Column 1");
                    row.insertLast(cell);
                    cell = new TableCell;
                    cell.initialize("Column 2");
                    row.insertLast(cell)
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild() {
                    return false
                }
            }]);
            return TableHeader
        }(ComponentWithChildren);
        TableHeader.prettyName = "Table Header";
        module.exports = TableHeader
    }, {
        "./ComponentWithChildren": 39,
        "./TableCell": 124,
        "./TableRow": 127
    }],
    127: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var TableCell = require("./TableCell");
        var TableRow = function(_ComponentWithChildren) {
            _inherits(TableRow, _ComponentWithChildren);

            function TableRow() {
                _classCallCheck(this, TableRow);
                _get(Object.getPrototypeOf(TableRow.prototype), "constructor", this).call(this);
                this.element = $("<tr>");
                this.defineProperties([{
                    id: "style",
                    label: "Style",
                    type: "select",
                    value: "",
                    options: TableCell.possibleStyles
                }])
            }
            _createClass(TableRow, [{
                key: "canBeDroppedIn",
                value: function canBeDroppedIn(parent) {
                    var TableBody = require("./TableBody");
                    return _get(Object.getPrototypeOf(TableRow.prototype), "canBeDroppedIn", this).call(this, parent) && parent instanceof TableBody
                }
            }, {
                key: "canTakeChild",
                value: function canTakeChild(child) {
                    return _get(Object.getPrototypeOf(TableRow.prototype), "canTakeChild", this).call(this, child) && child instanceof TableCell
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = "";
                    if (this.properties.style) {
                        this.cssClasses.system = this.properties.style
                    }
                    return _get(Object.getPrototypeOf(TableRow.prototype), "update", this).call(this)
                }
            }]);
            return TableRow
        }(ComponentWithChildren);
        TableRow.prettyName = "Table Row";
        module.exports = TableRow
    }, {
        "./ComponentWithChildren": 39,
        "./TableBody": 123,
        "./TableCell": 124
    }],
    128: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Div = require("./Div");
        var Image = require("./Image");
        var Heading = require("./Heading");
        var Paragraph = require("./Paragraph");
        var Thumbnail = function(_Div) {
            _inherits(Thumbnail, _Div);

            function Thumbnail() {
                _classCallCheck(this, Thumbnail);
                _get(Object.getPrototypeOf(Thumbnail.prototype), "constructor", this).call(this);
                this.cssClasses.system = "thumbnail"
            }
            _createClass(Thumbnail, [{
                key: "initialize",
                value: function initialize() {
                    var img = new Image;
                    img.initialize();
                    this.insertFirst(img);
                    var div = new Div;
                    div.initialize();
                    div.overrides.css["/"] = "caption";
                    this.insertLast(div);
                    var h = new Heading;
                    h.initialize("Thumbnail label");
                    h.properties.type = "h3";
                    div.insertLast(h);
                    var p = new Paragraph;
                    p.initialize("Nullam id dolor id nibh ultricies vehicula ut id elit. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus.");
                    div.insertLast(p)
                }
            }]);
            return Thumbnail
        }(Div);
        module.exports = Thumbnail
    }, {
        "./Div": 42,
        "./Heading": 56,
        "./Image": 61,
        "./Paragraph": 110
    }],
    129: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ComponentWithChildren = require("./ComponentWithChildren");
        var Span = require("./Span");
        var Well = function(_ComponentWithChildren) {
            _inherits(Well, _ComponentWithChildren);

            function Well() {
                _classCallCheck(this, Well);
                _get(Object.getPrototypeOf(Well.prototype), "constructor", this).call(this);
                this.defineProperties({
                    id: "size",
                    label: "Size",
                    type: "select",
                    value: "",
                    options: Well.possibleSizes
                });
                this.element = $("<div>")
            }
            _createClass(Well, [{
                key: "initialize",
                value: function initialize() {
                    _get(Object.getPrototypeOf(Well.prototype), "initialize", this).call(this);
                    var s = new Span;
                    s.initialize("Text of the well");
                    this.insertLast(s)
                }
            }, {
                key: "update",
                value: function update() {
                    this.cssClasses.system = "well";
                    if (this.properties.size) {
                        this.cssClasses.system += " " + this.properties.size
                    }
                    return _get(Object.getPrototypeOf(Well.prototype), "update", this).call(this)
                }
            }]);
            return Well
        }(ComponentWithChildren);
        Well.possibleSizes = [{
            label: "Default",
            value: ""
        }, {
            label: "Small",
            value: "well-sm"
        }, {
            label: "Large",
            value: "well-lg"
        }];
        module.exports = Well
    }, {
        "./ComponentWithChildren": 39,
        "./Span": 119
    }],
    130: [function(require, module, exports) {
        "use strict";
        var all = exports.all = {
            Alert: require("./Alert"),
            Anchor: require("./Anchor"),
            Article: require("./Article"),
            Aside: require("./Aside"),
            Badge: require("./Badge"),
            Blockquote: require("./Blockquote"),
            BlockquoteFooter: require("./BlockquoteFooter"),
            Body: require("./Body"),
            Breadcrumbs: require("./Breadcrumbs"),
            BreadcrumbsItem: require("./BreadcrumbsItem"),
            Button: require("./Button"),
            ButtonGroup: require("./ButtonGroup"),
            ButtonToolbar: require("./ButtonToolbar"),
            Caption: require("./Caption"),
            Caret: require("./Caret"),
            CheckboxHolder: require("./CheckboxHolder"),
            Clearfix: require("./Clearfix"),
            Close: require("./Close"),
            Column: require("./Column"),
            Container: require("./Container"),
            Div: require("./Div"),
            Dropdown: require("./Dropdown"),
            DropdownDivider: require("./DropdownDivider"),
            DropdownHeader: require("./DropdownHeader"),
            DropdownMenuItem: require("./DropdownMenuItem"),
            FieldLabel: require("./FieldLabel"),
            Figure: require("./Figure"),
            Figcaption: require("./Figcaption"),
            Footer: require("./Footer"),
            Form: require("./Form"),
            FormControlFeedback: require("./FormControlFeedback"),
            FormGroup: require("./FormGroup"),
            Heading: require("./Heading"),
            Header: require("./Header"),
            HelpTextBlock: require("./HelpTextBlock"),
            Hgroup: require("./Hgroup"),
            Hr: require("./Hr"),
            HTML: require("./HTML"),
            Icon: require("./Icon"),
            Image: require("./Image"),
            InlineCharacter: require("./InlineCharacter"),
            InlineWrapper: require("./InlineWrapper"),
            InputCheckbox: require("./InputCheckbox"),
            InputColor: require("./InputColor"),
            InputDateAndTime: require("./InputDateAndTime"),
            InputEmail: require("./InputEmail"),
            InputFile: require("./InputFile"),
            InputGroup: require("./InputGroup"),
            InputGroupAddonLeft: require("./InputGroupAddonLeft"),
            InputGroupAddonRight: require("./InputGroupAddonRight"),
            InputHidden: require("./InputHidden"),
            InputNumber: require("./InputNumber"),
            InputPassword: require("./InputPassword"),
            InputRadio: require("./InputRadio"),
            InputRange: require("./InputRange"),
            InputSearch: require("./InputSearch"),
            Select: require("./Select"),
            InputTel: require("./InputTel"),
            InputText: require("./InputText"),
            InputTextarea: require("./InputTextarea"),
            InputURL: require("./InputURL"),
            Jumbotron: require("./Jumbotron"),
            Label: require("./Label"),
            List: require("./List"),
            ListGroup: require("./ListGroup"),
            ListGroupItem: require("./ListGroupItem"),
            ListItem: require("./ListItem"),
            Media: require("./Media"),
            MediaBody: require("./MediaBody"),
            MediaLeft: require("./MediaLeft"),
            MediaRight: require("./MediaRight"),
            Nav: require("./Nav"),
            NavBar: require("./NavBar"),
            NavBarBrand: require("./NavBarBrand"),
            NavItem: require("./NavItem"),
            PageHeader: require("./PageHeader"),
            Pager: require("./Pager"),
            PagerItem: require("./PagerItem"),
            Pagination: require("./Pagination"),
            PaginationItem: require("./PaginationItem"),
            Panel: require("./Panel"),
            PanelBody: require("./PanelBody"),
            PanelFooter: require("./PanelFooter"),
            PanelHeading: require("./PanelHeading"),
            Paragraph: require("./Paragraph"),
            ProgressBar: require("./ProgressBar"),
            RadioHolder: require("./RadioHolder"),
            ResponsiveEmbed: require("./ResponsiveEmbed"),
            Row: require("./Row"),
            Section: require("./Section"),
            Small: require("./Small"),
            Span: require("./Span"),
            SplitButton: require("./SplitButton"),
            StaticControl: require("./StaticControl"),
            Table: require("./Table"),
            TableBody: require("./TableBody"),
            TableCell: require("./TableCell"),
            TableFooter: require("./TableFooter"),
            TableHeader: require("./TableHeader"),
            TableRow: require("./TableRow"),
            Thumbnail: require("./Thumbnail"),
            Well: require("./Well")
        };
        exports.studio = {
            Text: [all.Heading, all.Paragraph, all.Alert, all.Blockquote, all.Small, all.Span],
            Image: [all.Image, all.Icon, all.Figure, all.Figcaption],
            Controls: [all.Button, all.SplitButton, all.ButtonGroup, all.ButtonToolbar, all.Dropdown, all.Anchor],
            Grid: [all.Row, all.Column, all.Clearfix],
            Containers: [all.Container, all.Panel, all.ListGroup, all.ListGroupItem, all.Media, all.Jumbotron, all.Thumbnail, all.Well, all.List, all.ListItem, all.Div],
            Page: [all.NavBar, all.Nav, all.NavItem, all.PageHeader, all.Header, all.Footer, all.Hgroup, all.Section, all.Article, all.Aside],
            Pagination: [all.Pagination, all.PaginationItem, all.Pager],
            Table: [all.Table, all.TableRow, all.TableCell],
            Form: [all.Form, all.FormGroup, all.FormControlFeedback, all.FieldLabel, all.InputText, all.InputEmail, all.InputColor, all.Select, all.InputTel, all.InputDateAndTime, all.InputNumber, all.InputRange, all.InputHidden, all.InputURL, all.InputSearch, all.InputPassword, all.InputFile, all.InputCheckbox, all.CheckboxHolder, all.InputRadio, all.RadioHolder, all.StaticControl, all.InputTextarea, all.HelpTextBlock, all.InputGroup],
            Misc: [all.Badge, all.Label, all.Caret, all.Close, all.Breadcrumbs, all.BreadcrumbsItem, all.Hr, all.ResponsiveEmbed, all.ProgressBar]
        }
    }, {
        "./Alert": 19,
        "./Anchor": 20,
        "./Article": 21,
        "./Aside": 22,
        "./Badge": 23,
        "./Blockquote": 24,
        "./BlockquoteFooter": 25,
        "./Body": 26,
        "./Breadcrumbs": 27,
        "./BreadcrumbsItem": 28,
        "./Button": 29,
        "./ButtonGroup": 30,
        "./ButtonToolbar": 31,
        "./Caption": 32,
        "./Caret": 33,
        "./CheckboxHolder": 34,
        "./Clearfix": 35,
        "./Close": 36,
        "./Column": 37,
        "./Container": 41,
        "./Div": 42,
        "./Dropdown": 43,
        "./DropdownDivider": 44,
        "./DropdownHeader": 45,
        "./DropdownMenuItem": 46,
        "./FieldLabel": 47,
        "./Figcaption": 48,
        "./Figure": 49,
        "./Footer": 50,
        "./Form": 51,
        "./FormControlFeedback": 52,
        "./FormGroup": 53,
        "./HTML": 54,
        "./Header": 55,
        "./Heading": 56,
        "./HelpTextBlock": 57,
        "./Hgroup": 58,
        "./Hr": 59,
        "./Icon": 60,
        "./Image": 61,
        "./InlineCharacter": 62,
        "./InlineWrapper": 63,
        "./InputCheckbox": 65,
        "./InputColor": 66,
        "./InputDateAndTime": 67,
        "./InputEmail": 68,
        "./InputFile": 69,
        "./InputGroup": 70,
        "./InputGroupAddonLeft": 72,
        "./InputGroupAddonRight": 73,
        "./InputHidden": 74,
        "./InputNumber": 75,
        "./InputPassword": 76,
        "./InputRadio": 77,
        "./InputRange": 79,
        "./InputSearch": 80,
        "./InputTel": 81,
        "./InputText": 82,
        "./InputTextarea": 83,
        "./InputURL": 84,
        "./Jumbotron": 85,
        "./Label": 86,
        "./List": 87,
        "./ListGroup": 88,
        "./ListGroupItem": 89,
        "./ListItem": 90,
        "./Media": 91,
        "./MediaBody": 92,
        "./MediaLeft": 93,
        "./MediaRight": 94,
        "./Nav": 95,
        "./NavBar": 96,
        "./NavBarBrand": 97,
        "./NavItem": 98,
        "./PageHeader": 99,
        "./Pager": 100,
        "./PagerItem": 101,
        "./Pagination": 104,
        "./PaginationItem": 105,
        "./Panel": 106,
        "./PanelBody": 107,
        "./PanelFooter": 108,
        "./PanelHeading": 109,
        "./Paragraph": 110,
        "./ProgressBar": 111,
        "./RadioHolder": 113,
        "./ResponsiveEmbed": 114,
        "./Row": 115,
        "./Section": 116,
        "./Select": 117,
        "./Small": 118,
        "./Span": 119,
        "./SplitButton": 120,
        "./StaticControl": 121,
        "./Table": 122,
        "./TableBody": 123,
        "./TableCell": 124,
        "./TableFooter": 125,
        "./TableHeader": 126,
        "./TableRow": 127,
        "./Thumbnail": 128,
        "./Well": 129
    }],
    131: [function(require, module, exports) {
        "use strict";
        module.exports = [{
            id: "default",
            name: "Bootstrap",
            fonts: []
        }, {
            id: "default-no-theme",
            name: "Bootstrap Without Theme",
            fonts: []
        }, {
            id: "cerulean",
            name: "Cerulean",
            fonts: []
        }, {
            id: "cosmo",
            name: "Cosmo",
            fonts: [{
                url: "https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,700",
                name: "Source Sans Pro"
            }]
        }, {
            id: "cyborg",
            name: "Cyborg",
            fonts: [{
                url: "https://fonts.googleapis.com/css?family=Roboto:400,700",
                name: "Roboto"
            }]
        }, {
            id: "darkly",
            name: "Darkly",
            fonts: [{
                url: "https://fonts.googleapis.com/css?family=Lato:400,700,400italic",
                name: "Lato"
            }]
        }, {
            id: "flatly",
            name: "Flatly",
            fonts: [{
                url: "https://fonts.googleapis.com/css?family=Lato:400,700,400italic",
                name: "Lato"
            }]
        }, {
            id: "journal",
            name: "Journal",
            fonts: [{
                url: "https://fonts.googleapis.com/css?family=News+Cycle:400,700",
                name: "News Cycle"
            }]
        }, {
            id: "lumen",
            name: "Lumen",
            fonts: [{
                url: "https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,700,400italic",
                name: "Source Sans Pro"
            }]
        }, {
            id: "paper",
            name: "Paper",
            fonts: [{
                url: "https://fonts.googleapis.com/css?family=Roboto:300,400,500,700",
                name: "Roboto"
            }]
        }, {
            id: "readable",
            name: "Readable",
            fonts: [{
                url: "https://fonts.googleapis.com/css?family=Raleway:400,700",
                name: "Raleway"
            }]
        }, {
            id: "sandstone",
            name: "Sandstone",
            fonts: [{
                url: "https://fonts.googleapis.com/css?family=Roboto:400,500",
                name: "Roboto"
            }]
        }, {
            id: "simplex",
            name: "Simplex",
            fonts: [{
                url: "https://fonts.googleapis.com/css?family=Open+Sans:400,700",
                name: "Open Sans"
            }]
        }, {
            id: "slate",
            name: "Slate",
            fonts: []
        }, {
            id: "spacelab",
            name: "Spacelab",
            fonts: [{
                url: "https://fonts.googleapis.com/css?family=Open+Sans:400italic,700italic,400,700",
                name: "Open Sans"
            }]
        }, {
            id: "superhero",
            name: "Superhero",
            fonts: [{
                url: "https://fonts.googleapis.com/css?family=Lato:300,400,700",
                name: "Lato"
            }]
        }, {
            id: "united",
            name: "United",
            fonts: [{
                url: "https://fonts.googleapis.com/css?family=Ubuntu:400,700",
                name: "Ubuntu"
            }]
        }, {
            id: "yeti",
            name: "Yeti",
            fonts: [{
                url: "https://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,700italic,400,300,700",
                name: "Open Sans"
            }]
        }]
    }, {}],
    132: [function(require, module, exports) {
        "use strict";
        module.exports.forbiddenProperties = ["direction"];
        module.exports.validProperties = ["align-content", "align-items", "align-self", "animation", "animation-delay", "animation-direction", "animation-duration", "animation-fill-mode", "animation-iteration-count", "animation-name", "animation-play-state", "animation-timing-function", "backface-visibility", "background", "background-attachment", "background-clip", "background-color", "background-image", "background-origin", "background-position", "background-repeat", "background-size", "border", "border-bottom", "border-bottom-color", "border-bottom-left-radius", "border-bottom-right-radius", "border-bottom-style", "border-bottom-width", "border-collapse", "border-color", "border-image", "border-image-outset", "border-image-repeat", "border-image-slice", "border-image-source", "border-image-width", "border-left", "border-left-color", "border-left-style", "border-left-width", "border-radius", "border-right", "border-right-color", "border-right-style", "border-right-width", "border-spacing", "border-style", "border-top", "border-top-color", "border-top-left-radius", "border-top-right-radius", "border-top-style", "border-top-width", "border-width", "bottom", "box-shadow", "box-sizing", "caption-side", "clear", "clip", "color", "column-count", "column-fill", "column-gap", "column-rule", "column-rule-color", "column-rule-style", "column-rule-width", "column-span", "column-width", "columns", "content", "counter-increment", "counter-reset", "cursor", "direction", "display", "empty-cells", "flex", "flex-basis", "flex-direction", "flex-flow", "flex-grow", "flex-shrink", "flex-wrap", "float", "font", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "hanging-punctuation", "height", "icon", "justify-content", "left", "letter-spacing", "line-height", "list-style", "list-style-image", "list-style-position", "list-style-type", "margin", "margin-bottom", "margin-left", "margin-right", "margin-top", "max-height", "max-width", "min-height", "min-width", "nav-down", "nav-index", "nav-left", "nav-right", "nav-up", "opacity", "order", "outline", "outline-color", "outline-offset", "outline-style", "outline-width", "overflow", "overflow-x", "overflow-y", "padding", "padding-bottom", "padding-left", "padding-right", "padding-top", "page-break-after", "page-break-before", "page-break-inside", "perspective", "perspective-origin", "position", "quotes", "resize", "right", "tab-size", "table-layout", "text-align", "text-align-last", "text-decoration", "text-decoration-color", "text-decoration-line", "text-decoration-style", "text-indent", "text-justify", "text-overflow", "text-shadow", "text-transform", "top", "transform", "transform-origin", "transform-style", "transition", "transition-delay", "transition-duration", "transition-property", "transition-timing-function", "unicode-bidi", "vertical-align", "visibility", "white-space", "width", "word-break", "word-spacing", "word-wrap", "z-index", "text-size-adjust", "tap-highlight-color"];
        module.exports.propertyValues = {
            "align-content": ["center", "flex-end", "flex-start", "space-around", "space-between", "stretch"],
            "align-items": ["baseline", "center", "flex-end", "flex-start", "stretch"],
            "align-self": ["auto", "baseline", "center", "flex-end", "flex-start", "stretch"],
            "alignment-baseline": ["after-edge", "alphabetic", "auto", "baseline", "before-edge", "central", "hanging", "ideographic", "mathematical", "middle", "text-after-edge", "text-before-edge"],
            "animation-direction": ["alternate", "alternate-reverse", "normal", "reverse"],
            "animation-fill-mode": ["backwards", "both", "forwards", "none"],
            "animation-play-state": ["paused", "running"],
            "animation-timing-function": ["cubic-bezier", "ease", "ease-in", "ease-in-out", "ease-out", "linear", "step-end", "step-start", "steps"],
            "background-clip": ["border-box", "content-box", "padding-box"],
            "background-origin": ["border-box", "content-box", "padding-box"],
            "background-repeat": ["no-repeat", "repeat", "repeat-x", "repeat-y", "round", "space"],
            "background-size": ["contain", "cover"],
            "baseline-shift": ["baseline", "sub", "super"],
            border: ["dashed", "dotted", "double", "groove", "hidden", "inset", "none", "outset", "ridge", "solid"],
            "border-bottom-style": ["dashed", "dotted", "double", "groove", "hidden", "inset", "none", "outset", "ridge", "solid"],
            "border-bottom-width": ["medium", "thick", "thin"],
            "border-collapse": ["collapse", "separate"],
            "border-image": ["repeat", "stretch"],
            "border-left-style": ["dashed", "dotted", "double", "groove", "hidden", "inset", "none", "outset", "ridge", "solid"],
            "border-left-width": ["medium", "thick", "thin"],
            "border-right-style": ["dashed", "dotted", "double", "groove", "hidden", "inset", "none", "outset", "ridge", "solid"],
            "border-right-width": ["medium", "thick", "thin"],
            "border-style": ["dashed", "dotted", "double", "groove", "hidden", "inset", "none", "outset", "ridge", "solid"],
            "border-top-style": ["dashed", "dotted", "double", "groove", "hidden", "inset", "none", "outset", "ridge", "solid"],
            "border-top-width": ["medium", "thick", "thin"],
            "border-width": ["medium", "thick", "thin"],
            "box-align": ["baseline", "center", "end", "start", "stretch"],
            "box-direction": ["normal", "reverse"],
            "box-lines": ["multiple", "single"],
            "box-orient": ["block-axis", "horizontal", "inline-axis", "vertical"],
            "box-reflect": ["above", "below", "left", "right"],
            "box-shadow": ["inset", "none"],
            "box-sizing": ["border-box", "content-box"],
            "caption-side": ["bottom", "top"],
            clear: ["both", "left", "none", "right"],
            clip: ["auto"],
            "clip-path": ["none"],
            "clip-rule": ["evenodd", "nonzero"],
            "color-interpolation": ["linearrgb"],
            "color-rendering": ["auto", "optimizeQuality", "optimizeSpeed"],
            content: ["close-quote", "list-item", "no-close-quote", "no-open-quote", "open-quote"],
            cursor: ["alias", "all-scroll", "auto", "cell", "col-resize", "context-menu", "copy", "crosshair", "default", "e-resize", "ew-resize", "help", "move", "n-resize", "ne-resize", "nesw-resize", "no-drop", "none", "not-allowed", "ns-resize", "nw-resize", "nwse-resize", "pointer", "progress", "row-resize", "s-resize", "se-resize", "sw-resize", "text", "vertical-text", "w-resize", "wait"],
            direction: ["ltr", "rtl"],
            display: ["block", "flex", "grid", "inline", "inline-block", "inline-flex", "inline-grid", "inline-table", "list-item", "none", "run-in", "table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row", "table-row-group"],
            "dominant-baseline": ["alphabetic", "auto", "central", "hanging", "ideographic", "mathematical", "middle", "no-change", "reset-size", "text-after-edge", "text-before-edge", "use-script"],
            "empty-cells": ["hide", "show"],
            "enable-background": ["accumulate", "new"],
            "flex-direction": ["column", "column-reverse", "row", "row-reverse"],
            "flex-wrap": ["nowrap", "wrap", "wrap-reverse"],
            "float": ["left", "none", "right"],
            "font-family": ["cursive", "fantasy", "monospace", "sans-serif", "serif"],
            "font-size": ["large", "larger", "medium", "small", "smaller", "x-large", "x-small", "xx-large", "xx-small"],
            "font-stretch": ["condensed", "expanded", "extra-condensed", "extra-expanded", "narrower", "normal", "semi-condensed", "semi-expanded", "ultra-condensed", "ultra-expanded", "wider"],
            "font-style": ["italic", "normal", "oblique"],
            "font-variant": ["normal", "small-caps"],
            "font-weight": ["100", "200", "300", "400", "500", "600", "700", "800", "900", "bold", "bolder", "lighter", "normal"],
            "image-rendering": ["auto", "optimizeQuality", "optimizeSpeed", "pixelated"],
            "image-resolution": ["from-image", "snap"],
            "justify-content": ["center", "flex-end", "flex-start", "space-around", "space-between"],
            "letter-spacing": ["normal"],
            "line-height": ["normal"],
            "list-style-image": ["none"],
            "list-style-position": ["hanging", "inside", "outside"],
            "list-style-type": ["afar", "amharic", "amharic-abegede", "arabic-indic", "armenian", "asterisks", "bengali", "binary", "cambodian", "circle", "cjk-earthly-branch", "cjk-heavenly-stem", "cjk-ideographic", "decimal", "decimal-leading-zero", "devanagari", "disc", "ethiopic", "ethiopic-abegede", "ethiopic-abegede-am-et", "ethiopic-abegede-gez", "ethiopic-abegede-ti-er", "ethiopic-abegede-ti-et", "ethiopic-halehame-aa-er", "ethiopic-halehame-aa-et", "ethiopic-halehame-am-et", "ethiopic-halehame-gez", "ethiopic-halehame-om-et", "ethiopic-halehame-sid-et", "ethiopic-halehame-so-et", "ethiopic-halehame-ti-er", "ethiopic-halehame-ti-et", "ethiopic-halehame-tig", "footnotes", "georgian", "gujarati", "gurmukhi", "hangul", "hangul-consonant", "hebrew", "hiragana", "hiragana-iroha", "inline", "kannada", "katakana", "katakana-iroha", "khmer", "lao", "lower-alpha", "lower-armenian", "lower-greek", "lower-hexadecimal", "lower-latin", "lower-norwegian", "lower-roman", "malayalam", "mongolian", "myanmar", "none", "octal", "oriya", "oromo", "persian", "sidama", "somali", "square", "telugu", "thai", "tibetan", "tigre", "tigrinya-er", "tigrinya-er-abegede", "tigrinya-et", "tigrinya-et-abegede", "upper-alpha", "upper-armenian", "upper-greek", "upper-hexadecimal", "upper-latin", "upper-norwegian", "upper-roman", "urdu"],
            margin: ["auto"],
            "margin-after-collapse": ["collapse", "discard", "separate"],
            "margin-before-collapse": ["collapse", "discard", "separate"],
            "margin-bottom": ["auto"],
            "margin-bottom-collapse": ["collapse", "discard", "separate"],
            "margin-left": ["auto"],
            "margin-right": ["auto"],
            "margin-top": ["auto"],
            "margin-top-collapse": ["collapse", "discard", "separate"],
            "max-height": ["none"],
            "max-width": ["none"],
            outline: ["dashed", "dotted", "double", "groove", "hidden", "inset", "none", "outset", "ridge", "solid"],
            "outline-color": ["invert"],
            "outline-style": ["dashed", "dotted", "double", "groove", "hidden", "inset", "none", "outset", "ridge", "solid"],
            "outline-width": ["medium", "thick", "thin"],
            overflow: ["auto", "hidden", "overlay", "scroll", "visible"],
            "overflow-wrap": ["break-word", "normal"],
            "overflow-x": ["auto", "hidden", "overlay", "scroll", "visible"],
            "overflow-y": ["auto", "hidden", "overlay", "scroll", "visible"],
            "page-break-after": ["always", "auto", "avoid", "left", "right"],
            "page-break-before": ["always", "auto", "avoid", "left", "right"],
            "page-break-inside": ["auto", "avoid"],
            perspective: ["none"],
            "perspective-origin": ["bottom", "center", "left", "right", "top"],
            "pointer-events": ["all", "auto", "bounding-box", "fill", "none", "painted", "stroke", "visible", "visiblefill", "visiblepainted", "visiblestroke"],
            position: ["absolute", "fixed", "relative", "static"],
            resize: ["both", "horizontal", "none", "vertical"],
            size: ["a3", "a4", "a5", "b4", "b5", "landscape", "ledger", "legal", "letter", "portrait"],
            speak: ["digits", "literal-punctuation", "no-punctuation", "none", "normal", "spell-out"],
            "stroke-linejoin": ["bevel", "miter", "round"],
            "table-layout": ["auto", "fixed"],
            "text-align": ["center", "end", "justify", "left", "right", "start"],
            "text-align-last": ["auto", "center", "end", "justify", "left", "right", "start"],
            "text-decoration": ["blink", "line-through", "overline", "underline"],
            "text-overflow": ["clip", "ellipsis"],
            "text-overflow-mode": ["clip", "ellipsis"],
            "text-rendering": ["auto", "geometricPrecision", "optimizeLegibility", "optimizeSpeed"],
            "text-transform": ["capitalize", "lowercase", "none", "uppercase"],
            transform: ["matrix", "matrix3d", "perspective", "rotate", "rotate3d", "rotateX", "rotateY", "rotateZ", "scale", "scale3d", "scaleX", "scaleY", "skew", "skewX", "skewY", "translate", "translate3d", "translateX", "translateY", "translateZ"],
            "transform-origin": ["bottom", "center", "left", "right", "top"],
            "transform-style": ["flat", "preserve-3d"],
            "transition-timing-function": ["cubic-bezier", "ease", "ease-in", "ease-in-out", "ease-out", "linear", "step-end", "step-start", "steps"],
            "unicode-bidi": ["bidi-override", "embed", "isolate", "isolate-override", "normal", "plaintext"],
            "vertical-align": ["baseline", "bottom", "middle", "sub", "super", "text-bottom", "text-top", "top"],
            visibility: ["collapse", "hidden", "visible"],
            "white-space": ["normal", "nowrap", "pre", "pre-line", "pre-wrap"],
            "word-break": ["break-all", "break-word", "normal"],
            "word-spacing": ["normal"],
            "word-wrap": ["break-word", "normal"],
            zoom: ["document", "normal", "reset"]
        };
        module.exports.inheritableProperties = new Set(["border-collapse", "border-spacing", "caption-side", "color", "cursor", "direction", "empty-cells", "font-family", "font-size", "font-style", "font-variant", "font-weight", "font", "letter-spacing", "line-height", "list-style-image", "list-style-position", "list-style-type", "list-style", "orphans", "quotes", "text-align", "text-indent", "text-transform", "visibility", "white-space", "widows", "word-spacing"])
    }, {}],
    133: [function(require, module, exports) {
        "use strict";
        module.exports = ["glass", "music", "search", "envelope-o", "heart", "star", "star-o", "user", "film", "th-large", "th", "th-list", "check", "remove", "close", "times", "search-plus", "search-minus", "power-off", "signal", "gear", "cog", "trash-o", "home", "file-o", "clock-o", "road", "download", "arrow-circle-o-down", "arrow-circle-o-up", "inbox", "play-circle-o", "rotate-right", "repeat", "refresh", "list-alt", "lock", "flag", "headphones", "volume-off", "volume-down", "volume-up", "qrcode", "barcode", "tag", "tags", "book", "bookmark", "print", "camera", "font", "bold", "italic", "text-height", "text-width", "align-left", "align-center", "align-right", "align-justify", "list", "dedent", "outdent", "indent", "video-camera", "photo", "image", "picture-o", "pencil", "map-marker", "adjust", "tint", "edit", "pencil-square-o", "share-square-o", "check-square-o", "arrows", "step-backward", "fast-backward", "backward", "play", "pause", "stop", "forward", "fast-forward", "step-forward", "eject", "chevron-left", "chevron-right", "plus-circle", "minus-circle", "times-circle", "check-circle", "question-circle", "info-circle", "crosshairs", "times-circle-o", "check-circle-o", "ban", "arrow-left", "arrow-right", "arrow-up", "arrow-down", "mail-forward", "share", "expand", "compress", "plus", "minus", "asterisk", "exclamation-circle", "gift", "leaf", "fire", "eye", "eye-slash", "warning", "exclamation-triangle", "plane", "calendar", "random", "comment", "magnet", "chevron-up", "chevron-down", "retweet", "shopping-cart", "folder", "folder-open", "arrows-v", "arrows-h", "bar-chart-o", "bar-chart", "twitter-square", "facebook-square", "camera-retro", "key", "gears", "cogs", "comments", "thumbs-o-up", "thumbs-o-down", "star-half", "heart-o", "sign-out", "linkedin-square", "thumb-tack", "external-link", "sign-in", "trophy", "github-square", "upload", "lemon-o", "phone", "square-o", "bookmark-o", "phone-square", "twitter", "facebook-f", "facebook", "github", "unlock", "credit-card", "rss", "hdd-o", "bullhorn", "bell", "certificate", "hand-o-right", "hand-o-left", "hand-o-up", "hand-o-down", "arrow-circle-left", "arrow-circle-right", "arrow-circle-up", "arrow-circle-down", "globe", "wrench", "tasks", "filter", "briefcase", "arrows-alt", "group", "users", "chain", "link", "cloud", "flask", "cut", "scissors", "copy", "files-o", "paperclip", "save", "floppy-o", "square", "navicon", "reorder", "bars", "list-ul", "list-ol", "strikethrough", "underline", "table", "magic", "truck", "pinterest", "pinterest-square", "google-plus-square", "google-plus", "money", "caret-down", "caret-up", "caret-left", "caret-right", "columns", "unsorted", "sort", "sort-down", "sort-desc", "sort-up", "sort-asc", "envelope", "linkedin", "rotate-left", "undo", "legal", "gavel", "dashboard", "tachometer", "comment-o", "comments-o", "flash", "bolt", "sitemap", "umbrella", "paste", "clipboard", "lightbulb-o", "exchange", "cloud-download", "cloud-upload", "user-md", "stethoscope", "suitcase", "bell-o", "coffee", "cutlery", "file-text-o", "building-o", "hospital-o", "ambulance", "medkit", "fighter-jet", "beer", "h-square", "plus-square", "angle-double-left", "angle-double-right", "angle-double-up", "angle-double-down", "angle-left", "angle-right", "angle-up", "angle-down", "desktop", "laptop", "tablet", "mobile-phone", "mobile", "circle-o", "quote-left", "quote-right", "spinner", "circle", "mail-reply", "reply", "github-alt", "folder-o", "folder-open-o", "smile-o", "frown-o", "meh-o", "gamepad", "keyboard-o", "flag-o", "flag-checkered", "terminal", "code", "mail-reply-all", "reply-all", "star-half-empty", "star-half-full", "star-half-o", "location-arrow", "crop", "code-fork", "unlink", "chain-broken", "question", "info", "exclamation", "superscript", "subscript", "eraser", "puzzle-piece", "microphone", "microphone-slash", "shield", "calendar-o", "fire-extinguisher", "rocket", "maxcdn", "chevron-circle-left", "chevron-circle-right", "chevron-circle-up", "chevron-circle-down", "html5", "css3", "anchor", "unlock-alt", "bullseye", "ellipsis-h", "ellipsis-v", "rss-square", "play-circle", "ticket", "minus-square", "minus-square-o", "level-up", "level-down", "check-square", "pencil-square", "external-link-square", "share-square", "compass", "toggle-down", "caret-square-o-down", "toggle-up", "caret-square-o-up", "toggle-right", "caret-square-o-right", "euro", "eur", "gbp", "dollar", "usd", "rupee", "inr", "cny", "rmb", "yen", "jpy", "ruble", "rouble", "rub", "won", "krw", "bitcoin", "btc", "file", "file-text", "sort-alpha-asc", "sort-alpha-desc", "sort-amount-asc", "sort-amount-desc", "sort-numeric-asc", "sort-numeric-desc", "thumbs-up", "thumbs-down", "youtube-square", "youtube", "xing", "xing-square", "youtube-play", "dropbox", "stack-overflow", "instagram", "flickr", "adn", "bitbucket", "bitbucket-square", "tumblr", "tumblr-square", "long-arrow-down", "long-arrow-up", "long-arrow-left", "long-arrow-right", "apple", "windows", "android", "linux", "dribbble", "skype", "foursquare", "trello", "female", "male", "gittip", "gratipay", "sun-o", "moon-o", "archive", "bug", "vk", "weibo", "renren", "pagelines", "stack-exchange", "arrow-circle-o-right", "arrow-circle-o-left", "toggle-left", "caret-square-o-left", "dot-circle-o", "wheelchair", "vimeo-square", "turkish-lira", "try", "plus-square-o", "space-shuttle", "slack", "envelope-square", "wordpress", "openid", "institution", "bank", "university", "mortar-board", "graduation-cap", "yahoo", "google", "reddit", "reddit-square", "stumbleupon-circle", "stumbleupon", "delicious", "digg", "pied-piper", "pied-piper-alt", "drupal", "joomla", "language", "fax", "building", "child", "paw", "spoon", "cube", "cubes", "behance", "behance-square", "steam", "steam-square", "recycle", "automobile", "car", "cab", "taxi", "tree", "spotify", "deviantart", "soundcloud", "database", "file-pdf-o", "file-word-o", "file-excel-o", "file-powerpoint-o", "file-photo-o", "file-picture-o", "file-image-o", "file-zip-o", "file-archive-o", "file-sound-o", "file-audio-o", "file-movie-o", "file-video-o", "file-code-o", "vine", "codepen", "jsfiddle", "life-bouy", "life-buoy", "life-saver", "support", "life-ring", "circle-o-notch", "ra", "rebel", "ge", "empire", "git-square", "git", "hacker-news", "tencent-weibo", "qq", "wechat", "weixin", "send", "paper-plane", "send-o", "paper-plane-o", "history", "genderless", "circle-thin", "header", "paragraph", "sliders", "share-alt", "share-alt-square", "bomb", "soccer-ball-o", "futbol-o", "tty", "binoculars", "plug", "slideshare", "twitch", "yelp", "newspaper-o", "wifi", "calculator", "paypal", "google-wallet", "cc-visa", "cc-mastercard", "cc-discover", "cc-amex", "cc-paypal", "cc-stripe", "bell-slash", "bell-slash-o", "trash", "copyright", "at", "eyedropper", "paint-brush", "birthday-cake", "area-chart", "pie-chart", "line-chart", "lastfm", "lastfm-square", "toggle-off", "toggle-on", "bicycle", "bus", "ioxhost", "angellist", "cc", "shekel", "sheqel", "ils", "meanpath", "buysellads", "connectdevelop", "dashcube", "forumbee", "leanpub", "sellsy", "shirtsinbulk", "simplybuilt", "skyatlas", "cart-plus", "cart-arrow-down", "diamond", "ship", "user-secret", "motorcycle", "street-view", "heartbeat", "venus", "mars", "mercury", "transgender", "transgender-alt", "venus-double", "mars-double", "venus-mars", "mars-stroke", "mars-stroke-v", "mars-stroke-h", "neuter", "facebook-official", "pinterest-p", "whatsapp", "server", "user-plus", "user-times", "hotel", "bed", "viacoin", "train", "subway", "medium"]
    }, {}],
    134: [function(require, module, exports) {
        "use strict";
        module.exports = ["asterisk", "plus", "euro", "eur", "minus", "cloud", "envelope", "pencil", "glass", "music", "search", "heart", "star", "star-empty", "user", "film", "th-large", "th", "th-list", "ok", "remove", "zoom-in", "zoom-out", "off", "signal", "cog", "trash", "home", "file", "time", "road", "download-alt", "download", "upload", "inbox", "play-circle", "repeat", "refresh", "list-alt", "lock", "flag", "headphones", "volume-off", "volume-down", "volume-up", "qrcode", "barcode", "tag", "tags", "book", "bookmark", "print", "camera", "font", "bold", "italic", "text-height", "text-width", "align-left", "align-center", "align-right", "align-justify", "list", "indent-left", "indent-right", "facetime-video", "picture", "map-marker", "adjust", "tint", "edit", "share", "check", "move", "step-backward", "fast-backward", "backward", "play", "pause", "stop", "forward", "fast-forward", "step-forward", "eject", "chevron-left", "chevron-right", "plus-sign", "minus-sign", "remove-sign", "ok-sign", "question-sign", "info-sign", "screenshot", "remove-circle", "ok-circle", "ban-circle", "arrow-left", "arrow-right", "arrow-up", "arrow-down", "share-alt", "resize-full", "resize-small", "exclamation-sign", "gift", "leaf", "fire", "eye-open", "eye-close", "warning-sign", "plane", "calendar", "random", "comment", "magnet", "chevron-up", "chevron-down", "retweet", "shopping-cart", "folder-close", "folder-open", "resize-vertical", "resize-horizontal", "hdd", "bullhorn", "bell", "certificate", "thumbs-up", "thumbs-down", "hand-right", "hand-left", "hand-up", "hand-down", "circle-arrow-right", "circle-arrow-left", "circle-arrow-up", "circle-arrow-down", "globe", "wrench", "tasks", "filter", "briefcase", "fullscreen", "dashboard", "paperclip", "heart-empty", "link", "phone", "pushpin", "usd", "gbp", "sort", "sort-by-alphabet", "sort-by-alphabet-alt", "sort-by-order", "sort-by-order-alt", "sort-by-attributes", "sort-by-attributes-alt", "unchecked", "expand", "collapse-down", "collapse-up", "log-in", "flash", "log-out", "new-window", "record", "save", "open", "saved", "import", "export", "send", "floppy-disk", "floppy-saved", "floppy-remove", "floppy-save", "floppy-open", "credit-card", "transfer", "cutlery", "header", "compressed", "earphone", "phone-alt", "tower", "stats", "sd-video", "hd-video", "subtitles", "sound-stereo", "sound-dolby", "sound-5-1", "sound-6-1", "sound-7-1", "copyright-mark", "registration-mark", "cloud-download", "cloud-upload", "tree-conifer", "tree-deciduous", "cd", "save-file", "open-file", "level-up", "copy", "paste", "alert", "equalizer", "king", "queen", "pawn", "bishop", "knight", "baby-formula", "tent", "blackboard", "bed", "apple", "erase", "hourglass", "lamp", "duplicate", "piggy-bank", "scissors", "bitcoin", "btc", "xbt", "yen", "jpy", "ruble", "rub", "scale", "ice-lolly", "ice-lolly-tasted", "education", "option-horizontal", "option-vertical", "menu-hamburger", "modal-window", "oil", "grain", "sunglasses", "text-size", "text-color", "text-background", "object-align-top", "object-align-bottom", "object-align-horizontal", "object-align-left", "object-align-vertical", "object-align-right", "triangle-right", "triangle-left", "triangle-bottom", "triangle-top", "console", "superscript", "subscript", "menu-left", "menu-right", "menu-down", "menu-up"]
    }, {}],
    135: [function(require, module, exports) {
        "use strict";
        module.exports = {
            png: "image/png",
            jpg: "image/jpg",
            jpeg: "image/jpg",
            gif: "image/gif",
            svg: "image/svg+xml"
        }
    }, {}],
    136: [function(require, module, exports) {
        "use strict";
        module.exports = function convert(json) {
            walk(json.design.components);
            json.version = 2;
            return json
        };

        function walk(component) {
            if (component.cssClasses && component.cssClasses.user !== undefined) {
                component.overrides = {
                    css: {},
                    ids: {}
                };
                if (component.cssClasses.user.trim().length) {
                    component.overrides.css["/"] = component.cssClasses.user
                }
                delete component.cssClasses.user
            }
            if (Array.isArray(component.children)) {
                for (var i = 0; i < component.children.length; i++) {
                    walk(component.children[i])
                }
            }
        }
    }, {}],
    137: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Dialog = require("./Dialog");
        var AboutDialog = function(_Dialog) {
            _inherits(AboutDialog, _Dialog);

            function AboutDialog(elem) {
                _classCallCheck(this, AboutDialog);
                _get(Object.getPrototypeOf(AboutDialog.prototype), "constructor", this).call(this, elem);
                elem.find(".button.ok").on("click", this.close.bind(this))
            }
            _createClass(AboutDialog, [{
                key: "open",
                value: function open(options) {
                    if (options.trial) {
                        this.element.find(".updates-until").html("Trial expires on: <span>" + options.updatesUntil + "</span>")
                    } else {
                        this.element.find(".updates-until").html("Receiving updates until: <span>" + options.updatesUntil + "</span>")
                    }
                    this.element.find(".version").text(options.version + (options.trial ? " Trial" : ""));
                    this.element.find(".computer-name").text(options.computerName.slice(0, 30));
                    _get(Object.getPrototypeOf(AboutDialog.prototype), "open", this).call(this, options)
                }
            }]);
            return AboutDialog
        }(Dialog);
        module.exports = AboutDialog
    }, {
        "./Dialog": 141
    }],
    138: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Dialog = require("./Dialog");
        var AlertDialog = function(_Dialog) {
            _inherits(AlertDialog, _Dialog);

            function AlertDialog(elem) {
                _classCallCheck(this, AlertDialog);
                _get(Object.getPrototypeOf(AlertDialog.prototype), "constructor", this).call(this, elem);
                this.message = elem.find(".message");
                this.title = elem.find("h5");
                elem.find(".button.ok").on("click", this.close.bind(this))
            }
            _createClass(AlertDialog, [{
                key: "open",
                value: function open(options) {
                    this.message.text(options.message);
                    this.title.text(options.title);
                    _get(Object.getPrototypeOf(AlertDialog.prototype), "open", this).call(this, options)
                }
            }]);
            return AlertDialog
        }(Dialog);
        module.exports = AlertDialog
    }, {
        "./Dialog": 141
    }],
    139: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Dialog = require("./Dialog");
        var escapeHTML = require("escape-html");
        var domTreeToArray = require("../helpers/domTreeToArray");
        var findInTree = require("../helpers/findInTree");
        var Image = require("../components/Image");
        var ComponentToPackageDialog = function(_Dialog) {
            _inherits(ComponentToPackageDialog, _Dialog);

            function ComponentToPackageDialog(elem) {
                _classCallCheck(this, ComponentToPackageDialog);
                _get(Object.getPrototypeOf(ComponentToPackageDialog.prototype), "constructor", this).call(this, elem);
                this.nameInput = elem.find("#package-name-input");
                this.okButton = elem.find(".button.ok");
                this.okButton.on("click", this.onOK.bind(this));
                this.usedCSS = [];
                this.usedFonts = [];
                this.usedImages = [];
                elem.find(".button.cancel").on("click", this.close.bind(this));
                this.nameInput.on("input", this.onNameInput.bind(this));
                elem.on("change", ".item input[type=checkbox]", this.toggleItem.bind(this));
                this.updateAllCheckbox = elem.find(".update-all-checkbox input")
            }
            _createClass(ComponentToPackageDialog, [{
                key: "onNameInput",
                value: function onNameInput(e) {
                    this.okButton.toggleClass("disable", this.nameInput.val().trim().length == 0)
                }
            }, {
                key: "toggleItem",
                value: function toggleItem(e) {
                    var checkbox = $(e.target);
                    var item = checkbox.closest(".item");
                    item.toggleClass("checked", e.target.checked)
                }
            }, {
                key: "open",
                value: function open(options) {
                    var component = options.component;
                    var elements = domTreeToArray(component.element[0]);
                    for (var i = 0; i < app.context.css.length; i++) {
                        for (var j = 0; j < elements.length; j++) {
                            if (app.context.css[i].matchesElement(elements[j])) {
                                if (this.usedCSS.indexOf(app.context.css[i]) == -1) {
                                    this.usedCSS.push(app.context.css[i])
                                }
                            }
                        }
                    }
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;
                    try {
                        for (var _iterator = this.usedCSS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var css = _step.value;
                            var _iteratorNormalCompletion4 = true;
                            var _didIteratorError4 = false;
                            var _iteratorError4 = undefined;
                            try {
                                for (var _iterator4 = app.context.assets.images[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                                    var img = _step4.value;
                                    if (css.isImageUsed(img.name) && this.usedImages.indexOf(img) == -1) {
                                        this.usedImages.push(img)
                                    }
                                }
                            } catch (err) {
                                _didIteratorError4 = true;
                                _iteratorError4 = err
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion4 && _iterator4["return"]) {
                                        _iterator4["return"]()
                                    }
                                } finally {
                                    if (_didIteratorError4) {
                                        throw _iteratorError4
                                    }
                                }
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator["return"]) {
                                _iterator["return"]()
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError
                            }
                        }
                    }
                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;
                    try {
                        for (var _iterator2 = findInTree(Image, component)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                            var imageComponent = _step2.value;
                            var _iteratorNormalCompletion5 = true;
                            var _didIteratorError5 = false;
                            var _iteratorError5 = undefined;
                            try {
                                for (var _iterator5 = app.context.assets.images[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                                    var img = _step5.value;
                                    if (imageComponent.isInstanceOfImageAsset(img) && this.usedImages.indexOf(img) == -1) {
                                        this.usedImages.push(img)
                                    }
                                }
                            } catch (err) {
                                _didIteratorError5 = true;
                                _iteratorError5 = err
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion5 && _iterator5["return"]) {
                                        _iterator5["return"]()
                                    }
                                } finally {
                                    if (_didIteratorError5) {
                                        throw _iteratorError5
                                    }
                                }
                            }
                        }
                    } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
                                _iterator2["return"]()
                            }
                        } finally {
                            if (_didIteratorError2) {
                                throw _iteratorError2
                            }
                        }
                    }
                    var _iteratorNormalCompletion3 = true;
                    var _didIteratorError3 = false;
                    var _iteratorError3 = undefined;
                    try {
                        for (var _iterator3 = this.usedCSS[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                            var css = _step3.value;
                            var _iteratorNormalCompletion6 = true;
                            var _didIteratorError6 = false;
                            var _iteratorError6 = undefined;
                            try {
                                for (var _iterator6 = app.context.assets.fonts[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                                    var font = _step6.value;
                                    if (css.isFontUsed(font.name) && this.usedFonts.indexOf(font) == -1) {
                                        this.usedFonts.push(font)
                                    }
                                }
                            } catch (err) {
                                _didIteratorError6 = true;
                                _iteratorError6 = err
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion6 && _iterator6["return"]) {
                                        _iterator6["return"]()
                                    }
                                } finally {
                                    if (_didIteratorError6) {
                                        throw _iteratorError6
                                    }
                                }
                            }
                        }
                    } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion3 && _iterator3["return"]) {
                                _iterator3["return"]()
                            }
                        } finally {
                            if (_didIteratorError3) {
                                throw _iteratorError3
                            }
                        }
                    }
                    if (options.update) {
                        this.element.find("h5").text("Update Component");
                        this.nameInput.val(options.update.name);
                        this.nameInput[0].readOnly = true;
                        this.okButton.text("Update");
                        this.updateAllCheckbox.parent().show()
                    } else {
                        this.element.find("h5").text("Create New Component");
                        this.nameInput.val("");
                        this.nameInput[0].readOnly = false;
                        this.okButton.text("Create");
                        this.updateAllCheckbox.parent().hide()
                    }
                    this.okButton.toggleClass("disable", !options.update);
                    _get(Object.getPrototypeOf(ComponentToPackageDialog.prototype), "open", this).call(this, options);
                    this.nameInput.focus()
                }
            }, {
                key: "close",
                value: function close() {
                    _get(Object.getPrototypeOf(ComponentToPackageDialog.prototype), "close", this).call(this);
                    this.usedCSS = [];
                    this.usedFonts = [];
                    this.usedImages = []
                }
            }, {
                key: "afterClose",
                value: function afterClose() {
                    this.element.find(".css-list").empty();
                    this.element.find(".image-list").empty();
                    this.element.find(".font-list").empty()
                }
            }, {
                key: "onOK",
                value: function onOK() {
                    var css = [],
                        fonts = [],
                        images = [];
                    var that = this;
                    this.element.find(".css-list .item.checked").each(function() {
                        css.push(that.usedCSS[this.dataset.index])
                    });
                    this.element.find(".font-list .item.checked").each(function() {
                        fonts.push(that.usedFonts[this.dataset.index])
                    });
                    this.element.find(".image-list .item.checked").each(function() {
                        images.push(that.usedImages[this.dataset.index])
                    });
                    this.options.onSubmit({
                        name: this.nameInput.val(),
                        fonts: fonts,
                        images: images,
                        css: css,
                        updateAll: this.updateAllCheckbox.prop("checked")
                    });
                    this.close()
                }
            }, {
                key: "update",
                value: function update() {
                    this.element.toggleClass("has-css", !!this.usedCSS.length);
                    this.element.toggleClass("has-images", !!this.usedImages.length);
                    this.element.toggleClass("has-fonts", !!this.usedFonts.length);
                    this.element.find(".css-list").html(this.usedCSS.map(function(css, i) {
                        return createCSSItem(css, i)
                    }).join(""));
                    this.element.find(".image-list").html(this.usedImages.map(function(img, i) {
                        return createImageItem(img, i)
                    }).join(""));
                    this.element.find(".font-list").html(this.usedFonts.map(function(font, i) {
                        return createFontItem(font, i)
                    }).join(""))
                }
            }]);
            return ComponentToPackageDialog
        }(Dialog);

        function createImageItem(image, index) {
            return '<label class="item white-item checked" data-index="' + index + '"><input type="checkbox" checked />' + escapeHTML(image.name) + "</label>"
        }

        function createFontItem(font, index) {
            return '<label class="item white-item checked" data-index="' + index + '"><input type="checkbox" checked />' + escapeHTML(font.name) + "</label>"
        }

        function createCSSItem(block, index) {
            if (!block.rules.length) return "";
            var html = '<label class="item checked" data-index="' + index + '">\n			<div class="left">\n				<input type="checkbox" checked />\n			</div>\n\n			<div class="right">';
            if (block.mediaQuery) {
                html += '\n			<div class="media">\n				<div class="open-query"><span>@media ' + escapeHTML(block.mediaQuery) + "</span> {</div>\n		"
            }
            html += '\n		<div class="open-block">\n			<span>' + escapeHTML(block.selector) + "</span> {\n		</div>";
            for (var i = 0; i < block.rules.length; i++) {
                html += '\n			<div class="line"><span class="property">' + escapeHTML(block.rules[i].property) + '</span>: <span class="value">' + escapeHTML(block.rules[i].value) + ";</span></div>\n		"
            }
            html += '<div class="close-block">}</div>';
            if (block.mediaQuery) {
                html += '\n			<div class="close-query">}</div>\n		</div>'
            }
            html += "\n		</div>\n	</label>";
            return html
        }
        module.exports = ComponentToPackageDialog
    }, {
        "../components/Image": 61,
        "../helpers/domTreeToArray": 159,
        "../helpers/findInTree": 166,
        "./Dialog": 141,
        "escape-html": 412
    }],
    140: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Dialog = require("./Dialog");
        var ConfirmDialog = function(_Dialog) {
            _inherits(ConfirmDialog, _Dialog);

            function ConfirmDialog(elem) {
                _classCallCheck(this, ConfirmDialog);
                _get(Object.getPrototypeOf(ConfirmDialog.prototype), "constructor", this).call(this, elem);
                this.message = elem.find(".message");
                this.title = elem.find("h5");
                this.okButton = elem.find(".button.ok");
                this.okButton.on("click", this.onOK.bind(this));
                elem.find(".button.cancel").on("click", this.close.bind(this))
            }
            _createClass(ConfirmDialog, [{
                key: "open",
                value: function open(options) {
                    this.message.text(options.message);
                    this.title.text(options.title);
                    this.okButton.text(options.okButton);
                    _get(Object.getPrototypeOf(ConfirmDialog.prototype), "open", this).call(this, options)
                }
            }, {
                key: "onOK",
                value: function onOK() {
                    this.options.onOK();
                    this.close()
                }
            }]);
            return ConfirmDialog
        }(Dialog);
        module.exports = ConfirmDialog
    }, {
        "./Dialog": 141
    }],
    141: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var Dialog = function() {
            function Dialog(elem) {
                _classCallCheck(this, Dialog);
                this.element = elem;
                this.background = elem.closest("#dialogs").find(".dialog-background");
                this.options = {};
                this.element.find(".close").on("click", this.close.bind(this));
                this._updateFunc = function() {
                    this.update()
                }.bind(this)
            }
            _createClass(Dialog, [{
                key: "open",
                value: function open() {
                    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
                    if (Dialog.stack.length && Dialog.stack[Dialog.stack.length - 1] instanceof this.constructor) {
                        return
                    }
                    this.options = options;
                    this.element.fadeIn("fast");
                    this.background.fadeIn("fast");
                    this.update();
                    if (Dialog.stack.length) {
                        Dialog.stack[Dialog.stack.length - 1].hide(false)
                    }
                    Dialog.stack.push(this)
                }
            }, {
                key: "close",
                value: function close() {
                    Dialog.stack.pop();
                    if (Dialog.stack.length) {
                        this.hide(false);
                        Dialog.stack[Dialog.stack.length - 1].show()
                    } else {
                        this.hide();
                        this.background.off("click");
                        this.background.fadeOut("fast")
                    }
                    this.options.onClose && this.options.onClose();
                    setTimeout(function() {
                        this.afterClose()
                    }.bind(this), 300)
                }
            }, {
                key: "hide",
                value: function hide() {
                    var animate = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
                    if (animate) {
                        this.element.fadeOut("fast")
                    } else {
                        this.element.hide()
                    }
                }
            }, {
                key: "show",
                value: function show() {
                    var animate = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
                    if (animate) {
                        this.element.fadeIn("fast")
                    } else {
                        this.element.show()
                    }
                    this.update()
                }
            }, {
                key: "afterClose",
                value: function afterClose() {}
            }, {
                key: "update",
                value: function update() {}
            }, {
                key: "scheduleUpdate",
                value: function scheduleUpdate() {
                    var delay = arguments.length <= 0 || arguments[0] === undefined ? 20 : arguments[0];
                    clearTimeout(this._updateTimer);
                    this._updateTimer = setTimeout(this._updateFunc, delay)
                }
            }], [{
                key: "isDialogShown",
                value: function isDialogShown() {
                    return !!this.stack.length
                }
            }, {
                key: "getShownDialog",
                value: function getShownDialog() {
                    return this.stack[this.stack.length - 1]
                }
            }]);
            return Dialog
        }();
        Dialog.stack = [];
        module.exports = Dialog
    }, {}],
    142: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Dialog = require("./Dialog");
        var FontImportDialog = function(_Dialog) {
            _inherits(FontImportDialog, _Dialog);

            function FontImportDialog(elem) {
                _classCallCheck(this, FontImportDialog);
                _get(Object.getPrototypeOf(FontImportDialog.prototype), "constructor", this).call(this, elem);
                this.importButton = elem.find(".button.import");
                this.importButton.on("click", this.onImport.bind(this));
                this.urlInput = elem.find("input");
                this.urlInput.on("input", this.urlInputChanged.bind(this));
                this.working = false;
                elem.find(".button.cancel").on("click", this.close.bind(this))
            }
            _createClass(FontImportDialog, [{
                key: "urlInputChanged",
                value: function urlInputChanged(e) {
                    this.importButton.toggleClass("disable", !this.urlInput[0].checkValidity())
                }
            }, {
                key: "open",
                value: function open(options) {
                    this.stopWorking();
                    this.urlInput.val("");
                    this.importButton.addClass("disable");
                    _get(Object.getPrototypeOf(FontImportDialog.prototype), "open", this).call(this, options);
                    this.urlInput.focus()
                }
            }, {
                key: "startWorking",
                value: function startWorking() {
                    this.working = true;
                    this.importButton.text("Working")
                }
            }, {
                key: "stopWorking",
                value: function stopWorking() {
                    this.working = false;
                    this.importButton.text("Import")
                }
            }, {
                key: "isWorking",
                value: function isWorking() {
                    return this.working
                }
            }, {
                key: "onImport",
                value: function onImport() {
                    if (this.isWorking()) {
                        return
                    }
                    this.startWorking();
                    var that = this;
                    var url = this.urlInput.val().trim();
                    $.get(url).done(function(text) {
                        var match = text.match(/font-family\:['" ]*([^'"\;\}]+)/);
                        var name;
                        if (match && match[1]) {
                            name = match[1].trim()
                        }
                        if (!name || !name.length) return;
                        that.options.onSave(name, url);
                        that.close()
                    }).always(function() {
                        that.stopWorking()
                    })
                }
            }]);
            return FontImportDialog
        }(Dialog);
        module.exports = FontImportDialog
    }, {
        "./Dialog": 141
    }],
    143: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Dialog = require("./Dialog");
        var filter = require("fuzzaldrin").filter;
        var iconFonts = [{
            name: "Glyphicons",
            icons: require("../config/glyphicons"),
            prefix: "glyphicon glyphicon-"
        }, {
            name: "Font Awesome",
            icons: require("../config/font-awesome"),
            prefix: "fa fa-"
        }];
        var IconsDialog = function(_Dialog) {
            _inherits(IconsDialog, _Dialog);

            function IconsDialog(elem) {
                _classCallCheck(this, IconsDialog);
                _get(Object.getPrototypeOf(IconsDialog.prototype), "constructor", this).call(this, elem);
                this.searchString = "";
                this.iconFont = 0;
                this.searchInput = elem.find("input");
                this.okButton = elem.find(".button.ok");
                this.selectElement = elem.find("select");
                this.searchInput.on("input", this.onSearch.bind(this));
                this.okButton.on("click", this.onOK.bind(this));
                this.selectElement.on("change", this.selectBoxChanged.bind(this));
                elem.on("click", ".icon", this.iconClick.bind(this));
                elem.find(".button.cancel").on("click", this.close.bind(this))
            }
            _createClass(IconsDialog, [{
                key: "selectBoxChanged",
                value: function selectBoxChanged(e) {
                    this.iconFont = e.target.value;
                    this.resetSearch();
                    this.update()
                }
            }, {
                key: "resetSearch",
                value: function resetSearch() {
                    this.searchString = "";
                    this.searchInput.val("")
                }
            }, {
                key: "open",
                value: function open(options) {
                    this.resetSearch();
                    for (var i = 0; i < iconFonts.length; i++) {
                        if (options.selected.match(iconFonts[i].prefix)) {
                            this.iconFont = i;
                            this.selectElement.val(i);
                            break
                        }
                    }
                    _get(Object.getPrototypeOf(IconsDialog.prototype), "open", this).call(this, options);
                    this.searchInput.focus()
                }
            }, {
                key: "onOK",
                value: function onOK() {
                    this.options.onSave(this.options.selected);
                    this.close()
                }
            }, {
                key: "iconClick",
                value: function iconClick(e) {
                    var elem = $(e.currentTarget);
                    elem.siblings().removeClass("selected");
                    elem.toggleClass("selected");
                    if (elem.hasClass("selected")) {
                        this.options.selected = elem.data("id");
                        this.okButton.removeClass("disable")
                    } else {
                        this.options.selected = "";
                        this.okButton.addClass("disable")
                    }
                }
            }, {
                key: "onSearch",
                value: function onSearch(e) {
                    this.searchString = e.target.value.trim();
                    this.scheduleUpdate(100)
                }
            }, {
                key: "update",
                value: function update() {
                    var holder = this.element.find(".icon-holder");
                    var icons = iconFonts[this.iconFont].icons,
                        prefix = iconFonts[this.iconFont].prefix;
                    if (this.searchString.length) {
                        icons = filter(icons, this.searchString)
                    }
                    var isSelectedIcon = false;
                    holder.html(icons.map(function(r) {
                        r = prefix + r;
                        var selected = "";
                        if (r == this.options.selected) {
                            selected = "selected";
                            isSelectedIcon = true
                        }
                        return '<div data-id="' + r + '" class="icon ' + selected + '">\n				<i class="' + r + '"></i>\n				<span>' + r + "</span>\n			</div>"
                    }.bind(this)));
                    this.okButton.toggleClass("disable", !isSelectedIcon);
                    if (isSelectedIcon) {
                        holder.find(".selected")[0].scrollIntoViewIfNeeded()
                    }
                }
            }]);
            return IconsDialog
        }(Dialog);
        module.exports = IconsDialog
    }, {
        "../config/font-awesome": 133,
        "../config/glyphicons": 134,
        "./Dialog": 141,
        fuzzaldrin: 414
    }],
    144: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Dialog = require("./Dialog");
        var filter = require("fuzzaldrin").filter;
        var ImagesDialog = function(_Dialog) {
            _inherits(ImagesDialog, _Dialog);

            function ImagesDialog(elem) {
                _classCallCheck(this, ImagesDialog);
                _get(Object.getPrototypeOf(ImagesDialog.prototype), "constructor", this).call(this, elem);
                this.domToImage = new WeakMap;
                this.searchString = "";
                this.searchInput = elem.find("input");
                this.okButton = elem.find(".button.ok");
                this.importButton = elem.find(".button.import");
                this.searchInput.on("input", this.onSearch.bind(this));
                this.okButton.on("click", this.onOK.bind(this));
                elem.find(".import").on("click", this.importImage.bind(this));
                elem.on("click", ".image", this.imageClick.bind(this));
                elem.find(".button.cancel").on("click", this.close.bind(this));
                app.on("image-assets-changed", this.update.bind(this))
            }
            _createClass(ImagesDialog, [{
                key: "importImage",
                value: function importImage() {
                    app.assetsPane.importImageAction()
                }
            }, {
                key: "onOK",
                value: function onOK() {
                    this.options.onSave(this.options.selected);
                    this.close()
                }
            }, {
                key: "resetSearch",
                value: function resetSearch() {
                    this.searchString = "";
                    this.searchInput.val("")
                }
            }, {
                key: "open",
                value: function open(options) {
                    this.resetSearch();
                    _get(Object.getPrototypeOf(ImagesDialog.prototype), "open", this).call(this, options);
                    this.searchInput.focus()
                }
            }, {
                key: "imageClick",
                value: function imageClick(e) {
                    var elem = $(e.currentTarget);
                    elem.siblings().removeClass("selected");
                    elem.toggleClass("selected");
                    var obj = this.domToImage.get(e.currentTarget);
                    if (elem.hasClass("selected")) {
                        this.options.selected = obj.name;
                        this.okButton.removeClass("disable")
                    } else {
                        this.options.selected = "";
                        this.okButton.addClass("disable")
                    }
                }
            }, {
                key: "onSearch",
                value: function onSearch(e) {
                    this.searchString = e.target.value.trim();
                    this.scheduleUpdate(100)
                }
            }, {
                key: "update",
                value: function update() {
                    var holder = this.element.find(".image-holder");
                    var images = app.context.assets.images;
                    if (this.searchString.length) {
                        images = filter(images, this.searchString, {
                            key: "name"
                        })
                    }
                    var build = [];
                    var isSelectedImage = false;
                    for (var i = 0; i < images.length; i++) {
                        var selected = "";
                        if (images[i].name == this.options.selected) {
                            selected = "selected";
                            isSelectedImage = true
                        }
                        var tmp = $('<div class="image ' + selected + '">\n				<i></i>\n				<span></span>\n			</div>');
                        tmp.find("i").css("background-image", "url(" + images[i].blobURL + ")");
                        tmp.find("span").text(images[i].name);
                        this.domToImage.set(tmp[0], images[i]);
                        build.push(tmp)
                    }
                    this.okButton.toggleClass("disable", !isSelectedImage);
                    holder.html(build);
                    if (isSelectedImage) {
                        holder.find(".selected")[0].scrollIntoViewIfNeeded()
                    }
                }
            }]);
            return ImagesDialog
        }(Dialog);
        module.exports = ImagesDialog
    }, {
        "./Dialog": 141,
        fuzzaldrin: 414
    }],
    145: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Dialog = require("./Dialog");
        var LinkDialog = function(_Dialog) {
            _inherits(LinkDialog, _Dialog);

            function LinkDialog(elem) {
                _classCallCheck(this, LinkDialog);
                _get(Object.getPrototypeOf(LinkDialog.prototype), "constructor", this).call(this, elem);
                this.hrefInput = elem.find("input");
                this.targetSelect = elem.find("select");
                this.okButton = elem.find(".button.ok");
                this.removeButton = elem.find(".remove");
                this.removeButton.on("click", this.removeLink.bind(this));
                this.okButton.on("click", this.onOK.bind(this));
                elem.find(".button.cancel").on("click", this.close.bind(this))
            }
            _createClass(LinkDialog, [{
                key: "removeLink",
                value: function removeLink() {
                    this.options.onSave("", "");
                    this.close()
                }
            }, {
                key: "open",
                value: function open(options) {
                    var href = options.link && options.link.href || "";
                    var target = options.link && options.link.target || "";
                    this.removeButton.toggle(!!href);
                    this.hrefInput.val(href);
                    this.targetSelect.val(target);
                    _get(Object.getPrototypeOf(LinkDialog.prototype), "open", this).call(this, options);
                    this.hrefInput.focus()
                }
            }, {
                key: "onOK",
                value: function onOK() {
                    this.options.onSave(this.hrefInput.val().trim(), this.targetSelect.val());
                    this.close()
                }
            }]);
            return LinkDialog
        }(Dialog);
        module.exports = LinkDialog
    }, {
        "./Dialog": 141
    }],
    146: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var ThemeChooserDialog = require("./ThemeChooserDialog");
        var NewDesignDialog = function(_ThemeChooserDialog) {
            _inherits(NewDesignDialog, _ThemeChooserDialog);

            function NewDesignDialog(elem) {
                _classCallCheck(this, NewDesignDialog);
                _get(Object.getPrototypeOf(NewDesignDialog.prototype), "constructor", this).call(this, elem);
                this.template = "blank";
                this.designName = elem.find(".design-name");
                this.designName.on("input", this.textInput.bind(this));
                this.element.on("click", "ul li", this.clickTemplate.bind(this));
                this.afterCloseProps = null
            }
            _createClass(NewDesignDialog, [{
                key: "clickTemplate",
                value: function clickTemplate(e) {
                    var target = $(e.currentTarget);
                    this.template = target.data("id");
                    this.element.find("ul li").removeClass("active");
                    target.addClass("active")
                }
            }, {
                key: "textInput",
                value: function textInput() {
                    this.okButton.toggleClass("disable", this.designName.val().trim().length == 0)
                }
            }, {
                key: "open",
                value: function open(props) {
                    this.designName.val(props.name || "Untitled");
                    _get(Object.getPrototypeOf(NewDesignDialog.prototype), "open", this).call(this, props);
                    this.designName.select()
                }
            }, {
                key: "onOK",
                value: function onOK() {
                    this.afterCloseProps = {
                        name: this.designName.val(),
                        template: this.template
                    };
                    this.close()
                }
            }, {
                key: "afterClose",
                value: function afterClose() {
                    if (this.afterCloseProps) {
                        this.options.onSave(this.afterCloseProps)
                    }
                    this.afterCloseProps = null
                }
            }, {
                key: "update",
                value: function update() {
                    this.textInput();
                    _get(Object.getPrototypeOf(NewDesignDialog.prototype), "update", this).call(this)
                }
            }]);
            return NewDesignDialog
        }(ThemeChooserDialog);
        module.exports = NewDesignDialog
    }, {
        "./ThemeChooserDialog": 149
    }],
    147: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Dialog = require("./Dialog");
        var PreviewDialog = function(_Dialog) {
            _inherits(PreviewDialog, _Dialog);

            function PreviewDialog(elem) {
                _classCallCheck(this, PreviewDialog);
                _get(Object.getPrototypeOf(PreviewDialog.prototype), "constructor", this).call(this, elem);
                this.previewCheckbox = elem.find(".preview-checkbox");
                this.previewCheckbox.on("change", this.togglePreview.bind(this));
                elem.find(".button.ok").on("click", this.onOK.bind(this));
                elem.on("click", ".browser-button", this.clickBrowserButton.bind(this));
                elem.on("click", ".ip input", function(e) {
                    e.target.select()
                });
                app.on("preview-status-change", this.update.bind(this))
            }
            _createClass(PreviewDialog, [{
                key: "clickBrowserButton",
                value: function clickBrowserButton(e) {
                    electron.openBrowserWindow(this.createURLForIP(electron.getIPAddresses()[e.target.dataset.index]))
                }
            }, {
                key: "createURLForIP",
                value: function createURLForIP(ip) {
                    return "http://" + ip + ":" + electron.previewPort + "/"
                }
            }, {
                key: "togglePreview",
                value: function togglePreview() {
                    app.togglePreview();
                    this.previewCheckbox.prop("disabled", true)
                }
            }, {
                key: "onOK",
                value: function onOK() {
                    this.close()
                }
            }, {
                key: "update",
                value: function update() {
                    this.element.find(".ip-address-list").hide();
                    if (app.settings.previewEnabled) {
                        var ips = electron.getIPAddresses();
                        var build = [];
                        for (var i = 0; i < ips.length; i++) {
                            build.push('<div class="ip">					<input type="text" value="' + this.createURLForIP(ips[i]) + '" readonly />					<a class="button browser-button" data-index="' + i + '">Open in Browser</a>				</div>')
                        }
                        this.element.find(".ip-address-list").html(build).show()
                    }
                    this.previewCheckbox.prop("checked", app.settings.previewEnabled).prop("disabled", false);
                    this.element.find(".checkbox b").text(app.settings.previewEnabled ? "Enabled" : "Disabled")
                }
            }]);
            return PreviewDialog
        }(Dialog);
        module.exports = PreviewDialog
    }, {
        "./Dialog": 141
    }],
    148: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Dialog = require("./Dialog");
        var PurchaseDialog = function(_Dialog) {
            _inherits(PurchaseDialog, _Dialog);

            function PurchaseDialog(elem) {
                _classCallCheck(this, PurchaseDialog);
                _get(Object.getPrototypeOf(PurchaseDialog.prototype), "constructor", this).call(this, elem);
                this.message = elem.find(".message");
                elem.find(".button.purchase").on("click", this.purchaseClick.bind(this));
                elem.find(".button.feedback").on("click", this.feedbackClick.bind(this));
                elem.find(".button.cancel").on("click", this.close.bind(this))
            }
            _createClass(PurchaseDialog, [{
                key: "purchaseClick",
                value: function purchaseClick() {
                    electron.openBrowserWindow("http://bootstrapstudio.io/#purchase")
                }
            }, {
                key: "feedbackClick",
                value: function feedbackClick() {
                    electron.openBrowserWindow("http://bootstrapstudio.io/contact-us")
                }
            }, {
                key: "open",
                value: function open(options) {
                    this.element.find(".days-remaining").text(options.daysRemaining);
                    _get(Object.getPrototypeOf(PurchaseDialog.prototype), "open", this).call(this, options)
                }
            }]);
            return PurchaseDialog
        }(Dialog);
        module.exports = PurchaseDialog
    }, {
        "./Dialog": 141
    }],
    149: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Dialog = require("./Dialog");
        var ThemeChooserDialog = function(_Dialog) {
            _inherits(ThemeChooserDialog, _Dialog);

            function ThemeChooserDialog(elem) {
                _classCallCheck(this, ThemeChooserDialog);
                _get(Object.getPrototypeOf(ThemeChooserDialog.prototype), "constructor", this).call(this, elem);
                this.dialogTitleHolder = elem.find("h5");
                this.designTheme = elem.find(".design-theme");
                this.designTheme.on("change", this.onThemeSelectChange.bind(this));
                this.okButton = elem.find(".button.ok");
                elem.find(".button.manage-themes").on("click", this.manageThemes.bind(this));
                this.okButton.on("click", this.onOK.bind(this));
                elem.find(".button.cancel").on("click", this.close.bind(this));
                this.chosenTheme = ""
            }
            _createClass(ThemeChooserDialog, [{
                key: "manageThemes",
                value: function manageThemes() {
                    app.themeManagerDialog.open()
                }
            }, {
                key: "onThemeSelectChange",
                value: function onThemeSelectChange() {
                    this.chosenTheme = this.designTheme.val()
                }
            }, {
                key: "open",
                value: function open(options) {
                    if (options.dialogTitle) {
                        this.dialogTitleHolder.text(options.dialogTitle)
                    }
                    if (options.buttonText) {
                        this.okButton.text(options.buttonText)
                    }
                    this.chosenTheme = options.theme;
                    _get(Object.getPrototypeOf(ThemeChooserDialog.prototype), "open", this).call(this, options)
                }
            }, {
                key: "update",
                value: function update() {
                    this.designTheme.empty();
                    var tmp;
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;
                    try {
                        for (var _iterator = app.getAllThemes()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var theme = _step.value;
                            tmp = $("<option>");
                            tmp.text(theme.name);
                            tmp.val(theme.id);
                            this.designTheme.append(tmp)
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator["return"]) {
                                _iterator["return"]()
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError
                            }
                        }
                    }
                    this.designTheme.val(this.chosenTheme)
                }
            }, {
                key: "onOK",
                value: function onOK() {
                    this.options.onSave({
                        theme: this.designTheme.val()
                    });
                    this.close()
                }
            }]);
            return ThemeChooserDialog
        }(Dialog);
        module.exports = ThemeChooserDialog
    }, {
        "./Dialog": 141
    }],
    150: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Dialog = require("./Dialog");
        var smartEditableElement = require("../helpers/smartEditableElement");
        var ThemeManagerDialog = function(_Dialog) {
            _inherits(ThemeManagerDialog, _Dialog);

            function ThemeManagerDialog(elem) {
                _classCallCheck(this, ThemeManagerDialog);
                _get(Object.getPrototypeOf(ThemeManagerDialog.prototype), "constructor", this).call(this, elem);
                this.listing = elem.find(".listing");
                this.importButton = elem.find(".button.import");
                this.noThemesMessage = elem.find(".no-themes");
                this.importButton.on("click", this.importClick.bind(this));
                elem.find(".button.cancel").on("click", this.close.bind(this));
                this.smartEditable = smartEditableElement({
                    element: elem,
                    onCommit: this.themeRename.bind(this),
                    onDelete: this.themeDelete.bind(this),
                    doubleClickEditing: true
                });
                app.on("bootstrap-theme-added", this.update.bind(this))
            }
            _createClass(ThemeManagerDialog, [{
                key: "themeRename",
                value: function themeRename(elem, newName) {
                    if (newName.trim().length < 1) {
                        return false
                    }
                    var item = elem.data("item");
                    app.renameTheme(item, newName.trim());
                    this.update()
                }
            }, {
                key: "themeDelete",
                value: function themeDelete(elem) {
                    var item = elem.data("item");
                    if (app.isThemeUsedInOpenDesigns(item.id)) {
                        app.alertDialog.open({
                            title: "Can't Delete",
                            message: "This theme is used by an open design and can't be deleted."
                        });
                        return
                    }
                    app.removeTheme(item);
                    this.update()
                }
            }, {
                key: "importClick",
                value: function importClick(e) {
                    app.importBootstrapThemeAction()
                }
            }, {
                key: "afterClose",
                value: function afterClose() {
                    this.listing.empty()
                }
            }, {
                key: "update",
                value: function update() {
                    this.listing.empty();
                    this.noThemesMessage.hide();
                    if (!app.userThemes.length) {
                        this.noThemesMessage.show();
                        return
                    }
                    this.listing.html(app.userThemes.map(buildThemeMarkup))
                }
            }]);
            return ThemeManagerDialog
        }(Dialog);

        function buildThemeMarkup(item) {
            var tmp = $('<div class="theme-item smart-editable white-item">\n		<span class="name"></span>\n		<input type="text" value="" />\n		<span class="delete">&times;</span>\n		<span class="edit"><i class="material-icon">mode_edit</i></span>\n		<span class="save"><i class="material-icon">check</i></span>\n	</div>');
            tmp.find(".name").text(item.name);
            tmp.data("item", item);
            return tmp
        }
        module.exports = ThemeManagerDialog
    }, {
        "../helpers/smartEditableElement": 189,
        "./Dialog": 141
    }],
    151: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Dialog = require("./Dialog");
        var WhatsNewDialog = function(_Dialog) {
            _inherits(WhatsNewDialog, _Dialog);

            function WhatsNewDialog(elem) {
                _classCallCheck(this, WhatsNewDialog);
                _get(Object.getPrototypeOf(WhatsNewDialog.prototype), "constructor", this).call(this, elem);
                elem.on("click", "li a", function(e) {
                    electron.openBrowserWindow(e.target.href)
                });
                this.index = 0;
                this.prev = elem.find(".arrow.previous");
                this.next = elem.find(".arrow.next");
                this.prev.on("click", this.prevClick.bind(this));
                this.next.on("click", this.nextClick.bind(this));
                elem.find(".button.ok").on("click", this.close.bind(this))
            }
            _createClass(WhatsNewDialog, [{
                key: "nextClick",
                value: function nextClick() {
                    this.index++;
                    this.updateView()
                }
            }, {
                key: "prevClick",
                value: function prevClick() {
                    this.index--;
                    this.updateView()
                }
            }, {
                key: "updateView",
                value: function updateView() {
                    var log = this.options.log[this.index];
                    this.element.find(".version").text(log.version);
                    this.element.find(".date").text(log.date);
                    this.element.find("ul").html(log.changes.map(function(c) {
                        return "<li>" + c + "</li>"
                    }));
                    this.prev.toggle(!!this.options.log[this.index - 1]);
                    this.next.toggle(!!this.options.log[this.index + 1])
                }
            }, {
                key: "open",
                value: function open(options) {
                    _get(Object.getPrototypeOf(WhatsNewDialog.prototype), "open", this).call(this, options);
                    this.index = 0;
                    this.updateView()
                }
            }]);
            return WhatsNewDialog
        }(Dialog);
        module.exports = WhatsNewDialog
    }, {
        "./Dialog": 141
    }],
    152: [function(require, module, exports) {
        "use strict";
        module.exports = function buildBSComponentFormat(pkg) {
            var contents = JSON.stringify({
                version: 1,
                timestamp: Date.now(),
                "package": pkg.serialize()
            });
            return contents
        }
    }, {}],
    153: [function(require, module, exports) {
        "use strict";
        module.exports = function buildBSDesignFormat(context) {
            var contents = JSON.stringify({
                version: 2,
                timestamp: Date.now(),
                design: context.serialize()
            });
            return contents
        }
    }, {}],
    154: [function(require, module, exports) {
        "use strict";
        module.exports = function canParentTakeChild(parent, child) {
            return parent && child && parent.canTakeChild(child) && child.canBeDroppedIn(parent)
        }
    }, {}],
    155: [function(require, module, exports) {
        "use strict";
        var cleanRegex = /data\:.*base64,/;
        module.exports = function cleanUpDataURL(url) {
            return url.replace(cleanRegex, "")
        }
    }, {}],
    156: [function(require, module, exports) {
        "use strict";
        var InlineWrapper = require("../components/InlineWrapper");
        var InlineCharacter = require("../components/InlineCharacter");
        module.exports = function componentTreeToArray(component) {
            if (!component) return;
            return walk(component)
        };

        function walk(component) {
            var results = [component];
            if (component instanceof InlineWrapper) {
                results = []
            }
            if (component.children && component.children.length) {
                for (var i = 0; i < component.children.length; i++) {
                    if (component.children[i] instanceof InlineCharacter && !(component.children[i] instanceof InlineWrapper)) {
                        continue
                    }
                    Array.prototype.push.apply(results, walk(component.children[i]))
                }
            }
            return results
        }
    }, {
        "../components/InlineCharacter": 62,
        "../components/InlineWrapper": 63
    }],
    157: [function(require, module, exports) {
        "use strict";
        module.exports = {
            getItem: function getItem(sKey) {
                if (!sKey) {
                    return null
                }
                return decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*([^;]*).*$)|^.*$"), "$1")) || null
            },
            setItem: function setItem(sKey, sValue, vEnd, sPath, sDomain, bSecure) {
                if (!sKey || /^(?:expires|max\-age|path|domain|secure)$/i.test(sKey)) {
                    return false
                }
                var sExpires = "";
                if (vEnd) {
                    switch (vEnd.constructor) {
                        case Number:
                            sExpires = vEnd === Infinity ? "; expires=Fri, 31 Dec 9999 23:59:59 GMT" : "; max-age=" + vEnd;
                            break;
                        case String:
                            sExpires = "; expires=" + vEnd;
                            break;
                        case Date:
                            sExpires = "; expires=" + vEnd.toUTCString();
                            break
                    }
                }
                document.cookie = encodeURIComponent(sKey) + "=" + encodeURIComponent(sValue) + sExpires + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "") + (bSecure ? "; secure" : "");
                return true
            },
            removeItem: function removeItem(sKey, sPath, sDomain) {
                if (!this.hasItem(sKey)) {
                    return false
                }
                document.cookie = encodeURIComponent(sKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT" + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "");
                return true
            },
            hasItem: function hasItem(sKey) {
                if (!sKey) {
                    return false
                }
                return new RegExp("(?:^|;\\s*)" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=").test(document.cookie)
            },
            keys: function keys() {
                var aKeys = document.cookie.replace(/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g, "").split(/\s*(?:\=[^;]*)?;\s*/);
                for (var nLen = aKeys.length, nIdx = 0; nIdx < nLen; nIdx++) {
                    aKeys[nIdx] = decodeURIComponent(aKeys[nIdx])
                }
                return aKeys
            }
        }
    }, {}],
    158: [function(require, module, exports) {
        "use strict";
        module.exports = function dataURLToBlob(dataURL) {
            var split = dataURL.split(",");
            var type = split[0].match(/data:(.*);base64/)[1];
            var binary = atob(split[1]);
            var array = new Array(binary.length);
            for (var i = 0; i < binary.length; i++) {
                array[i] = binary.charCodeAt(i)
            }
            return new Blob([new Uint8Array(array)], {
                type: type
            })
        }
    }, {}],
    159: [function(require, module, exports) {
        "use strict";
        module.exports = function domTreeToArray(node) {
            if (!node) return;
            return walk(node)
        };

        function walk(node) {
            var results = [node];
            if (node.nodeName == "INLINE-WRAPPER") {
                results = []
            }
            if (node.children && node.children.length) {
                for (var i = 0; i < node.children.length; i++) {
                    if (node.children[i].nodeName == "INLINE-CHARACTER") {
                        continue
                    }
                    Array.prototype.push.apply(results, walk(node.children[i]))
                }
            }
            return results
        }
    }, {}],
    160: [function(require, module, exports) {
        "use strict";
        var nodeToTimeout = new WeakMap;
        var nodeToAnim = new WeakMap;

        function scroll(node, pDimensions, sDimensions, mousePosition) {
            var options = arguments.length <= 4 || arguments[4] === undefined ? {} : arguments[4];
            if (mousePosition.y < pDimensions.top || mousePosition.y > pDimensions.bottom || mousePosition.x < pDimensions.left || mousePosition.x > pDimensions.right) {
                return reset(node)
            }
            options = Object.assign({
                topOffset: 30,
                leftOffset: 30,
                rightOffset: 30,
                bottomOffset: 30,
                speedUpScrolling: false
            }, options);
            var scrollAmount = 15;
            if (mousePosition.y < pDimensions.top + options.topOffset && node.scrollTop > 0) {
                if (nodeToAnim.get(node) == "up") return;
                reset(node);
                nodeToAnim.set(node, "up");
                nodeToTimeout.set(node, setInterval(function() {
                    if (node.scrollTop > 0) {
                        node.scrollTop -= scrollAmount;
                        if (options.speedUpScrolling) scrollAmount *= 1.2
                    } else {
                        reset(node)
                    }
                }, 80))
            } else if (mousePosition.y > pDimensions.bottom - options.bottomOffset && node.scrollTop + sDimensions.height < node.scrollHeight) {
                if (nodeToAnim.get(node) == "down") return;
                reset(node);
                nodeToAnim.set(node, "down");
                nodeToTimeout.set(node, setInterval(function() {
                    if (node.scrollTop + sDimensions.height < node.scrollHeight) {
                        node.scrollTop += scrollAmount;
                        if (options.speedUpScrolling) scrollAmount *= 1.2
                    } else {
                        reset(node)
                    }
                }, 80))
            } else if (mousePosition.x < pDimensions.left + options.leftOffset && node.scrollLeft > 0) {
                if (nodeToAnim.get(node) == "left") return;
                reset(node);
                nodeToAnim.set(node, "left");
                nodeToTimeout.set(node, setInterval(function() {
                    if (node.scrollLeft > 0) {
                        node.scrollLeft -= scrollAmount;
                        if (options.speedUpScrolling) scrollAmount *= 1.2
                    } else {
                        reset(node)
                    }
                }, 80))
            } else if (mousePosition.x > pDimensions.right - options.rightOffset && node.scrollLeft + sDimensions.width < node.scrollWidth) {
                if (nodeToAnim.get(node) == "right") return;
                reset(node);
                nodeToAnim.set(node, "right");
                nodeToTimeout.set(node, setInterval(function() {
                    if (node.scrollLeft + sDimensions.width < node.scrollWidth) {
                        node.scrollLeft += scrollAmount;
                        if (options.speedUpScrolling) scrollAmount *= 1.2
                    } else {
                        reset(node)
                    }
                }, 80))
            } else {
                reset(node);
                nodeToAnim["delete"](node)
            }
        }

        function reset(node) {
            if (nodeToTimeout.has(node)) {
                clearInterval(nodeToTimeout.get(node));
                nodeToTimeout["delete"](node);
                nodeToAnim["delete"](node)
            }
        }
        module.exports = {
            scroll: scroll,
            reset: reset
        }
    }, {}],
    161: [function(require, module, exports) {
        "use strict";
        module.exports = function duplicateComponentTree(elem) {
            var restoreComponentTree = require("./restoreComponentTree");
            var tree = restoreComponentTree(elem.serialize());
            recursiveCleanup(tree);
            return tree
        };

        function recursiveCleanup(component) {
            if (component.afterDuplicate) {
                component.afterDuplicate()
            }
            if (Array.isArray(component.children)) {
                for (var i = 0; i < component.children.length; i++) {
                    recursiveCleanup(component.children[i])
                }
            }
        }
    }, {
        "./restoreComponentTree": 187
    }],
    162: [function(require, module, exports) {
        "use strict";
        module.exports = function enforceFileExtension(path, ext) {
            if (path.slice(-ext.length - 1) != "." + ext) {
                path = path + "." + ext
            }
            return path
        }
    }, {}],
    163: [function(require, module, exports) {
        "use strict";
        var endOfTag = /<\s*\//g;
        module.exports = function escapeInlineStyleContent(str) {
            return str.replace(endOfTag, "<\\/")
        }
    }, {}],
    164: [function(require, module, exports) {
        "use strict";
        var regexEscape = /[-\/\\^$*+?.()|[\]{}]/g;
        module.exports = function escapeRegexString(str) {
            return str.replace(regexEscape, "\\$&")
        }
    }, {}],
    165: [function(require, module, exports) {
        "use strict";
        module.exports = function executeCall(dropCall) {
            return dropCall.object[dropCall.method].apply(dropCall.object, dropCall.arguments || [])
        }
    }, {}],
    166: [function(require, module, exports) {
        "use strict";
        var componentTreeToArray = require("../helpers/componentTreeToArray");
        module.exports = function findInTree(what, where) {
            if (!Array.isArray(what)) {
                what = [what]
            }
            var list = componentTreeToArray(where);
            var found = [];
            for (var i = 0; i < list.length; i++) {
                for (var j = 0; j < what.length; j++) {
                    if (list[i] instanceof what[j]) {
                        found.push(list[i])
                    }
                }
            }
            return found
        }
    }, {
        "../helpers/componentTreeToArray": 156
    }],
    167: [function(require, module, exports) {
        "use strict";
        var componentTreeToArray = require("../helpers/componentTreeToArray");
        module.exports = function findInTreeCallback(cb, where) {
            return componentTreeToArray(where).filter(cb)
        }
    }, {
        "../helpers/componentTreeToArray": 156
    }],
    168: [function(require, module, exports) {
        "use strict";
        module.exports = function generateMenuTemplateForApp(app) {
            var template = [];
            var isOSX = electron.os == "osx";
            var recent = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;
            try {
                for (var _iterator = app.getRecentDesigns(10)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var r = _step.value;
                    recent.push({
                        label: r.path,
                        click: app.openDesignAction.bind(app, r.path)
                    })
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator["return"]) {
                        _iterator["return"]()
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError
                    }
                }
            }
            if (isOSX) {
                template.push({
                    label: "Bootstrap Studio",
                    submenu: [{
                        label: "About Bootstrap Studio",
                        click: app.showAboutDialog.bind(app)
                    }, {
                        label: "Delete License Key",
                        click: app.deleteLicenseKey.bind(app)
                    }, {
                        label: "Purchase",
                        click: app.openURLInBrowser.bind(app, "https://bootstrapstudio.io/#purchase"),
                        visible: app.isTrial()
                    }, {
                        type: "separator"
                    }, {
                        label: "Hide Bootstrap Studio",
                        accelerator: "CmdOrCtrl+H",
                        selector: "hide:"
                    }, {
                        label: "Hide Others",
                        accelerator: "CmdOrCtrl+Shift+H",
                        selector: "hideOtherApplications:"
                    }, {
                        label: "Show All",
                        selector: "unhideAllApplications:"
                    }, {
                        type: "separator"
                    }, {
                        label: "Quit",
                        accelerator: "CmdOrCtrl+Q",
                        selector: "terminate:"
                    }]
                })
            }
            var fileMenu = {
                label: "File",
                submenu: [{
                    label: "New Design",
                    accelerator: "CmdOrCtrl+N",
                    click: app.showDialogForNewDesign.bind(app)
                }, {
                    label: "Open",
                    accelerator: "CmdOrCtrl+O",
                    click: app.open.bind(app)
                }, {
                    label: "Open Recent",
                    enabled: recent.length > 0,
                    submenu: recent
                }, {
                    label: "Save",
                    accelerator: "CmdOrCtrl+S",
                    enabled: app.hasOpenedContexts() && app.context.canBeSaved(),
                    click: app.saveDesign.bind(app, app.context)
                }, {
                    label: "Save As",
                    accelerator: "CmdOrCtrl+Shift+S",
                    enabled: app.hasOpenedContexts() && app.context.existsOnDisk(),
                    click: app.saveDesignAs.bind(app, app.context)
                }, {
                    type: "separator"
                }, {
                    label: "Import Component",
                    click: app.open.bind(app)
                }, {
                    label: "Component Library",
                    click: app.openURLInBrowser.bind(app, "https://bootstrapstudio.io/library")
                }]
            };
            if (!isOSX) {
                fileMenu.submenu.push({
                    type: "separator"
                }, {
                    label: "Close Design",
                    accelerator: "Ctrl+W",
                    enabled: app.hasOpenedContexts(),
                    click: app.confirmCloseContext.bind(app, app.context)
                }, {
                    label: "Quit",
                    accelerator: "Ctrl+Q",
                    click: app.quit.bind(app)
                })
            }
            template.push(fileMenu);
            template.push({
                label: "Edit",
                submenu: [{
                    label: app.undoName(),
                    enabled: app.hasUndo(),
                    accelerator: "CmdOrCtrl+Z",
                    click: app.undo.bind(app)
                }, {
                    label: app.redoName(),
                    enabled: app.hasRedo(),
                    accelerator: "Shift+CmdOrCtrl+Z",
                    click: app.redo.bind(app)
                }, {
                    type: "separator",
                    visible: isOSX
                }, {
                    label: "Cut",
                    accelerator: "CmdOrCtrl+X",
                    selector: "cut:",
                    visible: isOSX
                }, {
                    label: "Copy",
                    accelerator: "CmdOrCtrl+C",
                    selector: "copy:",
                    visible: isOSX
                }, {
                    label: "Paste",
                    accelerator: "CmdOrCtrl+V",
                    selector: "paste:",
                    visible: isOSX
                }]
            });
            template.push({
                label: "View",
                submenu: [{
                    label: "Full Screen",
                    accelerator: isOSX ? "Ctrl+Command+F" : "F11",
                    click: electron.toggleFullScreen
                }, {
                    type: "separator"
                }, {
                    label: "Zoom In",
                    enabled: app.hasOpenedContexts(),
                    click: app.zoomIn.bind(app)
                }, {
                    label: "Zoom Out",
                    enabled: app.hasOpenedContexts(),
                    click: app.zoomOut.bind(app)
                }, {
                    label: "Normal Size",
                    enabled: app.hasOpenedContexts(),
                    click: app.resetZoom.bind(app)
                }]
            });
            if (app.context) {
                template.push({
                    label: "Design",
                    submenu: [{
                        label: "Change Theme",
                        click: app.changeThemeForDesign.bind(app, app.context)
                    }, {
                        label: "Manage Themes",
                        click: app.themeManagerDialog.open.bind(app.themeManagerDialog)
                    }, {
                        type: "separator"
                    }, {
                        label: "Import Image",
                        click: app.assetsPane.importImageAction.bind(app.assetsPane)
                    }, {
                        label: "Import Font",
                        click: app.assetsPane.importFontAction.bind(app.assetsPane)
                    }, {
                        type: "separator"
                    }, {
                        label: "Duplicate Design",
                        click: app.openDuplicateDesign.bind(app, app.context)
                    }, {
                        label: "Close Design",
                        click: app.confirmCloseContext.bind(app, app.context),
                        accelerator: "CmdOrCtrl+W"
                    }]
                })
            }
            if (app.context && app.context.focusedComponent) {
                var componentMenu = {
                    label: "Component",
                    submenu: []
                };
                var visibleActions = app.context.focusedComponent.getVisibleActions().filter(function(a) {
                    return a.showInApplicationMenu
                });
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;
                try {
                    for (var _iterator2 = visibleActions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var action = _step2.value;
                        componentMenu.submenu.push({
                            label: action.label,
                            click: action.action,
                            accelerator: action.accelerator
                        })
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
                            _iterator2["return"]()
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2
                        }
                    }
                }
                if (visibleActions.length) {
                    template.push(componentMenu)
                }
            }
            if (app.inDevelopment()) {
                template.push({
                    label: "Development",
                    submenu: [{
                        label: "Reload",
                        accelerator: "CmdOrCtrl+R",
                        click: function click() {
                            electron.reloadWindow()
                        }
                    }, {
                        label: "Toggle DevTools",
                        accelerator: "Alt+CmdOrCtrl+I",
                        click: function click() {
                            electron.toggleDevTools()
                        }
                    }]
                })
            }
            template.push({
                label: "Help",
                submenu: [{
                    label: "Tutorials",
                    enabled: false
                }, {
                    label: "Getting Started Guide",
                    click: app.loadTutorial.bind(app, "getting-started")
                }, {
                    label: "Writing CSS",
                    click: app.loadTutorial.bind(app, "writing-css")
                }, {
                    label: "The Bootstrap Grid",
                    click: app.loadTutorial.bind(app, "the-bootstrap-grid")
                }, {
                    label: "Custom Components",
                    click: app.loadTutorial.bind(app, "custom-components")
                }, {
                    label: "Preview And Export",
                    click: app.loadTutorial.bind(app, "preview-and-export")
                }, {
                    type: "separator"
                }, {
                    label: "Delete License Key",
                    click: app.deleteLicenseKey.bind(app),
                    visible: !isOSX
                }, {
                    label: "Purchase",
                    click: app.openURLInBrowser.bind(app, "https://bootstrapstudio.io/#purchase"),
                    visible: app.isTrial() && !isOSX
                }, {
                    type: "separator"
                }, {
                    label: "Keyboard Shortcuts",
                    click: app.openURLInBrowser.bind(app, "https://bootstrapstudio.io/pages/keyboard-shortcuts")
                }, {
                    label: "Bug Report",
                    click: app.openURLInBrowser.bind(app, "https://bootstrapstudio.io/bug-report")
                }, {
                    label: "About Bootstrap Studio",
                    click: app.showAboutDialog.bind(app),
                    visible: !isOSX
                }]
            });
            return template
        }
    }, {}],
    169: [function(require, module, exports) {
        "use strict";
        var parseDOMTree = require("../helpers/parseDOMTree");
        var stringifyParsedTree = require("../helpers/stringifyParsedTree");
        module.exports = function getHTMLForNode(node, context) {
            var parsed = parseDOMTree(node, context, {
                removeSystemElements: true
            });
            return stringifyParsedTree(parsed)
        }
    }, {
        "../helpers/parseDOMTree": 182,
        "../helpers/stringifyParsedTree": 191
    }],
    170: [function(require, module, exports) {
        "use strict";
        var _slicedToArray = function() {
            function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = undefined;
                try {
                    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                        _arr.push(_s.value);
                        if (i && _arr.length === i) break
                    }
                } catch (err) {
                    _d = true;
                    _e = err
                } finally {
                    try {
                        if (!_n && _i["return"]) _i["return"]()
                    } finally {
                        if (_d) throw _e
                    }
                }
                return _arr
            }
            return function(arr, i) {
                if (Array.isArray(arr)) {
                    return arr
                } else if (Symbol.iterator in Object(arr)) {
                    return sliceIterator(arr, i)
                } else {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance")
                }
            }
        }();
        module.exports = function getSmartProp(property, def) {
            if (property == undefined) return def;
            if (typeof property == "function") {
                return property()
            }
            if (Array.isArray(property)) {
                var _property = _slicedToArray(property, 3);
                var obj = _property[0];
                var prop = _property[1];
                var def = _property[2];
                if (prop in obj) return obj[prop];
                return def
            }
            return property
        }
    }, {}],
    171: [function(require, module, exports) {
        "use strict";
        var InlineCharacter = require("../components/InlineCharacter");
        module.exports = function htmlToInline(html, styles) {
            var blacklist = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
            var parser = new DOMParser;
            var doc = parser.parseFromString(html, "text/html");
            var result = [];
            if (styles) {
                parse(doc.body, styles.link, styles.bold, styles.italic, styles.strike, styles.underline)
            } else {
                parse(doc.body)
            }
            for (var j = 0; j < blacklist.length; j++) {
                for (var i = 0; i < result.length; i++) {
                    result[i][blacklist[j]] = false
                }
            }
            return result;

            function parse(node) {
                var link = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
                var bold = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
                var italic = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
                var strike = arguments.length <= 4 || arguments[4] === undefined ? false : arguments[4];
                var underline = arguments.length <= 5 || arguments[5] === undefined ? false : arguments[5];
                for (var i = 0; i < node.childNodes.length; i++) {
                    var child = node.childNodes[i];
                    var tmpStrike = strike,
                        tmpUnderline = underline,
                        tmpBold = bold,
                        tmpItalic = italic,
                        tmpLink = link;
                    if (child.nodeName == "A" && child.href.trim().length > 0) {
                        tmpLink = {
                            href: child.href.trim(),
                            target: child.target || ""
                        }
                    }
                    if (child.nodeName == "B" || child.nodeName == "STRONG") {
                        tmpBold = true
                    }
                    if (child.nodeName == "I" || child.nodeName == "EM") {
                        tmpItalic = true
                    }
                    if (child.nodeName == "DEL" || child.nodeName == "STRIKE") {
                        tmpStrike = true
                    }
                    if (child.nodeName == "U") {
                        tmpUnderline = true
                    }
                    if (child.style) {
                        if (child.style.fontWeight == "bold" || child.style.fontWeight == "700") {
                            tmpBold = true
                        } else if (child.style.fontWeight == "normal" || child.style.fontWeight == "400") {
                            tmpBold = false
                        }
                        if (child.style.fontStyle == "italic") {
                            tmpItalic = true
                        } else if (child.style.fontStyle == "normal") {
                            tmpBold = false
                        }
                        if (child.style.textDecoration == "line-through") {
                            tmpStrike = true
                        }
                        if (child.style.textDecoration == "underline") {
                            tmpUnderline = true
                        }
                        if (child.style.textDecoration == "none") {
                            tmpStrike = false;
                            tmpUnderline = false
                        }
                    }
                    if (child.nodeName == "#text") {
                        var chars = child.textContent.replace(/\s+/, " ").split(""),
                            tmp = null;
                        for (var j = 0; j < chars.length; j++) {
                            tmp = new InlineCharacter(chars[j]);
                            tmp.bold = tmpBold;
                            tmp.italic = tmpItalic;
                            tmp.strike = tmpStrike;
                            tmp.underline = tmpUnderline;
                            tmp.link = tmpLink;
                            result.push(tmp)
                        }
                    } else if (child.nodeType == Node.ELEMENT_NODE) {
                        parse(child, tmpLink, tmpBold, tmpItalic, tmpStrike, tmpUnderline)
                    }
                }
            }
        }
    }, {
        "../components/InlineCharacter": 62
    }],
    172: [function(require, module, exports) {
        "use strict";
        module.exports = function htmlToText(html) {
            var tmp = document.createElement("div");
            tmp.innerHTML = html;
            return tmp.textContent
        }
    }, {}],
    173: [function(require, module, exports) {
        "use strict";
        module.exports = function inlineCompare(left, right) {
            if (left.length != right.length) {
                return false
            }
            for (var i = 0; i < left.length; i++) {
                if (!left[i].sameAs(right[i])) {
                    return false
                }
            }
            return true
        }
    }, {}],
    174: [function(require, module, exports) {
        "use strict";
        var equal = require("deep-equal");
        module.exports = function inlineToDOM(inlineElements, clone) {
            var LINK = 0,
                BOLD = 1,
                ITALIC = 2,
                UNDERLINE = 3,
                STRIKE = 4;
            var flags = [false, false, false, false, false];
            var propertyNames = ["link", "bold", "italic", "underline", "strike"];
            var top = document.createDocumentFragment();
            var context = top,
                child;
            for (var i = 0; i < inlineElements.length; i++) {
                child = inlineElements[i];
                for (var j = 0; j < flags.length; j++) {
                    if (!equal(child[propertyNames[j]], flags[j])) {
                        if (flags[j]) {
                            var z = flags.length;
                            while (z--) {
                                if (z < j) break;
                                if (flags[z]) {
                                    context = context.parentNode;
                                    flags[z] = false
                                }
                            }
                        }
                        if (child[propertyNames[j]]) {
                            flags[j] = child[propertyNames[j]];
                            var z = flags.length;
                            while (z--) {
                                if (z == j) break;
                                if (flags[z]) {
                                    context = context.parentNode;
                                    flags[z] = false
                                }
                            }
                            var tmp;
                            switch (j) {
                                case LINK:
                                    tmp = document.createElement("a");
                                    tmp.href = child.link.href;
                                    if (child.link.target) {
                                        tmp.target = child.link.target
                                    }
                                    break;
                                case BOLD:
                                    tmp = document.createElement("strong");
                                    break;
                                case ITALIC:
                                    tmp = document.createElement("em");
                                    break;
                                case UNDERLINE:
                                    tmp = document.createElement("span");
                                    tmp.style.textDecoration = "underline";
                                    break;
                                case STRIKE:
                                    tmp = document.createElement("span");
                                    tmp.style.textDecoration = "line-through";
                                    break
                            }
                            context.appendChild(tmp);
                            context = tmp
                        }
                    }
                }
                if (clone) {
                    context.appendChild(child.element[0].cloneNode(true))
                } else {
                    context.appendChild(child.element[0])
                }
            }
            return top
        }
    }, {
        "deep-equal": 409
    }],
    175: [function(require, module, exports) {
        "use strict";
        var inlineToDOM = require("./inlineToDOM");
        module.exports = function inlineToHTML(inlineElements) {
            var tree = inlineToDOM(inlineElements, true);
            walk(tree);
            var cleanup = tree.querySelectorAll("inline-character, inline-wrapper, [bs-system-element]");
            for (var i = 0, len = cleanup.length; i < len; i++) {
                cleanup[i].parentNode.removeChild(cleanup[i])
            }
            var tmp = document.createElement("div");
            tmp.appendChild(tree);
            return tmp.innerHTML
        };

        function walk(elem) {
            for (var i = 0; i < elem.childNodes.length; i++) {
                var child = elem.childNodes[i];
                if (child.nodeName == "INLINE-CHARACTER" || child.nodeName == "INLINE-WRAPPER") {
                    for (var j = 0; j < child.childNodes.length; j++) {
                        elem.insertBefore(child.childNodes[j], child)
                    }
                } else {
                    walk(child)
                }
            }
        }
    }, {
        "./inlineToDOM": 174
    }],
    176: [function(require, module, exports) {
        "use strict";
        module.exports = function keyChecker(linWinCondition, OSXCondition) {
            if (window.electron && electron.os == "osx" && OSXCondition !== undefined) {
                return OSXCondition
            }
            return linWinCondition
        }
    }, {}],
    177: [function(require, module, exports) {
        "use strict";
        exports.construct = function construct(component, group, visible) {
            if (group === undefined) group = "";
            var Anchor = require("../components/Anchor");
            component.defineProperties([{
                id: "url",
                label: "URL",
                type: "textbox",
                group: group,
                visible: visible,
                value: ""
            }, {
                id: "target",
                label: "Target",
                type: "select",
                value: "",
                visible: visible,
                group: group,
                options: Anchor.possibleTargets
            }])
        };
        exports.update = function update(component) {
            delete component.attributes.href;
            delete component.attributes.target;
            if (component.properties.url) {
                component.attributes.href = component.properties.url
            }
            if (component.properties.target) {
                component.attributes.target = component.properties.target
            }
        };
        exports.updateDOMNode = function updateDOMNode(component, node) {
            if (!component.properties.url) {
                node.removeAttribute("href")
            } else {
                node.setAttribute("href", component.properties.url)
            }
            if (!component.properties.target) {
                node.removeAttribute("taget")
            } else {
                node.setAttribute("target", component.properties.target)
            }
        }
    }, {
        "../components/Anchor": 20
    }],
    178: [function(require, module, exports) {
        "use strict";
        var multiSpaceRegex = /\s+/g;
        var cssSelectorOperator = /([>+~])/g;
        var commaRegex = /\s*,/g;
        var invalidSymbols = /[\{\}]+/g;
        var noClosingBrace = /\([^\)]+$/;
        module.exports = function normalizeCSSSelector(selector) {
            var selector = selector.replace(cssSelectorOperator, " $1 ").replace(commaRegex, ", ").replace(multiSpaceRegex, " ").replace(invalidSymbols, "").trim();
            if (noClosingBrace.test(selector)) {
                selector += ")"
            }
            return selector
        }
    }, {}],
    179: [function(require, module, exports) {
        "use strict";
        var Package = require("../base/Package");
        module.exports = function parseBSComponentFormat(contents) {
            var pkg = new Package;
            pkg.unserialize(JSON.parse(contents)["package"]);
            return pkg
        }
    }, {
        "../base/Package": 16
    }],
    180: [function(require, module, exports) {
        "use strict";
        var Context = require("../base/Context");
        var converters = {
            1: require("../converters/design_1to2.js")
        };
        module.exports = function parseBSDesignFormat(json) {
            var path = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
            var ctx = new Context;
            while (true) {
                if (converters.hasOwnProperty(json.version)) {
                    json = converters[json.version](json);
                    continue
                }
                break
            }
            ctx.unserialize(json.design);
            if (path) {
                ctx.markAsSaved(path)
            }
            return ctx
        }
    }, {
        "../base/Context": 12,
        "../converters/design_1to2.js": 136
    }],
    181: [function(require, module, exports) {
        "use strict";
        var css = require("css");
        var restoreCSSList = require("./restoreCSSList");
        module.exports = function parseCSS(str, blockProps, ruleProps) {
            var result = [];
            walk(result, css.parse(str).stylesheet.rules);
            return restoreCSSList(result, blockProps, ruleProps)
        };

        function walk(result, arr, block) {
            var mediaQuery = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
            for (var i = 0; i < arr.length; i++) {
                switch (arr[i].type) {
                    case "media":
                        if (/print/.test(arr[i].media)) {
                            continue
                        }
                        walk(result, arr[i].rules, null, arr[i].media);
                        break;
                    case "rule":
                        var tmpBlock = {
                            selector: arr[i].selectors.join(", "),
                            mediaQuery: mediaQuery,
                            rules: []
                        };
                        result.push(tmpBlock);
                        walk(result, arr[i].declarations, tmpBlock, mediaQuery);
                        break;
                    case "declaration":
                        block.rules.push({
                            property: arr[i].property,
                            value: arr[i].value,
                            enabled: true,
                            system: false
                        });
                        break
                }
            }
        }
    }, {
        "./restoreCSSList": 186,
        css: 386
    }],
    182: [function(require, module, exports) {
        "use strict";
        var selfClosingElements = new Set(["AREA", "BASE", "BASEFONT", "BR", "COL", "HR", "IMG", "INPUT", "LINK", "META", "PARAM"]);
        module.exports = function parseDOMTree(node, context, options) {
            return walk(node, context, options)
        };

        function walk(node, context) {
            var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
            var attr = node.attributes;
            if (attr["bs-system-element"] && options.removeSystemElements) {
                return null
            }
            if (attr["bs-hidden"]) {
                return null
            }
            var component = context.domToComponent.get(node);
            var item = {
                tag: node.nodeName.toLowerCase(),
                element: node,
                attributes: [],
                selfclosing: selfClosingElements.has(node.nodeName),
                children: []
            };
            for (var i = 0; i < attr.length; i++) {
                if (attr[i].name == "bs-system-element" && options.unmarkSystemElements) {
                    continue
                }
                var tmp = {
                    name: attr[i].name,
                    value: null
                };
                if (attr[i].value) {
                    if (component && attr[i].name in component.attributesMask) {
                        if (component.attributesMask[attr[i].name] === null) {
                            continue
                        }
                        tmp.value = component.attributesMask[attr[i].name]
                    } else {
                        tmp.value = attr[i].value
                    }
                }
                item.attributes.push(tmp)
            }
            if (node.children && node.children.length) {
                var tmpString = "";
                for (var i = 0; i < node.children.length; i++) {
                    if (node.children[i].nodeName == "INLINE-CHARACTER") {
                        tmpString += node.children[i].textContent;
                        continue
                    }
                    if (tmpString) {
                        item.children.push(tmpString);
                        tmpString = ""
                    }
                    var result;
                    if (node.children[i].nodeName == "INLINE-WRAPPER") {
                        result = walk(node.children[i].firstChild, context, options)
                    } else {
                        result = walk(node.children[i], context, options)
                    }
                    if (result) item.children.push(result)
                }
                if (tmpString) {
                    item.children.push(tmpString)
                }
            } else if (node.textContent) {
                item.children.push(node.textContent)
            }
            return item
        }
    }, {}],
    183: [function(require, module, exports) {
        "use strict";
        module.exports = function parsePath(str, platform) {
            platform = platform || electron && electron.os || "linux";
            var separator = "/";
            if (platform == "windows") {
                separator = "\\"
            }
            var tmp = String(str).split(separator);
            var extname = "",
                dirname = "",
                basename = "",
                name = "";
            if (tmp.length == 1) {
                basename = name = tmp[0]
            } else {
                basename = tmp.slice(-1)[0];
                dirname = tmp.slice(0, -1).join(separator)
            }
            var ext = basename.split(".");
            if (ext.length == 1) {
                name = ext[0]
            } else {
                extname = "." + ext.slice(-1)[0];
                name = ext.slice(0, -1).join(".")
            }
            return {
                extname: extname,
                dirname: dirname,
                basename: basename,
                name: name
            }
        }
    }, {}],
    184: [function(require, module, exports) {
        "use strict";
        module.exports = function prettyDOMNodeName(element) {
            var name = element.nodeName.toLowerCase();
            if (element.id) {
                name += "#" + element.id
            }
            if (element.className.trim().length) {
                name += "." + element.className.trim().replace(/\s+/g, ".")
            }
            return name
        }
    }, {}],
    185: [function(require, module, exports) {
        "use strict";
        module.exports = function readFileAsBase64(path) {
            return new Promise(function(resolve, reject) {
                var request = new XMLHttpRequest;
                request.open("GET", path, true);
                request.responseType = "arraybuffer";
                request.onload = function(oEvent) {
                    if (request.status != 200) return reject();
                    var arrayBuffer = request.response;
                    if (arrayBuffer) {
                        var binary = "";
                        var bytes = new Uint8Array(arrayBuffer);
                        for (var i = 0, len = bytes.byteLength; i < len; i++) {
                            binary += String.fromCharCode(bytes[i])
                        }
                        return resolve({
                            content: window.btoa(binary),
                            decode: "base64",
                            contentType: request.getResponseHeader("content-type")
                        })
                    } else reject()
                };
                request.send(null)
            })
        }
    }, {}],
    186: [function(require, module, exports) {
        "use strict";
        var CSSBlock = require("../base/CSSBlock");
        module.exports = function restoreCSSList(list) {
            var blockProps = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            var ruleProps = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
            return list.map(function(b) {
                var tmp = new CSSBlock;
                tmp.unserialize(b);
                for (var i = 0; i < tmp.rules.length; i++) {
                    for (var k in ruleProps)
                        if (ruleProps.hasOwnProperty(k)) {
                            tmp.rules[i][k] = ruleProps[k]
                        }
                }
                for (var k in blockProps)
                    if (blockProps.hasOwnProperty(k)) {
                        tmp[k] = blockProps[k]
                    }
                return tmp
            })
        }
    }, {
        "../base/CSSBlock": 9
    }],
    187: [function(require, module, exports) {
        "use strict";
        var components = require("../components/").all;
        module.exports = function restoreComponentTree(tree) {
            return walkComponentTree(tree, null)
        };

        function walkComponentTree(component, parent) {
            var instance = new components[component["class"]];
            instance.unserialize(component);
            if (parent) {
                parent.insertLast(instance)
            }
            if (Array.isArray(component.children)) {
                for (var i = 0; i < component.children.length; i++) {
                    walkComponentTree(component.children[i], instance)
                }
            }
            return instance
        }
    }, {
        "../components/": 130
    }],
    188: [function(require, module, exports) {
        "use strict";
        var _slicedToArray = function() {
            function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = undefined;
                try {
                    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                        _arr.push(_s.value);
                        if (i && _arr.length === i) break
                    }
                } catch (err) {
                    _d = true;
                    _e = err
                } finally {
                    try {
                        if (!_n && _i["return"]) _i["return"]()
                    } finally {
                        if (_d) throw _e
                    }
                }
                return _arr
            }
            return function(arr, i) {
                if (Array.isArray(arr)) {
                    return arr
                } else if (Symbol.iterator in Object(arr)) {
                    return sliceIterator(arr, i)
                } else {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance")
                }
            }
        }();
        module.exports = function setSmartProp(property, val) {
            if (typeof property == "function") {
                return property(val)
            }
            if (Array.isArray(property)) {
                var _property = _slicedToArray(property, 3);
                var obj = _property[0];
                var prop = _property[1];
                var def = _property[2];
                if (typeof val == "undefined") val = def;
                obj[prop] = val
            }
        }
    }, {}],
    189: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        module.exports = function smartEditableElement(options) {
            return new SmartEditable(options)
        };
        var SmartEditable = function() {
            function SmartEditable(options) {
                _classCallCheck(this, SmartEditable);
                this.options = options;
                if (options.doubleClickEditing) {
                    options.element.on("dblclick", ".name", this.editIt.bind(this))
                }
                options.element.on("click", ".edit", this.editIt.bind(this));
                options.element.on("click", ".delete", this.deleteIt.bind(this));
                options.element.on("mousedown", ".save", this.commitIt.bind(this));
                options.element.on("focusout", "input", this.cancelIt.bind(this));
                options.element.on("keydown", "input", this.keydown.bind(this))
            }
            _createClass(SmartEditable, [{
                key: "cancelIt",
                value: function cancelIt() {
                    this.options.element.find(".editing").removeClass("editing")
                }
            }, {
                key: "editIt",
                value: function editIt(e) {
                    var target = $(e.target).closest(".smart-editable");
                    this.startEditing(target)
                }
            }, {
                key: "startEditing",
                value: function startEditing(item) {
                    var input = item.find("input");
                    item.addClass("editing");
                    input.val(item.find(".name").text()).focus()
                }
            }, {
                key: "keydown",
                value: function keydown(e) {
                    if (e.which == 27) {
                        this.cancelIt()
                    } else if (e.which == 13) {
                        this.commitIt()
                    }
                }
            }, {
                key: "commitIt",
                value: function commitIt(e) {
                    if (e) {
                        e.preventDefault();
                        e.stopPropagation()
                    }
                    var item = this.options.element.find(".editing");
                    var result = this.options.onCommit(item, item.find("input").val());
                    if (result === false) {
                        return
                    }
                    this.cancelIt()
                }
            }, {
                key: "deleteIt",
                value: function deleteIt(e) {
                    var target = $(e.target);
                    var item = target.closest(".smart-editable");
                    this["delete"](item)
                }
            }, {
                key: "delete",
                value: function _delete(item) {
                    this.options.onDelete(item)
                }
            }]);
            return SmartEditable
        }()
    }, {}],
    190: [function(require, module, exports) {
        "use strict";
        var _slicedToArray = function() {
            function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = undefined;
                try {
                    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                        _arr.push(_s.value);
                        if (i && _arr.length === i) break
                    }
                } catch (err) {
                    _d = true;
                    _e = err
                } finally {
                    try {
                        if (!_n && _i["return"]) _i["return"]()
                    } finally {
                        if (_d) throw _e
                    }
                }
                return _arr
            }
            return function(arr, i) {
                if (Array.isArray(arr)) {
                    return arr
                } else if (Symbol.iterator in Object(arr)) {
                    return sliceIterator(arr, i)
                } else {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance")
                }
            }
        }();
        module.exports = function specificityToNumber(specificity) {
            var _specificity$split = specificity.split(",");
            var _specificity$split2 = _slicedToArray(_specificity$split, 4);
            var inline = _specificity$split2[0];
            var ids = _specificity$split2[1];
            var classes = _specificity$split2[2];
            var elements = _specificity$split2[3];
            return elements * 1 + classes * 1e3 + ids * 1e6 + inline * 1e9
        }
    }, {}],
    191: [function(require, module, exports) {
        "use strict";
        var escapeHTML = require("escape-html");
        var beautifyHTML = require("js-beautify").html;
        var escapeInlineStyleContent = require("./escapeInlineStyleContent");
        module.exports = function stringifyParsedTree(tree) {
            var beautify = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
            if (beautify) {
                return beautifyHTML(walk(tree))
            }
            return walk(tree)
        };

        function walk(item) {
            if (!item) return "";
            var str = "<" + item.tag;
            for (var i = 0; i < item.attributes.length; i++) {
                str += " " + escapeHTML(item.attributes[i].name);
                if (item.attributes[i].value) {
                    str += '="' + escapeHTML(item.attributes[i].value) + '"'
                }
            }
            if (item.selfclosing) {
                str += " />";
                return str
            }
            str += ">";
            if (item.tag == "style") {
                if (item.children.length == 1) {
                    str += escapeInlineStyleContent(item.children[0])
                }
            } else {
                for (var i = 0; i < item.children.length; i++) {
                    if (typeof item.children[i] == "string") {
                        str += escapeHTML(item.children[i]);
                        continue
                    }
                    str += walk(item.children[i])
                }
            }
            str += "</" + item.tag + ">";
            return str
        }
    }, {
        "./escapeInlineStyleContent": 163,
        "escape-html": 412,
        "js-beautify": 417
    }],
    192: [function(require, module, exports) {
        "use strict";
        exports.construct = function construct(component) {
            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            options = Object.assign({
                includeColor: true,
                includeAlignment: true,
                includeNowrap: true,
                includeTextTransformations: true
            }, options);
            component.defineGroups({
                id: "text-options",
                label: "Text Options"
            });
            if (options.includeAlignment) {
                component.defineProperties([{
                    id: "text-alignment",
                    label: "Alignment",
                    type: "select",
                    value: "",
                    options: possibleAlignments,
                    group: "text-options"
                }])
            }
            if (options.includeNowrap) {
                component.defineProperties([{
                    id: "text-nowrap",
                    label: "No Wrap",
                    type: "checkbox",
                    value: false,
                    group: "text-options"
                }])
            }
            if (options.includeTextTransformations) {
                component.defineProperties([{
                    id: "text-transformation",
                    label: "Transformations",
                    type: "select",
                    value: "",
                    options: possibleTransformations,
                    group: "text-options"
                }])
            }
            if (options.includeColor) {
                component.defineProperties([{
                    id: "contextual-color",
                    label: "Color",
                    type: "select",
                    value: "",
                    options: possibleContextualColors,
                    group: "text-options"
                }, {
                    id: "contextual-background",
                    label: "Background",
                    type: "select",
                    value: "",
                    options: possibleContextualBackgrounds,
                    group: "text-options"
                }])
            }
        };
        exports.update = function update(component) {
            delete component.cssClasses.system.nowrap;
            delete component.cssClasses.system.textTransformation;
            delete component.cssClasses.system.textAlignment;
            delete component.cssClasses.system.contextualColor;
            delete component.cssClasses.system.contextualBackground;
            if (component.properties["text-nowrap"]) {
                component.cssClasses.system.nowrap = "text-nowrap"
            }
            if (component.properties["text-transformation"]) {
                component.cssClasses.system.textTransformation = component.properties["text-transformation"]
            }
            if (component.properties["text-alignment"]) {
                component.cssClasses.system.textAlignment = component.properties["text-alignment"]
            }
            if (component.properties["contextual-color"]) {
                component.cssClasses.system.contextualColor = component.properties["contextual-color"]
            }
            if (component.properties["contextual-background"]) {
                component.cssClasses.system.contextualBackground = component.properties["contextual-background"]
            }
        };
        var possibleAlignments = [{
            label: "Default",
            value: ""
        }, {
            label: "Left",
            value: "text-left"
        }, {
            label: "Center",
            value: "text-center"
        }, {
            label: "Right",
            value: "text-right"
        }, {
            label: "Justify",
            value: "text-justify"
        }];
        var possibleTransformations = [{
            label: "None",
            value: ""
        }, {
            label: "Lowercase",
            value: "text-lowercase"
        }, {
            label: "Uppercase",
            value: "text-uppercase"
        }];
        var possibleTextProperties = [{
            label: "Default",
            value: ""
        }, {
            label: "Muted",
            value: "text-muted"
        }, {
            label: "Primary",
            value: "text-primary"
        }, {
            label: "Success",
            value: "text-success"
        }, {
            label: "Info",
            value: "text-info"
        }, {
            label: "Warning",
            value: "text-warning"
        }, {
            label: "Danger",
            value: "text-danger"
        }];
        var possibleContextualColors = [{
            label: "Default",
            value: ""
        }, {
            label: "Muted",
            value: "text-muted"
        }, {
            label: "Primary",
            value: "text-primary"
        }, {
            label: "Success",
            value: "text-success"
        }, {
            label: "Info",
            value: "text-info"
        }, {
            label: "Warning",
            value: "text-warning"
        }, {
            label: "Danger",
            value: "text-danger"
        }];
        var possibleContextualBackgrounds = [{
            label: "Default",
            value: ""
        }, {
            label: "Primary",
            value: "bg-primary"
        }, {
            label: "Success",
            value: "bg-success"
        }, {
            label: "Info",
            value: "bg-info"
        }, {
            label: "Warning",
            value: "bg-warning"
        }, {
            label: "Danger",
            value: "bg-danger"
        }]
    }, {}],
    193: [function(require, module, exports) {
        "use strict";
        module.exports = function wrapInAutomaticElement(generatedElement, insertSubElement) {
            if (!insertSubElement) {
                insertSubElement = generatedElement
            }
            var dropCall = app.dropCall;
            var args = dropCall.arguments,
                obj = dropCall.object,
                method = dropCall.method;
            args[0] = generatedElement;
            obj[method].apply(obj, args);
            app.context.history.add({
                name: "Create Automatic " + generatedElement.getName(),
                undo: function undo() {
                    generatedElement.remove();
                    obj.update()
                },
                redo: function redo() {
                    obj[method].apply(obj, args);
                    obj.update()
                }
            });
            app.dropCall.object = insertSubElement;
            app.dropCall.method = "insertFirst";
            app.dropCall.arguments = [app.draggedComponent]
        }
    }, {}],
    194: [function(require, module, exports) {
        (function(global) {
            "use strict";
            require("babelify/polyfill");
            var Application = require("./base/Application.js");
            var $ = global.$ = require("./assets/js/jquery.js");
            var app = global.app = new Application;
            var doc = global.doc = $(document);
            var win = global.win = $(window);
            var bod = global.bod = $(document.body);
            var html = global.html = doc.find("html");
            $(function() {
                app.setup(doc, $);
                win.resize();
                var panesWereResized = false;
                $(".handle.vertical").on("mousedown", function(e) {
                    e.preventDefault();
                    var target = $(this).parent();
                    if (e.target.dataset.target) {
                        target = $(e.target.dataset.target)
                    }
                    var initialSize = target.outerWidth();
                    var startX = app.mousePosition.x;
                    var reverse = !!e.target.dataset.reverse;
                    bod.addClass("resizing-x");
                    app.on("mousemove.panel-resize", function() {
                        if (reverse) {
                            target.width(initialSize + (startX - app.mousePosition.x))
                        } else {
                            target.width(initialSize + (app.mousePosition.x - startX))
                        }
                        panesWereResized = true
                    })
                });
                $(".handle.horizontal").on("mousedown", function(e) {
                    e.preventDefault();
                    var handle = $(this);
                    var resizedPane = handle.closest(".panel").find(".pane").first();
                    var reverse = !!e.target.dataset.reverse;
                    var initialSize = resizedPane.outerHeight();
                    var startY = app.mousePosition.y;
                    var maxHeight = (win.height() - 50) * .9;
                    var minHeight = handle.data("min") || 100;
                    var canToggleClass = !!handle.data("toggle-class");
                    var toggleClass = null;
                    var toggleEnable = null;
                    var toggleDisable = null;
                    var toggleStatus = false;
                    if (canToggleClass) {
                        toggleClass = handle.data("toggle-class");
                        toggleEnable = handle.data("toggle-enable");
                        toggleDisable = handle.data("toggle-disable")
                    }
                    var newHeight = 0;
                    var stopDrag = false;
                    var oldHeight = resizedPane.height();
                    bod.addClass("resizing-y");
                    app.on("mousemove.panel-resize", function() {
                        if (reverse) {
                            newHeight = initialSize + (startY - app.mousePosition.y)
                        } else {
                            newHeight = initialSize + (app.mousePosition.y - startY)
                        }
                        if (newHeight > maxHeight || newHeight < minHeight) {
                            return
                        }
                        var direction = newHeight - oldHeight;
                        if (canToggleClass) {
                            toggleStatus = resizedPane.hasClass(toggleClass);
                            if (direction < 0 && toggleStatus && newHeight < toggleDisable) {
                                resizedPane.removeClass(toggleClass);
                                newHeight = minHeight;
                                resizedPane.height(newHeight);
                                stopDrag = true
                            }
                            if (direction > 0 && !toggleStatus && newHeight > toggleEnable) {
                                resizedPane.addClass(toggleClass)
                            }
                        }
                        resizedPane.height(newHeight);
                        oldHeight = newHeight;
                        panesWereResized = true;
                        if (stopDrag) {
                            stopDragging()
                        }
                    })
                });
                app.on("mouseup", stopDragging);

                function stopDragging() {
                    bod.removeClass("resizing-x resizing-y");
                    app.off("mousemove.panel-resize");
                    if (panesWereResized) {
                        panesWereResized = false;
                        app.trigger("pane-resize")
                    }
                }
                app.on("resize", function() {
                    var panes = $(".handle.horizontal").closest(".panel").find(".pane:first");
                    panes.each(function() {
                        var pane = $(this);
                        var min = pane.parent().find(".handle").data("min") || 100;
                        var max = (win.height() - 50) * .9;
                        if (pane.height() < min) {
                            pane.height(min)
                        }
                        if (pane.height() > max) {
                            pane.height(max)
                        }
                    })
                });
                app.showStartScreen()
            })
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {
        "./assets/js/jquery.js": 1,
        "./base/Application.js": 7,
        "babelify/polyfill": 377
    }],
    195: [function(require, module, exports) {
        (function(global) {
            "use strict";
            require("core-js/shim");
            require("regenerator/runtime");
            if (global._babelPolyfill) {
                throw new Error("only one instance of babel/polyfill is allowed")
            }
            global._babelPolyfill = true
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {
        "core-js/shim": 374,
        "regenerator/runtime": 375
    }],
    196: [function(require, module, exports) {
        module.exports = function(it) {
            if (typeof it != "function") throw TypeError(it + " is not a function!");
            return it
        }
    }, {}],
    197: [function(require, module, exports) {
        var isObject = require("./$.is-object");
        module.exports = function(it) {
            if (!isObject(it)) throw TypeError(it + " is not an object!");
            return it
        }
    }, {
        "./$.is-object": 227
    }],
    198: [function(require, module, exports) {
        var toIObject = require("./$.to-iobject"),
            toLength = require("./$.to-length"),
            toIndex = require("./$.to-index");
        module.exports = function(IS_INCLUDES) {
            return function($this, el, fromIndex) {
                var O = toIObject($this),
                    length = toLength(O.length),
                    index = toIndex(fromIndex, length),
                    value;
                if (IS_INCLUDES && el != el)
                    while (length > index) {
                        value = O[index++];
                        if (value != value) return true
                    } else
                        for (; length > index; index++)
                            if (IS_INCLUDES || index in O) {
                                if (O[index] === el) return IS_INCLUDES || index
                            }
                return !IS_INCLUDES && -1
            }
        }
    }, {
        "./$.to-index": 262,
        "./$.to-iobject": 264,
        "./$.to-length": 265
    }],
    199: [function(require, module, exports) {
        var ctx = require("./$.ctx"),
            IObject = require("./$.iobject"),
            toObject = require("./$.to-object"),
            toLength = require("./$.to-length");
        module.exports = function(TYPE) {
            var IS_MAP = TYPE == 1,
                IS_FILTER = TYPE == 2,
                IS_SOME = TYPE == 3,
                IS_EVERY = TYPE == 4,
                IS_FIND_INDEX = TYPE == 6,
                NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
            return function($this, callbackfn, that) {
                var O = toObject($this),
                    self = IObject(O),
                    f = ctx(callbackfn, that, 3),
                    length = toLength(self.length),
                    index = 0,
                    result = IS_MAP ? Array(length) : IS_FILTER ? [] : undefined,
                    val, res;
                for (; length > index; index++)
                    if (NO_HOLES || index in self) {
                        val = self[index];
                        res = f(val, index, O);
                        if (TYPE) {
                            if (IS_MAP) result[index] = res;
                            else if (res) switch (TYPE) {
                                case 3:
                                    return true;
                                case 5:
                                    return val;
                                case 6:
                                    return index;
                                case 2:
                                    result.push(val)
                            } else if (IS_EVERY) return false
                        }
                    }
                return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result
            }
        }
    }, {
        "./$.ctx": 208,
        "./$.iobject": 224,
        "./$.to-length": 265,
        "./$.to-object": 266
    }],
    200: [function(require, module, exports) {
        var toObject = require("./$.to-object"),
            IObject = require("./$.iobject"),
            enumKeys = require("./$.enum-keys");
        module.exports = require("./$.fails")(function() {
            return Symbol() in Object.assign({})
        }) ? function assign(target, source) {
            var T = toObject(target),
                l = arguments.length,
                i = 1;
            while (l > i) {
                var S = IObject(arguments[i++]),
                    keys = enumKeys(S),
                    length = keys.length,
                    j = 0,
                    key;
                while (length > j) T[key = keys[j++]] = S[key]
            }
            return T
        } : Object.assign
    }, {
        "./$.enum-keys": 212,
        "./$.fails": 214,
        "./$.iobject": 224,
        "./$.to-object": 266
    }],
    201: [function(require, module, exports) {
        var cof = require("./$.cof"),
            TAG = require("./$.wks")("toStringTag"),
            ARG = cof(function() {
                return arguments
            }()) == "Arguments";
        module.exports = function(it) {
            var O, T, B;
            return it === undefined ? "Undefined" : it === null ? "Null" : typeof(T = (O = Object(it))[TAG]) == "string" ? T : ARG ? cof(O) : (B = cof(O)) == "Object" && typeof O.callee == "function" ? "Arguments" : B
        }
    }, {
        "./$.cof": 202,
        "./$.wks": 269
    }],
    202: [function(require, module, exports) {
        var toString = {}.toString;
        module.exports = function(it) {
            return toString.call(it).slice(8, -1)
        }
    }, {}],
    203: [function(require, module, exports) {
        "use strict";
        var $ = require("./$"),
            hide = require("./$.hide"),
            ctx = require("./$.ctx"),
            species = require("./$.species"),
            strictNew = require("./$.strict-new"),
            defined = require("./$.defined"),
            forOf = require("./$.for-of"),
            step = require("./$.iter-step"),
            ID = require("./$.uid")("id"),
            $has = require("./$.has"),
            isObject = require("./$.is-object"),
            isExtensible = Object.isExtensible || isObject,
            SUPPORT_DESC = require("./$.support-desc"),
            SIZE = SUPPORT_DESC ? "_s" : "size",
            id = 0;
        var fastKey = function(it, create) {
            if (!isObject(it)) return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
            if (!$has(it, ID)) {
                if (!isExtensible(it)) return "F";
                if (!create) return "E";
                hide(it, ID, ++id)
            }
            return "O" + it[ID]
        };
        var getEntry = function(that, key) {
            var index = fastKey(key),
                entry;
            if (index !== "F") return that._i[index];
            for (entry = that._f; entry; entry = entry.n) {
                if (entry.k == key) return entry
            }
        };
        module.exports = {
            getConstructor: function(wrapper, NAME, IS_MAP, ADDER) {
                var C = wrapper(function(that, iterable) {
                    strictNew(that, C, NAME);
                    that._i = $.create(null);
                    that._f = undefined;
                    that._l = undefined;
                    that[SIZE] = 0;
                    if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that)
                });
                require("./$.mix")(C.prototype, {
                    clear: function clear() {
                        for (var that = this, data = that._i, entry = that._f; entry; entry = entry.n) {
                            entry.r = true;
                            if (entry.p) entry.p = entry.p.n = undefined;
                            delete data[entry.i]
                        }
                        that._f = that._l = undefined;
                        that[SIZE] = 0
                    },
                    "delete": function(key) {
                        var that = this,
                            entry = getEntry(that, key);
                        if (entry) {
                            var next = entry.n,
                                prev = entry.p;
                            delete that._i[entry.i];
                            entry.r = true;
                            if (prev) prev.n = next;
                            if (next) next.p = prev;
                            if (that._f == entry) that._f = next;
                            if (that._l == entry) that._l = prev;
                            that[SIZE]--
                        }
                        return !!entry
                    },
                    forEach: function forEach(callbackfn) {
                        var f = ctx(callbackfn, arguments[1], 3),
                            entry;
                        while (entry = entry ? entry.n : this._f) {
                            f(entry.v, entry.k, this);
                            while (entry && entry.r) entry = entry.p
                        }
                    },
                    has: function has(key) {
                        return !!getEntry(this, key)
                    }
                });
                if (SUPPORT_DESC) $.setDesc(C.prototype, "size", {
                    get: function() {
                        return defined(this[SIZE])
                    }
                });
                return C
            },
            def: function(that, key, value) {
                var entry = getEntry(that, key),
                    prev, index;
                if (entry) {
                    entry.v = value
                } else {
                    that._l = entry = {
                        i: index = fastKey(key, true),
                        k: key,
                        v: value,
                        p: prev = that._l,
                        n: undefined,
                        r: false
                    };
                    if (!that._f) that._f = entry;
                    if (prev) prev.n = entry;
                    that[SIZE]++;
                    if (index !== "F") that._i[index] = entry
                }
                return that
            },
            getEntry: getEntry,
            setStrong: function(C, NAME, IS_MAP) {
                require("./$.iter-define")(C, NAME, function(iterated, kind) {
                    this._t = iterated;
                    this._k = kind;
                    this._l = undefined
                }, function() {
                    var that = this,
                        kind = that._k,
                        entry = that._l;
                    while (entry && entry.r) entry = entry.p;
                    if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
                        that._t = undefined;
                        return step(1)
                    }
                    if (kind == "keys") return step(0, entry.k);
                    if (kind == "values") return step(0, entry.v);
                    return step(0, [entry.k, entry.v])
                }, IS_MAP ? "entries" : "values", !IS_MAP, true);
                species(C);
                species(require("./$.core")[NAME])
            }
        }
    }, {
        "./$": 234,
        "./$.core": 207,
        "./$.ctx": 208,
        "./$.defined": 210,
        "./$.for-of": 217,
        "./$.has": 220,
        "./$.hide": 221,
        "./$.is-object": 227,
        "./$.iter-define": 230,
        "./$.iter-step": 232,
        "./$.mix": 239,
        "./$.species": 252,
        "./$.strict-new": 253,
        "./$.support-desc": 259,
        "./$.uid": 267
    }],
    204: [function(require, module, exports) {
        var forOf = require("./$.for-of"),
            classof = require("./$.classof");
        module.exports = function(NAME) {
            return function toJSON() {
                if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
                var arr = [];
                forOf(this, false, arr.push, arr);
                return arr
            }
        }
    }, {
        "./$.classof": 201,
        "./$.for-of": 217
    }],
    205: [function(require, module, exports) {
        "use strict";
        var hide = require("./$.hide"),
            anObject = require("./$.an-object"),
            strictNew = require("./$.strict-new"),
            forOf = require("./$.for-of"),
            method = require("./$.array-methods"),
            WEAK = require("./$.uid")("weak"),
            isObject = require("./$.is-object"),
            $has = require("./$.has"),
            isExtensible = Object.isExtensible || isObject,
            find = method(5),
            findIndex = method(6),
            id = 0;
        var frozenStore = function(that) {
            return that._l || (that._l = new FrozenStore)
        };
        var FrozenStore = function() {
            this.a = []
        };
        var findFrozen = function(store, key) {
            return find(store.a, function(it) {
                return it[0] === key
            })
        };
        FrozenStore.prototype = {
            get: function(key) {
                var entry = findFrozen(this, key);
                if (entry) return entry[1]
            },
            has: function(key) {
                return !!findFrozen(this, key)
            },
            set: function(key, value) {
                var entry = findFrozen(this, key);
                if (entry) entry[1] = value;
                else this.a.push([key, value])
            },
            "delete": function(key) {
                var index = findIndex(this.a, function(it) {
                    return it[0] === key
                });
                if (~index) this.a.splice(index, 1);
                return !!~index
            }
        };
        module.exports = {
            getConstructor: function(wrapper, NAME, IS_MAP, ADDER) {
                var C = wrapper(function(that, iterable) {
                    strictNew(that, C, NAME);
                    that._i = id++;
                    that._l = undefined;
                    if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that)
                });
                require("./$.mix")(C.prototype, {
                    "delete": function(key) {
                        if (!isObject(key)) return false;
                        if (!isExtensible(key)) return frozenStore(this)["delete"](key);
                        return $has(key, WEAK) && $has(key[WEAK], this._i) && delete key[WEAK][this._i]
                    },
                    has: function has(key) {
                        if (!isObject(key)) return false;
                        if (!isExtensible(key)) return frozenStore(this).has(key);
                        return $has(key, WEAK) && $has(key[WEAK], this._i)
                    }
                });
                return C
            },
            def: function(that, key, value) {
                if (!isExtensible(anObject(key))) {
                    frozenStore(that).set(key, value)
                } else {
                    $has(key, WEAK) || hide(key, WEAK, {});
                    key[WEAK][that._i] = value
                }
                return that
            },
            frozenStore: frozenStore,
            WEAK: WEAK
        }
    }, {
        "./$.an-object": 197,
        "./$.array-methods": 199,
        "./$.for-of": 217,
        "./$.has": 220,
        "./$.hide": 221,
        "./$.is-object": 227,
        "./$.mix": 239,
        "./$.strict-new": 253,
        "./$.uid": 267
    }],
    206: [function(require, module, exports) {
        "use strict";
        var global = require("./$.global"),
            $def = require("./$.def"),
            forOf = require("./$.for-of"),
            strictNew = require("./$.strict-new");
        module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
            var Base = global[NAME],
                C = Base,
                ADDER = IS_MAP ? "set" : "add",
                proto = C && C.prototype,
                O = {};
            var fixMethod = function(KEY) {
                var fn = proto[KEY];
                require("./$.redef")(proto, KEY, KEY == "delete" ? function(a) {
                    return fn.call(this, a === 0 ? 0 : a)
                } : KEY == "has" ? function has(a) {
                    return fn.call(this, a === 0 ? 0 : a)
                } : KEY == "get" ? function get(a) {
                    return fn.call(this, a === 0 ? 0 : a)
                } : KEY == "add" ? function add(a) {
                    fn.call(this, a === 0 ? 0 : a);
                    return this
                } : function set(a, b) {
                    fn.call(this, a === 0 ? 0 : a, b);
                    return this
                })
            };
            if (typeof C != "function" || !(IS_WEAK || proto.forEach && !require("./$.fails")(function() {
                    (new C).entries().next()
                }))) {
                C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
                require("./$.mix")(C.prototype, methods)
            } else {
                var inst = new C,
                    chain = inst[ADDER](IS_WEAK ? {} : -0, 1),
                    buggyZero;
                if (!require("./$.iter-detect")(function(iter) {
                        new C(iter)
                    })) {
                    C = wrapper(function(target, iterable) {
                        strictNew(target, C, NAME);
                        var that = new Base;
                        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
                        return that
                    });
                    C.prototype = proto;
                    proto.constructor = C
                }
                IS_WEAK || inst.forEach(function(val, key) {
                    buggyZero = 1 / key === -Infinity
                });
                if (buggyZero) {
                    fixMethod("delete");
                    fixMethod("has");
                    IS_MAP && fixMethod("get")
                }
                if (buggyZero || chain !== inst) fixMethod(ADDER);
                if (IS_WEAK && proto.clear) delete proto.clear
            }
            require("./$.tag")(C, NAME);
            O[NAME] = C;
            $def($def.G + $def.W + $def.F * (C != Base), O);
            if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
            return C
        }
    }, {
        "./$.def": 209,
        "./$.fails": 214,
        "./$.for-of": 217,
        "./$.global": 219,
        "./$.iter-detect": 231,
        "./$.mix": 239,
        "./$.redef": 246,
        "./$.strict-new": 253,
        "./$.tag": 260
    }],
    207: [function(require, module, exports) {
        var core = module.exports = {};
        if (typeof __e == "number") __e = core
    }, {}],
    208: [function(require, module, exports) {
        var aFunction = require("./$.a-function");
        module.exports = function(fn, that, length) {
            aFunction(fn);
            if (that === undefined) return fn;
            switch (length) {
                case 1:
                    return function(a) {
                        return fn.call(that, a)
                    };
                case 2:
                    return function(a, b) {
                        return fn.call(that, a, b)
                    };
                case 3:
                    return function(a, b, c) {
                        return fn.call(that, a, b, c)
                    }
            }
            return function() {
                return fn.apply(that, arguments)
            }
        }
    }, {
        "./$.a-function": 196
    }],
    209: [function(require, module, exports) {
        var global = require("./$.global"),
            core = require("./$.core"),
            hide = require("./$.hide"),
            $redef = require("./$.redef"),
            PROTOTYPE = "prototype";
        var ctx = function(fn, that) {
            return function() {
                return fn.apply(that, arguments)
            }
        };
        var $def = function(type, name, source) {
            var key, own, out, exp, isGlobal = type & $def.G,
                isProto = type & $def.P,
                target = isGlobal ? global : type & $def.S ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE],
                exports = isGlobal ? core : core[name] || (core[name] = {});
            if (isGlobal) source = name;
            for (key in source) {
                own = !(type & $def.F) && target && key in target;
                out = (own ? target : source)[key];
                if (type & $def.B && own) exp = ctx(out, global);
                else exp = isProto && typeof out == "function" ? ctx(Function.call, out) : out;
                if (target && !own) $redef(target, key, out);
                if (exports[key] != out) hide(exports, key, exp);
                if (isProto)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out
            }
        };
        global.core = core;
        $def.F = 1;
        $def.G = 2;
        $def.S = 4;
        $def.P = 8;
        $def.B = 16;
        $def.W = 32;
        module.exports = $def
    }, {
        "./$.core": 207,
        "./$.global": 219,
        "./$.hide": 221,
        "./$.redef": 246
    }],
    210: [function(require, module, exports) {
        module.exports = function(it) {
            if (it == undefined) throw TypeError("Can't call method on  " + it);
            return it
        }
    }, {}],
    211: [function(require, module, exports) {
        var isObject = require("./$.is-object"),
            document = require("./$.global").document,
            is = isObject(document) && isObject(document.createElement);
        module.exports = function(it) {
            return is ? document.createElement(it) : {}
        }
    }, {
        "./$.global": 219,
        "./$.is-object": 227
    }],
    212: [function(require, module, exports) {
        var $ = require("./$");
        module.exports = function(it) {
            var keys = $.getKeys(it),
                getSymbols = $.getSymbols;
            if (getSymbols) {
                var symbols = getSymbols(it),
                    isEnum = $.isEnum,
                    i = 0,
                    key;
                while (symbols.length > i)
                    if (isEnum.call(it, key = symbols[i++])) keys.push(key)
            }
            return keys
        }
    }, {
        "./$": 234
    }],
    213: [function(require, module, exports) {
        module.exports = Math.expm1 || function expm1(x) {
            return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1
        }
    }, {}],
    214: [function(require, module, exports) {
        module.exports = function(exec) {
            try {
                return !!exec()
            } catch (e) {
                return true
            }
        }
    }, {}],
    215: [function(require, module, exports) {
        "use strict";
        module.exports = function(KEY, length, exec) {
            var defined = require("./$.defined"),
                SYMBOL = require("./$.wks")(KEY),
                original = "" [KEY];
            if (require("./$.fails")(function() {
                    var O = {};
                    O[SYMBOL] = function() {
                        return 7
                    };
                    return "" [KEY](O) != 7
                })) {
                require("./$.redef")(String.prototype, KEY, exec(defined, SYMBOL, original));
                require("./$.hide")(RegExp.prototype, SYMBOL, length == 2 ? function(string, arg) {
                    return original.call(string, this, arg)
                } : function(string) {
                    return original.call(string, this)
                })
            }
        }
    }, {
        "./$.defined": 210,
        "./$.fails": 214,
        "./$.hide": 221,
        "./$.redef": 246,
        "./$.wks": 269
    }],
    216: [function(require, module, exports) {
        "use strict";
        var anObject = require("./$.an-object");
        module.exports = function() {
            var that = anObject(this),
                result = "";
            if (that.global) result += "g";
            if (that.ignoreCase) result += "i";
            if (that.multiline) result += "m";
            if (that.unicode) result += "u";
            if (that.sticky) result += "y";
            return result
        }
    }, {
        "./$.an-object": 197
    }],
    217: [function(require, module, exports) {
        var ctx = require("./$.ctx"),
            call = require("./$.iter-call"),
            isArrayIter = require("./$.is-array-iter"),
            anObject = require("./$.an-object"),
            toLength = require("./$.to-length"),
            getIterFn = require("./core.get-iterator-method");
        module.exports = function(iterable, entries, fn, that) {
            var iterFn = getIterFn(iterable),
                f = ctx(fn, that, entries ? 2 : 1),
                index = 0,
                length, step, iterator;
            if (typeof iterFn != "function") throw TypeError(iterable + " is not iterable!");
            if (isArrayIter(iterFn))
                for (length = toLength(iterable.length); length > index; index++) {
                    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index])
                } else
                    for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
                        call(iterator, f, step.value, entries)
                    }
        }
    }, {
        "./$.an-object": 197,
        "./$.ctx": 208,
        "./$.is-array-iter": 225,
        "./$.iter-call": 228,
        "./$.to-length": 265,
        "./core.get-iterator-method": 270
    }],
    218: [function(require, module, exports) {
        var toString = {}.toString,
            toIObject = require("./$.to-iobject"),
            getNames = require("./$").getNames;
        var windowNames = typeof window == "object" && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
        var getWindowNames = function(it) {
            try {
                return getNames(it)
            } catch (e) {
                return windowNames.slice()
            }
        };
        module.exports.get = function getOwnPropertyNames(it) {
            if (windowNames && toString.call(it) == "[object Window]") return getWindowNames(it);
            return getNames(toIObject(it))
        }
    }, {
        "./$": 234,
        "./$.to-iobject": 264
    }],
    219: [function(require, module, exports) {
        var UNDEFINED = "undefined";
        var global = module.exports = typeof window != UNDEFINED && window.Math == Math ? window : typeof self != UNDEFINED && self.Math == Math ? self : Function("return this")();
        if (typeof __g == "number") __g = global
    }, {}],
    220: [function(require, module, exports) {
        var hasOwnProperty = {}.hasOwnProperty;
        module.exports = function(it, key) {
            return hasOwnProperty.call(it, key)
        }
    }, {}],
    221: [function(require, module, exports) {
        var $ = require("./$"),
            createDesc = require("./$.property-desc");
        module.exports = require("./$.support-desc") ? function(object, key, value) {
            return $.setDesc(object, key, createDesc(1, value))
        } : function(object, key, value) {
            object[key] = value;
            return object
        }
    }, {
        "./$": 234,
        "./$.property-desc": 245,
        "./$.support-desc": 259
    }],
    222: [function(require, module, exports) {
        module.exports = require("./$.global").document && document.documentElement
    }, {
        "./$.global": 219
    }],
    223: [function(require, module, exports) {
        module.exports = function(fn, args, that) {
            var un = that === undefined;
            switch (args.length) {
                case 0:
                    return un ? fn() : fn.call(that);
                case 1:
                    return un ? fn(args[0]) : fn.call(that, args[0]);
                case 2:
                    return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
                case 3:
                    return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
                case 4:
                    return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3])
            }
            return fn.apply(that, args)
        }
    }, {}],
    224: [function(require, module, exports) {
        var cof = require("./$.cof");
        module.exports = 0 in Object("z") ? Object : function(it) {
            return cof(it) == "String" ? it.split("") : Object(it)
        }
    }, {
        "./$.cof": 202
    }],
    225: [function(require, module, exports) {
        var Iterators = require("./$.iterators"),
            ITERATOR = require("./$.wks")("iterator");
        module.exports = function(it) {
            return (Iterators.Array || Array.prototype[ITERATOR]) === it
        }
    }, {
        "./$.iterators": 233,
        "./$.wks": 269
    }],
    226: [function(require, module, exports) {
        var isObject = require("./$.is-object"),
            floor = Math.floor;
        module.exports = function isInteger(it) {
            return !isObject(it) && isFinite(it) && floor(it) === it
        }
    }, {
        "./$.is-object": 227
    }],
    227: [function(require, module, exports) {
        module.exports = function(it) {
            return it !== null && (typeof it == "object" || typeof it == "function")
        }
    }, {}],
    228: [function(require, module, exports) {
        var anObject = require("./$.an-object");
        module.exports = function(iterator, fn, value, entries) {
            try {
                return entries ? fn(anObject(value)[0], value[1]) : fn(value)
            } catch (e) {
                var ret = iterator["return"];
                if (ret !== undefined) anObject(ret.call(iterator));
                throw e
            }
        }
    }, {
        "./$.an-object": 197
    }],
    229: [function(require, module, exports) {
        "use strict";
        var $ = require("./$"),
            IteratorPrototype = {};
        require("./$.hide")(IteratorPrototype, require("./$.wks")("iterator"), function() {
            return this
        });
        module.exports = function(Constructor, NAME, next) {
            Constructor.prototype = $.create(IteratorPrototype, {
                next: require("./$.property-desc")(1, next)
            });
            require("./$.tag")(Constructor, NAME + " Iterator")
        }
    }, {
        "./$": 234,
        "./$.hide": 221,
        "./$.property-desc": 245,
        "./$.tag": 260,
        "./$.wks": 269
    }],
    230: [function(require, module, exports) {
        "use strict";
        var LIBRARY = require("./$.library"),
            $def = require("./$.def"),
            $redef = require("./$.redef"),
            hide = require("./$.hide"),
            has = require("./$.has"),
            SYMBOL_ITERATOR = require("./$.wks")("iterator"),
            Iterators = require("./$.iterators"),
            BUGGY = !([].keys && "next" in [].keys()),
            FF_ITERATOR = "@@iterator",
            KEYS = "keys",
            VALUES = "values";
        var returnThis = function() {
            return this
        };
        module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCE) {
            require("./$.iter-create")(Constructor, NAME, next);
            var createMethod = function(kind) {
                switch (kind) {
                    case KEYS:
                        return function keys() {
                            return new Constructor(this, kind)
                        };
                    case VALUES:
                        return function values() {
                            return new Constructor(this, kind)
                        }
                }
                return function entries() {
                    return new Constructor(this, kind)
                }
            };
            var TAG = NAME + " Iterator",
                proto = Base.prototype,
                _native = proto[SYMBOL_ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
                _default = _native || createMethod(DEFAULT),
                methods, key;
            if (_native) {
                var IteratorPrototype = require("./$").getProto(_default.call(new Base));
                require("./$.tag")(IteratorPrototype, TAG, true);
                if (!LIBRARY && has(proto, FF_ITERATOR)) hide(IteratorPrototype, SYMBOL_ITERATOR, returnThis)
            }
            if (!LIBRARY || FORCE) hide(proto, SYMBOL_ITERATOR, _default);
            Iterators[NAME] = _default;
            Iterators[TAG] = returnThis;
            if (DEFAULT) {
                methods = {
                    keys: IS_SET ? _default : createMethod(KEYS),
                    values: DEFAULT == VALUES ? _default : createMethod(VALUES),
                    entries: DEFAULT != VALUES ? _default : createMethod("entries")
                };
                if (FORCE)
                    for (key in methods) {
                        if (!(key in proto)) $redef(proto, key, methods[key])
                    } else $def($def.P + $def.F * BUGGY, NAME, methods)
            }
        }
    }, {
        "./$": 234,
        "./$.def": 209,
        "./$.has": 220,
        "./$.hide": 221,
        "./$.iter-create": 229,
        "./$.iterators": 233,
        "./$.library": 236,
        "./$.redef": 246,
        "./$.tag": 260,
        "./$.wks": 269
    }],
    231: [function(require, module, exports) {
        var SYMBOL_ITERATOR = require("./$.wks")("iterator"),
            SAFE_CLOSING = false;
        try {
            var riter = [7][SYMBOL_ITERATOR]();
            riter["return"] = function() {
                SAFE_CLOSING = true
            };
            Array.from(riter, function() {
                throw 2
            })
        } catch (e) {}
        module.exports = function(exec) {
            if (!SAFE_CLOSING) return false;
            var safe = false;
            try {
                var arr = [7],
                    iter = arr[SYMBOL_ITERATOR]();
                iter.next = function() {
                    safe = true
                };
                arr[SYMBOL_ITERATOR] = function() {
                    return iter
                };
                exec(arr)
            } catch (e) {}
            return safe
        }
    }, {
        "./$.wks": 269
    }],
    232: [function(require, module, exports) {
        module.exports = function(done, value) {
            return {
                value: value,
                done: !!done
            }
        }
    }, {}],
    233: [function(require, module, exports) {
        module.exports = {}
    }, {}],
    234: [function(require, module, exports) {
        var $Object = Object;
        module.exports = {
            create: $Object.create,
            getProto: $Object.getPrototypeOf,
            isEnum: {}.propertyIsEnumerable,
            getDesc: $Object.getOwnPropertyDescriptor,
            setDesc: $Object.defineProperty,
            setDescs: $Object.defineProperties,
            getKeys: $Object.keys,
            getNames: $Object.getOwnPropertyNames,
            getSymbols: $Object.getOwnPropertySymbols,
            each: [].forEach
        }
    }, {}],
    235: [function(require, module, exports) {
        var $ = require("./$"),
            toIObject = require("./$.to-iobject");
        module.exports = function(object, el) {
            var O = toIObject(object),
                keys = $.getKeys(O),
                length = keys.length,
                index = 0,
                key;
            while (length > index)
                if (O[key = keys[index++]] === el) return key
        }
    }, {
        "./$": 234,
        "./$.to-iobject": 264
    }],
    236: [function(require, module, exports) {
        module.exports = false
    }, {}],
    237: [function(require, module, exports) {
        module.exports = Math.log1p || function log1p(x) {
            return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x)
        }
    }, {}],
    238: [function(require, module, exports) {
        var global = require("./$.global"),
            macrotask = require("./$.task").set,
            Observer = global.MutationObserver || global.WebKitMutationObserver,
            process = global.process,
            isNode = require("./$.cof")(process) == "process",
            head, last, notify;
        var flush = function() {
            var parent, domain;
            if (isNode && (parent = process.domain)) {
                process.domain = null;
                parent.exit()
            }
            while (head) {
                domain = head.domain;
                if (domain) domain.enter();
                head.fn.call();
                if (domain) domain.exit();
                head = head.next
            }
            last = undefined;
            if (parent) parent.enter()
        };
        if (isNode) {
            notify = function() {
                process.nextTick(flush)
            }
        } else if (Observer) {
            var toggle = 1,
                node = document.createTextNode("");
            new Observer(flush).observe(node, {
                characterData: true
            });
            notify = function() {
                node.data = toggle = -toggle
            }
        } else {
            notify = function() {
                macrotask.call(global, flush)
            }
        }
        module.exports = function asap(fn) {
            var task = {
                fn: fn,
                next: undefined,
                domain: isNode && process.domain
            };
            if (last) last.next = task;
            if (!head) {
                head = task;
                notify()
            }
            last = task
        }
    }, {
        "./$.cof": 202,
        "./$.global": 219,
        "./$.task": 261
    }],
    239: [function(require, module, exports) {
        var $redef = require("./$.redef");
        module.exports = function(target, src) {
            for (var key in src) $redef(target, key, src[key]);
            return target
        }
    }, {
        "./$.redef": 246
    }],
    240: [function(require, module, exports) {
        module.exports = function(KEY, exec) {
            var $def = require("./$.def"),
                fn = (require("./$.core").Object || {})[KEY] || Object[KEY],
                exp = {};
            exp[KEY] = exec(fn);
            $def($def.S + $def.F * require("./$.fails")(function() {
                fn(1)
            }), "Object", exp)
        }
    }, {
        "./$.core": 207,
        "./$.def": 209,
        "./$.fails": 214
    }],
    241: [function(require, module, exports) {
        var $ = require("./$"),
            toIObject = require("./$.to-iobject");
        module.exports = function(isEntries) {
            return function(it) {
                var O = toIObject(it),
                    keys = $.getKeys(O),
                    length = keys.length,
                    i = 0,
                    result = Array(length),
                    key;
                if (isEntries)
                    while (length > i) result[i] = [key = keys[i++], O[key]];
                else
                    while (length > i) result[i] = O[keys[i++]];
                return result
            }
        }
    }, {
        "./$": 234,
        "./$.to-iobject": 264
    }],
    242: [function(require, module, exports) {
        var $ = require("./$"),
            anObject = require("./$.an-object"),
            Reflect = require("./$.global").Reflect;
        module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
            var keys = $.getNames(anObject(it)),
                getSymbols = $.getSymbols;
            return getSymbols ? keys.concat(getSymbols(it)) : keys
        }
    }, {
        "./$": 234,
        "./$.an-object": 197,
        "./$.global": 219
    }],
    243: [function(require, module, exports) {
        "use strict";
        var path = require("./$.path"),
            invoke = require("./$.invoke"),
            aFunction = require("./$.a-function");
        module.exports = function() {
            var fn = aFunction(this),
                length = arguments.length,
                pargs = Array(length),
                i = 0,
                _ = path._,
                holder = false;
            while (length > i)
                if ((pargs[i] = arguments[i++]) === _) holder = true;
            return function() {
                var that = this,
                    _length = arguments.length,
                    j = 0,
                    k = 0,
                    args;
                if (!holder && !_length) return invoke(fn, pargs, that);
                args = pargs.slice();
                if (holder)
                    for (; length > j; j++)
                        if (args[j] === _) args[j] = arguments[k++];
                while (_length > k) args.push(arguments[k++]);
                return invoke(fn, args, that)
            }
        }
    }, {
        "./$.a-function": 196,
        "./$.invoke": 223,
        "./$.path": 244
    }],
    244: [function(require, module, exports) {
        module.exports = require("./$.global")
    }, {
        "./$.global": 219
    }],
    245: [function(require, module, exports) {
        module.exports = function(bitmap, value) {
            return {
                enumerable: !(bitmap & 1),
                configurable: !(bitmap & 2),
                writable: !(bitmap & 4),
                value: value
            }
        }
    }, {}],
    246: [function(require, module, exports) {
        var global = require("./$.global"),
            hide = require("./$.hide"),
            SRC = require("./$.uid")("src"),
            TO_STRING = "toString",
            $toString = Function[TO_STRING],
            TPL = ("" + $toString).split(TO_STRING);
        require("./$.core").inspectSource = function(it) {
            return $toString.call(it)
        };
        (module.exports = function(O, key, val, safe) {
            if (typeof val == "function") {
                hide(val, SRC, O[key] ? "" + O[key] : TPL.join(String(key)));
                if (!("name" in val)) val.name = key
            }
            if (O === global) {
                O[key] = val
            } else {
                if (!safe) delete O[key];
                hide(O, key, val)
            }
        })(Function.prototype, TO_STRING, function toString() {
            return typeof this == "function" && this[SRC] || $toString.call(this)
        })
    }, {
        "./$.core": 207,
        "./$.global": 219,
        "./$.hide": 221,
        "./$.uid": 267
    }],
    247: [function(require, module, exports) {
        module.exports = function(regExp, replace) {
            var replacer = replace === Object(replace) ? function(part) {
                return replace[part]
            } : replace;
            return function(it) {
                return String(it).replace(regExp, replacer)
            }
        }
    }, {}],
    248: [function(require, module, exports) {
        module.exports = Object.is || function is(x, y) {
            return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y
        }
    }, {}],
    249: [function(require, module, exports) {
        var getDesc = require("./$").getDesc,
            isObject = require("./$.is-object"),
            anObject = require("./$.an-object");
        var check = function(O, proto) {
            anObject(O);
            if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!")
        };
        module.exports = {
            set: Object.setPrototypeOf || ("__proto__" in {} ? function(buggy, set) {
                try {
                    set = require("./$.ctx")(Function.call, getDesc(Object.prototype, "__proto__").set, 2);
                    set({}, [])
                } catch (e) {
                    buggy = true
                }
                return function setPrototypeOf(O, proto) {
                    check(O, proto);
                    if (buggy) O.__proto__ = proto;
                    else set(O, proto);
                    return O
                }
            }() : undefined),
            check: check
        }
    }, {
        "./$": 234,
        "./$.an-object": 197,
        "./$.ctx": 208,
        "./$.is-object": 227
    }],
    250: [function(require, module, exports) {
        var global = require("./$.global"),
            SHARED = "__core-js_shared__",
            store = global[SHARED] || (global[SHARED] = {});
        module.exports = function(key) {
            return store[key] || (store[key] = {})
        }
    }, {
        "./$.global": 219
    }],
    251: [function(require, module, exports) {
        module.exports = Math.sign || function sign(x) {
            return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1
        }
    }, {}],
    252: [function(require, module, exports) {
        "use strict";
        var $ = require("./$"),
            SPECIES = require("./$.wks")("species");
        module.exports = function(C) {
            if (require("./$.support-desc") && !(SPECIES in C)) $.setDesc(C, SPECIES, {
                configurable: true,
                get: function() {
                    return this
                }
            })
        }
    }, {
        "./$": 234,
        "./$.support-desc": 259,
        "./$.wks": 269
    }],
    253: [function(require, module, exports) {
        module.exports = function(it, Constructor, name) {
            if (!(it instanceof Constructor)) throw TypeError(name + ": use the 'new' operator!");
            return it
        }
    }, {}],
    254: [function(require, module, exports) {
        var toInteger = require("./$.to-integer"),
            defined = require("./$.defined");
        module.exports = function(TO_STRING) {
            return function(that, pos) {
                var s = String(defined(that)),
                    i = toInteger(pos),
                    l = s.length,
                    a, b;
                if (i < 0 || i >= l) return TO_STRING ? "" : undefined;
                a = s.charCodeAt(i);
                return a < 55296 || a > 56319 || i + 1 === l || (b = s.charCodeAt(i + 1)) < 56320 || b > 57343 ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 55296 << 10) + (b - 56320) + 65536
            }
        }
    }, {
        "./$.defined": 210,
        "./$.to-integer": 263
    }],
    255: [function(require, module, exports) {
        var defined = require("./$.defined"),
            cof = require("./$.cof");
        module.exports = function(that, searchString, NAME) {
            if (cof(searchString) == "RegExp") throw TypeError("String#" + NAME + " doesn't accept regex!");
            return String(defined(that))
        }
    }, {
        "./$.cof": 202,
        "./$.defined": 210
    }],
    256: [function(require, module, exports) {
        var toLength = require("./$.to-length"),
            repeat = require("./$.string-repeat"),
            defined = require("./$.defined");
        module.exports = function(that, maxLength, fillString, left) {
            var S = String(defined(that)),
                stringLength = S.length,
                fillStr = fillString === undefined ? " " : String(fillString),
                intMaxLength = toLength(maxLength);
            if (intMaxLength <= stringLength) return S;
            if (fillStr == "") fillStr = " ";
            var fillLen = intMaxLength - stringLength,
                stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
            if (stringFiller.length > fillLen) stringFiller = left ? stringFiller.slice(stringFiller.length - fillLen) : stringFiller.slice(0, fillLen);
            return left ? stringFiller + S : S + stringFiller
        }
    }, {
        "./$.defined": 210,
        "./$.string-repeat": 257,
        "./$.to-length": 265
    }],
    257: [function(require, module, exports) {
        "use strict";
        var toInteger = require("./$.to-integer"),
            defined = require("./$.defined");
        module.exports = function repeat(count) {
            var str = String(defined(this)),
                res = "",
                n = toInteger(count);
            if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
            for (; n > 0;
                (n >>>= 1) && (str += str))
                if (n & 1) res += str;
            return res
        }
    }, {
        "./$.defined": 210,
        "./$.to-integer": 263
    }],
    258: [function(require, module, exports) {
        var trim = function(string, TYPE) {
            string = String(defined(string));
            if (TYPE & 1) string = string.replace(ltrim, "");
            if (TYPE & 2) string = string.replace(rtrim, "");
            return string
        };
        var $def = require("./$.def"),
            defined = require("./$.defined"),
            spaces = "	\n\f\r   ᠎    " + "         　\u2028\u2029\ufeff",
            space = "[" + spaces + "]",
            non = "​",
            ltrim = RegExp("^" + space + space + "*"),
            rtrim = RegExp(space + space + "*$");
        module.exports = function(KEY, exec) {
            var exp = {};
            exp[KEY] = exec(trim);
            $def($def.P + $def.F * require("./$.fails")(function() {
                return !!spaces[KEY]() || non[KEY]() != non
            }), "String", exp)
        }
    }, {
        "./$.def": 209,
        "./$.defined": 210,
        "./$.fails": 214
    }],
    259: [function(require, module, exports) {
        module.exports = !require("./$.fails")(function() {
            return Object.defineProperty({}, "a", {
                get: function() {
                    return 7
                }
            }).a != 7
        })
    }, {
        "./$.fails": 214
    }],
    260: [function(require, module, exports) {
        var has = require("./$.has"),
            hide = require("./$.hide"),
            TAG = require("./$.wks")("toStringTag");
        module.exports = function(it, tag, stat) {
            if (it && !has(it = stat ? it : it.prototype, TAG)) hide(it, TAG, tag)
        }
    }, {
        "./$.has": 220,
        "./$.hide": 221,
        "./$.wks": 269
    }],
    261: [function(require, module, exports) {
        "use strict";
        var ctx = require("./$.ctx"),
            invoke = require("./$.invoke"),
            html = require("./$.html"),
            cel = require("./$.dom-create"),
            global = require("./$.global"),
            process = global.process,
            setTask = global.setImmediate,
            clearTask = global.clearImmediate,
            MessageChannel = global.MessageChannel,
            counter = 0,
            queue = {},
            ONREADYSTATECHANGE = "onreadystatechange",
            defer, channel, port;
        var run = function() {
            var id = +this;
            if (queue.hasOwnProperty(id)) {
                var fn = queue[id];
                delete queue[id];
                fn()
            }
        };
        var listner = function(event) {
            run.call(event.data)
        };
        if (!setTask || !clearTask) {
            setTask = function setImmediate(fn) {
                var args = [],
                    i = 1;
                while (arguments.length > i) args.push(arguments[i++]);
                queue[++counter] = function() {
                    invoke(typeof fn == "function" ? fn : Function(fn), args)
                };
                defer(counter);
                return counter
            };
            clearTask = function clearImmediate(id) {
                delete queue[id]
            };
            if (require("./$.cof")(process) == "process") {
                defer = function(id) {
                    process.nextTick(ctx(run, id, 1))
                }
            } else if (MessageChannel) {
                channel = new MessageChannel;
                port = channel.port2;
                channel.port1.onmessage = listner;
                defer = ctx(port.postMessage, port, 1)
            } else if (global.addEventListener && typeof postMessage == "function" && !global.importScript) {
                defer = function(id) {
                    global.postMessage(id + "", "*")
                };
                global.addEventListener("message", listner, false)
            } else if (ONREADYSTATECHANGE in cel("script")) {
                defer = function(id) {
                    html.appendChild(cel("script"))[ONREADYSTATECHANGE] = function() {
                        html.removeChild(this);
                        run.call(id)
                    }
                }
            } else {
                defer = function(id) {
                    setTimeout(ctx(run, id, 1), 0)
                }
            }
        }
        module.exports = {
            set: setTask,
            clear: clearTask
        }
    }, {
        "./$.cof": 202,
        "./$.ctx": 208,
        "./$.dom-create": 211,
        "./$.global": 219,
        "./$.html": 222,
        "./$.invoke": 223
    }],
    262: [function(require, module, exports) {
        var toInteger = require("./$.to-integer"),
            max = Math.max,
            min = Math.min;
        module.exports = function(index, length) {
            index = toInteger(index);
            return index < 0 ? max(index + length, 0) : min(index, length)
        }
    }, {
        "./$.to-integer": 263
    }],
    263: [function(require, module, exports) {
        var ceil = Math.ceil,
            floor = Math.floor;
        module.exports = function(it) {
            return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it)
        }
    }, {}],
    264: [function(require, module, exports) {
        var IObject = require("./$.iobject"),
            defined = require("./$.defined");
        module.exports = function(it) {
            return IObject(defined(it))
        }
    }, {
        "./$.defined": 210,
        "./$.iobject": 224
    }],
    265: [function(require, module, exports) {
        var toInteger = require("./$.to-integer"),
            min = Math.min;
        module.exports = function(it) {
            return it > 0 ? min(toInteger(it), 9007199254740991) : 0
        }
    }, {
        "./$.to-integer": 263
    }],
    266: [function(require, module, exports) {
        var defined = require("./$.defined");
        module.exports = function(it) {
            return Object(defined(it))
        }
    }, {
        "./$.defined": 210
    }],
    267: [function(require, module, exports) {
        var id = 0,
            px = Math.random();
        module.exports = function(key) {
            return "Symbol(".concat(key === undefined ? "" : key, ")_", (++id + px).toString(36))
        }
    }, {}],
    268: [function(require, module, exports) {
        var UNSCOPABLES = require("./$.wks")("unscopables");
        if (!(UNSCOPABLES in [])) require("./$.hide")(Array.prototype, UNSCOPABLES, {});
        module.exports = function(key) {
            [][UNSCOPABLES][key] = true
        }
    }, {
        "./$.hide": 221,
        "./$.wks": 269
    }],
    269: [function(require, module, exports) {
        var store = require("./$.shared")("wks"),
            Symbol = require("./$.global").Symbol;
        module.exports = function(name) {
            return store[name] || (store[name] = Symbol && Symbol[name] || (Symbol || require("./$.uid"))("Symbol." + name))
        }
    }, {
        "./$.global": 219,
        "./$.shared": 250,
        "./$.uid": 267
    }],
    270: [function(require, module, exports) {
        var classof = require("./$.classof"),
            ITERATOR = require("./$.wks")("iterator"),
            Iterators = require("./$.iterators");
        module.exports = require("./$.core").getIteratorMethod = function(it) {
            if (it != undefined) return it[ITERATOR] || it["@@iterator"] || Iterators[classof(it)]
        }
    }, {
        "./$.classof": 201,
        "./$.core": 207,
        "./$.iterators": 233,
        "./$.wks": 269
    }],
    271: [function(require, module, exports) {
        "use strict";
        var $ = require("./$"),
            SUPPORT_DESC = require("./$.support-desc"),
            createDesc = require("./$.property-desc"),
            html = require("./$.html"),
            cel = require("./$.dom-create"),
            has = require("./$.has"),
            cof = require("./$.cof"),
            $def = require("./$.def"),
            invoke = require("./$.invoke"),
            arrayMethod = require("./$.array-methods"),
            IE_PROTO = require("./$.uid")("__proto__"),
            isObject = require("./$.is-object"),
            anObject = require("./$.an-object"),
            aFunction = require("./$.a-function"),
            toObject = require("./$.to-object"),
            toIObject = require("./$.to-iobject"),
            toInteger = require("./$.to-integer"),
            toIndex = require("./$.to-index"),
            toLength = require("./$.to-length"),
            IObject = require("./$.iobject"),
            fails = require("./$.fails"),
            ObjectProto = Object.prototype,
            A = [],
            _slice = A.slice,
            _join = A.join,
            defineProperty = $.setDesc,
            getOwnDescriptor = $.getDesc,
            defineProperties = $.setDescs,
            $indexOf = require("./$.array-includes")(false),
            factories = {},
            IE8_DOM_DEFINE;
        if (!SUPPORT_DESC) {
            IE8_DOM_DEFINE = !fails(function() {
                return defineProperty(cel("div"), "a", {
                    get: function() {
                        return 7
                    }
                }).a != 7
            });
            $.setDesc = function(O, P, Attributes) {
                if (IE8_DOM_DEFINE) try {
                    return defineProperty(O, P, Attributes)
                } catch (e) {}
                if ("get" in Attributes || "set" in Attributes) throw TypeError("Accessors not supported!");
                if ("value" in Attributes) anObject(O)[P] = Attributes.value;
                return O
            };
            $.getDesc = function(O, P) {
                if (IE8_DOM_DEFINE) try {
                    return getOwnDescriptor(O, P)
                } catch (e) {}
                if (has(O, P)) return createDesc(!ObjectProto.propertyIsEnumerable.call(O, P), O[P])
            };
            $.setDescs = defineProperties = function(O, Properties) {
                anObject(O);
                var keys = $.getKeys(Properties),
                    length = keys.length,
                    i = 0,
                    P;
                while (length > i) $.setDesc(O, P = keys[i++], Properties[P]);
                return O
            }
        }
        $def($def.S + $def.F * !SUPPORT_DESC, "Object", {
            getOwnPropertyDescriptor: $.getDesc,
            defineProperty: $.setDesc,
            defineProperties: defineProperties
        });
        var keys1 = ("constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable," + "toLocaleString,toString,valueOf").split(","),
            keys2 = keys1.concat("length", "prototype"),
            keysLen1 = keys1.length;
        var createDict = function() {
            var iframe = cel("iframe"),
                i = keysLen1,
                gt = ">",
                iframeDocument;
            iframe.style.display = "none";
            html.appendChild(iframe);
            iframe.src = "javascript:";
            iframeDocument = iframe.contentWindow.document;
            iframeDocument.open();
            iframeDocument.write("<script>document.F=Object</script" + gt);
            iframeDocument.close();
            createDict = iframeDocument.F;
            while (i--) delete createDict.prototype[keys1[i]];
            return createDict()
        };
        var createGetKeys = function(names, length) {
            return function(object) {
                var O = toIObject(object),
                    i = 0,
                    result = [],
                    key;
                for (key in O)
                    if (key != IE_PROTO) has(O, key) && result.push(key);
                while (length > i)
                    if (has(O, key = names[i++])) {
                        ~$indexOf(result, key) || result.push(key)
                    }
                return result
            }
        };
        var Empty = function() {};
        $def($def.S, "Object", {
            getPrototypeOf: $.getProto = $.getProto || function(O) {
                O = toObject(O);
                if (has(O, IE_PROTO)) return O[IE_PROTO];
                if (typeof O.constructor == "function" && O instanceof O.constructor) {
                    return O.constructor.prototype
                }
                return O instanceof Object ? ObjectProto : null
            },
            getOwnPropertyNames: $.getNames = $.getNames || createGetKeys(keys2, keys2.length, true),
            create: $.create = $.create || function(O, Properties) {
                var result;
                if (O !== null) {
                    Empty.prototype = anObject(O);
                    result = new Empty;
                    Empty.prototype = null;
                    result[IE_PROTO] = O
                } else result = createDict();
                return Properties === undefined ? result : defineProperties(result, Properties)
            },
            keys: $.getKeys = $.getKeys || createGetKeys(keys1, keysLen1, false)
        });
        var construct = function(F, len, args) {
            if (!(len in factories)) {
                for (var n = [], i = 0; i < len; i++) n[i] = "a[" + i + "]";
                factories[len] = Function("F,a", "return new F(" + n.join(",") + ")")
            }
            return factories[len](F, args)
        };
        $def($def.P, "Function", {
            bind: function bind(that) {
                var fn = aFunction(this),
                    partArgs = _slice.call(arguments, 1);
                var bound = function() {
                    var args = partArgs.concat(_slice.call(arguments));
                    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that)
                };
                if (isObject(fn.prototype)) bound.prototype = fn.prototype;
                return bound
            }
        });
        var buggySlice = fails(function() {
            if (html) _slice.call(html)
        });
        $def($def.P + $def.F * buggySlice, "Array", {
            slice: function(begin, end) {
                var len = toLength(this.length),
                    klass = cof(this);
                end = end === undefined ? len : end;
                if (klass == "Array") return _slice.call(this, begin, end);
                var start = toIndex(begin, len),
                    upTo = toIndex(end, len),
                    size = toLength(upTo - start),
                    cloned = Array(size),
                    i = 0;
                for (; i < size; i++) cloned[i] = klass == "String" ? this.charAt(start + i) : this[start + i];
                return cloned
            }
        });
        $def($def.P + $def.F * (IObject != Object), "Array", {
            join: function() {
                return _join.apply(IObject(this), arguments)
            }
        });
        $def($def.S, "Array", {
            isArray: function(arg) {
                return cof(arg) == "Array"
            }
        });
        var createArrayReduce = function(isRight) {
            return function(callbackfn, memo) {
                aFunction(callbackfn);
                var O = IObject(this),
                    length = toLength(O.length),
                    index = isRight ? length - 1 : 0,
                    i = isRight ? -1 : 1;
                if (arguments.length < 2)
                    for (;;) {
                        if (index in O) {
                            memo = O[index];
                            index += i;
                            break
                        }
                        index += i;
                        if (isRight ? index < 0 : length <= index) {
                            throw TypeError("Reduce of empty array with no initial value")
                        }
                    }
                for (; isRight ? index >= 0 : length > index; index += i)
                    if (index in O) {
                        memo = callbackfn(memo, O[index], index, this)
                    }
                return memo
            }
        };
        var methodize = function($fn) {
            return function(arg1) {
                return $fn(this, arg1, arguments[1])
            }
        };
        $def($def.P, "Array", {
            forEach: $.each = $.each || methodize(arrayMethod(0)),
            map: methodize(arrayMethod(1)),
            filter: methodize(arrayMethod(2)),
            some: methodize(arrayMethod(3)),
            every: methodize(arrayMethod(4)),
            reduce: createArrayReduce(false),
            reduceRight: createArrayReduce(true),
            indexOf: methodize($indexOf),
            lastIndexOf: function(el, fromIndex) {
                var O = toIObject(this),
                    length = toLength(O.length),
                    index = length - 1;
                if (arguments.length > 1) index = Math.min(index, toInteger(fromIndex));
                if (index < 0) index = toLength(length + index);
                for (; index >= 0; index--)
                    if (index in O)
                        if (O[index] === el) return index;
                return -1
            }
        });
        $def($def.S, "Date", {
            now: function() {
                return +new Date
            }
        });
        var lz = function(num) {
            return num > 9 ? num : "0" + num
        };
        var date = new Date(-5e13 - 1),
            brokenDate = !(date.toISOString && date.toISOString() == "0385-07-25T07:06:39.999Z" && fails(function() {
                new Date(NaN).toISOString()
            }));
        $def($def.P + $def.F * brokenDate, "Date", {
            toISOString: function toISOString() {
                if (!isFinite(this)) throw RangeError("Invalid time value");
                var d = this,
                    y = d.getUTCFullYear(),
                    m = d.getUTCMilliseconds(),
                    s = y < 0 ? "-" : y > 9999 ? "+" : "";
                return s + ("00000" + Math.abs(y)).slice(s ? -6 : -4) + "-" + lz(d.getUTCMonth() + 1) + "-" + lz(d.getUTCDate()) + "T" + lz(d.getUTCHours()) + ":" + lz(d.getUTCMinutes()) + ":" + lz(d.getUTCSeconds()) + "." + (m > 99 ? m : "0" + lz(m)) + "Z"
            }
        })
    }, {
        "./$": 234,
        "./$.a-function": 196,
        "./$.an-object": 197,
        "./$.array-includes": 198,
        "./$.array-methods": 199,
        "./$.cof": 202,
        "./$.def": 209,
        "./$.dom-create": 211,
        "./$.fails": 214,
        "./$.has": 220,
        "./$.html": 222,
        "./$.invoke": 223,
        "./$.iobject": 224,
        "./$.is-object": 227,
        "./$.property-desc": 245,
        "./$.support-desc": 259,
        "./$.to-index": 262,
        "./$.to-integer": 263,
        "./$.to-iobject": 264,
        "./$.to-length": 265,
        "./$.to-object": 266,
        "./$.uid": 267
    }],
    272: [function(require, module, exports) {
        "use strict";
        var $def = require("./$.def"),
            toObject = require("./$.to-object"),
            toIndex = require("./$.to-index"),
            toLength = require("./$.to-length");
        $def($def.P, "Array", {
            copyWithin: function copyWithin(target, start) {
                var O = toObject(this),
                    len = toLength(O.length),
                    to = toIndex(target, len),
                    from = toIndex(start, len),
                    end = arguments[2],
                    fin = end === undefined ? len : toIndex(end, len),
                    count = Math.min(fin - from, len - to),
                    inc = 1;
                if (from < to && to < from + count) {
                    inc = -1;
                    from = from + count - 1;
                    to = to + count - 1
                }
                while (count-- > 0) {
                    if (from in O) O[to] = O[from];
                    else delete O[to];
                    to += inc;
                    from += inc
                }
                return O
            }
        });
        require("./$.unscope")("copyWithin")
    }, {
        "./$.def": 209,
        "./$.to-index": 262,
        "./$.to-length": 265,
        "./$.to-object": 266,
        "./$.unscope": 268
    }],
    273: [function(require, module, exports) {
        "use strict";
        var $def = require("./$.def"),
            toObject = require("./$.to-object"),
            toIndex = require("./$.to-index"),
            toLength = require("./$.to-length");
        $def($def.P, "Array", {
            fill: function fill(value) {
                var O = toObject(this, true),
                    length = toLength(O.length),
                    index = toIndex(arguments[1], length),
                    end = arguments[2],
                    endPos = end === undefined ? length : toIndex(end, length);
                while (endPos > index) O[index++] = value;
                return O
            }
        });
        require("./$.unscope")("fill")
    }, {
        "./$.def": 209,
        "./$.to-index": 262,
        "./$.to-length": 265,
        "./$.to-object": 266,
        "./$.unscope": 268
    }],
    274: [function(require, module, exports) {
        "use strict";
        var KEY = "findIndex",
            $def = require("./$.def"),
            forced = true,
            $find = require("./$.array-methods")(6);
        if (KEY in []) Array(1)[KEY](function() {
            forced = false
        });
        $def($def.P + $def.F * forced, "Array", {
            findIndex: function findIndex(callbackfn) {
                return $find(this, callbackfn, arguments[1])
            }
        });
        require("./$.unscope")(KEY)
    }, {
        "./$.array-methods": 199,
        "./$.def": 209,
        "./$.unscope": 268
    }],
    275: [function(require, module, exports) {
        "use strict";
        var KEY = "find",
            $def = require("./$.def"),
            forced = true,
            $find = require("./$.array-methods")(5);
        if (KEY in []) Array(1)[KEY](function() {
            forced = false
        });
        $def($def.P + $def.F * forced, "Array", {
            find: function find(callbackfn) {
                return $find(this, callbackfn, arguments[1])
            }
        });
        require("./$.unscope")(KEY)
    }, {
        "./$.array-methods": 199,
        "./$.def": 209,
        "./$.unscope": 268
    }],
    276: [function(require, module, exports) {
        "use strict";
        var ctx = require("./$.ctx"),
            $def = require("./$.def"),
            toObject = require("./$.to-object"),
            call = require("./$.iter-call"),
            isArrayIter = require("./$.is-array-iter"),
            toLength = require("./$.to-length"),
            getIterFn = require("./core.get-iterator-method");
        $def($def.S + $def.F * !require("./$.iter-detect")(function(iter) {
            Array.from(iter)
        }), "Array", {
            from: function from(arrayLike) {
                var O = toObject(arrayLike),
                    C = typeof this == "function" ? this : Array,
                    mapfn = arguments[1],
                    mapping = mapfn !== undefined,
                    index = 0,
                    iterFn = getIterFn(O),
                    length, result, step, iterator;
                if (mapping) mapfn = ctx(mapfn, arguments[2], 2);
                if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
                    for (iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++) {
                        result[index] = mapping ? call(iterator, mapfn, [step.value, index], true) : step.value
                    }
                } else {
                    for (result = new C(length = toLength(O.length)); length > index; index++) {
                        result[index] = mapping ? mapfn(O[index], index) : O[index]
                    }
                }
                result.length = index;
                return result
            }
        })
    }, {
        "./$.ctx": 208,
        "./$.def": 209,
        "./$.is-array-iter": 225,
        "./$.iter-call": 228,
        "./$.iter-detect": 231,
        "./$.to-length": 265,
        "./$.to-object": 266,
        "./core.get-iterator-method": 270
    }],
    277: [function(require, module, exports) {
        "use strict";
        var setUnscope = require("./$.unscope"),
            step = require("./$.iter-step"),
            Iterators = require("./$.iterators"),
            toIObject = require("./$.to-iobject");
        require("./$.iter-define")(Array, "Array", function(iterated, kind) {
            this._t = toIObject(iterated);
            this._i = 0;
            this._k = kind
        }, function() {
            var O = this._t,
                kind = this._k,
                index = this._i++;
            if (!O || index >= O.length) {
                this._t = undefined;
                return step(1)
            }
            if (kind == "keys") return step(0, index);
            if (kind == "values") return step(0, O[index]);
            return step(0, [index, O[index]])
        }, "values");
        Iterators.Arguments = Iterators.Array;
        setUnscope("keys");
        setUnscope("values");
        setUnscope("entries")
    }, {
        "./$.iter-define": 230,
        "./$.iter-step": 232,
        "./$.iterators": 233,
        "./$.to-iobject": 264,
        "./$.unscope": 268
    }],
    278: [function(require, module, exports) {
        "use strict";
        var $def = require("./$.def");
        $def($def.S + $def.F * require("./$.fails")(function() {
            function F() {}
            return !(Array.of.call(F) instanceof F)
        }), "Array", {
            of: function of() {
                var index = 0,
                    length = arguments.length,
                    result = new(typeof this == "function" ? this : Array)(length);
                while (length > index) result[index] = arguments[index++];
                result.length = length;
                return result
            }
        })
    }, {
        "./$.def": 209,
        "./$.fails": 214
    }],
    279: [function(require, module, exports) {
        require("./$.species")(Array)
    }, {
        "./$.species": 252
    }],
    280: [function(require, module, exports) {
        "use strict";
        var $ = require("./$"),
            isObject = require("./$.is-object"),
            HAS_INSTANCE = require("./$.wks")("hasInstance"),
            FunctionProto = Function.prototype;
        if (!(HAS_INSTANCE in FunctionProto)) $.setDesc(FunctionProto, HAS_INSTANCE, {
            value: function(O) {
                if (typeof this != "function" || !isObject(O)) return false;
                if (!isObject(this.prototype)) return O instanceof this;
                while (O = $.getProto(O))
                    if (this.prototype === O) return true;
                return false
            }
        })
    }, {
        "./$": 234,
        "./$.is-object": 227,
        "./$.wks": 269
    }],
    281: [function(require, module, exports) {
        var setDesc = require("./$").setDesc,
            createDesc = require("./$.property-desc"),
            has = require("./$.has"),
            FProto = Function.prototype,
            nameRE = /^\s*function ([^ (]*)/,
            NAME = "name";
        NAME in FProto || require("./$.support-desc") && setDesc(FProto, NAME, {
            configurable: true,
            get: function() {
                var match = ("" + this).match(nameRE),
                    name = match ? match[1] : "";
                has(this, NAME) || setDesc(this, NAME, createDesc(5, name));
                return name
            }
        })
    }, {
        "./$": 234,
        "./$.has": 220,
        "./$.property-desc": 245,
        "./$.support-desc": 259
    }],
    282: [function(require, module, exports) {
        "use strict";
        var strong = require("./$.collection-strong");
        require("./$.collection")("Map", function(get) {
            return function Map() {
                return get(this, arguments[0])
            }
        }, {
            get: function get(key) {
                var entry = strong.getEntry(this, key);
                return entry && entry.v
            },
            set: function set(key, value) {
                return strong.def(this, key === 0 ? 0 : key, value)
            }
        }, strong, true)
    }, {
        "./$.collection": 206,
        "./$.collection-strong": 203
    }],
    283: [function(require, module, exports) {
        var $def = require("./$.def"),
            log1p = require("./$.log1p"),
            sqrt = Math.sqrt,
            $acosh = Math.acosh;
        $def($def.S + $def.F * !($acosh && Math.floor($acosh(Number.MAX_VALUE)) == 710), "Math", {
            acosh: function acosh(x) {
                return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1))
            }
        })
    }, {
        "./$.def": 209,
        "./$.log1p": 237
    }],
    284: [function(require, module, exports) {
        var $def = require("./$.def");

        function asinh(x) {
            return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1))
        }
        $def($def.S, "Math", {
            asinh: asinh
        })
    }, {
        "./$.def": 209
    }],
    285: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S, "Math", {
            atanh: function atanh(x) {
                return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2
            }
        })
    }, {
        "./$.def": 209
    }],
    286: [function(require, module, exports) {
        var $def = require("./$.def"),
            sign = require("./$.sign");
        $def($def.S, "Math", {
            cbrt: function cbrt(x) {
                return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3)
            }
        })
    }, {
        "./$.def": 209,
        "./$.sign": 251
    }],
    287: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S, "Math", {
            clz32: function clz32(x) {
                return (x >>>= 0) ? 31 - Math.floor(Math.log(x + .5) * Math.LOG2E) : 32
            }
        })
    }, {
        "./$.def": 209
    }],
    288: [function(require, module, exports) {
        var $def = require("./$.def"),
            exp = Math.exp;
        $def($def.S, "Math", {
            cosh: function cosh(x) {
                return (exp(x = +x) + exp(-x)) / 2
            }
        })
    }, {
        "./$.def": 209
    }],
    289: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S, "Math", {
            expm1: require("./$.expm1")
        })
    }, {
        "./$.def": 209,
        "./$.expm1": 213
    }],
    290: [function(require, module, exports) {
        var $def = require("./$.def"),
            sign = require("./$.sign"),
            pow = Math.pow,
            EPSILON = pow(2, -52),
            EPSILON32 = pow(2, -23),
            MAX32 = pow(2, 127) * (2 - EPSILON32),
            MIN32 = pow(2, -126);
        var roundTiesToEven = function(n) {
            return n + 1 / EPSILON - 1 / EPSILON
        };
        $def($def.S, "Math", {
            fround: function fround(x) {
                var $abs = Math.abs(x),
                    $sign = sign(x),
                    a, result;
                if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
                a = (1 + EPSILON32 / EPSILON) * $abs;
                result = a - (a - $abs);
                if (result > MAX32 || result != result) return $sign * Infinity;
                return $sign * result
            }
        })
    }, {
        "./$.def": 209,
        "./$.sign": 251
    }],
    291: [function(require, module, exports) {
        var $def = require("./$.def"),
            abs = Math.abs;
        $def($def.S, "Math", {
            hypot: function hypot(value1, value2) {
                var sum = 0,
                    i = 0,
                    len = arguments.length,
                    larg = 0,
                    arg, div;
                while (i < len) {
                    arg = abs(arguments[i++]);
                    if (larg < arg) {
                        div = larg / arg;
                        sum = sum * div * div + 1;
                        larg = arg
                    } else if (arg > 0) {
                        div = arg / larg;
                        sum += div * div
                    } else sum += arg
                }
                return larg === Infinity ? Infinity : larg * Math.sqrt(sum)
            }
        })
    }, {
        "./$.def": 209
    }],
    292: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S + $def.F * require("./$.fails")(function() {
            return Math.imul(4294967295, 5) != -5
        }), "Math", {
            imul: function imul(x, y) {
                var UINT16 = 65535,
                    xn = +x,
                    yn = +y,
                    xl = UINT16 & xn,
                    yl = UINT16 & yn;
                return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0)
            }
        })
    }, {
        "./$.def": 209,
        "./$.fails": 214
    }],
    293: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S, "Math", {
            log10: function log10(x) {
                return Math.log(x) / Math.LN10
            }
        })
    }, {
        "./$.def": 209
    }],
    294: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S, "Math", {
            log1p: require("./$.log1p")
        })
    }, {
        "./$.def": 209,
        "./$.log1p": 237
    }],
    295: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S, "Math", {
            log2: function log2(x) {
                return Math.log(x) / Math.LN2
            }
        })
    }, {
        "./$.def": 209
    }],
    296: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S, "Math", {
            sign: require("./$.sign")
        })
    }, {
        "./$.def": 209,
        "./$.sign": 251
    }],
    297: [function(require, module, exports) {
        var $def = require("./$.def"),
            expm1 = require("./$.expm1"),
            exp = Math.exp;
        $def($def.S, "Math", {
            sinh: function sinh(x) {
                return Math.abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2)
            }
        })
    }, {
        "./$.def": 209,
        "./$.expm1": 213
    }],
    298: [function(require, module, exports) {
        var $def = require("./$.def"),
            expm1 = require("./$.expm1"),
            exp = Math.exp;
        $def($def.S, "Math", {
            tanh: function tanh(x) {
                var a = expm1(x = +x),
                    b = expm1(-x);
                return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x))
            }
        })
    }, {
        "./$.def": 209,
        "./$.expm1": 213
    }],
    299: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S, "Math", {
            trunc: function trunc(it) {
                return (it > 0 ? Math.floor : Math.ceil)(it)
            }
        })
    }, {
        "./$.def": 209
    }],
    300: [function(require, module, exports) {
        "use strict";
        var $ = require("./$"),
            global = require("./$.global"),
            has = require("./$.has"),
            cof = require("./$.cof"),
            isObject = require("./$.is-object"),
            fails = require("./$.fails"),
            NUMBER = "Number",
            $Number = global[NUMBER],
            Base = $Number,
            proto = $Number.prototype,
            BROKEN_COF = cof($.create(proto)) == NUMBER;
        var toPrimitive = function(it) {
            var fn, val;
            if (typeof(fn = it.valueOf) == "function" && !isObject(val = fn.call(it))) return val;
            if (typeof(fn = it.toString) == "function" && !isObject(val = fn.call(it))) return val;
            throw TypeError("Can't convert object to number")
        };
        var toNumber = function(it) {
            if (isObject(it)) it = toPrimitive(it);
            if (typeof it == "string" && it.length > 2 && it.charCodeAt(0) == 48) {
                var binary = false;
                switch (it.charCodeAt(1)) {
                    case 66:
                    case 98:
                        binary = true;
                    case 79:
                    case 111:
                        return parseInt(it.slice(2), binary ? 2 : 8)
                }
            }
            return +it
        };
        if (!($Number("0o1") && $Number("0b1"))) {
            $Number = function Number(it) {
                var that = this;
                return that instanceof $Number && (BROKEN_COF ? fails(function() {
                    proto.valueOf.call(that)
                }) : cof(that) != NUMBER) ? new Base(toNumber(it)) : toNumber(it)
            };
            $.each.call(require("./$.support-desc") ? $.getNames(Base) : ("MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY," + "EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER," + "MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger").split(","), function(key) {
                if (has(Base, key) && !has($Number, key)) {
                    $.setDesc($Number, key, $.getDesc(Base, key))
                }
            });
            $Number.prototype = proto;
            proto.constructor = $Number;
            require("./$.redef")(global, NUMBER, $Number)
        }
    }, {
        "./$": 234,
        "./$.cof": 202,
        "./$.fails": 214,
        "./$.global": 219,
        "./$.has": 220,
        "./$.is-object": 227,
        "./$.redef": 246,
        "./$.support-desc": 259
    }],
    301: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S, "Number", {
            EPSILON: Math.pow(2, -52)
        })
    }, {
        "./$.def": 209
    }],
    302: [function(require, module, exports) {
        var $def = require("./$.def"),
            _isFinite = require("./$.global").isFinite;
        $def($def.S, "Number", {
            isFinite: function isFinite(it) {
                return typeof it == "number" && _isFinite(it)
            }
        })
    }, {
        "./$.def": 209,
        "./$.global": 219
    }],
    303: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S, "Number", {
            isInteger: require("./$.is-integer")
        })
    }, {
        "./$.def": 209,
        "./$.is-integer": 226
    }],
    304: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S, "Number", {
            isNaN: function isNaN(number) {
                return number != number
            }
        })
    }, {
        "./$.def": 209
    }],
    305: [function(require, module, exports) {
        var $def = require("./$.def"),
            isInteger = require("./$.is-integer"),
            abs = Math.abs;
        $def($def.S, "Number", {
            isSafeInteger: function isSafeInteger(number) {
                return isInteger(number) && abs(number) <= 9007199254740991
            }
        })
    }, {
        "./$.def": 209,
        "./$.is-integer": 226
    }],
    306: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S, "Number", {
            MAX_SAFE_INTEGER: 9007199254740991
        })
    }, {
        "./$.def": 209
    }],
    307: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S, "Number", {
            MIN_SAFE_INTEGER: -9007199254740991
        })
    }, {
        "./$.def": 209
    }],
    308: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S, "Number", {
            parseFloat: parseFloat
        })
    }, {
        "./$.def": 209
    }],
    309: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S, "Number", {
            parseInt: parseInt
        })
    }, {
        "./$.def": 209
    }],
    310: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S + $def.F, "Object", {
            assign: require("./$.assign")
        })
    }, {
        "./$.assign": 200,
        "./$.def": 209
    }],
    311: [function(require, module, exports) {
        var isObject = require("./$.is-object");
        require("./$.object-sap")("freeze", function($freeze) {
            return function freeze(it) {
                return $freeze && isObject(it) ? $freeze(it) : it
            }
        })
    }, {
        "./$.is-object": 227,
        "./$.object-sap": 240
    }],
    312: [function(require, module, exports) {
        var toIObject = require("./$.to-iobject");
        require("./$.object-sap")("getOwnPropertyDescriptor", function($getOwnPropertyDescriptor) {
            return function getOwnPropertyDescriptor(it, key) {
                return $getOwnPropertyDescriptor(toIObject(it), key)
            }
        })
    }, {
        "./$.object-sap": 240,
        "./$.to-iobject": 264
    }],
    313: [function(require, module, exports) {
        require("./$.object-sap")("getOwnPropertyNames", function() {
            return require("./$.get-names").get
        })
    }, {
        "./$.get-names": 218,
        "./$.object-sap": 240
    }],
    314: [function(require, module, exports) {
        var toObject = require("./$.to-object");
        require("./$.object-sap")("getPrototypeOf", function($getPrototypeOf) {
            return function getPrototypeOf(it) {
                return $getPrototypeOf(toObject(it))
            }
        })
    }, {
        "./$.object-sap": 240,
        "./$.to-object": 266
    }],
    315: [function(require, module, exports) {
        var isObject = require("./$.is-object");
        require("./$.object-sap")("isExtensible", function($isExtensible) {
            return function isExtensible(it) {
                return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false
            }
        })
    }, {
        "./$.is-object": 227,
        "./$.object-sap": 240
    }],
    316: [function(require, module, exports) {
        var isObject = require("./$.is-object");
        require("./$.object-sap")("isFrozen", function($isFrozen) {
            return function isFrozen(it) {
                return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true
            }
        })
    }, {
        "./$.is-object": 227,
        "./$.object-sap": 240
    }],
    317: [function(require, module, exports) {
        var isObject = require("./$.is-object");
        require("./$.object-sap")("isSealed", function($isSealed) {
            return function isSealed(it) {
                return isObject(it) ? $isSealed ? $isSealed(it) : false : true
            }
        })
    }, {
        "./$.is-object": 227,
        "./$.object-sap": 240
    }],
    318: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S, "Object", {
            is: require("./$.same")
        })
    }, {
        "./$.def": 209,
        "./$.same": 248
    }],
    319: [function(require, module, exports) {
        var toObject = require("./$.to-object");
        require("./$.object-sap")("keys", function($keys) {
            return function keys(it) {
                return $keys(toObject(it))
            }
        })
    }, {
        "./$.object-sap": 240,
        "./$.to-object": 266
    }],
    320: [function(require, module, exports) {
        var isObject = require("./$.is-object");
        require("./$.object-sap")("preventExtensions", function($preventExtensions) {
            return function preventExtensions(it) {
                return $preventExtensions && isObject(it) ? $preventExtensions(it) : it
            }
        })
    }, {
        "./$.is-object": 227,
        "./$.object-sap": 240
    }],
    321: [function(require, module, exports) {
        var isObject = require("./$.is-object");
        require("./$.object-sap")("seal", function($seal) {
            return function seal(it) {
                return $seal && isObject(it) ? $seal(it) : it
            }
        })
    }, {
        "./$.is-object": 227,
        "./$.object-sap": 240
    }],
    322: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S, "Object", {
            setPrototypeOf: require("./$.set-proto").set
        })
    }, {
        "./$.def": 209,
        "./$.set-proto": 249
    }],
    323: [function(require, module, exports) {
        "use strict";
        var classof = require("./$.classof"),
            test = {};
        test[require("./$.wks")("toStringTag")] = "z";
        if (test + "" != "[object z]") {
            require("./$.redef")(Object.prototype, "toString", function toString() {
                return "[object " + classof(this) + "]"
            }, true)
        }
    }, {
        "./$.classof": 201,
        "./$.redef": 246,
        "./$.wks": 269
    }],
    324: [function(require, module, exports) {
        "use strict";
        var $ = require("./$"),
            LIBRARY = require("./$.library"),
            global = require("./$.global"),
            ctx = require("./$.ctx"),
            classof = require("./$.classof"),
            $def = require("./$.def"),
            isObject = require("./$.is-object"),
            anObject = require("./$.an-object"),
            aFunction = require("./$.a-function"),
            strictNew = require("./$.strict-new"),
            forOf = require("./$.for-of"),
            setProto = require("./$.set-proto").set,
            same = require("./$.same"),
            species = require("./$.species"),
            SPECIES = require("./$.wks")("species"),
            RECORD = require("./$.uid")("record"),
            asap = require("./$.microtask"),
            PROMISE = "Promise",
            process = global.process,
            isNode = classof(process) == "process",
            P = global[PROMISE],
            Wrapper;
        var testResolve = function(sub) {
            var test = new P(function() {});
            if (sub) test.constructor = Object;
            return P.resolve(test) === test
        };
        var useNative = function() {
            var works = false;

            function P2(x) {
                var self = new P(x);
                setProto(self, P2.prototype);
                return self
            }
            try {
                works = P && P.resolve && testResolve();
                setProto(P2, P);
                P2.prototype = $.create(P.prototype, {
                    constructor: {
                        value: P2
                    }
                });
                if (!(P2.resolve(5).then(function() {}) instanceof P2)) {
                    works = false
                }
                if (works && require("./$.support-desc")) {
                    var thenableThenGotten = false;
                    P.resolve($.setDesc({}, "then", {
                        get: function() {
                            thenableThenGotten = true
                        }
                    }));
                    works = thenableThenGotten
                }
            } catch (e) {
                works = false
            }
            return works
        }();
        var isPromise = function(it) {
            return isObject(it) && (useNative ? classof(it) == "Promise" : RECORD in it)
        };
        var sameConstructor = function(a, b) {
            if (LIBRARY && a === P && b === Wrapper) return true;
            return same(a, b)
        };
        var getConstructor = function(C) {
            var S = anObject(C)[SPECIES];
            return S != undefined ? S : C
        };
        var isThenable = function(it) {
            var then;
            return isObject(it) && typeof(then = it.then) == "function" ? then : false
        };
        var notify = function(record, isReject) {
            if (record.n) return;
            record.n = true;
            var chain = record.c;
            asap(function() {
                var value = record.v,
                    ok = record.s == 1,
                    i = 0;
                var run = function(react) {
                    var cb = ok ? react.ok : react.fail,
                        ret, then;
                    try {
                        if (cb) {
                            if (!ok) record.h = true;
                            ret = cb === true ? value : cb(value);
                            if (ret === react.P) {
                                react.rej(TypeError("Promise-chain cycle"))
                            } else if (then = isThenable(ret)) {
                                then.call(ret, react.res, react.rej)
                            } else react.res(ret)
                        } else react.rej(value)
                    } catch (err) {
                        react.rej(err)
                    }
                };
                while (chain.length > i) run(chain[i++]);
                chain.length = 0;
                record.n = false;
                if (isReject) setTimeout(function() {
                    if (isUnhandled(record.p)) {
                        if (isNode) {
                            process.emit("unhandledRejection", value, record.p)
                        } else if (global.console && console.error) {
                            console.error("Unhandled promise rejection", value)
                        }
                    }
                    record.a = undefined
                }, 1)
            })
        };
        var isUnhandled = function(promise) {
            var record = promise[RECORD],
                chain = record.a || record.c,
                i = 0,
                react;
            if (record.h) return false;
            while (chain.length > i) {
                react = chain[i++];
                if (react.fail || !isUnhandled(react.P)) return false
            }
            return true
        };
        var $reject = function(value) {
            var record = this;
            if (record.d) return;
            record.d = true;
            record = record.r || record;
            record.v = value;
            record.s = 2;
            record.a = record.c.slice();
            notify(record, true)
        };
        var $resolve = function(value) {
            var record = this,
                then;
            if (record.d) return;
            record.d = true;
            record = record.r || record;
            try {
                if (then = isThenable(value)) {
                    asap(function() {
                        var wrapper = {
                            r: record,
                            d: false
                        };
                        try {
                            then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1))
                        } catch (e) {
                            $reject.call(wrapper, e)
                        }
                    })
                } else {
                    record.v = value;
                    record.s = 1;
                    notify(record, false)
                }
            } catch (e) {
                $reject.call({
                    r: record,
                    d: false
                }, e)
            }
        };
        if (!useNative) {
            P = function Promise(executor) {
                aFunction(executor);
                var record = {
                    p: strictNew(this, P, PROMISE),
                    c: [],
                    a: undefined,
                    s: 0,
                    d: false,
                    v: undefined,
                    h: false,
                    n: false
                };
                this[RECORD] = record;
                try {
                    executor(ctx($resolve, record, 1), ctx($reject, record, 1))
                } catch (err) {
                    $reject.call(record, err)
                }
            };
            require("./$.mix")(P.prototype, {
                then: function then(onFulfilled, onRejected) {
                    var S = anObject(anObject(this).constructor)[SPECIES];
                    var react = {
                        ok: typeof onFulfilled == "function" ? onFulfilled : true,
                        fail: typeof onRejected == "function" ? onRejected : false
                    };
                    var promise = react.P = new(S != undefined ? S : P)(function(res, rej) {
                        react.res = aFunction(res);
                        react.rej = aFunction(rej)
                    });
                    var record = this[RECORD];
                    record.c.push(react);
                    if (record.a) record.a.push(react);
                    if (record.s) notify(record, false);
                    return promise
                },
                "catch": function(onRejected) {
                    return this.then(undefined, onRejected)
                }
            })
        }
        $def($def.G + $def.W + $def.F * !useNative, {
            Promise: P
        });
        require("./$.tag")(P, PROMISE);
        species(P);
        species(Wrapper = require("./$.core")[PROMISE]);
        $def($def.S + $def.F * !useNative, PROMISE, {
            reject: function reject(r) {
                return new this(function(res, rej) {
                    rej(r)
                })
            }
        });
        $def($def.S + $def.F * (!useNative || testResolve(true)), PROMISE, {
            resolve: function resolve(x) {
                return isPromise(x) && sameConstructor(x.constructor, this) ? x : new this(function(res) {
                    res(x)
                })
            }
        });
        $def($def.S + $def.F * !(useNative && require("./$.iter-detect")(function(iter) {
            P.all(iter)["catch"](function() {})
        })), PROMISE, {
            all: function all(iterable) {
                var C = getConstructor(this),
                    values = [];
                return new C(function(res, rej) {
                    forOf(iterable, false, values.push, values);
                    var remaining = values.length,
                        results = Array(remaining);
                    if (remaining) $.each.call(values, function(promise, index) {
                        C.resolve(promise).then(function(value) {
                            results[index] = value;
                            --remaining || res(results)
                        }, rej)
                    });
                    else res(results)
                })
            },
            race: function race(iterable) {
                var C = getConstructor(this);
                return new C(function(res, rej) {
                    forOf(iterable, false, function(promise) {
                        C.resolve(promise).then(res, rej)
                    })
                })
            }
        })
    }, {
        "./$": 234,
        "./$.a-function": 196,
        "./$.an-object": 197,
        "./$.classof": 201,
        "./$.core": 207,
        "./$.ctx": 208,
        "./$.def": 209,
        "./$.for-of": 217,
        "./$.global": 219,
        "./$.is-object": 227,
        "./$.iter-detect": 231,
        "./$.library": 236,
        "./$.microtask": 238,
        "./$.mix": 239,
        "./$.same": 248,
        "./$.set-proto": 249,
        "./$.species": 252,
        "./$.strict-new": 253,
        "./$.support-desc": 259,
        "./$.tag": 260,
        "./$.uid": 267,
        "./$.wks": 269
    }],
    325: [function(require, module, exports) {
        var $def = require("./$.def"),
            _apply = Function.apply;
        $def($def.S, "Reflect", {
            apply: function apply(target, thisArgument, argumentsList) {
                return _apply.call(target, thisArgument, argumentsList)
            }
        })
    }, {
        "./$.def": 209
    }],
    326: [function(require, module, exports) {
        var $ = require("./$"),
            $def = require("./$.def"),
            aFunction = require("./$.a-function"),
            anObject = require("./$.an-object"),
            isObject = require("./$.is-object"),
            bind = Function.bind || require("./$.core").Function.prototype.bind;
        $def($def.S + $def.F * require("./$.fails")(function() {
            function F() {}
            return !(Reflect.construct(function() {}, [], F) instanceof F)
        }), "Reflect", {
            construct: function construct(Target, args) {
                aFunction(Target);
                var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
                if (Target == newTarget) {
                    if (args != undefined) switch (anObject(args).length) {
                        case 0:
                            return new Target;
                        case 1:
                            return new Target(args[0]);
                        case 2:
                            return new Target(args[0], args[1]);
                        case 3:
                            return new Target(args[0], args[1], args[2]);
                        case 4:
                            return new Target(args[0], args[1], args[2], args[3])
                    }
                    var $args = [null];
                    $args.push.apply($args, args);
                    return new(bind.apply(Target, $args))
                }
                var proto = newTarget.prototype,
                    instance = $.create(isObject(proto) ? proto : Object.prototype),
                    result = Function.apply.call(Target, instance, args);
                return isObject(result) ? result : instance
            }
        })
    }, {
        "./$": 234,
        "./$.a-function": 196,
        "./$.an-object": 197,
        "./$.core": 207,
        "./$.def": 209,
        "./$.fails": 214,
        "./$.is-object": 227
    }],
    327: [function(require, module, exports) {
        var $ = require("./$"),
            $def = require("./$.def"),
            anObject = require("./$.an-object");
        $def($def.S + $def.F * require("./$.fails")(function() {
            Reflect.defineProperty($.setDesc({}, 1, {
                value: 1
            }), 1, {
                value: 2
            })
        }), "Reflect", {
            defineProperty: function defineProperty(target, propertyKey, attributes) {
                anObject(target);
                try {
                    $.setDesc(target, propertyKey, attributes);
                    return true
                } catch (e) {
                    return false
                }
            }
        })
    }, {
        "./$": 234,
        "./$.an-object": 197,
        "./$.def": 209,
        "./$.fails": 214
    }],
    328: [function(require, module, exports) {
        var $def = require("./$.def"),
            getDesc = require("./$").getDesc,
            anObject = require("./$.an-object");
        $def($def.S, "Reflect", {
            deleteProperty: function deleteProperty(target, propertyKey) {
                var desc = getDesc(anObject(target), propertyKey);
                return desc && !desc.configurable ? false : delete target[propertyKey]
            }
        })
    }, {
        "./$": 234,
        "./$.an-object": 197,
        "./$.def": 209
    }],
    329: [function(require, module, exports) {
        "use strict";
        var $def = require("./$.def"),
            anObject = require("./$.an-object");
        var Enumerate = function(iterated) {
            this._t = anObject(iterated);
            this._i = 0;
            var keys = this._k = [],
                key;
            for (key in iterated) keys.push(key)
        };
        require("./$.iter-create")(Enumerate, "Object", function() {
            var that = this,
                keys = that._k,
                key;
            do {
                if (that._i >= keys.length) return {
                    value: undefined,
                    done: true
                }
            } while (!((key = keys[that._i++]) in that._t));
            return {
                value: key,
                done: false
            }
        });
        $def($def.S, "Reflect", {
            enumerate: function enumerate(target) {
                return new Enumerate(target)
            }
        })
    }, {
        "./$.an-object": 197,
        "./$.def": 209,
        "./$.iter-create": 229
    }],
    330: [function(require, module, exports) {
        var $ = require("./$"),
            $def = require("./$.def"),
            anObject = require("./$.an-object");
        $def($def.S, "Reflect", {
            getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
                return $.getDesc(anObject(target), propertyKey)
            }
        })
    }, {
        "./$": 234,
        "./$.an-object": 197,
        "./$.def": 209
    }],
    331: [function(require, module, exports) {
        var $def = require("./$.def"),
            getProto = require("./$").getProto,
            anObject = require("./$.an-object");
        $def($def.S, "Reflect", {
            getPrototypeOf: function getPrototypeOf(target) {
                return getProto(anObject(target))
            }
        })
    }, {
        "./$": 234,
        "./$.an-object": 197,
        "./$.def": 209
    }],
    332: [function(require, module, exports) {
        var $ = require("./$"),
            has = require("./$.has"),
            $def = require("./$.def"),
            isObject = require("./$.is-object"),
            anObject = require("./$.an-object");

        function get(target, propertyKey) {
            var receiver = arguments.length < 3 ? target : arguments[2],
                desc, proto;
            if (anObject(target) === receiver) return target[propertyKey];
            if (desc = $.getDesc(target, propertyKey)) return has(desc, "value") ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
            if (isObject(proto = $.getProto(target))) return get(proto, propertyKey, receiver)
        }
        $def($def.S, "Reflect", {
            get: get
        })
    }, {
        "./$": 234,
        "./$.an-object": 197,
        "./$.def": 209,
        "./$.has": 220,
        "./$.is-object": 227
    }],
    333: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S, "Reflect", {
            has: function has(target, propertyKey) {
                return propertyKey in target
            }
        })
    }, {
        "./$.def": 209
    }],
    334: [function(require, module, exports) {
        var $def = require("./$.def"),
            anObject = require("./$.an-object"),
            $isExtensible = Object.isExtensible;
        $def($def.S, "Reflect", {
            isExtensible: function isExtensible(target) {
                anObject(target);
                return $isExtensible ? $isExtensible(target) : true
            }
        })
    }, {
        "./$.an-object": 197,
        "./$.def": 209
    }],
    335: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.S, "Reflect", {
            ownKeys: require("./$.own-keys")
        })
    }, {
        "./$.def": 209,
        "./$.own-keys": 242
    }],
    336: [function(require, module, exports) {
        var $def = require("./$.def"),
            anObject = require("./$.an-object"),
            $preventExtensions = Object.preventExtensions;
        $def($def.S, "Reflect", {
            preventExtensions: function preventExtensions(target) {
                anObject(target);
                try {
                    if ($preventExtensions) $preventExtensions(target);
                    return true
                } catch (e) {
                    return false
                }
            }
        })
    }, {
        "./$.an-object": 197,
        "./$.def": 209
    }],
    337: [function(require, module, exports) {
        var $def = require("./$.def"),
            setProto = require("./$.set-proto");
        if (setProto) $def($def.S, "Reflect", {
            setPrototypeOf: function setPrototypeOf(target, proto) {
                setProto.check(target, proto);
                try {
                    setProto.set(target, proto);
                    return true
                } catch (e) {
                    return false
                }
            }
        })
    }, {
        "./$.def": 209,
        "./$.set-proto": 249
    }],
    338: [function(require, module, exports) {
        var $ = require("./$"),
            has = require("./$.has"),
            $def = require("./$.def"),
            createDesc = require("./$.property-desc"),
            anObject = require("./$.an-object"),
            isObject = require("./$.is-object");

        function set(target, propertyKey, V) {
            var receiver = arguments.length < 4 ? target : arguments[3],
                ownDesc = $.getDesc(anObject(target), propertyKey),
                existingDescriptor, proto;
            if (!ownDesc) {
                if (isObject(proto = $.getProto(target))) {
                    return set(proto, propertyKey, V, receiver)
                }
                ownDesc = createDesc(0)
            }
            if (has(ownDesc, "value")) {
                if (ownDesc.writable === false || !isObject(receiver)) return false;
                existingDescriptor = $.getDesc(receiver, propertyKey) || createDesc(0);
                existingDescriptor.value = V;
                $.setDesc(receiver, propertyKey, existingDescriptor);
                return true
            }
            return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true)
        }
        $def($def.S, "Reflect", {
            set: set
        })
    }, {
        "./$": 234,
        "./$.an-object": 197,
        "./$.def": 209,
        "./$.has": 220,
        "./$.is-object": 227,
        "./$.property-desc": 245
    }],
    339: [function(require, module, exports) {
        var $ = require("./$"),
            global = require("./$.global"),
            cof = require("./$.cof"),
            $flags = require("./$.flags"),
            $RegExp = global.RegExp,
            Base = $RegExp,
            proto = $RegExp.prototype,
            re = /a/g,
            CORRECT_NEW = new $RegExp(re) !== re,
            ALLOWS_RE_WITH_FLAGS = function() {
                try {
                    return $RegExp(re, "i") == "/a/i"
                } catch (e) {}
            }();
        if (require("./$.support-desc")) {
            if (!CORRECT_NEW || !ALLOWS_RE_WITH_FLAGS) {
                $RegExp = function RegExp(pattern, flags) {
                    var patternIsRegExp = cof(pattern) == "RegExp",
                        flagsIsUndefined = flags === undefined;
                    if (!(this instanceof $RegExp) && patternIsRegExp && flagsIsUndefined) return pattern;
                    return CORRECT_NEW ? new Base(patternIsRegExp && !flagsIsUndefined ? pattern.source : pattern, flags) : new Base(patternIsRegExp ? pattern.source : pattern, patternIsRegExp && flagsIsUndefined ? $flags.call(pattern) : flags)
                };
                $.each.call($.getNames(Base), function(key) {
                    key in $RegExp || $.setDesc($RegExp, key, {
                        configurable: true,
                        get: function() {
                            return Base[key]
                        },
                        set: function(it) {
                            Base[key] = it
                        }
                    })
                });
                proto.constructor = $RegExp;
                $RegExp.prototype = proto;
                require("./$.redef")(global, "RegExp", $RegExp)
            }
        }
        require("./$.species")($RegExp)
    }, {
        "./$": 234,
        "./$.cof": 202,
        "./$.flags": 216,
        "./$.global": 219,
        "./$.redef": 246,
        "./$.species": 252,
        "./$.support-desc": 259
    }],
    340: [function(require, module, exports) {
        var $ = require("./$");
        if (require("./$.support-desc") && /./g.flags != "g") $.setDesc(RegExp.prototype, "flags", {
            configurable: true,
            get: require("./$.flags")
        })
    }, {
        "./$": 234,
        "./$.flags": 216,
        "./$.support-desc": 259
    }],
    341: [function(require, module, exports) {
        require("./$.fix-re-wks")("match", 1, function(defined, MATCH) {
            return function match(regexp) {
                "use strict";
                var O = defined(this),
                    fn = regexp == undefined ? undefined : regexp[MATCH];
                return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O))
            }
        })
    }, {
        "./$.fix-re-wks": 215
    }],
    342: [function(require, module, exports) {
        require("./$.fix-re-wks")("replace", 2, function(defined, REPLACE, $replace) {
            return function replace(searchValue, replaceValue) {
                "use strict";
                var O = defined(this),
                    fn = searchValue == undefined ? undefined : searchValue[REPLACE];
                return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue)
            }
        })
    }, {
        "./$.fix-re-wks": 215
    }],
    343: [function(require, module, exports) {
        require("./$.fix-re-wks")("search", 1, function(defined, SEARCH) {
            return function search(regexp) {
                "use strict";
                var O = defined(this),
                    fn = regexp == undefined ? undefined : regexp[SEARCH];
                return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O))
            }
        })
    }, {
        "./$.fix-re-wks": 215
    }],
    344: [function(require, module, exports) {
        require("./$.fix-re-wks")("split", 2, function(defined, SPLIT, $split) {
            return function split(separator, limit) {
                "use strict";
                var O = defined(this),
                    fn = separator == undefined ? undefined : separator[SPLIT];
                return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit)
            }
        })
    }, {
        "./$.fix-re-wks": 215
    }],
    345: [function(require, module, exports) {
        "use strict";
        var strong = require("./$.collection-strong");
        require("./$.collection")("Set", function(get) {
            return function Set() {
                return get(this, arguments[0])
            }
        }, {
            add: function add(value) {
                return strong.def(this, value = value === 0 ? 0 : value, value)
            }
        }, strong)
    }, {
        "./$.collection": 206,
        "./$.collection-strong": 203
    }],
    346: [function(require, module, exports) {
        "use strict";
        var $def = require("./$.def"),
            $at = require("./$.string-at")(false);
        $def($def.P, "String", {
            codePointAt: function codePointAt(pos) {
                return $at(this, pos)
            }
        })
    }, {
        "./$.def": 209,
        "./$.string-at": 254
    }],
    347: [function(require, module, exports) {
        "use strict";
        var $def = require("./$.def"),
            toLength = require("./$.to-length"),
            context = require("./$.string-context");
        $def($def.P + $def.F * !require("./$.fails")(function() {
            "q".endsWith(/./)
        }), "String", {
            endsWith: function endsWith(searchString) {
                var that = context(this, searchString, "endsWith"),
                    endPosition = arguments[1],
                    len = toLength(that.length),
                    end = endPosition === undefined ? len : Math.min(toLength(endPosition), len),
                    search = String(searchString);
                return that.slice(end - search.length, end) === search
            }
        })
    }, {
        "./$.def": 209,
        "./$.fails": 214,
        "./$.string-context": 255,
        "./$.to-length": 265
    }],
    348: [function(require, module, exports) {
        var $def = require("./$.def"),
            toIndex = require("./$.to-index"),
            fromCharCode = String.fromCharCode,
            $fromCodePoint = String.fromCodePoint;
        $def($def.S + $def.F * (!!$fromCodePoint && $fromCodePoint.length != 1), "String", {
            fromCodePoint: function fromCodePoint(x) {
                var res = [],
                    len = arguments.length,
                    i = 0,
                    code;
                while (len > i) {
                    code = +arguments[i++];
                    if (toIndex(code, 1114111) !== code) throw RangeError(code + " is not a valid code point");
                    res.push(code < 65536 ? fromCharCode(code) : fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320))
                }
                return res.join("")
            }
        })
    }, {
        "./$.def": 209,
        "./$.to-index": 262
    }],
    349: [function(require, module, exports) {
        "use strict";
        var $def = require("./$.def"),
            context = require("./$.string-context");
        $def($def.P, "String", {
            includes: function includes(searchString) {
                return !!~context(this, searchString, "includes").indexOf(searchString, arguments[1])
            }
        })
    }, {
        "./$.def": 209,
        "./$.string-context": 255
    }],
    350: [function(require, module, exports) {
        "use strict";
        var $at = require("./$.string-at")(true);
        require("./$.iter-define")(String, "String", function(iterated) {
            this._t = String(iterated);
            this._i = 0
        }, function() {
            var O = this._t,
                index = this._i,
                point;
            if (index >= O.length) return {
                value: undefined,
                done: true
            };
            point = $at(O, index);
            this._i += point.length;
            return {
                value: point,
                done: false
            }
        })
    }, {
        "./$.iter-define": 230,
        "./$.string-at": 254
    }],
    351: [function(require, module, exports) {
        var $def = require("./$.def"),
            toIObject = require("./$.to-iobject"),
            toLength = require("./$.to-length");
        $def($def.S, "String", {
            raw: function raw(callSite) {
                var tpl = toIObject(callSite.raw),
                    len = toLength(tpl.length),
                    sln = arguments.length,
                    res = [],
                    i = 0;
                while (len > i) {
                    res.push(String(tpl[i++]));
                    if (i < sln) res.push(String(arguments[i]))
                }
                return res.join("")
            }
        })
    }, {
        "./$.def": 209,
        "./$.to-iobject": 264,
        "./$.to-length": 265
    }],
    352: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.P, "String", {
            repeat: require("./$.string-repeat")
        })
    }, {
        "./$.def": 209,
        "./$.string-repeat": 257
    }],
    353: [function(require, module, exports) {
        "use strict";
        var $def = require("./$.def"),
            toLength = require("./$.to-length"),
            context = require("./$.string-context");
        $def($def.P + $def.F * !require("./$.fails")(function() {
            "q".startsWith(/./)
        }), "String", {
            startsWith: function startsWith(searchString) {
                var that = context(this, searchString, "startsWith"),
                    index = toLength(Math.min(arguments[1], that.length)),
                    search = String(searchString);
                return that.slice(index, index + search.length) === search
            }
        })
    }, {
        "./$.def": 209,
        "./$.fails": 214,
        "./$.string-context": 255,
        "./$.to-length": 265
    }],
    354: [function(require, module, exports) {
        "use strict";
        require("./$.string-trim")("trim", function($trim) {
            return function trim() {
                return $trim(this, 3)
            }
        })
    }, {
        "./$.string-trim": 258
    }],
    355: [function(require, module, exports) {
        "use strict";
        var $ = require("./$"),
            global = require("./$.global"),
            has = require("./$.has"),
            SUPPORT_DESC = require("./$.support-desc"),
            $def = require("./$.def"),
            $redef = require("./$.redef"),
            shared = require("./$.shared"),
            setTag = require("./$.tag"),
            uid = require("./$.uid"),
            wks = require("./$.wks"),
            keyOf = require("./$.keyof"),
            $names = require("./$.get-names"),
            enumKeys = require("./$.enum-keys"),
            isObject = require("./$.is-object"),
            anObject = require("./$.an-object"),
            toIObject = require("./$.to-iobject"),
            createDesc = require("./$.property-desc"),
            getDesc = $.getDesc,
            setDesc = $.setDesc,
            _create = $.create,
            getNames = $names.get,
            $Symbol = global.Symbol,
            setter = false,
            HIDDEN = wks("_hidden"),
            isEnum = $.isEnum,
            SymbolRegistry = shared("symbol-registry"),
            AllSymbols = shared("symbols"),
            useNative = typeof $Symbol == "function",
            ObjectProto = Object.prototype;
        var setSymbolDesc = SUPPORT_DESC ? function() {
            try {
                return _create(setDesc({}, HIDDEN, {
                    get: function() {
                        return setDesc(this, HIDDEN, {
                            value: false
                        })[HIDDEN]
                    }
                }))[HIDDEN] || setDesc
            } catch (e) {
                return function(it, key, D) {
                    var protoDesc = getDesc(ObjectProto, key);
                    if (protoDesc) delete ObjectProto[key];
                    setDesc(it, key, D);
                    if (protoDesc && it !== ObjectProto) setDesc(ObjectProto, key, protoDesc)
                }
            }
        }() : setDesc;
        var wrap = function(tag) {
            var sym = AllSymbols[tag] = _create($Symbol.prototype);
            sym._k = tag;
            SUPPORT_DESC && setter && setSymbolDesc(ObjectProto, tag, {
                configurable: true,
                set: function(value) {
                    if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
                    setSymbolDesc(this, tag, createDesc(1, value))
                }
            });
            return sym
        };
        var $defineProperty = function defineProperty(it, key, D) {
            if (D && has(AllSymbols, key)) {
                if (!D.enumerable) {
                    if (!has(it, HIDDEN)) setDesc(it, HIDDEN, createDesc(1, {}));
                    it[HIDDEN][key] = true
                } else {
                    if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
                    D = _create(D, {
                        enumerable: createDesc(0, false)
                    })
                }
                return setSymbolDesc(it, key, D)
            }
            return setDesc(it, key, D)
        };
        var $defineProperties = function defineProperties(it, P) {
            anObject(it);
            var keys = enumKeys(P = toIObject(P)),
                i = 0,
                l = keys.length,
                key;
            while (l > i) $defineProperty(it, key = keys[i++], P[key]);
            return it
        };
        var $create = function create(it, P) {
            return P === undefined ? _create(it) : $defineProperties(_create(it), P)
        };
        var $propertyIsEnumerable = function propertyIsEnumerable(key) {
            var E = isEnum.call(this, key);
            return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true
        };
        var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
            var D = getDesc(it = toIObject(it), key);
            if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
            return D
        };
        var $getOwnPropertyNames = function getOwnPropertyNames(it) {
            var names = getNames(toIObject(it)),
                result = [],
                i = 0,
                key;
            while (names.length > i)
                if (!has(AllSymbols, key = names[i++]) && key != HIDDEN) result.push(key);
            return result
        };
        var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
            var names = getNames(toIObject(it)),
                result = [],
                i = 0,
                key;
            while (names.length > i)
                if (has(AllSymbols, key = names[i++])) result.push(AllSymbols[key]);
            return result
        };
        if (!useNative) {
            $Symbol = function Symbol() {
                if (this instanceof $Symbol) throw TypeError("Symbol is not a constructor");
                return wrap(uid(arguments[0]))
            };
            $redef($Symbol.prototype, "toString", function toString() {
                return this._k
            });
            $.create = $create;
            $.isEnum = $propertyIsEnumerable;
            $.getDesc = $getOwnPropertyDescriptor;
            $.setDesc = $defineProperty;
            $.setDescs = $defineProperties;
            $.getNames = $names.get = $getOwnPropertyNames;
            $.getSymbols = $getOwnPropertySymbols;
            if (SUPPORT_DESC && !require("./$.library")) {
                $redef(ObjectProto, "propertyIsEnumerable", $propertyIsEnumerable, true)
            }
        }
        if (!useNative || require("./$.fails")(function() {
                return JSON.stringify([{
                        a: $Symbol()
                    },
                    [$Symbol()]
                ]) != "[{},[null]]"
            })) $redef($Symbol.prototype, "toJSON", function toJSON() {
            if (useNative && isObject(this)) return this
        });
        var symbolStatics = {
            "for": function(key) {
                return has(SymbolRegistry, key += "") ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key)
            },
            keyFor: function keyFor(key) {
                return keyOf(SymbolRegistry, key)
            },
            useSetter: function() {
                setter = true
            },
            useSimple: function() {
                setter = false
            }
        };
        $.each.call(("hasInstance,isConcatSpreadable,iterator,match,replace,search," + "species,split,toPrimitive,toStringTag,unscopables").split(","), function(it) {
            var sym = wks(it);
            symbolStatics[it] = useNative ? sym : wrap(sym)
        });
        setter = true;
        $def($def.G + $def.W, {
            Symbol: $Symbol
        });
        $def($def.S, "Symbol", symbolStatics);
        $def($def.S + $def.F * !useNative, "Object", {
            create: $create,
            defineProperty: $defineProperty,
            defineProperties: $defineProperties,
            getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
            getOwnPropertyNames: $getOwnPropertyNames,
            getOwnPropertySymbols: $getOwnPropertySymbols
        });
        setTag($Symbol, "Symbol");
        setTag(Math, "Math", true);
        setTag(global.JSON, "JSON", true)
    }, {
        "./$": 234,
        "./$.an-object": 197,
        "./$.def": 209,
        "./$.enum-keys": 212,
        "./$.fails": 214,
        "./$.get-names": 218,
        "./$.global": 219,
        "./$.has": 220,
        "./$.is-object": 227,
        "./$.keyof": 235,
        "./$.library": 236,
        "./$.property-desc": 245,
        "./$.redef": 246,
        "./$.shared": 250,
        "./$.support-desc": 259,
        "./$.tag": 260,
        "./$.to-iobject": 264,
        "./$.uid": 267,
        "./$.wks": 269
    }],
    356: [function(require, module, exports) {
        "use strict";
        var $ = require("./$"),
            weak = require("./$.collection-weak"),
            isObject = require("./$.is-object"),
            has = require("./$.has"),
            frozenStore = weak.frozenStore,
            WEAK = weak.WEAK,
            isExtensible = Object.isExtensible || isObject,
            tmp = {};
        var $WeakMap = require("./$.collection")("WeakMap", function(get) {
            return function WeakMap() {
                return get(this, arguments[0])
            }
        }, {
            get: function get(key) {
                if (isObject(key)) {
                    if (!isExtensible(key)) return frozenStore(this).get(key);
                    if (has(key, WEAK)) return key[WEAK][this._i]
                }
            },
            set: function set(key, value) {
                return weak.def(this, key, value)
            }
        }, weak, true, true);
        if ((new $WeakMap).set((Object.freeze || Object)(tmp), 7).get(tmp) != 7) {
            $.each.call(["delete", "has", "get", "set"], function(key) {
                var proto = $WeakMap.prototype,
                    method = proto[key];
                require("./$.redef")(proto, key, function(a, b) {
                    if (isObject(a) && !isExtensible(a)) {
                        var result = frozenStore(this)[key](a, b);
                        return key == "set" ? this : result
                    }
                    return method.call(this, a, b)
                })
            })
        }
    }, {
        "./$": 234,
        "./$.collection": 206,
        "./$.collection-weak": 205,
        "./$.has": 220,
        "./$.is-object": 227,
        "./$.redef": 246
    }],
    357: [function(require, module, exports) {
        "use strict";
        var weak = require("./$.collection-weak");
        require("./$.collection")("WeakSet", function(get) {
            return function WeakSet() {
                return get(this, arguments[0])
            }
        }, {
            add: function add(value) {
                return weak.def(this, value, true)
            }
        }, weak, false, true)
    }, {
        "./$.collection": 206,
        "./$.collection-weak": 205
    }],
    358: [function(require, module, exports) {
        "use strict";
        var $def = require("./$.def"),
            $includes = require("./$.array-includes")(true);
        $def($def.P, "Array", {
            includes: function includes(el) {
                return $includes(this, el, arguments[1])
            }
        });
        require("./$.unscope")("includes")
    }, {
        "./$.array-includes": 198,
        "./$.def": 209,
        "./$.unscope": 268
    }],
    359: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.P, "Map", {
            toJSON: require("./$.collection-to-json")("Map")
        })
    }, {
        "./$.collection-to-json": 204,
        "./$.def": 209
    }],
    360: [function(require, module, exports) {
        var $def = require("./$.def"),
            $entries = require("./$.object-to-array")(true);
        $def($def.S, "Object", {
            entries: function entries(it) {
                return $entries(it)
            }
        })
    }, {
        "./$.def": 209,
        "./$.object-to-array": 241
    }],
    361: [function(require, module, exports) {
        var $ = require("./$"),
            $def = require("./$.def"),
            ownKeys = require("./$.own-keys"),
            toIObject = require("./$.to-iobject"),
            createDesc = require("./$.property-desc");
        $def($def.S, "Object", {
            getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
                var O = toIObject(object),
                    setDesc = $.setDesc,
                    getDesc = $.getDesc,
                    keys = ownKeys(O),
                    result = {},
                    i = 0,
                    key, D;
                while (keys.length > i) {
                    D = getDesc(O, key = keys[i++]);
                    if (key in result) setDesc(result, key, createDesc(0, D));
                    else result[key] = D
                }
                return result
            }
        })
    }, {
        "./$": 234,
        "./$.def": 209,
        "./$.own-keys": 242,
        "./$.property-desc": 245,
        "./$.to-iobject": 264
    }],
    362: [function(require, module, exports) {
        var $def = require("./$.def"),
            $values = require("./$.object-to-array")(false);
        $def($def.S, "Object", {
            values: function values(it) {
                return $values(it)
            }
        })
    }, {
        "./$.def": 209,
        "./$.object-to-array": 241
    }],
    363: [function(require, module, exports) {
        var $def = require("./$.def"),
            $re = require("./$.replacer")(/[\\^$*+?.()|[\]{}]/g, "\\$&");
        $def($def.S, "RegExp", {
            escape: function escape(it) {
                return $re(it)
            }
        })
    }, {
        "./$.def": 209,
        "./$.replacer": 247
    }],
    364: [function(require, module, exports) {
        var $def = require("./$.def");
        $def($def.P, "Set", {
            toJSON: require("./$.collection-to-json")("Set")
        })
    }, {
        "./$.collection-to-json": 204,
        "./$.def": 209
    }],
    365: [function(require, module, exports) {
        "use strict";
        var $def = require("./$.def"),
            $at = require("./$.string-at")(true);
        $def($def.P, "String", {
            at: function at(pos) {
                return $at(this, pos)
            }
        })
    }, {
        "./$.def": 209,
        "./$.string-at": 254
    }],
    366: [function(require, module, exports) {
        "use strict";
        var $def = require("./$.def"),
            $pad = require("./$.string-pad");
        $def($def.P, "String", {
            padLeft: function padLeft(maxLength) {
                return $pad(this, maxLength, arguments[1], true)
            }
        })
    }, {
        "./$.def": 209,
        "./$.string-pad": 256
    }],
    367: [function(require, module, exports) {
        "use strict";
        var $def = require("./$.def"),
            $pad = require("./$.string-pad");
        $def($def.P, "String", {
            padRight: function padRight(maxLength) {
                return $pad(this, maxLength, arguments[1], false)
            }
        })
    }, {
        "./$.def": 209,
        "./$.string-pad": 256
    }],
    368: [function(require, module, exports) {
        "use strict";
        require("./$.string-trim")("trimLeft", function($trim) {
            return function trimLeft() {
                return $trim(this, 1)
            }
        })
    }, {
        "./$.string-trim": 258
    }],
    369: [function(require, module, exports) {
        "use strict";
        require("./$.string-trim")("trimRight", function($trim) {
            return function trimRight() {
                return $trim(this, 2)
            }
        })
    }, {
        "./$.string-trim": 258
    }],
    370: [function(require, module, exports) {
        var $ = require("./$"),
            $def = require("./$.def"),
            $Array = require("./$.core").Array || Array,
            statics = {};
        var setStatics = function(keys, length) {
            $.each.call(keys.split(","), function(key) {
                if (length == undefined && key in $Array) statics[key] = $Array[key];
                else if (key in []) statics[key] = require("./$.ctx")(Function.call, [][key], length)
            })
        };
        setStatics("pop,reverse,shift,keys,values,entries", 1);
        setStatics("indexOf,every,some,forEach,map,filter,find,findIndex,includes", 3);
        setStatics("join,slice,concat,push,splice,unshift,sort,lastIndexOf," + "reduce,reduceRight,copyWithin,fill");
        $def($def.S, "Array", statics)
    }, {
        "./$": 234,
        "./$.core": 207,
        "./$.ctx": 208,
        "./$.def": 209
    }],
    371: [function(require, module, exports) {
        require("./es6.array.iterator");
        var global = require("./$.global"),
            hide = require("./$.hide"),
            Iterators = require("./$.iterators"),
            ITERATOR = require("./$.wks")("iterator"),
            NL = global.NodeList,
            HTC = global.HTMLCollection,
            NLProto = NL && NL.prototype,
            HTCProto = HTC && HTC.prototype,
            ArrayValues = Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;
        if (NL && !(ITERATOR in NLProto)) hide(NLProto, ITERATOR, ArrayValues);
        if (HTC && !(ITERATOR in HTCProto)) hide(HTCProto, ITERATOR, ArrayValues)
    }, {
        "./$.global": 219,
        "./$.hide": 221,
        "./$.iterators": 233,
        "./$.wks": 269,
        "./es6.array.iterator": 277
    }],
    372: [function(require, module, exports) {
        var $def = require("./$.def"),
            $task = require("./$.task");
        $def($def.G + $def.B, {
            setImmediate: $task.set,
            clearImmediate: $task.clear
        })
    }, {
        "./$.def": 209,
        "./$.task": 261
    }],
    373: [function(require, module, exports) {
        var global = require("./$.global"),
            $def = require("./$.def"),
            invoke = require("./$.invoke"),
            partial = require("./$.partial"),
            navigator = global.navigator,
            MSIE = !!navigator && /MSIE .\./.test(navigator.userAgent);
        var wrap = function(set) {
            return MSIE ? function(fn, time) {
                return set(invoke(partial, [].slice.call(arguments, 2), typeof fn == "function" ? fn : Function(fn)), time)
            } : set
        };
        $def($def.G + $def.B + $def.F * MSIE, {
            setTimeout: wrap(global.setTimeout),
            setInterval: wrap(global.setInterval)
        })
    }, {
        "./$.def": 209,
        "./$.global": 219,
        "./$.invoke": 223,
        "./$.partial": 243
    }],
    374: [function(require, module, exports) {
        require("./modules/es5");
        require("./modules/es6.symbol");
        require("./modules/es6.object.assign");
        require("./modules/es6.object.is");
        require("./modules/es6.object.set-prototype-of");
        require("./modules/es6.object.to-string");
        require("./modules/es6.object.freeze");
        require("./modules/es6.object.seal");
        require("./modules/es6.object.prevent-extensions");
        require("./modules/es6.object.is-frozen");
        require("./modules/es6.object.is-sealed");
        require("./modules/es6.object.is-extensible");
        require("./modules/es6.object.get-own-property-descriptor");
        require("./modules/es6.object.get-prototype-of");
        require("./modules/es6.object.keys");
        require("./modules/es6.object.get-own-property-names");
        require("./modules/es6.function.name");
        require("./modules/es6.function.has-instance");
        require("./modules/es6.number.constructor");
        require("./modules/es6.number.epsilon");
        require("./modules/es6.number.is-finite");
        require("./modules/es6.number.is-integer");
        require("./modules/es6.number.is-nan");
        require("./modules/es6.number.is-safe-integer");
        require("./modules/es6.number.max-safe-integer");
        require("./modules/es6.number.min-safe-integer");
        require("./modules/es6.number.parse-float");
        require("./modules/es6.number.parse-int");
        require("./modules/es6.math.acosh");
        require("./modules/es6.math.asinh");
        require("./modules/es6.math.atanh");
        require("./modules/es6.math.cbrt");
        require("./modules/es6.math.clz32");
        require("./modules/es6.math.cosh");
        require("./modules/es6.math.expm1");
        require("./modules/es6.math.fround");
        require("./modules/es6.math.hypot");
        require("./modules/es6.math.imul");
        require("./modules/es6.math.log10");
        require("./modules/es6.math.log1p");
        require("./modules/es6.math.log2");
        require("./modules/es6.math.sign");
        require("./modules/es6.math.sinh");
        require("./modules/es6.math.tanh");
        require("./modules/es6.math.trunc");
        require("./modules/es6.string.from-code-point");
        require("./modules/es6.string.raw");
        require("./modules/es6.string.trim");
        require("./modules/es6.string.iterator");
        require("./modules/es6.string.code-point-at");
        require("./modules/es6.string.ends-with");
        require("./modules/es6.string.includes");
        require("./modules/es6.string.repeat");
        require("./modules/es6.string.starts-with");
        require("./modules/es6.array.from");
        require("./modules/es6.array.of");
        require("./modules/es6.array.iterator");
        require("./modules/es6.array.species");
        require("./modules/es6.array.copy-within");
        require("./modules/es6.array.fill");
        require("./modules/es6.array.find");
        require("./modules/es6.array.find-index");
        require("./modules/es6.regexp.constructor");
        require("./modules/es6.regexp.flags");
        require("./modules/es6.regexp.match");
        require("./modules/es6.regexp.replace");
        require("./modules/es6.regexp.search");
        require("./modules/es6.regexp.split");
        require("./modules/es6.promise");
        require("./modules/es6.map");
        require("./modules/es6.set");
        require("./modules/es6.weak-map");
        require("./modules/es6.weak-set");
        require("./modules/es6.reflect.apply");
        require("./modules/es6.reflect.construct");
        require("./modules/es6.reflect.define-property");
        require("./modules/es6.reflect.delete-property");
        require("./modules/es6.reflect.enumerate");
        require("./modules/es6.reflect.get");
        require("./modules/es6.reflect.get-own-property-descriptor");
        require("./modules/es6.reflect.get-prototype-of");
        require("./modules/es6.reflect.has");
        require("./modules/es6.reflect.is-extensible");
        require("./modules/es6.reflect.own-keys");
        require("./modules/es6.reflect.prevent-extensions");
        require("./modules/es6.reflect.set");
        require("./modules/es6.reflect.set-prototype-of");
        require("./modules/es7.array.includes");
        require("./modules/es7.string.at");
        require("./modules/es7.string.pad-left");
        require("./modules/es7.string.pad-right");
        require("./modules/es7.string.trim-left");
        require("./modules/es7.string.trim-right");
        require("./modules/es7.regexp.escape");
        require("./modules/es7.object.get-own-property-descriptors");
        require("./modules/es7.object.values");
        require("./modules/es7.object.entries");
        require("./modules/es7.map.to-json");
        require("./modules/es7.set.to-json");
        require("./modules/js.array.statics");
        require("./modules/web.timers");
        require("./modules/web.immediate");
        require("./modules/web.dom.iterable");
        module.exports = require("./modules/$.core")
    }, {
        "./modules/$.core": 207,
        "./modules/es5": 271,
        "./modules/es6.array.copy-within": 272,
        "./modules/es6.array.fill": 273,
        "./modules/es6.array.find": 275,
        "./modules/es6.array.find-index": 274,
        "./modules/es6.array.from": 276,
        "./modules/es6.array.iterator": 277,
        "./modules/es6.array.of": 278,
        "./modules/es6.array.species": 279,
        "./modules/es6.function.has-instance": 280,
        "./modules/es6.function.name": 281,
        "./modules/es6.map": 282,
        "./modules/es6.math.acosh": 283,
        "./modules/es6.math.asinh": 284,
        "./modules/es6.math.atanh": 285,
        "./modules/es6.math.cbrt": 286,
        "./modules/es6.math.clz32": 287,
        "./modules/es6.math.cosh": 288,
        "./modules/es6.math.expm1": 289,
        "./modules/es6.math.fround": 290,
        "./modules/es6.math.hypot": 291,
        "./modules/es6.math.imul": 292,
        "./modules/es6.math.log10": 293,
        "./modules/es6.math.log1p": 294,
        "./modules/es6.math.log2": 295,
        "./modules/es6.math.sign": 296,
        "./modules/es6.math.sinh": 297,
        "./modules/es6.math.tanh": 298,
        "./modules/es6.math.trunc": 299,
        "./modules/es6.number.constructor": 300,
        "./modules/es6.number.epsilon": 301,
        "./modules/es6.number.is-finite": 302,
        "./modules/es6.number.is-integer": 303,
        "./modules/es6.number.is-nan": 304,
        "./modules/es6.number.is-safe-integer": 305,
        "./modules/es6.number.max-safe-integer": 306,
        "./modules/es6.number.min-safe-integer": 307,
        "./modules/es6.number.parse-float": 308,
        "./modules/es6.number.parse-int": 309,
        "./modules/es6.object.assign": 310,
        "./modules/es6.object.freeze": 311,
        "./modules/es6.object.get-own-property-descriptor": 312,
        "./modules/es6.object.get-own-property-names": 313,
        "./modules/es6.object.get-prototype-of": 314,
        "./modules/es6.object.is": 318,
        "./modules/es6.object.is-extensible": 315,
        "./modules/es6.object.is-frozen": 316,
        "./modules/es6.object.is-sealed": 317,
        "./modules/es6.object.keys": 319,
        "./modules/es6.object.prevent-extensions": 320,
        "./modules/es6.object.seal": 321,
        "./modules/es6.object.set-prototype-of": 322,
        "./modules/es6.object.to-string": 323,
        "./modules/es6.promise": 324,
        "./modules/es6.reflect.apply": 325,
        "./modules/es6.reflect.construct": 326,
        "./modules/es6.reflect.define-property": 327,
        "./modules/es6.reflect.delete-property": 328,
        "./modules/es6.reflect.enumerate": 329,
        "./modules/es6.reflect.get": 332,
        "./modules/es6.reflect.get-own-property-descriptor": 330,
        "./modules/es6.reflect.get-prototype-of": 331,
        "./modules/es6.reflect.has": 333,
        "./modules/es6.reflect.is-extensible": 334,
        "./modules/es6.reflect.own-keys": 335,
        "./modules/es6.reflect.prevent-extensions": 336,
        "./modules/es6.reflect.set": 338,
        "./modules/es6.reflect.set-prototype-of": 337,
        "./modules/es6.regexp.constructor": 339,
        "./modules/es6.regexp.flags": 340,
        "./modules/es6.regexp.match": 341,
        "./modules/es6.regexp.replace": 342,
        "./modules/es6.regexp.search": 343,
        "./modules/es6.regexp.split": 344,
        "./modules/es6.set": 345,
        "./modules/es6.string.code-point-at": 346,
        "./modules/es6.string.ends-with": 347,
        "./modules/es6.string.from-code-point": 348,
        "./modules/es6.string.includes": 349,
        "./modules/es6.string.iterator": 350,
        "./modules/es6.string.raw": 351,
        "./modules/es6.string.repeat": 352,
        "./modules/es6.string.starts-with": 353,
        "./modules/es6.string.trim": 354,
        "./modules/es6.symbol": 355,
        "./modules/es6.weak-map": 356,
        "./modules/es6.weak-set": 357,
        "./modules/es7.array.includes": 358,
        "./modules/es7.map.to-json": 359,
        "./modules/es7.object.entries": 360,
        "./modules/es7.object.get-own-property-descriptors": 361,
        "./modules/es7.object.values": 362,
        "./modules/es7.regexp.escape": 363,
        "./modules/es7.set.to-json": 364,
        "./modules/es7.string.at": 365,
        "./modules/es7.string.pad-left": 366,
        "./modules/es7.string.pad-right": 367,
        "./modules/es7.string.trim-left": 368,
        "./modules/es7.string.trim-right": 369,
        "./modules/js.array.statics": 370,
        "./modules/web.dom.iterable": 371,
        "./modules/web.immediate": 372,
        "./modules/web.timers": 373
    }],
    375: [function(require, module, exports) {
        (function(process, global) {
            ! function(global) {
                "use strict";
                var hasOwn = Object.prototype.hasOwnProperty;
                var undefined;
                var iteratorSymbol = typeof Symbol === "function" && Symbol.iterator || "@@iterator";
                var inModule = typeof module === "object";
                var runtime = global.regeneratorRuntime;
                if (runtime) {
                    if (inModule) {
                        module.exports = runtime
                    }
                    return
                }
                runtime = global.regeneratorRuntime = inModule ? module.exports : {};

                function wrap(innerFn, outerFn, self, tryLocsList) {
                    var generator = Object.create((outerFn || Generator).prototype);
                    generator._invoke = makeInvokeMethod(innerFn, self || null, new Context(tryLocsList || []));
                    return generator
                }
                runtime.wrap = wrap;

                function tryCatch(fn, obj, arg) {
                    try {
                        return {
                            type: "normal",
                            arg: fn.call(obj, arg)
                        }
                    } catch (err) {
                        return {
                            type: "throw",
                            arg: err
                        }
                    }
                }
                var GenStateSuspendedStart = "suspendedStart";
                var GenStateSuspendedYield = "suspendedYield";
                var GenStateExecuting = "executing";
                var GenStateCompleted = "completed";
                var ContinueSentinel = {};

                function Generator() {}

                function GeneratorFunction() {}

                function GeneratorFunctionPrototype() {}
                var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
                GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
                GeneratorFunctionPrototype.constructor = GeneratorFunction;
                GeneratorFunction.displayName = "GeneratorFunction";

                function defineIteratorMethods(prototype) {
                    ["next", "throw", "return"].forEach(function(method) {
                        prototype[method] = function(arg) {
                            return this._invoke(method, arg)
                        }
                    })
                }
                runtime.isGeneratorFunction = function(genFun) {
                    var ctor = typeof genFun === "function" && genFun.constructor;
                    return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false
                };
                runtime.mark = function(genFun) {
                    genFun.__proto__ = GeneratorFunctionPrototype;
                    genFun.prototype = Object.create(Gp);
                    return genFun
                };
                runtime.awrap = function(arg) {
                    return new AwaitArgument(arg)
                };

                function AwaitArgument(arg) {
                    this.arg = arg
                }

                function AsyncIterator(generator) {
                    function invoke(method, arg) {
                        var result = generator[method](arg);
                        var value = result.value;
                        return value instanceof AwaitArgument ? Promise.resolve(value.arg).then(invokeNext, invokeThrow) : Promise.resolve(value).then(function(unwrapped) {
                            result.value = unwrapped;
                            return result
                        })
                    }
                    if (typeof process === "object" && process.domain) {
                        invoke = process.domain.bind(invoke)
                    }
                    var invokeNext = invoke.bind(generator, "next");
                    var invokeThrow = invoke.bind(generator, "throw");
                    var invokeReturn = invoke.bind(generator, "return");
                    var previousPromise;

                    function enqueue(method, arg) {
                        var enqueueResult = previousPromise ? previousPromise.then(function() {
                            return invoke(method, arg)
                        }) : new Promise(function(resolve) {
                            resolve(invoke(method, arg))
                        });
                        previousPromise = enqueueResult["catch"](function(ignored) {});
                        return enqueueResult
                    }
                    this._invoke = enqueue
                }
                defineIteratorMethods(AsyncIterator.prototype);
                runtime.async = function(innerFn, outerFn, self, tryLocsList) {
                    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
                    return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
                        return result.done ? result.value : iter.next()
                    })
                };

                function makeInvokeMethod(innerFn, self, context) {
                    var state = GenStateSuspendedStart;
                    return function invoke(method, arg) {
                        if (state === GenStateExecuting) {
                            throw new Error("Generator is already running")
                        }
                        if (state === GenStateCompleted) {
                            if (method === "throw") {
                                throw arg
                            }
                            return doneResult()
                        }
                        while (true) {
                            var delegate = context.delegate;
                            if (delegate) {
                                if (method === "return" || method === "throw" && delegate.iterator[method] === undefined) {
                                    context.delegate = null;
                                    var returnMethod = delegate.iterator["return"];
                                    if (returnMethod) {
                                        var record = tryCatch(returnMethod, delegate.iterator, arg);
                                        if (record.type === "throw") {
                                            method = "throw";
                                            arg = record.arg;
                                            continue
                                        }
                                    }
                                    if (method === "return") {
                                        continue
                                    }
                                }
                                var record = tryCatch(delegate.iterator[method], delegate.iterator, arg);
                                if (record.type === "throw") {
                                    context.delegate = null;
                                    method = "throw";
                                    arg = record.arg;
                                    continue
                                }
                                method = "next";
                                arg = undefined;
                                var info = record.arg;
                                if (info.done) {
                                    context[delegate.resultName] = info.value;
                                    context.next = delegate.nextLoc
                                } else {
                                    state = GenStateSuspendedYield;
                                    return info
                                }
                                context.delegate = null
                            }
                            if (method === "next") {
                                if (state === GenStateSuspendedYield) {
                                    context.sent = arg
                                } else {
                                    context.sent = undefined
                                }
                            } else if (method === "throw") {
                                if (state === GenStateSuspendedStart) {
                                    state = GenStateCompleted;
                                    throw arg
                                }
                                if (context.dispatchException(arg)) {
                                    method = "next";
                                    arg = undefined
                                }
                            } else if (method === "return") {
                                context.abrupt("return", arg)
                            }
                            state = GenStateExecuting;
                            var record = tryCatch(innerFn, self, context);
                            if (record.type === "normal") {
                                state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                                var info = {
                                    value: record.arg,
                                    done: context.done
                                };
                                if (record.arg === ContinueSentinel) {
                                    if (context.delegate && method === "next") {
                                        arg = undefined
                                    }
                                } else {
                                    return info
                                }
                            } else if (record.type === "throw") {
                                state = GenStateCompleted;
                                method = "throw";
                                arg = record.arg
                            }
                        }
                    }
                }
                defineIteratorMethods(Gp);
                Gp[iteratorSymbol] = function() {
                    return this
                };
                Gp.toString = function() {
                    return "[object Generator]"
                };

                function pushTryEntry(locs) {
                    var entry = {
                        tryLoc: locs[0]
                    };
                    if (1 in locs) {
                        entry.catchLoc = locs[1]
                    }
                    if (2 in locs) {
                        entry.finallyLoc = locs[2];
                        entry.afterLoc = locs[3]
                    }
                    this.tryEntries.push(entry)
                }

                function resetTryEntry(entry) {
                    var record = entry.completion || {};
                    record.type = "normal";
                    delete record.arg;
                    entry.completion = record
                }

                function Context(tryLocsList) {
                    this.tryEntries = [{
                        tryLoc: "root"
                    }];
                    tryLocsList.forEach(pushTryEntry, this);
                    this.reset(true)
                }
                runtime.keys = function(object) {
                    var keys = [];
                    for (var key in object) {
                        keys.push(key)
                    }
                    keys.reverse();
                    return function next() {
                        while (keys.length) {
                            var key = keys.pop();
                            if (key in object) {
                                next.value = key;
                                next.done = false;
                                return next
                            }
                        }
                        next.done = true;
                        return next
                    }
                };

                function values(iterable) {
                    if (iterable) {
                        var iteratorMethod = iterable[iteratorSymbol];
                        if (iteratorMethod) {
                            return iteratorMethod.call(iterable)
                        }
                        if (typeof iterable.next === "function") {
                            return iterable
                        }
                        if (!isNaN(iterable.length)) {
                            var i = -1,
                                next = function next() {
                                    while (++i < iterable.length) {
                                        if (hasOwn.call(iterable, i)) {
                                            next.value = iterable[i];
                                            next.done = false;
                                            return next
                                        }
                                    }
                                    next.value = undefined;
                                    next.done = true;
                                    return next
                                };
                            return next.next = next
                        }
                    }
                    return {
                        next: doneResult
                    }
                }
                runtime.values = values;

                function doneResult() {
                    return {
                        value: undefined,
                        done: true
                    }
                }
                Context.prototype = {
                    constructor: Context,
                    reset: function(skipTempReset) {
                        this.prev = 0;
                        this.next = 0;
                        this.sent = undefined;
                        this.done = false;
                        this.delegate = null;
                        this.tryEntries.forEach(resetTryEntry);
                        if (!skipTempReset) {
                            for (var name in this) {
                                if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                                    this[name] = undefined
                                }
                            }
                        }
                    },
                    stop: function() {
                        this.done = true;
                        var rootEntry = this.tryEntries[0];
                        var rootRecord = rootEntry.completion;
                        if (rootRecord.type === "throw") {
                            throw rootRecord.arg
                        }
                        return this.rval
                    },
                    dispatchException: function(exception) {
                        if (this.done) {
                            throw exception
                        }
                        var context = this;

                        function handle(loc, caught) {
                            record.type = "throw";
                            record.arg = exception;
                            context.next = loc;
                            return !!caught
                        }
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            var record = entry.completion;
                            if (entry.tryLoc === "root") {
                                return handle("end")
                            }
                            if (entry.tryLoc <= this.prev) {
                                var hasCatch = hasOwn.call(entry, "catchLoc");
                                var hasFinally = hasOwn.call(entry, "finallyLoc");
                                if (hasCatch && hasFinally) {
                                    if (this.prev < entry.catchLoc) {
                                        return handle(entry.catchLoc, true)
                                    } else if (this.prev < entry.finallyLoc) {
                                        return handle(entry.finallyLoc)
                                    }
                                } else if (hasCatch) {
                                    if (this.prev < entry.catchLoc) {
                                        return handle(entry.catchLoc, true)
                                    }
                                } else if (hasFinally) {
                                    if (this.prev < entry.finallyLoc) {
                                        return handle(entry.finallyLoc)
                                    }
                                } else {
                                    throw new Error("try statement without catch or finally")
                                }
                            }
                        }
                    },
                    abrupt: function(type, arg) {
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                                var finallyEntry = entry;
                                break
                            }
                        }
                        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                            finallyEntry = null
                        }
                        var record = finallyEntry ? finallyEntry.completion : {};
                        record.type = type;
                        record.arg = arg;
                        if (finallyEntry) {
                            this.next = finallyEntry.finallyLoc
                        } else {
                            this.complete(record)
                        }
                        return ContinueSentinel
                    },
                    complete: function(record, afterLoc) {
                        if (record.type === "throw") {
                            throw record.arg
                        }
                        if (record.type === "break" || record.type === "continue") {
                            this.next = record.arg
                        } else if (record.type === "return") {
                            this.rval = record.arg;
                            this.next = "end"
                        } else if (record.type === "normal" && afterLoc) {
                            this.next = afterLoc
                        }
                    },
                    finish: function(finallyLoc) {
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            if (entry.finallyLoc === finallyLoc) {
                                this.complete(entry.completion, entry.afterLoc);
                                resetTryEntry(entry);
                                return ContinueSentinel
                            }
                        }
                    },
                    "catch": function(tryLoc) {
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            if (entry.tryLoc === tryLoc) {
                                var record = entry.completion;
                                if (record.type === "throw") {
                                    var thrown = record.arg;
                                    resetTryEntry(entry)
                                }
                                return thrown
                            }
                        }
                        throw new Error("illegal catch attempt")
                    },
                    delegateYield: function(iterable, resultName, nextLoc) {
                        this.delegate = {
                            iterator: values(iterable),
                            resultName: resultName,
                            nextLoc: nextLoc
                        };
                        return ContinueSentinel
                    }
                }
            }(typeof global === "object" ? global : typeof window === "object" ? window : typeof self === "object" ? self : this)
        }).call(this, require("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {
        _process: 384
    }],
    376: [function(require, module, exports) {
        module.exports = require("./lib/polyfill")
    }, {
        "./lib/polyfill": 195
    }],
    377: [function(require, module, exports) {
        module.exports = require("babel-core/polyfill")
    }, {
        "babel-core/polyfill": 376
    }],
    378: [function(require, module, exports) {}, {}],
    379: [function(require, module, exports) {
        var base64 = require("base64-js");
        var ieee754 = require("ieee754");
        var isArray = require("is-array");
        exports.Buffer = Buffer;
        exports.SlowBuffer = SlowBuffer;
        exports.INSPECT_MAX_BYTES = 50;
        Buffer.poolSize = 8192;
        var kMaxLength = 1073741823;
        var rootParent = {};
        Buffer.TYPED_ARRAY_SUPPORT = function() {
            try {
                var buf = new ArrayBuffer(0);
                var arr = new Uint8Array(buf);
                arr.foo = function() {
                    return 42
                };
                return arr.foo() === 42 && typeof arr.subarray === "function" && new Uint8Array(1).subarray(1, 1).byteLength === 0
            } catch (e) {
                return false
            }
        }();

        function Buffer(arg) {
            if (!(this instanceof Buffer)) {
                if (arguments.length > 1) return new Buffer(arg, arguments[1]);
                return new Buffer(arg)
            }
            this.length = 0;
            this.parent = undefined;
            if (typeof arg === "number") {
                return fromNumber(this, arg)
            }
            if (typeof arg === "string") {
                return fromString(this, arg, arguments.length > 1 ? arguments[1] : "utf8")
            }
            return fromObject(this, arg)
        }

        function fromNumber(that, length) {
            that = allocate(that, length < 0 ? 0 : checked(length) | 0);
            if (!Buffer.TYPED_ARRAY_SUPPORT) {
                for (var i = 0; i < length; i++) {
                    that[i] = 0
                }
            }
            return that
        }

        function fromString(that, string, encoding) {
            if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
            var length = byteLength(string, encoding) | 0;
            that = allocate(that, length);
            that.write(string, encoding);
            return that
        }

        function fromObject(that, object) {
            if (Buffer.isBuffer(object)) return fromBuffer(that, object);
            if (isArray(object)) return fromArray(that, object);
            if (object == null) {
                throw new TypeError("must start with number, buffer, array or string")
            }
            if (typeof ArrayBuffer !== "undefined" && object.buffer instanceof ArrayBuffer) {
                return fromTypedArray(that, object)
            }
            if (object.length) return fromArrayLike(that, object);
            return fromJsonObject(that, object)
        }

        function fromBuffer(that, buffer) {
            var length = checked(buffer.length) | 0;
            that = allocate(that, length);
            buffer.copy(that, 0, 0, length);
            return that
        }

        function fromArray(that, array) {
            var length = checked(array.length) | 0;
            that = allocate(that, length);
            for (var i = 0; i < length; i += 1) {
                that[i] = array[i] & 255
            }
            return that
        }

        function fromTypedArray(that, array) {
            var length = checked(array.length) | 0;
            that = allocate(that, length);
            for (var i = 0; i < length; i += 1) {
                that[i] = array[i] & 255
            }
            return that
        }

        function fromArrayLike(that, array) {
            var length = checked(array.length) | 0;
            that = allocate(that, length);
            for (var i = 0; i < length; i += 1) {
                that[i] = array[i] & 255
            }
            return that
        }

        function fromJsonObject(that, object) {
            var array;
            var length = 0;
            if (object.type === "Buffer" && isArray(object.data)) {
                array = object.data;
                length = checked(array.length) | 0
            }
            that = allocate(that, length);
            for (var i = 0; i < length; i += 1) {
                that[i] = array[i] & 255
            }
            return that
        }

        function allocate(that, length) {
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                that = Buffer._augment(new Uint8Array(length))
            } else {
                that.length = length;
                that._isBuffer = true
            }
            var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1;
            if (fromPool) that.parent = rootParent;
            return that
        }

        function checked(length) {
            if (length >= kMaxLength) {
                throw new RangeError("Attempt to allocate Buffer larger than maximum " + "size: 0x" + kMaxLength.toString(16) + " bytes")
            }
            return length | 0
        }

        function SlowBuffer(subject, encoding) {
            if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding);
            var buf = new Buffer(subject, encoding);
            delete buf.parent;
            return buf
        }
        Buffer.isBuffer = function isBuffer(b) {
            return !!(b != null && b._isBuffer)
        };
        Buffer.compare = function compare(a, b) {
            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                throw new TypeError("Arguments must be Buffers")
            }
            if (a === b) return 0;
            var x = a.length;
            var y = b.length;
            var i = 0;
            var len = Math.min(x, y);
            while (i < len) {
                if (a[i] !== b[i]) break;
                ++i
            }
            if (i !== len) {
                x = a[i];
                y = b[i]
            }
            if (x < y) return -1;
            if (y < x) return 1;
            return 0
        };
        Buffer.isEncoding = function isEncoding(encoding) {
            switch (String(encoding).toLowerCase()) {
                case "hex":
                case "utf8":
                case "utf-8":
                case "ascii":
                case "binary":
                case "base64":
                case "raw":
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    return true;
                default:
                    return false
            }
        };
        Buffer.concat = function concat(list, length) {
            if (!isArray(list)) throw new TypeError("list argument must be an Array of Buffers.");
            if (list.length === 0) {
                return new Buffer(0)
            } else if (list.length === 1) {
                return list[0]
            }
            var i;
            if (length === undefined) {
                length = 0;
                for (i = 0; i < list.length; i++) {
                    length += list[i].length
                }
            }
            var buf = new Buffer(length);
            var pos = 0;
            for (i = 0; i < list.length; i++) {
                var item = list[i];
                item.copy(buf, pos);
                pos += item.length
            }
            return buf
        };

        function byteLength(string, encoding) {
            if (typeof string !== "string") string = String(string);
            if (string.length === 0) return 0;
            switch (encoding || "utf8") {
                case "ascii":
                case "binary":
                case "raw":
                    return string.length;
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    return string.length * 2;
                case "hex":
                    return string.length >>> 1;
                case "utf8":
                case "utf-8":
                    return utf8ToBytes(string).length;
                case "base64":
                    return base64ToBytes(string).length;
                default:
                    return string.length
            }
        }
        Buffer.byteLength = byteLength;
        Buffer.prototype.length = undefined;
        Buffer.prototype.parent = undefined;
        Buffer.prototype.toString = function toString(encoding, start, end) {
            var loweredCase = false;
            start = start | 0;
            end = end === undefined || end === Infinity ? this.length : end | 0;
            if (!encoding) encoding = "utf8";
            if (start < 0) start = 0;
            if (end > this.length) end = this.length;
            if (end <= start) return "";
            while (true) {
                switch (encoding) {
                    case "hex":
                        return hexSlice(this, start, end);
                    case "utf8":
                    case "utf-8":
                        return utf8Slice(this, start, end);
                    case "ascii":
                        return asciiSlice(this, start, end);
                    case "binary":
                        return binarySlice(this, start, end);
                    case "base64":
                        return base64Slice(this, start, end);
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                        return utf16leSlice(this, start, end);
                    default:
                        if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                        encoding = (encoding + "").toLowerCase();
                        loweredCase = true
                }
            }
        };
        Buffer.prototype.equals = function equals(b) {
            if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
            if (this === b) return true;
            return Buffer.compare(this, b) === 0
        };
        Buffer.prototype.inspect = function inspect() {
            var str = "";
            var max = exports.INSPECT_MAX_BYTES;
            if (this.length > 0) {
                str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
                if (this.length > max) str += " ... "
            }
            return "<Buffer " + str + ">"
        };
        Buffer.prototype.compare = function compare(b) {
            if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
            if (this === b) return 0;
            return Buffer.compare(this, b)
        };
        Buffer.prototype.indexOf = function indexOf(val, byteOffset) {
            if (byteOffset > 2147483647) byteOffset = 2147483647;
            else if (byteOffset < -2147483648) byteOffset = -2147483648;
            byteOffset >>= 0;
            if (this.length === 0) return -1;
            if (byteOffset >= this.length) return -1;
            if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0);
            if (typeof val === "string") {
                if (val.length === 0) return -1;
                return String.prototype.indexOf.call(this, val, byteOffset)
            }
            if (Buffer.isBuffer(val)) {
                return arrayIndexOf(this, val, byteOffset)
            }
            if (typeof val === "number") {
                if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === "function") {
                    return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
                }
                return arrayIndexOf(this, [val], byteOffset)
            }

            function arrayIndexOf(arr, val, byteOffset) {
                var foundIndex = -1;
                for (var i = 0; byteOffset + i < arr.length; i++) {
                    if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
                        if (foundIndex === -1) foundIndex = i;
                        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
                    } else {
                        foundIndex = -1
                    }
                }
                return -1
            }
            throw new TypeError("val must be string, number or Buffer")
        };
        Buffer.prototype.get = function get(offset) {
            console.log(".get() is deprecated. Access using array indexes instead.");
            return this.readUInt8(offset)
        };
        Buffer.prototype.set = function set(v, offset) {
            console.log(".set() is deprecated. Access using array indexes instead.");
            return this.writeUInt8(v, offset)
        };

        function hexWrite(buf, string, offset, length) {
            offset = Number(offset) || 0;
            var remaining = buf.length - offset;
            if (!length) {
                length = remaining
            } else {
                length = Number(length);
                if (length > remaining) {
                    length = remaining
                }
            }
            var strLen = string.length;
            if (strLen % 2 !== 0) throw new Error("Invalid hex string");
            if (length > strLen / 2) {
                length = strLen / 2
            }
            for (var i = 0; i < length; i++) {
                var parsed = parseInt(string.substr(i * 2, 2), 16);
                if (isNaN(parsed)) throw new Error("Invalid hex string");
                buf[offset + i] = parsed
            }
            return i
        }

        function utf8Write(buf, string, offset, length) {
            return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
        }

        function asciiWrite(buf, string, offset, length) {
            return blitBuffer(asciiToBytes(string), buf, offset, length)
        }

        function binaryWrite(buf, string, offset, length) {
            return asciiWrite(buf, string, offset, length)
        }

        function base64Write(buf, string, offset, length) {
            return blitBuffer(base64ToBytes(string), buf, offset, length)
        }

        function ucs2Write(buf, string, offset, length) {
            return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
        }
        Buffer.prototype.write = function write(string, offset, length, encoding) {
            if (offset === undefined) {
                encoding = "utf8";
                length = this.length;
                offset = 0
            } else if (length === undefined && typeof offset === "string") {
                encoding = offset;
                length = this.length;
                offset = 0
            } else if (isFinite(offset)) {
                offset = offset | 0;
                if (isFinite(length)) {
                    length = length | 0;
                    if (encoding === undefined) encoding = "utf8"
                } else {
                    encoding = length;
                    length = undefined
                }
            } else {
                var swap = encoding;
                encoding = offset;
                offset = length | 0;
                length = swap
            }
            var remaining = this.length - offset;
            if (length === undefined || length > remaining) length = remaining;
            if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                throw new RangeError("attempt to write outside buffer bounds")
            }
            if (!encoding) encoding = "utf8";
            var loweredCase = false;
            for (;;) {
                switch (encoding) {
                    case "hex":
                        return hexWrite(this, string, offset, length);
                    case "utf8":
                    case "utf-8":
                        return utf8Write(this, string, offset, length);
                    case "ascii":
                        return asciiWrite(this, string, offset, length);
                    case "binary":
                        return binaryWrite(this, string, offset, length);
                    case "base64":
                        return base64Write(this, string, offset, length);
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                        return ucs2Write(this, string, offset, length);
                    default:
                        if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                        encoding = ("" + encoding).toLowerCase();
                        loweredCase = true
                }
            }
        };
        Buffer.prototype.toJSON = function toJSON() {
            return {
                type: "Buffer",
                data: Array.prototype.slice.call(this._arr || this, 0)
            }
        };

        function base64Slice(buf, start, end) {
            if (start === 0 && end === buf.length) {
                return base64.fromByteArray(buf)
            } else {
                return base64.fromByteArray(buf.slice(start, end))
            }
        }

        function utf8Slice(buf, start, end) {
            var res = "";
            var tmp = "";
            end = Math.min(buf.length, end);
            for (var i = start; i < end; i++) {
                if (buf[i] <= 127) {
                    res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i]);
                    tmp = ""
                } else {
                    tmp += "%" + buf[i].toString(16)
                }
            }
            return res + decodeUtf8Char(tmp)
        }

        function asciiSlice(buf, start, end) {
            var ret = "";
            end = Math.min(buf.length, end);
            for (var i = start; i < end; i++) {
                ret += String.fromCharCode(buf[i] & 127)
            }
            return ret
        }

        function binarySlice(buf, start, end) {
            var ret = "";
            end = Math.min(buf.length, end);
            for (var i = start; i < end; i++) {
                ret += String.fromCharCode(buf[i])
            }
            return ret
        }

        function hexSlice(buf, start, end) {
            var len = buf.length;
            if (!start || start < 0) start = 0;
            if (!end || end < 0 || end > len) end = len;
            var out = "";
            for (var i = start; i < end; i++) {
                out += toHex(buf[i])
            }
            return out
        }

        function utf16leSlice(buf, start, end) {
            var bytes = buf.slice(start, end);
            var res = "";
            for (var i = 0; i < bytes.length; i += 2) {
                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
            }
            return res
        }
        Buffer.prototype.slice = function slice(start, end) {
            var len = this.length;
            start = ~~start;
            end = end === undefined ? len : ~~end;
            if (start < 0) {
                start += len;
                if (start < 0) start = 0
            } else if (start > len) {
                start = len
            }
            if (end < 0) {
                end += len;
                if (end < 0) end = 0
            } else if (end > len) {
                end = len
            }
            if (end < start) end = start;
            var newBuf;
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                newBuf = Buffer._augment(this.subarray(start, end))
            } else {
                var sliceLen = end - start;
                newBuf = new Buffer(sliceLen, undefined);
                for (var i = 0; i < sliceLen; i++) {
                    newBuf[i] = this[i + start]
                }
            }
            if (newBuf.length) newBuf.parent = this.parent || this;
            return newBuf
        };

        function checkOffset(offset, ext, length) {
            if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
            if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length")
        }
        Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);
            var val = this[offset];
            var mul = 1;
            var i = 0;
            while (++i < byteLength && (mul *= 256)) {
                val += this[offset + i] * mul
            }
            return val
        };
        Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) {
                checkOffset(offset, byteLength, this.length)
            }
            var val = this[offset + --byteLength];
            var mul = 1;
            while (byteLength > 0 && (mul *= 256)) {
                val += this[offset + --byteLength] * mul
            }
            return val
        };
        Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 1, this.length);
            return this[offset]
        };
        Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            return this[offset] | this[offset + 1] << 8
        };
        Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            return this[offset] << 8 | this[offset + 1]
        };
        Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216
        };
        Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3])
        };
        Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);
            var val = this[offset];
            var mul = 1;
            var i = 0;
            while (++i < byteLength && (mul *= 256)) {
                val += this[offset + i] * mul
            }
            mul *= 128;
            if (val >= mul) val -= Math.pow(2, 8 * byteLength);
            return val
        };
        Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);
            var i = byteLength;
            var mul = 1;
            var val = this[offset + --i];
            while (i > 0 && (mul *= 256)) {
                val += this[offset + --i] * mul
            }
            mul *= 128;
            if (val >= mul) val -= Math.pow(2, 8 * byteLength);
            return val
        };
        Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 1, this.length);
            if (!(this[offset] & 128)) return this[offset];
            return (255 - this[offset] + 1) * -1
        };
        Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            var val = this[offset] | this[offset + 1] << 8;
            return val & 32768 ? val | 4294901760 : val
        };
        Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 2, this.length);
            var val = this[offset + 1] | this[offset] << 8;
            return val & 32768 ? val | 4294901760 : val
        };
        Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24
        };
        Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]
        };
        Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return ieee754.read(this, offset, true, 23, 4)
        };
        Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 4, this.length);
            return ieee754.read(this, offset, false, 23, 4)
        };
        Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 8, this.length);
            return ieee754.read(this, offset, true, 52, 8)
        };
        Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
            if (!noAssert) checkOffset(offset, 8, this.length);
            return ieee754.read(this, offset, false, 52, 8)
        };

        function checkInt(buf, value, offset, ext, max, min) {
            if (!Buffer.isBuffer(buf)) throw new TypeError("buffer must be a Buffer instance");
            if (value > max || value < min) throw new RangeError("value is out of bounds");
            if (offset + ext > buf.length) throw new RangeError("index out of range")
        }
        Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
            value = +value;
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0);
            var mul = 1;
            var i = 0;
            this[offset] = value & 255;
            while (++i < byteLength && (mul *= 256)) {
                this[offset + i] = value / mul & 255
            }
            return offset + byteLength
        };
        Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
            value = +value;
            offset = offset | 0;
            byteLength = byteLength | 0;
            if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0);
            var i = byteLength - 1;
            var mul = 1;
            this[offset + i] = value & 255;
            while (--i >= 0 && (mul *= 256)) {
                this[offset + i] = value / mul & 255
            }
            return offset + byteLength
        };
        Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
            if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
            this[offset] = value;
            return offset + 1
        };

        function objectWriteUInt16(buf, value, offset, littleEndian) {
            if (value < 0) value = 65535 + value + 1;
            for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
                buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8
            }
        }
        Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value;
                this[offset + 1] = value >>> 8
            } else {
                objectWriteUInt16(this, value, offset, true)
            }
            return offset + 2
        };
        Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 8;
                this[offset + 1] = value
            } else {
                objectWriteUInt16(this, value, offset, false)
            }
            return offset + 2
        };

        function objectWriteUInt32(buf, value, offset, littleEndian) {
            if (value < 0) value = 4294967295 + value + 1;
            for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
                buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 255
            }
        }
        Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset + 3] = value >>> 24;
                this[offset + 2] = value >>> 16;
                this[offset + 1] = value >>> 8;
                this[offset] = value
            } else {
                objectWriteUInt32(this, value, offset, true)
            }
            return offset + 4
        };
        Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value
            } else {
                objectWriteUInt32(this, value, offset, false)
            }
            return offset + 4
        };
        Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);
                checkInt(this, value, offset, byteLength, limit - 1, -limit)
            }
            var i = 0;
            var mul = 1;
            var sub = value < 0 ? 1 : 0;
            this[offset] = value & 255;
            while (++i < byteLength && (mul *= 256)) {
                this[offset + i] = (value / mul >> 0) - sub & 255
            }
            return offset + byteLength
        };
        Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);
                checkInt(this, value, offset, byteLength, limit - 1, -limit)
            }
            var i = byteLength - 1;
            var mul = 1;
            var sub = value < 0 ? 1 : 0;
            this[offset + i] = value & 255;
            while (--i >= 0 && (mul *= 256)) {
                this[offset + i] = (value / mul >> 0) - sub & 255
            }
            return offset + byteLength
        };
        Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
            if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
            if (value < 0) value = 255 + value + 1;
            this[offset] = value;
            return offset + 1
        };
        Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value;
                this[offset + 1] = value >>> 8
            } else {
                objectWriteUInt16(this, value, offset, true)
            }
            return offset + 2
        };
        Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 8;
                this[offset + 1] = value
            } else {
                objectWriteUInt16(this, value, offset, false)
            }
            return offset + 2
        };
        Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value;
                this[offset + 1] = value >>> 8;
                this[offset + 2] = value >>> 16;
                this[offset + 3] = value >>> 24
            } else {
                objectWriteUInt32(this, value, offset, true)
            }
            return offset + 4
        };
        Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
            value = +value;
            offset = offset | 0;
            if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
            if (value < 0) value = 4294967295 + value + 1;
            if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value
            } else {
                objectWriteUInt32(this, value, offset, false)
            }
            return offset + 4
        };

        function checkIEEE754(buf, value, offset, ext, max, min) {
            if (value > max || value < min) throw new RangeError("value is out of bounds");
            if (offset + ext > buf.length) throw new RangeError("index out of range");
            if (offset < 0) throw new RangeError("index out of range")
        }

        function writeFloat(buf, value, offset, littleEndian, noAssert) {
            if (!noAssert) {
                checkIEEE754(buf, value, offset, 4, 3.4028234663852886e38, -3.4028234663852886e38)
            }
            ieee754.write(buf, value, offset, littleEndian, 23, 4);
            return offset + 4
        }
        Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
            return writeFloat(this, value, offset, true, noAssert)
        };
        Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
            return writeFloat(this, value, offset, false, noAssert)
        };

        function writeDouble(buf, value, offset, littleEndian, noAssert) {
            if (!noAssert) {
                checkIEEE754(buf, value, offset, 8, 1.7976931348623157e308, -1.7976931348623157e308)
            }
            ieee754.write(buf, value, offset, littleEndian, 52, 8);
            return offset + 8
        }
        Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
            return writeDouble(this, value, offset, true, noAssert)
        };
        Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
            return writeDouble(this, value, offset, false, noAssert)
        };
        Buffer.prototype.copy = function copy(target, targetStart, start, end) {
            if (!start) start = 0;
            if (!end && end !== 0) end = this.length;
            if (targetStart >= target.length) targetStart = target.length;
            if (!targetStart) targetStart = 0;
            if (end > 0 && end < start) end = start;
            if (end === start) return 0;
            if (target.length === 0 || this.length === 0) return 0;
            if (targetStart < 0) {
                throw new RangeError("targetStart out of bounds")
            }
            if (start < 0 || start >= this.length) throw new RangeError("sourceStart out of bounds");
            if (end < 0) throw new RangeError("sourceEnd out of bounds");
            if (end > this.length) end = this.length;
            if (target.length - targetStart < end - start) {
                end = target.length - targetStart + start
            }
            var len = end - start;
            if (len < 1e3 || !Buffer.TYPED_ARRAY_SUPPORT) {
                for (var i = 0; i < len; i++) {
                    target[i + targetStart] = this[i + start]
                }
            } else {
                target._set(this.subarray(start, start + len), targetStart)
            }
            return len
        };
        Buffer.prototype.fill = function fill(value, start, end) {
            if (!value) value = 0;
            if (!start) start = 0;
            if (!end) end = this.length;
            if (end < start) throw new RangeError("end < start");
            if (end === start) return;
            if (this.length === 0) return;
            if (start < 0 || start >= this.length) throw new RangeError("start out of bounds");
            if (end < 0 || end > this.length) throw new RangeError("end out of bounds");
            var i;
            if (typeof value === "number") {
                for (i = start; i < end; i++) {
                    this[i] = value
                }
            } else {
                var bytes = utf8ToBytes(value.toString());
                var len = bytes.length;
                for (i = start; i < end; i++) {
                    this[i] = bytes[i % len]
                }
            }
            return this
        };
        Buffer.prototype.toArrayBuffer = function toArrayBuffer() {
            if (typeof Uint8Array !== "undefined") {
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    return new Buffer(this).buffer
                } else {
                    var buf = new Uint8Array(this.length);
                    for (var i = 0, len = buf.length; i < len; i += 1) {
                        buf[i] = this[i]
                    }
                    return buf.buffer
                }
            } else {
                throw new TypeError("Buffer.toArrayBuffer not supported in this browser")
            }
        };
        var BP = Buffer.prototype;
        Buffer._augment = function _augment(arr) {
            arr.constructor = Buffer;
            arr._isBuffer = true;
            arr._set = arr.set;
            arr.get = BP.get;
            arr.set = BP.set;
            arr.write = BP.write;
            arr.toString = BP.toString;
            arr.toLocaleString = BP.toString;
            arr.toJSON = BP.toJSON;
            arr.equals = BP.equals;
            arr.compare = BP.compare;
            arr.indexOf = BP.indexOf;
            arr.copy = BP.copy;
            arr.slice = BP.slice;
            arr.readUIntLE = BP.readUIntLE;
            arr.readUIntBE = BP.readUIntBE;
            arr.readUInt8 = BP.readUInt8;
            arr.readUInt16LE = BP.readUInt16LE;
            arr.readUInt16BE = BP.readUInt16BE;
            arr.readUInt32LE = BP.readUInt32LE;
            arr.readUInt32BE = BP.readUInt32BE;
            arr.readIntLE = BP.readIntLE;
            arr.readIntBE = BP.readIntBE;
            arr.readInt8 = BP.readInt8;
            arr.readInt16LE = BP.readInt16LE;
            arr.readInt16BE = BP.readInt16BE;
            arr.readInt32LE = BP.readInt32LE;
            arr.readInt32BE = BP.readInt32BE;
            arr.readFloatLE = BP.readFloatLE;
            arr.readFloatBE = BP.readFloatBE;
            arr.readDoubleLE = BP.readDoubleLE;
            arr.readDoubleBE = BP.readDoubleBE;
            arr.writeUInt8 = BP.writeUInt8;
            arr.writeUIntLE = BP.writeUIntLE;
            arr.writeUIntBE = BP.writeUIntBE;
            arr.writeUInt16LE = BP.writeUInt16LE;
            arr.writeUInt16BE = BP.writeUInt16BE;
            arr.writeUInt32LE = BP.writeUInt32LE;
            arr.writeUInt32BE = BP.writeUInt32BE;
            arr.writeIntLE = BP.writeIntLE;
            arr.writeIntBE = BP.writeIntBE;
            arr.writeInt8 = BP.writeInt8;
            arr.writeInt16LE = BP.writeInt16LE;
            arr.writeInt16BE = BP.writeInt16BE;
            arr.writeInt32LE = BP.writeInt32LE;
            arr.writeInt32BE = BP.writeInt32BE;
            arr.writeFloatLE = BP.writeFloatLE;
            arr.writeFloatBE = BP.writeFloatBE;
            arr.writeDoubleLE = BP.writeDoubleLE;
            arr.writeDoubleBE = BP.writeDoubleBE;
            arr.fill = BP.fill;
            arr.inspect = BP.inspect;
            arr.toArrayBuffer = BP.toArrayBuffer;
            return arr
        };
        var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g;

        function base64clean(str) {
            str = stringtrim(str).replace(INVALID_BASE64_RE, "");
            if (str.length < 2) return "";
            while (str.length % 4 !== 0) {
                str = str + "="
            }
            return str
        }

        function stringtrim(str) {
            if (str.trim) return str.trim();
            return str.replace(/^\s+|\s+$/g, "")
        }

        function toHex(n) {
            if (n < 16) return "0" + n.toString(16);
            return n.toString(16)
        }

        function utf8ToBytes(string, units) {
            units = units || Infinity;
            var codePoint;
            var length = string.length;
            var leadSurrogate = null;
            var bytes = [];
            var i = 0;
            for (; i < length; i++) {
                codePoint = string.charCodeAt(i);
                if (codePoint > 55295 && codePoint < 57344) {
                    if (leadSurrogate) {
                        if (codePoint < 56320) {
                            if ((units -= 3) > -1) bytes.push(239, 191, 189);
                            leadSurrogate = codePoint;
                            continue
                        } else {
                            codePoint = leadSurrogate - 55296 << 10 | codePoint - 56320 | 65536;
                            leadSurrogate = null
                        }
                    } else {
                        if (codePoint > 56319) {
                            if ((units -= 3) > -1) bytes.push(239, 191, 189);
                            continue
                        } else if (i + 1 === length) {
                            if ((units -= 3) > -1) bytes.push(239, 191, 189);
                            continue
                        } else {
                            leadSurrogate = codePoint;
                            continue
                        }
                    }
                } else if (leadSurrogate) {
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    leadSurrogate = null
                }
                if (codePoint < 128) {
                    if ((units -= 1) < 0) break;
                    bytes.push(codePoint)
                } else if (codePoint < 2048) {
                    if ((units -= 2) < 0) break;
                    bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128)
                } else if (codePoint < 65536) {
                    if ((units -= 3) < 0) break;
                    bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128)
                } else if (codePoint < 2097152) {
                    if ((units -= 4) < 0) break;
                    bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128)
                } else {
                    throw new Error("Invalid code point")
                }
            }
            return bytes
        }

        function asciiToBytes(str) {
            var byteArray = [];
            for (var i = 0; i < str.length; i++) {
                byteArray.push(str.charCodeAt(i) & 255)
            }
            return byteArray
        }

        function utf16leToBytes(str, units) {
            var c, hi, lo;
            var byteArray = [];
            for (var i = 0; i < str.length; i++) {
                if ((units -= 2) < 0) break;
                c = str.charCodeAt(i);
                hi = c >> 8;
                lo = c % 256;
                byteArray.push(lo);
                byteArray.push(hi)
            }
            return byteArray
        }

        function base64ToBytes(str) {
            return base64.toByteArray(base64clean(str))
        }

        function blitBuffer(src, dst, offset, length) {
            for (var i = 0; i < length; i++) {
                if (i + offset >= dst.length || i >= src.length) break;
                dst[i + offset] = src[i]
            }
            return i
        }

        function decodeUtf8Char(str) {
            try {
                return decodeURIComponent(str)
            } catch (err) {
                return String.fromCharCode(65533)
            }
        }
    }, {
        "base64-js": 380,
        ieee754: 381,
        "is-array": 382
    }],
    380: [function(require, module, exports) {
        var lookup = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        (function(exports) {
            "use strict";
            var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
            var PLUS = "+".charCodeAt(0);
            var SLASH = "/".charCodeAt(0);
            var NUMBER = "0".charCodeAt(0);
            var LOWER = "a".charCodeAt(0);
            var UPPER = "A".charCodeAt(0);
            var PLUS_URL_SAFE = "-".charCodeAt(0);
            var SLASH_URL_SAFE = "_".charCodeAt(0);

            function decode(elt) {
                var code = elt.charCodeAt(0);
                if (code === PLUS || code === PLUS_URL_SAFE) return 62;
                if (code === SLASH || code === SLASH_URL_SAFE) return 63;
                if (code < NUMBER) return -1;
                if (code < NUMBER + 10) return code - NUMBER + 26 + 26;
                if (code < UPPER + 26) return code - UPPER;
                if (code < LOWER + 26) return code - LOWER + 26
            }

            function b64ToByteArray(b64) {
                var i, j, l, tmp, placeHolders, arr;
                if (b64.length % 4 > 0) {
                    throw new Error("Invalid string. Length must be a multiple of 4")
                }
                var len = b64.length;
                placeHolders = "=" === b64.charAt(len - 2) ? 2 : "=" === b64.charAt(len - 1) ? 1 : 0;
                arr = new Arr(b64.length * 3 / 4 - placeHolders);
                l = placeHolders > 0 ? b64.length - 4 : b64.length;
                var L = 0;

                function push(v) {
                    arr[L++] = v
                }
                for (i = 0, j = 0; i < l; i += 4, j += 3) {
                    tmp = decode(b64.charAt(i)) << 18 | decode(b64.charAt(i + 1)) << 12 | decode(b64.charAt(i + 2)) << 6 | decode(b64.charAt(i + 3));
                    push((tmp & 16711680) >> 16);
                    push((tmp & 65280) >> 8);
                    push(tmp & 255)
                }
                if (placeHolders === 2) {
                    tmp = decode(b64.charAt(i)) << 2 | decode(b64.charAt(i + 1)) >> 4;
                    push(tmp & 255)
                } else if (placeHolders === 1) {
                    tmp = decode(b64.charAt(i)) << 10 | decode(b64.charAt(i + 1)) << 4 | decode(b64.charAt(i + 2)) >> 2;
                    push(tmp >> 8 & 255);
                    push(tmp & 255)
                }
                return arr
            }

            function uint8ToBase64(uint8) {
                var i, extraBytes = uint8.length % 3,
                    output = "",
                    temp, length;

                function encode(num) {
                    return lookup.charAt(num)
                }

                function tripletToBase64(num) {
                    return encode(num >> 18 & 63) + encode(num >> 12 & 63) + encode(num >> 6 & 63) + encode(num & 63)
                }
                for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
                    temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
                    output += tripletToBase64(temp)
                }
                switch (extraBytes) {
                    case 1:
                        temp = uint8[uint8.length - 1];
                        output += encode(temp >> 2);
                        output += encode(temp << 4 & 63);
                        output += "==";
                        break;
                    case 2:
                        temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];
                        output += encode(temp >> 10);
                        output += encode(temp >> 4 & 63);
                        output += encode(temp << 2 & 63);
                        output += "=";
                        break
                }
                return output
            }
            exports.toByteArray = b64ToByteArray;
            exports.fromByteArray = uint8ToBase64
        })(typeof exports === "undefined" ? this.base64js = {} : exports)
    }, {}],
    381: [function(require, module, exports) {
        exports.read = function(buffer, offset, isLE, mLen, nBytes) {
            var e, m, eLen = nBytes * 8 - mLen - 1,
                eMax = (1 << eLen) - 1,
                eBias = eMax >> 1,
                nBits = -7,
                i = isLE ? nBytes - 1 : 0,
                d = isLE ? -1 : 1,
                s = buffer[offset + i];
            i += d;
            e = s & (1 << -nBits) - 1;
            s >>= -nBits;
            nBits += eLen;
            for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
            m = e & (1 << -nBits) - 1;
            e >>= -nBits;
            nBits += mLen;
            for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
            if (e === 0) {
                e = 1 - eBias
            } else if (e === eMax) {
                return m ? NaN : (s ? -1 : 1) * Infinity
            } else {
                m = m + Math.pow(2, mLen);
                e = e - eBias
            }
            return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
        };
        exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
            var e, m, c, eLen = nBytes * 8 - mLen - 1,
                eMax = (1 << eLen) - 1,
                eBias = eMax >> 1,
                rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
                i = isLE ? 0 : nBytes - 1,
                d = isLE ? 1 : -1,
                s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
            value = Math.abs(value);
            if (isNaN(value) || value === Infinity) {
                m = isNaN(value) ? 1 : 0;
                e = eMax
            } else {
                e = Math.floor(Math.log(value) / Math.LN2);
                if (value * (c = Math.pow(2, -e)) < 1) {
                    e--;
                    c *= 2
                }
                if (e + eBias >= 1) {
                    value += rt / c
                } else {
                    value += rt * Math.pow(2, 1 - eBias)
                }
                if (value * c >= 2) {
                    e++;
                    c /= 2
                }
                if (e + eBias >= eMax) {
                    m = 0;
                    e = eMax
                } else if (e + eBias >= 1) {
                    m = (value * c - 1) * Math.pow(2, mLen);
                    e = e + eBias
                } else {
                    m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                    e = 0
                }
            }
            for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {}
            e = e << mLen | m;
            eLen += mLen;
            for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {}
            buffer[offset + i - d] |= s * 128
        }
    }, {}],
    382: [function(require, module, exports) {
        var isArray = Array.isArray;
        var str = Object.prototype.toString;
        module.exports = isArray || function(val) {
            return !!val && "[object Array]" == str.call(val)
        }
    }, {}],
    383: [function(require, module, exports) {
        (function(process) {
            function normalizeArray(parts, allowAboveRoot) {
                var up = 0;
                for (var i = parts.length - 1; i >= 0; i--) {
                    var last = parts[i];
                    if (last === ".") {
                        parts.splice(i, 1)
                    } else if (last === "..") {
                        parts.splice(i, 1);
                        up++
                    } else if (up) {
                        parts.splice(i, 1);
                        up--
                    }
                }
                if (allowAboveRoot) {
                    for (; up--; up) {
                        parts.unshift("..")
                    }
                }
                return parts
            }
            var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
            var splitPath = function(filename) {
                return splitPathRe.exec(filename).slice(1)
            };
            exports.resolve = function() {
                var resolvedPath = "",
                    resolvedAbsolute = false;
                for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
                    var path = i >= 0 ? arguments[i] : process.cwd();
                    if (typeof path !== "string") {
                        throw new TypeError("Arguments to path.resolve must be strings")
                    } else if (!path) {
                        continue
                    }
                    resolvedPath = path + "/" + resolvedPath;
                    resolvedAbsolute = path.charAt(0) === "/"
                }
                resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function(p) {
                    return !!p
                }), !resolvedAbsolute).join("/");
                return (resolvedAbsolute ? "/" : "") + resolvedPath || "."
            };
            exports.normalize = function(path) {
                var isAbsolute = exports.isAbsolute(path),
                    trailingSlash = substr(path, -1) === "/";
                path = normalizeArray(filter(path.split("/"), function(p) {
                    return !!p
                }), !isAbsolute).join("/");
                if (!path && !isAbsolute) {
                    path = "."
                }
                if (path && trailingSlash) {
                    path += "/"
                }
                return (isAbsolute ? "/" : "") + path
            };
            exports.isAbsolute = function(path) {
                return path.charAt(0) === "/"
            };
            exports.join = function() {
                var paths = Array.prototype.slice.call(arguments, 0);
                return exports.normalize(filter(paths, function(p, index) {
                    if (typeof p !== "string") {
                        throw new TypeError("Arguments to path.join must be strings")
                    }
                    return p
                }).join("/"))
            };
            exports.relative = function(from, to) {
                from = exports.resolve(from).substr(1);
                to = exports.resolve(to).substr(1);

                function trim(arr) {
                    var start = 0;
                    for (; start < arr.length; start++) {
                        if (arr[start] !== "") break
                    }
                    var end = arr.length - 1;
                    for (; end >= 0; end--) {
                        if (arr[end] !== "") break
                    }
                    if (start > end) return [];
                    return arr.slice(start, end - start + 1)
                }
                var fromParts = trim(from.split("/"));
                var toParts = trim(to.split("/"));
                var length = Math.min(fromParts.length, toParts.length);
                var samePartsLength = length;
                for (var i = 0; i < length; i++) {
                    if (fromParts[i] !== toParts[i]) {
                        samePartsLength = i;
                        break
                    }
                }
                var outputParts = [];
                for (var i = samePartsLength; i < fromParts.length; i++) {
                    outputParts.push("..")
                }
                outputParts = outputParts.concat(toParts.slice(samePartsLength));
                return outputParts.join("/")
            };
            exports.sep = "/";
            exports.delimiter = ":";
            exports.dirname = function(path) {
                var result = splitPath(path),
                    root = result[0],
                    dir = result[1];
                if (!root && !dir) {
                    return "."
                }
                if (dir) {
                    dir = dir.substr(0, dir.length - 1)
                }
                return root + dir
            };
            exports.basename = function(path, ext) {
                var f = splitPath(path)[2];
                if (ext && f.substr(-1 * ext.length) === ext) {
                    f = f.substr(0, f.length - ext.length)
                }
                return f
            };
            exports.extname = function(path) {
                return splitPath(path)[3]
            };

            function filter(xs, f) {
                if (xs.filter) return xs.filter(f);
                var res = [];
                for (var i = 0; i < xs.length; i++) {
                    if (f(xs[i], i, xs)) res.push(xs[i])
                }
                return res
            }
            var substr = "ab".substr(-1) === "b" ? function(str, start, len) {
                return str.substr(start, len)
            } : function(str, start, len) {
                if (start < 0) start = str.length + start;
                return str.substr(start, len)
            }
        }).call(this, require("_process"))
    }, {
        _process: 384
    }],
    384: [function(require, module, exports) {
        var process = module.exports = {};
        var queue = [];
        var draining = false;

        function drainQueue() {
            if (draining) {
                return
            }
            draining = true;
            var currentQueue;
            var len = queue.length;
            while (len) {
                currentQueue = queue;
                queue = [];
                var i = -1;
                while (++i < len) {
                    currentQueue[i]()
                }
                len = queue.length
            }
            draining = false
        }
        process.nextTick = function(fun) {
            queue.push(fun);
            if (!draining) {
                setTimeout(drainQueue, 0)
            }
        };
        process.title = "browser";
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = "";
        process.versions = {};

        function noop() {}
        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.binding = function(name) {
            throw new Error("process.binding is not supported")
        };
        process.cwd = function() {
            return "/"
        };
        process.chdir = function(dir) {
            throw new Error("process.chdir is not supported")
        };
        process.umask = function() {
            return 0
        }
    }, {}],
    385: [function(require, module, exports) {
        (function(Buffer) {
            var clone = function() {
                "use strict";

                function clone(parent, circular, depth, prototype) {
                    var filter;
                    if (typeof circular === "object") {
                        depth = circular.depth;
                        prototype = circular.prototype;
                        filter = circular.filter;
                        circular = circular.circular
                    }
                    var allParents = [];
                    var allChildren = [];
                    var useBuffer = typeof Buffer != "undefined";
                    if (typeof circular == "undefined") circular = true;
                    if (typeof depth == "undefined") depth = Infinity;

                    function _clone(parent, depth) {
                        if (parent === null) return null;
                        if (depth == 0) return parent;
                        var child;
                        var proto;
                        if (typeof parent != "object") {
                            return parent
                        }
                        if (clone.__isArray(parent)) {
                            child = []
                        } else if (clone.__isRegExp(parent)) {
                            child = new RegExp(parent.source, __getRegExpFlags(parent));
                            if (parent.lastIndex) child.lastIndex = parent.lastIndex
                        } else if (clone.__isDate(parent)) {
                            child = new Date(parent.getTime())
                        } else if (useBuffer && Buffer.isBuffer(parent)) {
                            child = new Buffer(parent.length);
                            parent.copy(child);
                            return child
                        } else {
                            if (typeof prototype == "undefined") {
                                proto = Object.getPrototypeOf(parent);
                                child = Object.create(proto)
                            } else {
                                child = Object.create(prototype);
                                proto = prototype
                            }
                        }
                        if (circular) {
                            var index = allParents.indexOf(parent);
                            if (index != -1) {
                                return allChildren[index]
                            }
                            allParents.push(parent);
                            allChildren.push(child)
                        }
                        for (var i in parent) {
                            var attrs;
                            if (proto) {
                                attrs = Object.getOwnPropertyDescriptor(proto, i)
                            }
                            if (attrs && attrs.set == null) {
                                continue
                            }
                            child[i] = _clone(parent[i], depth - 1)
                        }
                        return child
                    }
                    return _clone(parent, depth)
                }
                clone.clonePrototype = function clonePrototype(parent) {
                    if (parent === null) return null;
                    var c = function() {};
                    c.prototype = parent;
                    return new c
                };

                function __objToStr(o) {
                    return Object.prototype.toString.call(o)
                }
                clone.__objToStr = __objToStr;

                function __isDate(o) {
                    return typeof o === "object" && __objToStr(o) === "[object Date]"
                }
                clone.__isDate = __isDate;

                function __isArray(o) {
                    return typeof o === "object" && __objToStr(o) === "[object Array]"
                }
                clone.__isArray = __isArray;

                function __isRegExp(o) {
                    return typeof o === "object" && __objToStr(o) === "[object RegExp]"
                }
                clone.__isRegExp = __isRegExp;

                function __getRegExpFlags(re) {
                    var flags = "";
                    if (re.global) flags += "g";
                    if (re.ignoreCase) flags += "i";
                    if (re.multiline) flags += "m";
                    return flags
                }
                clone.__getRegExpFlags = __getRegExpFlags;
                return clone
            }();
            if (typeof module === "object" && module.exports) {
                module.exports = clone
            }
        }).call(this, require("buffer").Buffer)
    }, {
        buffer: 379
    }],
    386: [function(require, module, exports) {
        exports.parse = require("./lib/parse");
        exports.stringify = require("./lib/stringify")
    }, {
        "./lib/parse": 387,
        "./lib/stringify": 391
    }],
    387: [function(require, module, exports) {
        var commentre = /\/\*[^*]*\*+([^\/*][^*]*\*+)*\//g;
        module.exports = function(css, options) {
            options = options || {};
            var lineno = 1;
            var column = 1;

            function updatePosition(str) {
                var lines = str.match(/\n/g);
                if (lines) lineno += lines.length;
                var i = str.lastIndexOf("\n");
                column = ~i ? str.length - i : column + str.length
            }

            function position() {
                var start = {
                    line: lineno,
                    column: column
                };
                return function(node) {
                    node.position = new Position(start);
                    whitespace();
                    return node
                }
            }

            function Position(start) {
                this.start = start;
                this.end = {
                    line: lineno,
                    column: column
                };
                this.source = options.source
            }
            Position.prototype.content = css;
            var errorsList = [];

            function error(msg) {
                var err = new Error(options.source + ":" + lineno + ":" + column + ": " + msg);
                err.reason = msg;
                err.filename = options.source;
                err.line = lineno;
                err.column = column;
                err.source = css;
                if (options.silent) {
                    errorsList.push(err)
                } else {
                    throw err
                }
            }

            function stylesheet() {
                var rulesList = rules();
                return {
                    type: "stylesheet",
                    stylesheet: {
                        rules: rulesList,
                        parsingErrors: errorsList
                    }
                }
            }

            function open() {
                return match(/^{\s*/)
            }

            function close() {
                return match(/^}/)
            }

            function rules() {
                var node;
                var rules = [];
                whitespace();
                comments(rules);
                while (css.length && css.charAt(0) != "}" && (node = atrule() || rule())) {
                    if (node !== false) {
                        rules.push(node);
                        comments(rules)
                    }
                }
                return rules
            }

            function match(re) {
                var m = re.exec(css);
                if (!m) return;
                var str = m[0];
                updatePosition(str);
                css = css.slice(str.length);
                return m
            }

            function whitespace() {
                match(/^\s*/)
            }

            function comments(rules) {
                var c;
                rules = rules || [];
                while (c = comment()) {
                    if (c !== false) {
                        rules.push(c)
                    }
                }
                return rules
            }

            function comment() {
                var pos = position();
                if ("/" != css.charAt(0) || "*" != css.charAt(1)) return;
                var i = 2;
                while ("" != css.charAt(i) && ("*" != css.charAt(i) || "/" != css.charAt(i + 1))) ++i;
                i += 2;
                if ("" === css.charAt(i - 1)) {
                    return error("End of comment missing")
                }
                var str = css.slice(2, i - 2);
                column += 2;
                updatePosition(str);
                css = css.slice(i);
                column += 2;
                return pos({
                    type: "comment",
                    comment: str
                })
            }

            function selector() {
                var m = match(/^([^{]+)/);
                if (!m) return;
                return trim(m[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*\/+/g, "").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, function(m) {
                    return m.replace(/,/g, "‌")
                }).split(/\s*(?![^(]*\)),\s*/).map(function(s) {
                    return s.replace(/\u200C/g, ",")
                })
            }

            function declaration() {
                var pos = position();
                var prop = match(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
                if (!prop) return;
                prop = trim(prop[0]);
                if (!match(/^:\s*/)) return error("property missing ':'");
                var val = match(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/);
                var ret = pos({
                    type: "declaration",
                    property: prop.replace(commentre, ""),
                    value: val ? trim(val[0]).replace(commentre, "") : ""
                });
                match(/^[;\s]*/);
                return ret
            }

            function declarations() {
                var decls = [];
                if (!open()) return error("missing '{'");
                comments(decls);
                var decl;
                while (decl = declaration()) {
                    if (decl !== false) {
                        decls.push(decl);
                        comments(decls)
                    }
                }
                if (!close()) return error("missing '}'");
                return decls
            }

            function keyframe() {
                var m;
                var vals = [];
                var pos = position();
                while (m = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/)) {
                    vals.push(m[1]);
                    match(/^,\s*/)
                }
                if (!vals.length) return;
                return pos({
                    type: "keyframe",
                    values: vals,
                    declarations: declarations()
                })
            }

            function atkeyframes() {
                var pos = position();
                var m = match(/^@([-\w]+)?keyframes\s*/);
                if (!m) return;
                var vendor = m[1];
                var m = match(/^([-\w]+)\s*/);
                if (!m) return error("@keyframes missing name");
                var name = m[1];
                if (!open()) return error("@keyframes missing '{'");
                var frame;
                var frames = comments();
                while (frame = keyframe()) {
                    frames.push(frame);
                    frames = frames.concat(comments())
                }
                if (!close()) return error("@keyframes missing '}'");
                return pos({
                    type: "keyframes",
                    name: name,
                    vendor: vendor,
                    keyframes: frames
                })
            }

            function atsupports() {
                var pos = position();
                var m = match(/^@supports *([^{]+)/);
                if (!m) return;
                var supports = trim(m[1]);
                if (!open()) return error("@supports missing '{'");
                var style = comments().concat(rules());
                if (!close()) return error("@supports missing '}'");
                return pos({
                    type: "supports",
                    supports: supports,
                    rules: style
                })
            }

            function athost() {
                var pos = position();
                var m = match(/^@host\s*/);
                if (!m) return;
                if (!open()) return error("@host missing '{'");
                var style = comments().concat(rules());
                if (!close()) return error("@host missing '}'");
                return pos({
                    type: "host",
                    rules: style
                })
            }

            function atmedia() {
                var pos = position();
                var m = match(/^@media *([^{]+)/);
                if (!m) return;
                var media = trim(m[1]);
                if (!open()) return error("@media missing '{'");
                var style = comments().concat(rules());
                if (!close()) return error("@media missing '}'");
                return pos({
                    type: "media",
                    media: media,
                    rules: style
                })
            }

            function atcustommedia() {
                var pos = position();
                var m = match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
                if (!m) return;
                return pos({
                    type: "custom-media",
                    name: trim(m[1]),
                    media: trim(m[2])
                })
            }

            function atpage() {
                var pos = position();
                var m = match(/^@page */);
                if (!m) return;
                var sel = selector() || [];
                if (!open()) return error("@page missing '{'");
                var decls = comments();
                var decl;
                while (decl = declaration()) {
                    decls.push(decl);
                    decls = decls.concat(comments())
                }
                if (!close()) return error("@page missing '}'");
                return pos({
                    type: "page",
                    selectors: sel,
                    declarations: decls
                })
            }

            function atdocument() {
                var pos = position();
                var m = match(/^@([-\w]+)?document *([^{]+)/);
                if (!m) return;
                var vendor = trim(m[1]);
                var doc = trim(m[2]);
                if (!open()) return error("@document missing '{'");
                var style = comments().concat(rules());
                if (!close()) return error("@document missing '}'");
                return pos({
                    type: "document",
                    document: doc,
                    vendor: vendor,
                    rules: style
                })
            }

            function atfontface() {
                var pos = position();
                var m = match(/^@font-face\s*/);
                if (!m) return;
                if (!open()) return error("@font-face missing '{'");
                var decls = comments();
                var decl;
                while (decl = declaration()) {
                    decls.push(decl);
                    decls = decls.concat(comments())
                }
                if (!close()) return error("@font-face missing '}'");
                return pos({
                    type: "font-face",
                    declarations: decls
                })
            }
            var atimport = _compileAtrule("import");
            var atcharset = _compileAtrule("charset");
            var atnamespace = _compileAtrule("namespace");

            function _compileAtrule(name) {
                var re = new RegExp("^@" + name + "\\s*([^;]+);");
                return function() {
                    var pos = position();
                    var m = match(re);
                    if (!m) return;
                    var ret = {
                        type: name
                    };
                    ret[name] = m[1].trim();
                    return pos(ret)
                }
            }

            function atrule() {
                if (css[0] != "@") return;
                return atkeyframes() || atmedia() || atcustommedia() || atsupports() || atimport() || atcharset() || atnamespace() || atdocument() || atpage() || athost() || atfontface()
            }

            function rule() {
                var pos = position();
                var sel = selector();
                if (!sel) return error("selector missing");
                comments();
                return pos({
                    type: "rule",
                    selectors: sel,
                    declarations: declarations()
                })
            }
            return addParent(stylesheet())
        };

        function trim(str) {
            return str ? str.replace(/^\s+|\s+$/g, "") : ""
        }

        function addParent(obj, parent) {
            var isNode = obj && typeof obj.type === "string";
            var childParent = isNode ? obj : parent;
            for (var k in obj) {
                var value = obj[k];
                if (Array.isArray(value)) {
                    value.forEach(function(v) {
                        addParent(v, childParent)
                    })
                } else if (value && typeof value === "object") {
                    addParent(value, childParent)
                }
            }
            if (isNode) {
                Object.defineProperty(obj, "parent", {
                    configurable: true,
                    writable: true,
                    enumerable: false,
                    value: parent || null
                })
            }
            return obj
        }
    }, {}],
    388: [function(require, module, exports) {
        module.exports = Compiler;

        function Compiler(opts) {
            this.options = opts || {}
        }
        Compiler.prototype.emit = function(str) {
            return str
        };
        Compiler.prototype.visit = function(node) {
            return this[node.type](node)
        };
        Compiler.prototype.mapVisit = function(nodes, delim) {
            var buf = "";
            delim = delim || "";
            for (var i = 0, length = nodes.length; i < length; i++) {
                buf += this.visit(nodes[i]);
                if (delim && i < length - 1) buf += this.emit(delim)
            }
            return buf
        }
    }, {}],
    389: [function(require, module, exports) {
        var Base = require("./compiler");
        var inherits = require("inherits");
        module.exports = Compiler;

        function Compiler(options) {
            Base.call(this, options)
        }
        inherits(Compiler, Base);
        Compiler.prototype.compile = function(node) {
            return node.stylesheet.rules.map(this.visit, this).join("")
        };
        Compiler.prototype.comment = function(node) {
            return this.emit("", node.position)
        };
        Compiler.prototype.import = function(node) {
            return this.emit("@import " + node.import+";", node.position)
        };
        Compiler.prototype.media = function(node) {
            return this.emit("@media " + node.media, node.position) + this.emit("{") + this.mapVisit(node.rules) + this.emit("}")
        };
        Compiler.prototype.document = function(node) {
            var doc = "@" + (node.vendor || "") + "document " + node.document;
            return this.emit(doc, node.position) + this.emit("{") + this.mapVisit(node.rules) + this.emit("}")
        };
        Compiler.prototype.charset = function(node) {
            return this.emit("@charset " + node.charset + ";", node.position)
        };
        Compiler.prototype.namespace = function(node) {
            return this.emit("@namespace " + node.namespace + ";", node.position)
        };
        Compiler.prototype.supports = function(node) {
            return this.emit("@supports " + node.supports, node.position) + this.emit("{") + this.mapVisit(node.rules) + this.emit("}")
        };
        Compiler.prototype.keyframes = function(node) {
            return this.emit("@" + (node.vendor || "") + "keyframes " + node.name, node.position) + this.emit("{") + this.mapVisit(node.keyframes) + this.emit("}")
        };
        Compiler.prototype.keyframe = function(node) {
            var decls = node.declarations;
            return this.emit(node.values.join(","), node.position) + this.emit("{") + this.mapVisit(decls) + this.emit("}")
        };
        Compiler.prototype.page = function(node) {
            var sel = node.selectors.length ? node.selectors.join(", ") : "";
            return this.emit("@page " + sel, node.position) + this.emit("{") + this.mapVisit(node.declarations) + this.emit("}")
        };
        Compiler.prototype["font-face"] = function(node) {
            return this.emit("@font-face", node.position) + this.emit("{") + this.mapVisit(node.declarations) + this.emit("}")
        };
        Compiler.prototype.host = function(node) {
            return this.emit("@host", node.position) + this.emit("{") + this.mapVisit(node.rules) + this.emit("}")
        };
        Compiler.prototype["custom-media"] = function(node) {
            return this.emit("@custom-media " + node.name + " " + node.media + ";", node.position)
        };
        Compiler.prototype.rule = function(node) {
            var decls = node.declarations;
            if (!decls.length) return "";
            return this.emit(node.selectors.join(","), node.position) + this.emit("{") + this.mapVisit(decls) + this.emit("}")
        };
        Compiler.prototype.declaration = function(node) {
            return this.emit(node.property + ":" + node.value, node.position) + this.emit(";")
        }
    }, {
        "./compiler": 388,
        inherits: 393
    }],
    390: [function(require, module, exports) {
        var Base = require("./compiler");
        var inherits = require("inherits");
        module.exports = Compiler;

        function Compiler(options) {
            options = options || {};
            Base.call(this, options);
            this.indentation = options.indent
        }
        inherits(Compiler, Base);
        Compiler.prototype.compile = function(node) {
            return this.stylesheet(node)
        };
        Compiler.prototype.stylesheet = function(node) {
            return this.mapVisit(node.stylesheet.rules, "\n\n")
        };
        Compiler.prototype.comment = function(node) {
            return this.emit(this.indent() + "/*" + node.comment + "*/", node.position)
        };
        Compiler.prototype.import = function(node) {
            return this.emit("@import " + node.import+";", node.position)
        };
        Compiler.prototype.media = function(node) {
            return this.emit("@media " + node.media, node.position) + this.emit(" {\n" + this.indent(1)) + this.mapVisit(node.rules, "\n\n") + this.emit(this.indent(-1) + "\n}")
        };
        Compiler.prototype.document = function(node) {
            var doc = "@" + (node.vendor || "") + "document " + node.document;
            return this.emit(doc, node.position) + this.emit(" " + " {\n" + this.indent(1)) + this.mapVisit(node.rules, "\n\n") + this.emit(this.indent(-1) + "\n}")
        };
        Compiler.prototype.charset = function(node) {
            return this.emit("@charset " + node.charset + ";", node.position)
        };
        Compiler.prototype.namespace = function(node) {
            return this.emit("@namespace " + node.namespace + ";", node.position)
        };
        Compiler.prototype.supports = function(node) {
            return this.emit("@supports " + node.supports, node.position) + this.emit(" {\n" + this.indent(1)) + this.mapVisit(node.rules, "\n\n") + this.emit(this.indent(-1) + "\n}")
        };
        Compiler.prototype.keyframes = function(node) {
            return this.emit("@" + (node.vendor || "") + "keyframes " + node.name, node.position) + this.emit(" {\n" + this.indent(1)) + this.mapVisit(node.keyframes, "\n") + this.emit(this.indent(-1) + "}")
        };
        Compiler.prototype.keyframe = function(node) {
            var decls = node.declarations;
            return this.emit(this.indent()) + this.emit(node.values.join(", "), node.position) + this.emit(" {\n" + this.indent(1)) + this.mapVisit(decls, "\n") + this.emit(this.indent(-1) + "\n" + this.indent() + "}\n")
        };
        Compiler.prototype.page = function(node) {
            var sel = node.selectors.length ? node.selectors.join(", ") + " " : "";
            return this.emit("@page " + sel, node.position) + this.emit("{\n") + this.emit(this.indent(1)) + this.mapVisit(node.declarations, "\n") + this.emit(this.indent(-1)) + this.emit("\n}")
        };
        Compiler.prototype["font-face"] = function(node) {
            return this.emit("@font-face ", node.position) + this.emit("{\n") + this.emit(this.indent(1)) + this.mapVisit(node.declarations, "\n") + this.emit(this.indent(-1)) + this.emit("\n}")
        };
        Compiler.prototype.host = function(node) {
            return this.emit("@host", node.position) + this.emit(" {\n" + this.indent(1)) + this.mapVisit(node.rules, "\n\n") + this.emit(this.indent(-1) + "\n}")
        };
        Compiler.prototype["custom-media"] = function(node) {
            return this.emit("@custom-media " + node.name + " " + node.media + ";", node.position)
        };
        Compiler.prototype.rule = function(node) {
            var indent = this.indent();
            var decls = node.declarations;
            if (!decls.length) return "";
            return this.emit(node.selectors.map(function(s) {
                return indent + s
            }).join(",\n"), node.position) + this.emit(" {\n") + this.emit(this.indent(1)) + this.mapVisit(decls, "\n") + this.emit(this.indent(-1)) + this.emit("\n" + this.indent() + "}")
        };
        Compiler.prototype.declaration = function(node) {
            return this.emit(this.indent()) + this.emit(node.property + ": " + node.value, node.position) + this.emit(";")
        };
        Compiler.prototype.indent = function(level) {
            this.level = this.level || 1;
            if (null != level) {
                this.level += level;
                return ""
            }
            return Array(this.level).join(this.indentation || "  ")
        }
    }, {
        "./compiler": 388,
        inherits: 393
    }],
    391: [function(require, module, exports) {
        var Compressed = require("./compress");
        var Identity = require("./identity");
        module.exports = function(node, options) {
            options = options || {};
            var compiler = options.compress ? new Compressed(options) : new Identity(options);
            if (options.sourcemap) {
                var sourcemaps = require("./source-map-support");
                sourcemaps(compiler);
                var code = compiler.compile(node);
                compiler.applySourceMaps();
                var map = options.sourcemap === "generator" ? compiler.map : compiler.map.toJSON();
                return {
                    code: code,
                    map: map
                }
            }
            var code = compiler.compile(node);
            return code
        }
    }, {
        "./compress": 389,
        "./identity": 390,
        "./source-map-support": 392
    }],
    392: [function(require, module, exports) {
        var SourceMap = require("source-map").SourceMapGenerator;
        var SourceMapConsumer = require("source-map").SourceMapConsumer;
        var sourceMapResolve = require("source-map-resolve");
        var urix = require("urix");
        var fs = require("fs");
        var path = require("path");
        module.exports = mixin;

        function mixin(compiler) {
            compiler._comment = compiler.comment;
            compiler.map = new SourceMap;
            compiler.position = {
                line: 1,
                column: 1
            };
            compiler.files = {};
            for (var k in exports) compiler[k] = exports[k]
        }
        exports.updatePosition = function(str) {
            var lines = str.match(/\n/g);
            if (lines) this.position.line += lines.length;
            var i = str.lastIndexOf("\n");
            this.position.column = ~i ? str.length - i : this.position.column + str.length
        };
        exports.emit = function(str, pos) {
            if (pos) {
                var sourceFile = urix(pos.source || "source.css");
                this.map.addMapping({
                    source: sourceFile,
                    generated: {
                        line: this.position.line,
                        column: Math.max(this.position.column - 1, 0)
                    },
                    original: {
                        line: pos.start.line,
                        column: pos.start.column - 1
                    }
                });
                this.addFile(sourceFile, pos)
            }
            this.updatePosition(str);
            return str
        };
        exports.addFile = function(file, pos) {
            if (typeof pos.content !== "string") return;
            if (Object.prototype.hasOwnProperty.call(this.files, file)) return;
            this.files[file] = pos.content
        };
        exports.applySourceMaps = function() {
            Object.keys(this.files).forEach(function(file) {
                var content = this.files[file];
                this.map.setSourceContent(file, content);
                if (this.options.inputSourcemaps !== false) {
                    var originalMap = sourceMapResolve.resolveSync(content, file, fs.readFileSync);
                    if (originalMap) {
                        var map = new SourceMapConsumer(originalMap.map);
                        var relativeTo = originalMap.sourcesRelativeTo;
                        this.map.applySourceMap(map, file, urix(path.dirname(relativeTo)))
                    }
                }
            }, this)
        };
        exports.comment = function(node) {
            if (/^# sourceMappingURL=/.test(node.comment)) return this.emit("", node.position);
            else return this._comment(node)
        }
    }, {
        fs: 378,
        path: 383,
        "source-map": 397,
        "source-map-resolve": 396,
        urix: 408
    }],
    393: [function(require, module, exports) {
        if (typeof Object.create === "function") {
            module.exports = function inherits(ctor, superCtor) {
                ctor.super_ = superCtor;
                ctor.prototype = Object.create(superCtor.prototype, {
                    constructor: {
                        value: ctor,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                })
            }
        } else {
            module.exports = function inherits(ctor, superCtor) {
                ctor.super_ = superCtor;
                var TempCtor = function() {};
                TempCtor.prototype = superCtor.prototype;
                ctor.prototype = new TempCtor;
                ctor.prototype.constructor = ctor
            }
        }
    }, {}],
    394: [function(require, module, exports) {
        void
        function(root, factory) {
            if (typeof define === "function" && define.amd) {
                define(factory)
            } else if (typeof exports === "object") {
                module.exports = factory()
            } else {
                root.resolveUrl = factory()
            }
        }(this, function() {
            function resolveUrl() {
                var numUrls = arguments.length;
                if (numUrls === 0) {
                    throw new Error("resolveUrl requires at least one argument; got none.")
                }
                var base = document.createElement("base");
                base.href = arguments[0];
                if (numUrls === 1) {
                    return base.href
                }
                var head = document.getElementsByTagName("head")[0];
                head.insertBefore(base, head.firstChild);
                var a = document.createElement("a");
                var resolved;
                for (var index = 1; index < numUrls; index++) {
                    a.href = arguments[index];
                    resolved = a.href;
                    base.href = resolved
                }
                head.removeChild(base);
                return resolved
            }
            return resolveUrl
        })
    }, {}],
    395: [function(require, module, exports) {
        void
        function(root, factory) {
            if (typeof define === "function" && define.amd) {
                define(factory)
            } else if (typeof exports === "object") {
                module.exports = factory()
            } else {
                root.sourceMappingURL = factory()
            }
        }(this, function() {
            var innerRegex = /[#@] sourceMappingURL=([^\s'"]*)/;
            var regex = RegExp("(?:" + "/\\*" + "(?:\\s*\r?\n(?://)?)?" + "(?:" + innerRegex.source + ")" + "\\s*" + "\\*/" + "|" + "//(?:" + innerRegex.source + ")" + ")" + "\\s*$");
            return {
                regex: regex,
                _innerRegex: innerRegex,
                getFrom: function(code) {
                    var match = code.match(regex);
                    return match ? match[1] || match[2] || "" : null
                },
                existsIn: function(code) {
                    return regex.test(code)
                },
                removeFrom: function(code) {
                    return code.replace(regex, "")
                },
                insertBefore: function(code, string) {
                    var match = code.match(regex);
                    if (match) {
                        return code.slice(0, match.index) + string + code.slice(match.index)
                    } else {
                        return code + string
                    }
                }
            }
        })
    }, {}],
    396: [function(require, module, exports) {
        void
        function(root, factory) {
            if (typeof define === "function" && define.amd) {
                define(["source-map-url", "resolve-url"], factory)
            } else if (typeof exports === "object") {
                var sourceMappingURL = require("source-map-url");
                var resolveUrl = require("resolve-url");
                module.exports = factory(sourceMappingURL, resolveUrl)
            } else {
                root.sourceMapResolve = factory(root.sourceMappingURL, root.resolveUrl)
            }
        }(this, function(sourceMappingURL, resolveUrl) {
            function callbackAsync(callback, error, result) {
                setImmediate(function() {
                    callback(error, result)
                })
            }

            function parseMapToJSON(string) {
                return JSON.parse(string.replace(/^\)\]\}'/, ""))
            }

            function resolveSourceMap(code, codeUrl, read, callback) {
                var mapData;
                try {
                    mapData = resolveSourceMapHelper(code, codeUrl)
                } catch (error) {
                    return callbackAsync(callback, error)
                }
                if (!mapData || mapData.map) {
                    return callbackAsync(callback, null, mapData)
                }
                read(mapData.url, function(error, result) {
                    if (error) {
                        return callback(error)
                    }
                    try {
                        mapData.map = parseMapToJSON(String(result))
                    } catch (error) {
                        return callback(error)
                    }
                    callback(null, mapData)
                })
            }

            function resolveSourceMapSync(code, codeUrl, read) {
                var mapData = resolveSourceMapHelper(code, codeUrl);
                if (!mapData || mapData.map) {
                    return mapData
                }
                mapData.map = parseMapToJSON(String(read(mapData.url)));
                return mapData
            }
            var dataUriRegex = /^data:([^,;]*)(;[^,;]*)*(?:,(.*))?$/;
            var jsonMimeTypeRegex = /^(?:application|text)\/json$/;

            function resolveSourceMapHelper(code, codeUrl) {
                var url = sourceMappingURL.getFrom(code);
                if (!url) {
                    return null
                }
                var dataUri = url.match(dataUriRegex);
                if (dataUri) {
                    var mimeType = dataUri[1];
                    var lastParameter = dataUri[2];
                    var encoded = dataUri[3];
                    if (!jsonMimeTypeRegex.test(mimeType)) {
                        throw new Error("Unuseful data uri mime type: " + (mimeType || "text/plain"))
                    }
                    return {
                        sourceMappingURL: url,
                        url: null,
                        sourcesRelativeTo: codeUrl,
                        map: parseMapToJSON(lastParameter === ";base64" ? atob(encoded) : decodeURIComponent(encoded))
                    }
                }
                var mapUrl = resolveUrl(codeUrl, url);
                return {
                    sourceMappingURL: url,
                    url: mapUrl,
                    sourcesRelativeTo: mapUrl,
                    map: null
                }
            }

            function resolveSources(map, mapUrl, read, options, callback) {
                if (typeof options === "function") {
                    callback = options;
                    options = {}
                }
                var pending = map.sources.length;
                var errored = false;
                var result = {
                    sourcesResolved: [],
                    sourcesContent: []
                };
                var done = function(error) {
                    if (errored) {
                        return
                    }
                    if (error) {
                        errored = true;
                        return callback(error)
                    }
                    pending--;
                    if (pending === 0) {
                        callback(null, result)
                    }
                };
                resolveSourcesHelper(map, mapUrl, options, function(fullUrl, sourceContent, index) {
                    result.sourcesResolved[index] = fullUrl;
                    if (typeof sourceContent === "string") {
                        result.sourcesContent[index] = sourceContent;
                        callbackAsync(done, null)
                    } else {
                        read(fullUrl, function(error, source) {
                            result.sourcesContent[index] = String(source);
                            done(error)
                        })
                    }
                })
            }

            function resolveSourcesSync(map, mapUrl, read, options) {
                var result = {
                    sourcesResolved: [],
                    sourcesContent: []
                };
                resolveSourcesHelper(map, mapUrl, options, function(fullUrl, sourceContent, index) {
                    result.sourcesResolved[index] = fullUrl;
                    if (read !== null) {
                        if (typeof sourceContent === "string") {
                            result.sourcesContent[index] = sourceContent
                        } else {
                            result.sourcesContent[index] = String(read(fullUrl))
                        }
                    }
                });
                return result
            }
            var endingSlash = /\/?$/;

            function resolveSourcesHelper(map, mapUrl, options, fn) {
                options = options || {};
                var fullUrl;
                var sourceContent;
                for (var index = 0, len = map.sources.length; index < len; index++) {
                    if (map.sourceRoot && !options.ignoreSourceRoot) {
                        fullUrl = resolveUrl(mapUrl, map.sourceRoot.replace(endingSlash, "/"), map.sources[index])
                    } else {
                        fullUrl = resolveUrl(mapUrl, map.sources[index])
                    }
                    sourceContent = (map.sourcesContent || [])[index];
                    fn(fullUrl, sourceContent, index)
                }
            }

            function resolve(code, codeUrl, read, options, callback) {
                if (typeof options === "function") {
                    callback = options;
                    options = {}
                }
                resolveSourceMap(code, codeUrl, read, function(error, mapData) {
                    if (error) {
                        return callback(error)
                    }
                    if (!mapData) {
                        return callback(null, null)
                    }
                    resolveSources(mapData.map, mapData.sourcesRelativeTo, read, options, function(error, result) {
                        if (error) {
                            return callback(error)
                        }
                        mapData.sourcesResolved = result.sourcesResolved;
                        mapData.sourcesContent = result.sourcesContent;
                        callback(null, mapData)
                    })
                })
            }

            function resolveSync(code, codeUrl, read, options) {
                var mapData = resolveSourceMapSync(code, codeUrl, read);
                if (!mapData) {
                    return null
                }
                var result = resolveSourcesSync(mapData.map, mapData.sourcesRelativeTo, read, options);
                mapData.sourcesResolved = result.sourcesResolved;
                mapData.sourcesContent = result.sourcesContent;
                return mapData
            }
            return {
                resolveSourceMap: resolveSourceMap,
                resolveSourceMapSync: resolveSourceMapSync,
                resolveSources: resolveSources,
                resolveSourcesSync: resolveSourcesSync,
                resolve: resolve,
                resolveSync: resolveSync
            }
        })
    }, {
        "resolve-url": 394,
        "source-map-url": 395
    }],
    397: [function(require, module, exports) {
        exports.SourceMapGenerator = require("./source-map/source-map-generator").SourceMapGenerator;
        exports.SourceMapConsumer = require("./source-map/source-map-consumer").SourceMapConsumer;
        exports.SourceNode = require("./source-map/source-node").SourceNode
    }, {
        "./source-map/source-map-consumer": 403,
        "./source-map/source-map-generator": 404,
        "./source-map/source-node": 405
    }],
    398: [function(require, module, exports) {
        if (typeof define !== "function") {
            var define = require("amdefine")(module, require)
        }
        define(function(require, exports, module) {
            var util = require("./util");

            function ArraySet() {
                this._array = [];
                this._set = {}
            }
            ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
                var set = new ArraySet;
                for (var i = 0, len = aArray.length; i < len; i++) {
                    set.add(aArray[i], aAllowDuplicates)
                }
                return set
            };
            ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
                var isDuplicate = this.has(aStr);
                var idx = this._array.length;
                if (!isDuplicate || aAllowDuplicates) {
                    this._array.push(aStr)
                }
                if (!isDuplicate) {
                    this._set[util.toSetString(aStr)] = idx
                }
            };
            ArraySet.prototype.has = function ArraySet_has(aStr) {
                return Object.prototype.hasOwnProperty.call(this._set, util.toSetString(aStr))
            };
            ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
                if (this.has(aStr)) {
                    return this._set[util.toSetString(aStr)]
                }
                throw new Error('"' + aStr + '" is not in the set.')
            };
            ArraySet.prototype.at = function ArraySet_at(aIdx) {
                if (aIdx >= 0 && aIdx < this._array.length) {
                    return this._array[aIdx]
                }
                throw new Error("No element indexed by " + aIdx)
            };
            ArraySet.prototype.toArray = function ArraySet_toArray() {
                return this._array.slice()
            };
            exports.ArraySet = ArraySet
        })
    }, {
        "./util": 406,
        amdefine: 407
    }],
    399: [function(require, module, exports) {
        if (typeof define !== "function") {
            var define = require("amdefine")(module, require)
        }
        define(function(require, exports, module) {
            var base64 = require("./base64");
            var VLQ_BASE_SHIFT = 5;
            var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
            var VLQ_BASE_MASK = VLQ_BASE - 1;
            var VLQ_CONTINUATION_BIT = VLQ_BASE;

            function toVLQSigned(aValue) {
                return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0
            }

            function fromVLQSigned(aValue) {
                var isNegative = (aValue & 1) === 1;
                var shifted = aValue >> 1;
                return isNegative ? -shifted : shifted
            }
            exports.encode = function base64VLQ_encode(aValue) {
                var encoded = "";
                var digit;
                var vlq = toVLQSigned(aValue);
                do {
                    digit = vlq & VLQ_BASE_MASK;
                    vlq >>>= VLQ_BASE_SHIFT;
                    if (vlq > 0) {
                        digit |= VLQ_CONTINUATION_BIT
                    }
                    encoded += base64.encode(digit)
                } while (vlq > 0);
                return encoded
            };
            exports.decode = function base64VLQ_decode(aStr, aOutParam) {
                var i = 0;
                var strLen = aStr.length;
                var result = 0;
                var shift = 0;
                var continuation, digit;
                do {
                    if (i >= strLen) {
                        throw new Error("Expected more digits in base 64 VLQ value.")
                    }
                    digit = base64.decode(aStr.charAt(i++));
                    continuation = !!(digit & VLQ_CONTINUATION_BIT);
                    digit &= VLQ_BASE_MASK;
                    result = result + (digit << shift);
                    shift += VLQ_BASE_SHIFT
                } while (continuation);
                aOutParam.value = fromVLQSigned(result);
                aOutParam.rest = aStr.slice(i)
            }
        })
    }, {
        "./base64": 400,
        amdefine: 407
    }],
    400: [function(require, module, exports) {
        if (typeof define !== "function") {
            var define = require("amdefine")(module, require)
        }
        define(function(require, exports, module) {
            var charToIntMap = {};
            var intToCharMap = {};
            "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("").forEach(function(ch, index) {
                charToIntMap[ch] = index;
                intToCharMap[index] = ch
            });
            exports.encode = function base64_encode(aNumber) {
                if (aNumber in intToCharMap) {
                    return intToCharMap[aNumber]
                }
                throw new TypeError("Must be between 0 and 63: " + aNumber)
            };
            exports.decode = function base64_decode(aChar) {
                if (aChar in charToIntMap) {
                    return charToIntMap[aChar]
                }
                throw new TypeError("Not a valid base 64 digit: " + aChar)
            }
        })
    }, {
        amdefine: 407
    }],
    401: [function(require, module, exports) {
        if (typeof define !== "function") {
            var define = require("amdefine")(module, require)
        }
        define(function(require, exports, module) {
            function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare) {
                var mid = Math.floor((aHigh - aLow) / 2) + aLow;
                var cmp = aCompare(aNeedle, aHaystack[mid], true);
                if (cmp === 0) {
                    return mid
                } else if (cmp > 0) {
                    if (aHigh - mid > 1) {
                        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare)
                    }
                    return mid
                } else {
                    if (mid - aLow > 1) {
                        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare)
                    }
                    return aLow < 0 ? -1 : aLow
                }
            }
            exports.search = function search(aNeedle, aHaystack, aCompare) {
                if (aHaystack.length === 0) {
                    return -1
                }
                return recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare)
            }
        })
    }, {
        amdefine: 407
    }],
    402: [function(require, module, exports) {
        if (typeof define !== "function") {
            var define = require("amdefine")(module, require)
        }
        define(function(require, exports, module) {
            var util = require("./util");

            function generatedPositionAfter(mappingA, mappingB) {
                var lineA = mappingA.generatedLine;
                var lineB = mappingB.generatedLine;
                var columnA = mappingA.generatedColumn;
                var columnB = mappingB.generatedColumn;
                return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositions(mappingA, mappingB) <= 0
            }

            function MappingList() {
                this._array = [];
                this._sorted = true;
                this._last = {
                    generatedLine: -1,
                    generatedColumn: 0
                }
            }
            MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
                this._array.forEach(aCallback, aThisArg)
            };
            MappingList.prototype.add = function MappingList_add(aMapping) {
                var mapping;
                if (generatedPositionAfter(this._last, aMapping)) {
                    this._last = aMapping;
                    this._array.push(aMapping)
                } else {
                    this._sorted = false;
                    this._array.push(aMapping)
                }
            };
            MappingList.prototype.toArray = function MappingList_toArray() {
                if (!this._sorted) {
                    this._array.sort(util.compareByGeneratedPositions);
                    this._sorted = true
                }
                return this._array
            };
            exports.MappingList = MappingList
        })
    }, {
        "./util": 406,
        amdefine: 407
    }],
    403: [function(require, module, exports) {
        if (typeof define !== "function") {
            var define = require("amdefine")(module, require)
        }
        define(function(require, exports, module) {
            var util = require("./util");
            var binarySearch = require("./binary-search");
            var ArraySet = require("./array-set").ArraySet;
            var base64VLQ = require("./base64-vlq");

            function SourceMapConsumer(aSourceMap) {
                var sourceMap = aSourceMap;
                if (typeof aSourceMap === "string") {
                    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ""))
                }
                var version = util.getArg(sourceMap, "version");
                var sources = util.getArg(sourceMap, "sources");
                var names = util.getArg(sourceMap, "names", []);
                var sourceRoot = util.getArg(sourceMap, "sourceRoot", null);
                var sourcesContent = util.getArg(sourceMap, "sourcesContent", null);
                var mappings = util.getArg(sourceMap, "mappings");
                var file = util.getArg(sourceMap, "file", null);
                if (version != this._version) {
                    throw new Error("Unsupported version: " + version)
                }
                sources = sources.map(util.normalize);
                this._names = ArraySet.fromArray(names, true);
                this._sources = ArraySet.fromArray(sources, true);
                this.sourceRoot = sourceRoot;
                this.sourcesContent = sourcesContent;
                this._mappings = mappings;
                this.file = file
            }
            SourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap) {
                var smc = Object.create(SourceMapConsumer.prototype);
                smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
                smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
                smc.sourceRoot = aSourceMap._sourceRoot;
                smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
                smc.file = aSourceMap._file;
                smc.__generatedMappings = aSourceMap._mappings.toArray().slice();
                smc.__originalMappings = aSourceMap._mappings.toArray().slice().sort(util.compareByOriginalPositions);
                return smc
            };
            SourceMapConsumer.prototype._version = 3;
            Object.defineProperty(SourceMapConsumer.prototype, "sources", {
                get: function() {
                    return this._sources.toArray().map(function(s) {
                        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s
                    }, this)
                }
            });
            SourceMapConsumer.prototype.__generatedMappings = null;
            Object.defineProperty(SourceMapConsumer.prototype, "_generatedMappings", {
                get: function() {
                    if (!this.__generatedMappings) {
                        this.__generatedMappings = [];
                        this.__originalMappings = [];
                        this._parseMappings(this._mappings, this.sourceRoot)
                    }
                    return this.__generatedMappings
                }
            });
            SourceMapConsumer.prototype.__originalMappings = null;
            Object.defineProperty(SourceMapConsumer.prototype, "_originalMappings", {
                get: function() {
                    if (!this.__originalMappings) {
                        this.__generatedMappings = [];
                        this.__originalMappings = [];
                        this._parseMappings(this._mappings, this.sourceRoot)
                    }
                    return this.__originalMappings
                }
            });
            SourceMapConsumer.prototype._nextCharIsMappingSeparator = function SourceMapConsumer_nextCharIsMappingSeparator(aStr) {
                var c = aStr.charAt(0);
                return c === ";" || c === ","
            };
            SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
                var generatedLine = 1;
                var previousGeneratedColumn = 0;
                var previousOriginalLine = 0;
                var previousOriginalColumn = 0;
                var previousSource = 0;
                var previousName = 0;
                var str = aStr;
                var temp = {};
                var mapping;
                while (str.length > 0) {
                    if (str.charAt(0) === ";") {
                        generatedLine++;
                        str = str.slice(1);
                        previousGeneratedColumn = 0
                    } else if (str.charAt(0) === ",") {
                        str = str.slice(1)
                    } else {
                        mapping = {};
                        mapping.generatedLine = generatedLine;
                        base64VLQ.decode(str, temp);
                        mapping.generatedColumn = previousGeneratedColumn + temp.value;
                        previousGeneratedColumn = mapping.generatedColumn;
                        str = temp.rest;
                        if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {
                            base64VLQ.decode(str, temp);
                            mapping.source = this._sources.at(previousSource + temp.value);
                            previousSource += temp.value;
                            str = temp.rest;
                            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {
                                throw new Error("Found a source, but no line and column")
                            }
                            base64VLQ.decode(str, temp);
                            mapping.originalLine = previousOriginalLine + temp.value;
                            previousOriginalLine = mapping.originalLine;
                            mapping.originalLine += 1;
                            str = temp.rest;
                            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {
                                throw new Error("Found a source and line, but no column")
                            }
                            base64VLQ.decode(str, temp);
                            mapping.originalColumn = previousOriginalColumn + temp.value;
                            previousOriginalColumn = mapping.originalColumn;
                            str = temp.rest;
                            if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {
                                base64VLQ.decode(str, temp);
                                mapping.name = this._names.at(previousName + temp.value);
                                previousName += temp.value;
                                str = temp.rest
                            }
                        }
                        this.__generatedMappings.push(mapping);
                        if (typeof mapping.originalLine === "number") {
                            this.__originalMappings.push(mapping)
                        }
                    }
                }
                this.__generatedMappings.sort(util.compareByGeneratedPositions);
                this.__originalMappings.sort(util.compareByOriginalPositions)
            };
            SourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator) {
                if (aNeedle[aLineName] <= 0) {
                    throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle[aLineName])
                }
                if (aNeedle[aColumnName] < 0) {
                    throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle[aColumnName])
                }
                return binarySearch.search(aNeedle, aMappings, aComparator)
            };
            SourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
                for (var index = 0; index < this._generatedMappings.length; ++index) {
                    var mapping = this._generatedMappings[index];
                    if (index + 1 < this._generatedMappings.length) {
                        var nextMapping = this._generatedMappings[index + 1];
                        if (mapping.generatedLine === nextMapping.generatedLine) {
                            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
                            continue
                        }
                    }
                    mapping.lastGeneratedColumn = Infinity
                }
            };
            SourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
                var needle = {
                    generatedLine: util.getArg(aArgs, "line"),
                    generatedColumn: util.getArg(aArgs, "column")
                };
                var index = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util.compareByGeneratedPositions);
                if (index >= 0) {
                    var mapping = this._generatedMappings[index];
                    if (mapping.generatedLine === needle.generatedLine) {
                        var source = util.getArg(mapping, "source", null);
                        if (source != null && this.sourceRoot != null) {
                            source = util.join(this.sourceRoot, source)
                        }
                        return {
                            source: source,
                            line: util.getArg(mapping, "originalLine", null),
                            column: util.getArg(mapping, "originalColumn", null),
                            name: util.getArg(mapping, "name", null)
                        }
                    }
                }
                return {
                    source: null,
                    line: null,
                    column: null,
                    name: null
                }
            };
            SourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource) {
                if (!this.sourcesContent) {
                    return null
                }
                if (this.sourceRoot != null) {
                    aSource = util.relative(this.sourceRoot, aSource)
                }
                if (this._sources.has(aSource)) {
                    return this.sourcesContent[this._sources.indexOf(aSource)]
                }
                var url;
                if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
                    var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
                    if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
                        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
                    }
                    if ((!url.path || url.path == "/") && this._sources.has("/" + aSource)) {
                        return this.sourcesContent[this._sources.indexOf("/" + aSource)]
                    }
                }
                throw new Error('"' + aSource + '" is not in the SourceMap.')
            };
            SourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
                var needle = {
                    source: util.getArg(aArgs, "source"),
                    originalLine: util.getArg(aArgs, "line"),
                    originalColumn: util.getArg(aArgs, "column")
                };
                if (this.sourceRoot != null) {
                    needle.source = util.relative(this.sourceRoot, needle.source)
                }
                var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions);
                if (index >= 0) {
                    var mapping = this._originalMappings[index];
                    return {
                        line: util.getArg(mapping, "generatedLine", null),
                        column: util.getArg(mapping, "generatedColumn", null),
                        lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
                    }
                }
                return {
                    line: null,
                    column: null,
                    lastColumn: null
                }
            };
            SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
                var needle = {
                    source: util.getArg(aArgs, "source"),
                    originalLine: util.getArg(aArgs, "line"),
                    originalColumn: Infinity
                };
                if (this.sourceRoot != null) {
                    needle.source = util.relative(this.sourceRoot, needle.source)
                }
                var mappings = [];
                var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions);
                if (index >= 0) {
                    var mapping = this._originalMappings[index];
                    while (mapping && mapping.originalLine === needle.originalLine) {
                        mappings.push({
                            line: util.getArg(mapping, "generatedLine", null),
                            column: util.getArg(mapping, "generatedColumn", null),
                            lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
                        });
                        mapping = this._originalMappings[--index]
                    }
                }
                return mappings.reverse()
            };
            SourceMapConsumer.GENERATED_ORDER = 1;
            SourceMapConsumer.ORIGINAL_ORDER = 2;
            SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
                var context = aContext || null;
                var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
                var mappings;
                switch (order) {
                    case SourceMapConsumer.GENERATED_ORDER:
                        mappings = this._generatedMappings;
                        break;
                    case SourceMapConsumer.ORIGINAL_ORDER:
                        mappings = this._originalMappings;
                        break;
                    default:
                        throw new Error("Unknown order of iteration.")
                }
                var sourceRoot = this.sourceRoot;
                mappings.map(function(mapping) {
                    var source = mapping.source;
                    if (source != null && sourceRoot != null) {
                        source = util.join(sourceRoot, source)
                    }
                    return {
                        source: source,
                        generatedLine: mapping.generatedLine,
                        generatedColumn: mapping.generatedColumn,
                        originalLine: mapping.originalLine,
                        originalColumn: mapping.originalColumn,
                        name: mapping.name
                    }
                }).forEach(aCallback, context)
            };
            exports.SourceMapConsumer = SourceMapConsumer
        })
    }, {
        "./array-set": 398,
        "./base64-vlq": 399,
        "./binary-search": 401,
        "./util": 406,
        amdefine: 407
    }],
    404: [function(require, module, exports) {
        if (typeof define !== "function") {
            var define = require("amdefine")(module, require)
        }
        define(function(require, exports, module) {
            var base64VLQ = require("./base64-vlq");
            var util = require("./util");
            var ArraySet = require("./array-set").ArraySet;
            var MappingList = require("./mapping-list").MappingList;

            function SourceMapGenerator(aArgs) {
                if (!aArgs) {
                    aArgs = {}
                }
                this._file = util.getArg(aArgs, "file", null);
                this._sourceRoot = util.getArg(aArgs, "sourceRoot", null);
                this._skipValidation = util.getArg(aArgs, "skipValidation", false);
                this._sources = new ArraySet;
                this._names = new ArraySet;
                this._mappings = new MappingList;
                this._sourcesContents = null
            }
            SourceMapGenerator.prototype._version = 3;
            SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
                var sourceRoot = aSourceMapConsumer.sourceRoot;
                var generator = new SourceMapGenerator({
                    file: aSourceMapConsumer.file,
                    sourceRoot: sourceRoot
                });
                aSourceMapConsumer.eachMapping(function(mapping) {
                    var newMapping = {
                        generated: {
                            line: mapping.generatedLine,
                            column: mapping.generatedColumn
                        }
                    };
                    if (mapping.source != null) {
                        newMapping.source = mapping.source;
                        if (sourceRoot != null) {
                            newMapping.source = util.relative(sourceRoot, newMapping.source)
                        }
                        newMapping.original = {
                            line: mapping.originalLine,
                            column: mapping.originalColumn
                        };
                        if (mapping.name != null) {
                            newMapping.name = mapping.name
                        }
                    }
                    generator.addMapping(newMapping)
                });
                aSourceMapConsumer.sources.forEach(function(sourceFile) {
                    var content = aSourceMapConsumer.sourceContentFor(sourceFile);
                    if (content != null) {
                        generator.setSourceContent(sourceFile, content)
                    }
                });
                return generator
            };
            SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
                var generated = util.getArg(aArgs, "generated");
                var original = util.getArg(aArgs, "original", null);
                var source = util.getArg(aArgs, "source", null);
                var name = util.getArg(aArgs, "name", null);
                if (!this._skipValidation) {
                    this._validateMapping(generated, original, source, name)
                }
                if (source != null && !this._sources.has(source)) {
                    this._sources.add(source)
                }
                if (name != null && !this._names.has(name)) {
                    this._names.add(name)
                }
                this._mappings.add({
                    generatedLine: generated.line,
                    generatedColumn: generated.column,
                    originalLine: original != null && original.line,
                    originalColumn: original != null && original.column,
                    source: source,
                    name: name
                })
            };
            SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
                var source = aSourceFile;
                if (this._sourceRoot != null) {
                    source = util.relative(this._sourceRoot, source)
                }
                if (aSourceContent != null) {
                    if (!this._sourcesContents) {
                        this._sourcesContents = {}
                    }
                    this._sourcesContents[util.toSetString(source)] = aSourceContent
                } else if (this._sourcesContents) {
                    delete this._sourcesContents[util.toSetString(source)];
                    if (Object.keys(this._sourcesContents).length === 0) {
                        this._sourcesContents = null
                    }
                }
            };
            SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
                var sourceFile = aSourceFile;
                if (aSourceFile == null) {
                    if (aSourceMapConsumer.file == null) {
                        throw new Error("SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, " + 'or the source map\'s "file" property. Both were omitted.')
                    }
                    sourceFile = aSourceMapConsumer.file
                }
                var sourceRoot = this._sourceRoot;
                if (sourceRoot != null) {
                    sourceFile = util.relative(sourceRoot, sourceFile)
                }
                var newSources = new ArraySet;
                var newNames = new ArraySet;
                this._mappings.unsortedForEach(function(mapping) {
                    if (mapping.source === sourceFile && mapping.originalLine != null) {
                        var original = aSourceMapConsumer.originalPositionFor({
                            line: mapping.originalLine,
                            column: mapping.originalColumn
                        });
                        if (original.source != null) {
                            mapping.source = original.source;
                            if (aSourceMapPath != null) {
                                mapping.source = util.join(aSourceMapPath, mapping.source)
                            }
                            if (sourceRoot != null) {
                                mapping.source = util.relative(sourceRoot, mapping.source)
                            }
                            mapping.originalLine = original.line;
                            mapping.originalColumn = original.column;
                            if (original.name != null) {
                                mapping.name = original.name
                            }
                        }
                    }
                    var source = mapping.source;
                    if (source != null && !newSources.has(source)) {
                        newSources.add(source)
                    }
                    var name = mapping.name;
                    if (name != null && !newNames.has(name)) {
                        newNames.add(name)
                    }
                }, this);
                this._sources = newSources;
                this._names = newNames;
                aSourceMapConsumer.sources.forEach(function(sourceFile) {
                    var content = aSourceMapConsumer.sourceContentFor(sourceFile);
                    if (content != null) {
                        if (aSourceMapPath != null) {
                            sourceFile = util.join(aSourceMapPath, sourceFile)
                        }
                        if (sourceRoot != null) {
                            sourceFile = util.relative(sourceRoot, sourceFile)
                        }
                        this.setSourceContent(sourceFile, content)
                    }
                }, this)
            };
            SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
                if (aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
                    return
                } else if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
                    return
                } else {
                    throw new Error("Invalid mapping: " + JSON.stringify({
                        generated: aGenerated,
                        source: aSource,
                        original: aOriginal,
                        name: aName
                    }))
                }
            };
            SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
                var previousGeneratedColumn = 0;
                var previousGeneratedLine = 1;
                var previousOriginalColumn = 0;
                var previousOriginalLine = 0;
                var previousName = 0;
                var previousSource = 0;
                var result = "";
                var mapping;
                var mappings = this._mappings.toArray();
                for (var i = 0, len = mappings.length; i < len; i++) {
                    mapping = mappings[i];
                    if (mapping.generatedLine !== previousGeneratedLine) {
                        previousGeneratedColumn = 0;
                        while (mapping.generatedLine !== previousGeneratedLine) {
                            result += ";";
                            previousGeneratedLine++
                        }
                    } else {
                        if (i > 0) {
                            if (!util.compareByGeneratedPositions(mapping, mappings[i - 1])) {
                                continue
                            }
                            result += ","
                        }
                    }
                    result += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
                    previousGeneratedColumn = mapping.generatedColumn;
                    if (mapping.source != null) {
                        result += base64VLQ.encode(this._sources.indexOf(mapping.source) - previousSource);
                        previousSource = this._sources.indexOf(mapping.source);
                        result += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
                        previousOriginalLine = mapping.originalLine - 1;
                        result += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
                        previousOriginalColumn = mapping.originalColumn;
                        if (mapping.name != null) {
                            result += base64VLQ.encode(this._names.indexOf(mapping.name) - previousName);
                            previousName = this._names.indexOf(mapping.name)
                        }
                    }
                }
                return result
            };
            SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
                return aSources.map(function(source) {
                    if (!this._sourcesContents) {
                        return null
                    }
                    if (aSourceRoot != null) {
                        source = util.relative(aSourceRoot, source)
                    }
                    var key = util.toSetString(source);
                    return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null
                }, this)
            };
            SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
                var map = {
                    version: this._version,
                    sources: this._sources.toArray(),
                    names: this._names.toArray(),
                    mappings: this._serializeMappings()
                };
                if (this._file != null) {
                    map.file = this._file
                }
                if (this._sourceRoot != null) {
                    map.sourceRoot = this._sourceRoot
                }
                if (this._sourcesContents) {
                    map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot)
                }
                return map
            };
            SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
                return JSON.stringify(this)
            };
            exports.SourceMapGenerator = SourceMapGenerator
        })
    }, {
        "./array-set": 398,
        "./base64-vlq": 399,
        "./mapping-list": 402,
        "./util": 406,
        amdefine: 407
    }],
    405: [function(require, module, exports) {
        if (typeof define !== "function") {
            var define = require("amdefine")(module, require)
        }
        define(function(require, exports, module) {
            var SourceMapGenerator = require("./source-map-generator").SourceMapGenerator;
            var util = require("./util");
            var REGEX_NEWLINE = /(\r?\n)/;
            var NEWLINE_CODE = 10;
            var isSourceNode = "$$$isSourceNode$$$";

            function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
                this.children = [];
                this.sourceContents = {};
                this.line = aLine == null ? null : aLine;
                this.column = aColumn == null ? null : aColumn;
                this.source = aSource == null ? null : aSource;
                this.name = aName == null ? null : aName;
                this[isSourceNode] = true;
                if (aChunks != null) this.add(aChunks)
            }
            SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
                var node = new SourceNode;
                var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
                var shiftNextLine = function() {
                    var lineContents = remainingLines.shift();
                    var newLine = remainingLines.shift() || "";
                    return lineContents + newLine
                };
                var lastGeneratedLine = 1,
                    lastGeneratedColumn = 0;
                var lastMapping = null;
                aSourceMapConsumer.eachMapping(function(mapping) {
                    if (lastMapping !== null) {
                        if (lastGeneratedLine < mapping.generatedLine) {
                            var code = "";
                            addMappingWithCode(lastMapping, shiftNextLine());
                            lastGeneratedLine++;
                            lastGeneratedColumn = 0
                        } else {
                            var nextLine = remainingLines[0];
                            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
                            remainingLines[0] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
                            lastGeneratedColumn = mapping.generatedColumn;
                            addMappingWithCode(lastMapping, code);
                            lastMapping = mapping;
                            return
                        }
                    }
                    while (lastGeneratedLine < mapping.generatedLine) {
                        node.add(shiftNextLine());
                        lastGeneratedLine++
                    }
                    if (lastGeneratedColumn < mapping.generatedColumn) {
                        var nextLine = remainingLines[0];
                        node.add(nextLine.substr(0, mapping.generatedColumn));
                        remainingLines[0] = nextLine.substr(mapping.generatedColumn);
                        lastGeneratedColumn = mapping.generatedColumn
                    }
                    lastMapping = mapping
                }, this);
                if (remainingLines.length > 0) {
                    if (lastMapping) {
                        addMappingWithCode(lastMapping, shiftNextLine())
                    }
                    node.add(remainingLines.join(""))
                }
                aSourceMapConsumer.sources.forEach(function(sourceFile) {
                    var content = aSourceMapConsumer.sourceContentFor(sourceFile);
                    if (content != null) {
                        if (aRelativePath != null) {
                            sourceFile = util.join(aRelativePath, sourceFile)
                        }
                        node.setSourceContent(sourceFile, content)
                    }
                });
                return node;

                function addMappingWithCode(mapping, code) {
                    if (mapping === null || mapping.source === undefined) {
                        node.add(code)
                    } else {
                        var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
                        node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name))
                    }
                }
            };
            SourceNode.prototype.add = function SourceNode_add(aChunk) {
                if (Array.isArray(aChunk)) {
                    aChunk.forEach(function(chunk) {
                        this.add(chunk)
                    }, this)
                } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
                    if (aChunk) {
                        this.children.push(aChunk)
                    }
                } else {
                    throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk)
                }
                return this
            };
            SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
                if (Array.isArray(aChunk)) {
                    for (var i = aChunk.length - 1; i >= 0; i--) {
                        this.prepend(aChunk[i])
                    }
                } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
                    this.children.unshift(aChunk)
                } else {
                    throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk)
                }
                return this
            };
            SourceNode.prototype.walk = function SourceNode_walk(aFn) {
                var chunk;
                for (var i = 0, len = this.children.length; i < len; i++) {
                    chunk = this.children[i];
                    if (chunk[isSourceNode]) {
                        chunk.walk(aFn)
                    } else {
                        if (chunk !== "") {
                            aFn(chunk, {
                                source: this.source,
                                line: this.line,
                                column: this.column,
                                name: this.name
                            })
                        }
                    }
                }
            };
            SourceNode.prototype.join = function SourceNode_join(aSep) {
                var newChildren;
                var i;
                var len = this.children.length;
                if (len > 0) {
                    newChildren = [];
                    for (i = 0; i < len - 1; i++) {
                        newChildren.push(this.children[i]);
                        newChildren.push(aSep)
                    }
                    newChildren.push(this.children[i]);
                    this.children = newChildren
                }
                return this
            };
            SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
                var lastChild = this.children[this.children.length - 1];
                if (lastChild[isSourceNode]) {
                    lastChild.replaceRight(aPattern, aReplacement)
                } else if (typeof lastChild === "string") {
                    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement)
                } else {
                    this.children.push("".replace(aPattern, aReplacement))
                }
                return this
            };
            SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
                this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent
            };
            SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
                for (var i = 0, len = this.children.length; i < len; i++) {
                    if (this.children[i][isSourceNode]) {
                        this.children[i].walkSourceContents(aFn)
                    }
                }
                var sources = Object.keys(this.sourceContents);
                for (var i = 0, len = sources.length; i < len; i++) {
                    aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]])
                }
            };
            SourceNode.prototype.toString = function SourceNode_toString() {
                var str = "";
                this.walk(function(chunk) {
                    str += chunk
                });
                return str
            };
            SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
                var generated = {
                    code: "",
                    line: 1,
                    column: 0
                };
                var map = new SourceMapGenerator(aArgs);
                var sourceMappingActive = false;
                var lastOriginalSource = null;
                var lastOriginalLine = null;
                var lastOriginalColumn = null;
                var lastOriginalName = null;
                this.walk(function(chunk, original) {
                    generated.code += chunk;
                    if (original.source !== null && original.line !== null && original.column !== null) {
                        if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
                            map.addMapping({
                                source: original.source,
                                original: {
                                    line: original.line,
                                    column: original.column
                                },
                                generated: {
                                    line: generated.line,
                                    column: generated.column
                                },
                                name: original.name
                            })
                        }
                        lastOriginalSource = original.source;
                        lastOriginalLine = original.line;
                        lastOriginalColumn = original.column;
                        lastOriginalName = original.name;
                        sourceMappingActive = true
                    } else if (sourceMappingActive) {
                        map.addMapping({
                            generated: {
                                line: generated.line,
                                column: generated.column
                            }
                        });
                        lastOriginalSource = null;
                        sourceMappingActive = false
                    }
                    for (var idx = 0, length = chunk.length; idx < length; idx++) {
                        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
                            generated.line++;
                            generated.column = 0;
                            if (idx + 1 === length) {
                                lastOriginalSource = null;
                                sourceMappingActive = false
                            } else if (sourceMappingActive) {
                                map.addMapping({
                                    source: original.source,
                                    original: {
                                        line: original.line,
                                        column: original.column
                                    },
                                    generated: {
                                        line: generated.line,
                                        column: generated.column
                                    },
                                    name: original.name
                                })
                            }
                        } else {
                            generated.column++
                        }
                    }
                });
                this.walkSourceContents(function(sourceFile, sourceContent) {
                    map.setSourceContent(sourceFile, sourceContent)
                });
                return {
                    code: generated.code,
                    map: map
                }
            };
            exports.SourceNode = SourceNode
        })
    }, {
        "./source-map-generator": 404,
        "./util": 406,
        amdefine: 407
    }],
    406: [function(require, module, exports) {
        if (typeof define !== "function") {
            var define = require("amdefine")(module, require)
        }
        define(function(require, exports, module) {
            function getArg(aArgs, aName, aDefaultValue) {
                if (aName in aArgs) {
                    return aArgs[aName]
                } else if (arguments.length === 3) {
                    return aDefaultValue
                } else {
                    throw new Error('"' + aName + '" is a required argument.')
                }
            }
            exports.getArg = getArg;
            var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
            var dataUrlRegexp = /^data:.+\,.+$/;

            function urlParse(aUrl) {
                var match = aUrl.match(urlRegexp);
                if (!match) {
                    return null
                }
                return {
                    scheme: match[1],
                    auth: match[2],
                    host: match[3],
                    port: match[4],
                    path: match[5]
                }
            }
            exports.urlParse = urlParse;

            function urlGenerate(aParsedUrl) {
                var url = "";
                if (aParsedUrl.scheme) {
                    url += aParsedUrl.scheme + ":"
                }
                url += "//";
                if (aParsedUrl.auth) {
                    url += aParsedUrl.auth + "@"
                }
                if (aParsedUrl.host) {
                    url += aParsedUrl.host
                }
                if (aParsedUrl.port) {
                    url += ":" + aParsedUrl.port
                }
                if (aParsedUrl.path) {
                    url += aParsedUrl.path
                }
                return url
            }
            exports.urlGenerate = urlGenerate;

            function normalize(aPath) {
                var path = aPath;
                var url = urlParse(aPath);
                if (url) {
                    if (!url.path) {
                        return aPath
                    }
                    path = url.path
                }
                var isAbsolute = path.charAt(0) === "/";
                var parts = path.split(/\/+/);
                for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
                    part = parts[i];
                    if (part === ".") {
                        parts.splice(i, 1)
                    } else if (part === "..") {
                        up++
                    } else if (up > 0) {
                        if (part === "") {
                            parts.splice(i + 1, up);
                            up = 0
                        } else {
                            parts.splice(i, 2);
                            up--
                        }
                    }
                }
                path = parts.join("/");
                if (path === "") {
                    path = isAbsolute ? "/" : "."
                }
                if (url) {
                    url.path = path;
                    return urlGenerate(url)
                }
                return path
            }
            exports.normalize = normalize;

            function join(aRoot, aPath) {
                if (aRoot === "") {
                    aRoot = "."
                }
                if (aPath === "") {
                    aPath = "."
                }
                var aPathUrl = urlParse(aPath);
                var aRootUrl = urlParse(aRoot);
                if (aRootUrl) {
                    aRoot = aRootUrl.path || "/"
                }
                if (aPathUrl && !aPathUrl.scheme) {
                    if (aRootUrl) {
                        aPathUrl.scheme = aRootUrl.scheme
                    }
                    return urlGenerate(aPathUrl)
                }
                if (aPathUrl || aPath.match(dataUrlRegexp)) {
                    return aPath
                }
                if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
                    aRootUrl.host = aPath;
                    return urlGenerate(aRootUrl)
                }
                var joined = aPath.charAt(0) === "/" ? aPath : normalize(aRoot.replace(/\/+$/, "") + "/" + aPath);
                if (aRootUrl) {
                    aRootUrl.path = joined;
                    return urlGenerate(aRootUrl)
                }
                return joined
            }
            exports.join = join;

            function relative(aRoot, aPath) {
                if (aRoot === "") {
                    aRoot = "."
                }
                aRoot = aRoot.replace(/\/$/, "");
                var url = urlParse(aRoot);
                if (aPath.charAt(0) == "/" && url && url.path == "/") {
                    return aPath.slice(1)
                }
                return aPath.indexOf(aRoot + "/") === 0 ? aPath.substr(aRoot.length + 1) : aPath
            }
            exports.relative = relative;

            function toSetString(aStr) {
                return "$" + aStr
            }
            exports.toSetString = toSetString;

            function fromSetString(aStr) {
                return aStr.substr(1)
            }
            exports.fromSetString = fromSetString;

            function strcmp(aStr1, aStr2) {
                var s1 = aStr1 || "";
                var s2 = aStr2 || "";
                return (s1 > s2) - (s1 < s2)
            }

            function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
                var cmp;
                cmp = strcmp(mappingA.source, mappingB.source);
                if (cmp) {
                    return cmp
                }
                cmp = mappingA.originalLine - mappingB.originalLine;
                if (cmp) {
                    return cmp
                }
                cmp = mappingA.originalColumn - mappingB.originalColumn;
                if (cmp || onlyCompareOriginal) {
                    return cmp
                }
                cmp = strcmp(mappingA.name, mappingB.name);
                if (cmp) {
                    return cmp
                }
                cmp = mappingA.generatedLine - mappingB.generatedLine;
                if (cmp) {
                    return cmp
                }
                return mappingA.generatedColumn - mappingB.generatedColumn
            }
            exports.compareByOriginalPositions = compareByOriginalPositions;

            function compareByGeneratedPositions(mappingA, mappingB, onlyCompareGenerated) {
                var cmp;
                cmp = mappingA.generatedLine - mappingB.generatedLine;
                if (cmp) {
                    return cmp
                }
                cmp = mappingA.generatedColumn - mappingB.generatedColumn;
                if (cmp || onlyCompareGenerated) {
                    return cmp
                }
                cmp = strcmp(mappingA.source, mappingB.source);
                if (cmp) {
                    return cmp
                }
                cmp = mappingA.originalLine - mappingB.originalLine;
                if (cmp) {
                    return cmp
                }
                cmp = mappingA.originalColumn - mappingB.originalColumn;
                if (cmp) {
                    return cmp
                }
                return strcmp(mappingA.name, mappingB.name)
            }
            exports.compareByGeneratedPositions = compareByGeneratedPositions
        })
    }, {
        amdefine: 407
    }],
    407: [function(require, module, exports) {
        (function(process, __filename) {
            "use strict";

            function amdefine(module, requireFn) {
                "use strict";
                var defineCache = {},
                    loaderCache = {},
                    alreadyCalled = false,
                    path = require("path"),
                    makeRequire, stringRequire;

                function trimDots(ary) {
                    var i, part;
                    for (i = 0; ary[i]; i += 1) {
                        part = ary[i];
                        if (part === ".") {
                            ary.splice(i, 1);
                            i -= 1
                        } else if (part === "..") {
                            if (i === 1 && (ary[2] === ".." || ary[0] === "..")) {
                                break
                            } else if (i > 0) {
                                ary.splice(i - 1, 2);
                                i -= 2
                            }
                        }
                    }
                }

                function normalize(name, baseName) {
                    var baseParts;
                    if (name && name.charAt(0) === ".") {
                        if (baseName) {
                            baseParts = baseName.split("/");
                            baseParts = baseParts.slice(0, baseParts.length - 1);
                            baseParts = baseParts.concat(name.split("/"));
                            trimDots(baseParts);
                            name = baseParts.join("/")
                        }
                    }
                    return name
                }

                function makeNormalize(relName) {
                    return function(name) {
                        return normalize(name, relName)
                    }
                }

                function makeLoad(id) {
                    function load(value) {
                        loaderCache[id] = value
                    }
                    load.fromText = function(id, text) {
                        throw new Error("amdefine does not implement load.fromText")
                    };
                    return load
                }
                makeRequire = function(systemRequire, exports, module, relId) {
                    function amdRequire(deps, callback) {
                        if (typeof deps === "string") {
                            return stringRequire(systemRequire, exports, module, deps, relId)
                        } else {
                            deps = deps.map(function(depName) {
                                return stringRequire(systemRequire, exports, module, depName, relId)
                            });
                            if (callback) {
                                process.nextTick(function() {
                                    callback.apply(null, deps)
                                })
                            }
                        }
                    }
                    amdRequire.toUrl = function(filePath) {
                        if (filePath.indexOf(".") === 0) {
                            return normalize(filePath, path.dirname(module.filename))
                        } else {
                            return filePath
                        }
                    };
                    return amdRequire
                };
                requireFn = requireFn || function req() {
                    return module.require.apply(module, arguments)
                };

                function runFactory(id, deps, factory) {
                    var r, e, m, result;
                    if (id) {
                        e = loaderCache[id] = {};
                        m = {
                            id: id,
                            uri: __filename,
                            exports: e
                        };
                        r = makeRequire(requireFn, e, m, id)
                    } else {
                        if (alreadyCalled) {
                            throw new Error("amdefine with no module ID cannot be called more than once per file.")
                        }
                        alreadyCalled = true;
                        e = module.exports;
                        m = module;
                        r = makeRequire(requireFn, e, m, module.id)
                    }
                    if (deps) {
                        deps = deps.map(function(depName) {
                            return r(depName)
                        })
                    }
                    if (typeof factory === "function") {
                        result = factory.apply(m.exports, deps)
                    } else {
                        result = factory
                    }
                    if (result !== undefined) {
                        m.exports = result;
                        if (id) {
                            loaderCache[id] = m.exports
                        }
                    }
                }
                stringRequire = function(systemRequire, exports, module, id, relId) {
                    var index = id.indexOf("!"),
                        originalId = id,
                        prefix, plugin;
                    if (index === -1) {
                        id = normalize(id, relId);
                        if (id === "require") {
                            return makeRequire(systemRequire, exports, module, relId)
                        } else if (id === "exports") {
                            return exports
                        } else if (id === "module") {
                            return module
                        } else if (loaderCache.hasOwnProperty(id)) {
                            return loaderCache[id]
                        } else if (defineCache[id]) {
                            runFactory.apply(null, defineCache[id]);
                            return loaderCache[id]
                        } else {
                            if (systemRequire) {
                                return systemRequire(originalId)
                            } else {
                                throw new Error("No module with ID: " + id)
                            }
                        }
                    } else {
                        prefix = id.substring(0, index);
                        id = id.substring(index + 1, id.length);
                        plugin = stringRequire(systemRequire, exports, module, prefix, relId);
                        if (plugin.normalize) {
                            id = plugin.normalize(id, makeNormalize(relId))
                        } else {
                            id = normalize(id, relId)
                        }
                        if (loaderCache[id]) {
                            return loaderCache[id]
                        } else {
                            plugin.load(id, makeRequire(systemRequire, exports, module, relId), makeLoad(id), {});
                            return loaderCache[id]
                        }
                    }
                };

                function define(id, deps, factory) {
                    if (Array.isArray(id)) {
                        factory = deps;
                        deps = id;
                        id = undefined
                    } else if (typeof id !== "string") {
                        factory = id;
                        id = deps = undefined
                    }
                    if (deps && !Array.isArray(deps)) {
                        factory = deps;
                        deps = undefined
                    }
                    if (!deps) {
                        deps = ["require", "exports", "module"]
                    }
                    if (id) {
                        defineCache[id] = [id, deps, factory]
                    } else {
                        runFactory(id, deps, factory)
                    }
                }
                define.require = function(id) {
                    if (loaderCache[id]) {
                        return loaderCache[id]
                    }
                    if (defineCache[id]) {
                        runFactory.apply(null, defineCache[id]);
                        return loaderCache[id]
                    }
                };
                define.amd = {};
                return define
            }
            module.exports = amdefine
        }).call(this, require("_process"), "/node_modules/css/node_modules/source-map/node_modules/amdefine/amdefine.js")
    }, {
        _process: 384,
        path: 383
    }],
    408: [function(require, module, exports) {
        var path = require("path");
        "use strict";

        function urix(aPath) {
            if (path.sep === "\\") {
                return aPath.replace(/\\/g, "/").replace(/^[a-z]:\/?/i, "/")
            }
            return aPath
        }
        module.exports = urix
    }, {
        path: 383
    }],
    409: [function(require, module, exports) {
        var pSlice = Array.prototype.slice;
        var objectKeys = require("./lib/keys.js");
        var isArguments = require("./lib/is_arguments.js");
        var deepEqual = module.exports = function(actual, expected, opts) {
            if (!opts) opts = {};
            if (actual === expected) {
                return true
            } else if (actual instanceof Date && expected instanceof Date) {
                return actual.getTime() === expected.getTime()
            } else if (!actual || !expected || typeof actual != "object" && typeof expected != "object") {
                return opts.strict ? actual === expected : actual == expected
            } else {
                return objEquiv(actual, expected, opts)
            }
        };

        function isUndefinedOrNull(value) {
            return value === null || value === undefined
        }

        function isBuffer(x) {
            if (!x || typeof x !== "object" || typeof x.length !== "number") return false;
            if (typeof x.copy !== "function" || typeof x.slice !== "function") {
                return false
            }
            if (x.length > 0 && typeof x[0] !== "number") return false;
            return true
        }

        function objEquiv(a, b, opts) {
            var i, key;
            if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) return false;
            if (a.prototype !== b.prototype) return false;
            if (isArguments(a)) {
                if (!isArguments(b)) {
                    return false
                }
                a = pSlice.call(a);
                b = pSlice.call(b);
                return deepEqual(a, b, opts)
            }
            if (isBuffer(a)) {
                if (!isBuffer(b)) {
                    return false
                }
                if (a.length !== b.length) return false;
                for (i = 0; i < a.length; i++) {
                    if (a[i] !== b[i]) return false
                }
                return true
            }
            try {
                var ka = objectKeys(a),
                    kb = objectKeys(b)
            } catch (e) {
                return false
            }
            if (ka.length != kb.length) return false;
            ka.sort();
            kb.sort();
            for (i = ka.length - 1; i >= 0; i--) {
                if (ka[i] != kb[i]) return false
            }
            for (i = ka.length - 1; i >= 0; i--) {
                key = ka[i];
                if (!deepEqual(a[key], b[key], opts)) return false
            }
            return typeof a === typeof b
        }
    }, {
        "./lib/is_arguments.js": 410,
        "./lib/keys.js": 411
    }],
    410: [function(require, module, exports) {
        var supportsArgumentsClass = function() {
            return Object.prototype.toString.call(arguments)
        }() == "[object Arguments]";
        exports = module.exports = supportsArgumentsClass ? supported : unsupported;
        exports.supported = supported;

        function supported(object) {
            return Object.prototype.toString.call(object) == "[object Arguments]"
        }
        exports.unsupported = unsupported;

        function unsupported(object) {
            return object && typeof object == "object" && typeof object.length == "number" && Object.prototype.hasOwnProperty.call(object, "callee") && !Object.prototype.propertyIsEnumerable.call(object, "callee") || false
        }
    }, {}],
    411: [function(require, module, exports) {
        exports = module.exports = typeof Object.keys === "function" ? Object.keys : shim;
        exports.shim = shim;

        function shim(obj) {
            var keys = [];
            for (var key in obj) keys.push(key);
            return keys
        }
    }, {}],
    412: [function(require, module, exports) {
        "use strict";
        var matchHtmlRegExp = /["'&<>]/;
        module.exports = escapeHtml;

        function escapeHtml(string) {
            var str = "" + string;
            var match = matchHtmlRegExp.exec(str);
            if (!match) {
                return str
            }
            var escape;
            var html = "";
            var index = 0;
            var lastIndex = 0;
            for (index = match.index; index < str.length; index++) {
                switch (str.charCodeAt(index)) {
                    case 34:
                        escape = "&quot;";
                        break;
                    case 38:
                        escape = "&amp;";
                        break;
                    case 39:
                        escape = "&#39;";
                        break;
                    case 60:
                        escape = "&lt;";
                        break;
                    case 62:
                        escape = "&gt;";
                        break;
                    default:
                        continue
                }
                if (lastIndex !== index) {
                    html += str.substring(lastIndex, index)
                }
                lastIndex = index + 1;
                html += escape
            }
            return lastIndex !== index ? html + str.substring(lastIndex, index) : html
        }
    }, {}],
    413: [function(require, module, exports) {
        (function() {
            var pluckCandidates, scorer, sortCandidates;
            scorer = require("./scorer");
            pluckCandidates = function(a) {
                return a.candidate
            };
            sortCandidates = function(a, b) {
                return b.score - a.score
            };
            module.exports = function(candidates, query, queryHasSlashes, _arg) {
                var candidate, key, maxResults, score, scoredCandidates, string, _i, _len, _ref;
                _ref = _arg != null ? _arg : {}, key = _ref.key, maxResults = _ref.maxResults;
                if (query) {
                    scoredCandidates = [];
                    for (_i = 0, _len = candidates.length; _i < _len; _i++) {
                        candidate = candidates[_i];
                        string = key != null ? candidate[key] : candidate;
                        if (!string) {
                            continue
                        }
                        score = scorer.score(string, query, queryHasSlashes);
                        if (!queryHasSlashes) {
                            score = scorer.basenameScore(string, query, score)
                        }
                        if (score > 0) {
                            scoredCandidates.push({
                                candidate: candidate,
                                score: score
                            })
                        }
                    }
                    scoredCandidates.sort(sortCandidates);
                    candidates = scoredCandidates.map(pluckCandidates)
                }
                if (maxResults != null) {
                    candidates = candidates.slice(0, maxResults)
                }
                return candidates
            }
        }).call(this)
    }, {
        "./scorer": 416
    }],
    414: [function(require, module, exports) {
        (function() {
            var PathSeparator, SpaceRegex, filter, matcher, scorer;
            scorer = require("./scorer");
            filter = require("./filter");
            matcher = require("./matcher");
            PathSeparator = require("path").sep;
            SpaceRegex = /\ /g;
            module.exports = {
                filter: function(candidates, query, options) {
                    var queryHasSlashes;
                    if (query) {
                        queryHasSlashes = query.indexOf(PathSeparator) !== -1;
                        query = query.replace(SpaceRegex, "")
                    }
                    return filter(candidates, query, queryHasSlashes, options)
                },
                score: function(string, query) {
                    var queryHasSlashes, score;
                    if (!string) {
                        return 0
                    }
                    if (!query) {
                        return 0
                    }
                    if (string === query) {
                        return 2
                    }
                    queryHasSlashes = query.indexOf(PathSeparator) !== -1;
                    query = query.replace(SpaceRegex, "");
                    score = scorer.score(string, query);
                    if (!queryHasSlashes) {
                        score = scorer.basenameScore(string, query, score)
                    }
                    return score
                },
                match: function(string, query) {
                    var baseMatches, index, matches, queryHasSlashes, seen, _i, _ref, _results;
                    if (!string) {
                        return []
                    }
                    if (!query) {
                        return []
                    }
                    if (string === query) {
                        return function() {
                            _results = [];
                            for (var _i = 0, _ref = string.length; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--) {
                                _results.push(_i)
                            }
                            return _results
                        }.apply(this)
                    }
                    queryHasSlashes = query.indexOf(PathSeparator) !== -1;
                    query = query.replace(SpaceRegex, "");
                    matches = matcher.match(string, query);
                    if (!queryHasSlashes) {
                        baseMatches = matcher.basenameMatch(string, query);
                        matches = matches.concat(baseMatches).sort(function(a, b) {
                            return a - b
                        });
                        seen = null;
                        index = 0;
                        while (index < matches.length) {
                            if (index && seen === matches[index]) {
                                matches.splice(index, 1)
                            } else {
                                seen = matches[index];
                                index++
                            }
                        }
                    }
                    return matches
                }
            }
        }).call(this)
    }, {
        "./filter": 413,
        "./matcher": 415,
        "./scorer": 416,
        path: 383
    }],
    415: [function(require, module, exports) {
        (function() {
            var PathSeparator;
            PathSeparator = require("path").sep;
            exports.basenameMatch = function(string, query) {
                var base, index, lastCharacter, slashCount;
                index = string.length - 1;
                while (string[index] === PathSeparator) {
                    index--
                }
                slashCount = 0;
                lastCharacter = index;
                base = null;
                while (index >= 0) {
                    if (string[index] === PathSeparator) {
                        slashCount++;
                        if (base == null) {
                            base = string.substring(index + 1, lastCharacter + 1)
                        }
                    } else if (index === 0) {
                        if (lastCharacter < string.length - 1) {
                            if (base == null) {
                                base = string.substring(0, lastCharacter + 1)
                            }
                        } else {
                            if (base == null) {
                                base = string
                            }
                        }
                    }
                    index--
                }
                return exports.match(base, query, string.length - base.length)
            };
            exports.match = function(string, query, stringOffset) {
                var character, indexInQuery, indexInString, lowerCaseIndex, matches, minIndex, queryLength, stringLength, upperCaseIndex, _i, _ref, _results;
                if (stringOffset == null) {
                    stringOffset = 0
                }
                if (string === query) {
                    return function() {
                        _results = [];
                        for (var _i = stringOffset, _ref = stringOffset + string.length; stringOffset <= _ref ? _i < _ref : _i > _ref; stringOffset <= _ref ? _i++ : _i--) {
                            _results.push(_i)
                        }
                        return _results
                    }.apply(this)
                }
                queryLength = query.length;
                stringLength = string.length;
                indexInQuery = 0;
                indexInString = 0;
                matches = [];
                while (indexInQuery < queryLength) {
                    character = query[indexInQuery++];
                    lowerCaseIndex = string.indexOf(character.toLowerCase());
                    upperCaseIndex = string.indexOf(character.toUpperCase());
                    minIndex = Math.min(lowerCaseIndex, upperCaseIndex);
                    if (minIndex === -1) {
                        minIndex = Math.max(lowerCaseIndex, upperCaseIndex)
                    }
                    indexInString = minIndex;
                    if (indexInString === -1) {
                        return []
                    }
                    matches.push(stringOffset + indexInString);
                    stringOffset += indexInString + 1;
                    string = string.substring(indexInString + 1, stringLength)
                }
                return matches
            }
        }).call(this)
    }, {
        path: 383
    }],
    416: [function(require, module, exports) {
        (function() {
            var PathSeparator, queryIsLastPathSegment;
            PathSeparator = require("path").sep;
            exports.basenameScore = function(string, query, score) {
                var base, depth, index, lastCharacter, segmentCount, slashCount;
                index = string.length - 1;
                while (string[index] === PathSeparator) {
                    index--
                }
                slashCount = 0;
                lastCharacter = index;
                base = null;
                while (index >= 0) {
                    if (string[index] === PathSeparator) {
                        slashCount++;
                        if (base == null) {
                            base = string.substring(index + 1, lastCharacter + 1)
                        }
                    } else if (index === 0) {
                        if (lastCharacter < string.length - 1) {
                            if (base == null) {
                                base = string.substring(0, lastCharacter + 1)
                            }
                        } else {
                            if (base == null) {
                                base = string
                            }
                        }
                    }
                    index--
                }
                if (base === string) {
                    score *= 2
                } else if (base) {
                    score += exports.score(base, query)
                }
                segmentCount = slashCount + 1;
                depth = Math.max(1, 10 - segmentCount);
                score *= depth * .01;
                return score
            };
            exports.score = function(string, query) {
                var character, characterScore, indexInQuery, indexInString, lowerCaseIndex, minIndex, queryLength, queryScore, stringLength, totalCharacterScore, upperCaseIndex, _ref;
                if (string === query) {
                    return 1
                }
                if (queryIsLastPathSegment(string, query)) {
                    return 1
                }
                totalCharacterScore = 0;
                queryLength = query.length;
                stringLength = string.length;
                indexInQuery = 0;
                indexInString = 0;
                while (indexInQuery < queryLength) {
                    character = query[indexInQuery++];
                    lowerCaseIndex = string.indexOf(character.toLowerCase());
                    upperCaseIndex = string.indexOf(character.toUpperCase());
                    minIndex = Math.min(lowerCaseIndex, upperCaseIndex);
                    if (minIndex === -1) {
                        minIndex = Math.max(lowerCaseIndex, upperCaseIndex)
                    }
                    indexInString = minIndex;
                    if (indexInString === -1) {
                        return 0
                    }
                    characterScore = .1;
                    if (string[indexInString] === character) {
                        characterScore += .1
                    }
                    if (indexInString === 0 || string[indexInString - 1] === PathSeparator) {
                        characterScore += .8
                    } else if ((_ref = string[indexInString - 1]) === "-" || _ref === "_" || _ref === " ") {
                        characterScore += .7
                    }
                    string = string.substring(indexInString + 1, stringLength);
                    totalCharacterScore += characterScore
                }
                queryScore = totalCharacterScore / queryLength;
                return (queryScore * (queryLength / stringLength) + queryScore) / 2
            };
            queryIsLastPathSegment = function(string, query) {
                if (string[string.length - query.length - 1] === PathSeparator) {
                    return string.lastIndexOf(query) === string.length - query.length
                }
            }
        }).call(this)
    }, {
        path: 383
    }],
    417: [function(require, module, exports) {
        function get_beautify(js_beautify, css_beautify, html_beautify) {
            var beautify = function(src, config) {
                return js_beautify.js_beautify(src, config)
            };
            beautify.js = js_beautify.js_beautify;
            beautify.css = css_beautify.css_beautify;
            beautify.html = html_beautify.html_beautify;
            beautify.js_beautify = js_beautify.js_beautify;
            beautify.css_beautify = css_beautify.css_beautify;
            beautify.html_beautify = html_beautify.html_beautify;
            return beautify
        }
        if (typeof define === "function" && define.amd) {
            define(["./lib/beautify", "./lib/beautify-css", "./lib/beautify-html"], function(js_beautify, css_beautify, html_beautify) {
                return get_beautify(js_beautify, css_beautify, html_beautify)
            })
        } else {
            (function(mod) {
                var js_beautify = require("./lib/beautify");
                var css_beautify = require("./lib/beautify-css");
                var html_beautify = require("./lib/beautify-html");
                mod.exports = get_beautify(js_beautify, css_beautify, html_beautify)
            })(module)
        }
    }, {
        "./lib/beautify": 420,
        "./lib/beautify-css": 418,
        "./lib/beautify-html": 419
    }],
    418: [function(require, module, exports) {
        (function(global) {
            (function() {
                function css_beautify(source_text, options) {
                    options = options || {};
                    source_text = source_text || "";
                    source_text = source_text.replace(/\r\n|[\r\u2028\u2029]/g, "\n");
                    var indentSize = options.indent_size || 4;
                    var indentCharacter = options.indent_char || " ";
                    var selectorSeparatorNewline = options.selector_separator_newline === undefined ? true : options.selector_separator_newline;
                    var end_with_newline = options.end_with_newline === undefined ? false : options.end_with_newline;
                    var newline_between_rules = options.newline_between_rules === undefined ? true : options.newline_between_rules;
                    var eol = options.eol ? options.eol : "\n";
                    if (typeof indentSize === "string") {
                        indentSize = parseInt(indentSize, 10)
                    }
                    if (options.indent_with_tabs) {
                        indentCharacter = "	";
                        indentSize = 1
                    }
                    eol = eol.replace(/\\r/, "\r").replace(/\\n/, "\n");
                    var whiteRe = /^\s+$/;
                    var wordRe = /[\w$\-_]/;
                    var pos = -1,
                        ch;
                    var parenLevel = 0;

                    function next() {
                        ch = source_text.charAt(++pos);
                        return ch || ""
                    }

                    function peek(skipWhitespace) {
                        var result = "";
                        var prev_pos = pos;
                        if (skipWhitespace) {
                            eatWhitespace()
                        }
                        result = source_text.charAt(pos + 1) || "";
                        pos = prev_pos - 1;
                        next();
                        return result
                    }

                    function eatString(endChars) {
                        var start = pos;
                        while (next()) {
                            if (ch === "\\") {
                                next()
                            } else if (endChars.indexOf(ch) !== -1) {
                                break
                            } else if (ch === "\n") {
                                break
                            }
                        }
                        return source_text.substring(start, pos + 1)
                    }

                    function peekString(endChar) {
                        var prev_pos = pos;
                        var str = eatString(endChar);
                        pos = prev_pos - 1;
                        next();
                        return str
                    }

                    function eatWhitespace() {
                        var result = "";
                        while (whiteRe.test(peek())) {
                            next();
                            result += ch
                        }
                        return result
                    }

                    function skipWhitespace() {
                        var result = "";
                        if (ch && whiteRe.test(ch)) {
                            result = ch
                        }
                        while (whiteRe.test(next())) {
                            result += ch
                        }
                        return result
                    }

                    function eatComment(singleLine) {
                        var start = pos;
                        singleLine = peek() === "/";
                        next();
                        while (next()) {
                            if (!singleLine && ch === "*" && peek() === "/") {
                                next();
                                break
                            } else if (singleLine && ch === "\n") {
                                return source_text.substring(start, pos)
                            }
                        }
                        return source_text.substring(start, pos) + ch
                    }

                    function lookBack(str) {
                        return source_text.substring(pos - str.length, pos).toLowerCase() === str
                    }

                    function foundNestedPseudoClass() {
                        var openParen = 0;
                        for (var i = pos + 1; i < source_text.length; i++) {
                            var ch = source_text.charAt(i);
                            if (ch === "{") {
                                return true
                            } else if (ch === "(") {
                                openParen += 1
                            } else if (ch === ")") {
                                if (openParen == 0) {
                                    return false
                                }
                                openParen -= 1
                            } else if (ch === ";" || ch === "}") {
                                return false
                            }
                        }
                        return false
                    }
                    var basebaseIndentString = source_text.match(/^[\t ]*/)[0];
                    var singleIndent = new Array(indentSize + 1).join(indentCharacter);
                    var indentLevel = 0;
                    var nestedLevel = 0;

                    function indent() {
                        indentLevel++;
                        basebaseIndentString += singleIndent
                    }

                    function outdent() {
                        indentLevel--;
                        basebaseIndentString = basebaseIndentString.slice(0, -indentSize)
                    }
                    var print = {};
                    print["{"] = function(ch) {
                        print.singleSpace();
                        output.push(ch);
                        print.newLine()
                    };
                    print["}"] = function(ch) {
                        print.newLine();
                        output.push(ch);
                        print.newLine()
                    };
                    print._lastCharWhitespace = function() {
                        return whiteRe.test(output[output.length - 1])
                    };
                    print.newLine = function(keepWhitespace) {
                        if (output.length) {
                            if (!keepWhitespace && output[output.length - 1] !== "\n") {
                                print.trim()
                            }
                            output.push("\n");
                            if (basebaseIndentString) {
                                output.push(basebaseIndentString)
                            }
                        }
                    };
                    print.singleSpace = function() {
                        if (output.length && !print._lastCharWhitespace()) {
                            output.push(" ")
                        }
                    };
                    print.preserveSingleSpace = function() {
                        if (isAfterSpace) {
                            print.singleSpace()
                        }
                    };
                    print.trim = function() {
                        while (print._lastCharWhitespace()) {
                            output.pop()
                        }
                    };
                    var output = [];
                    var insideRule = false;
                    var insidePropertyValue = false;
                    var enteringConditionalGroup = false;
                    var top_ch = "";
                    var last_top_ch = "";
                    while (true) {
                        var whitespace = skipWhitespace();
                        var isAfterSpace = whitespace !== "";
                        var isAfterNewline = whitespace.indexOf("\n") !== -1;
                        last_top_ch = top_ch;
                        top_ch = ch;
                        if (!ch) {
                            break
                        } else if (ch === "/" && peek() === "*") {
                            var header = indentLevel === 0;
                            if (isAfterNewline || header) {
                                print.newLine()
                            }
                            output.push(eatComment());
                            print.newLine();
                            if (header) {
                                print.newLine(true)
                            }
                        } else if (ch === "/" && peek() === "/") {
                            if (!isAfterNewline && last_top_ch !== "{") {
                                print.trim()
                            }
                            print.singleSpace();
                            output.push(eatComment());
                            print.newLine()
                        } else if (ch === "@") {
                            print.preserveSingleSpace();
                            output.push(ch);
                            var variableOrRule = peekString(": ,;{}()[]/='\"");
                            if (variableOrRule.match(/[ :]$/)) {
                                next();
                                variableOrRule = eatString(": ").replace(/\s$/, "");
                                output.push(variableOrRule);
                                print.singleSpace()
                            }
                            variableOrRule = variableOrRule.replace(/\s$/, "");
                            if (variableOrRule in css_beautify.NESTED_AT_RULE) {
                                nestedLevel += 1;
                                if (variableOrRule in css_beautify.CONDITIONAL_GROUP_RULE) {
                                    enteringConditionalGroup = true
                                }
                            }
                        } else if (ch === "#" && peek() === "{") {
                            print.preserveSingleSpace();
                            output.push(eatString("}"))
                        } else if (ch === "{") {
                            if (peek(true) === "}") {
                                eatWhitespace();
                                next();
                                print.singleSpace();
                                output.push("{}");
                                print.newLine();
                                if (newline_between_rules && indentLevel === 0) {
                                    print.newLine(true)
                                }
                            } else {
                                indent();
                                print["{"](ch);
                                if (enteringConditionalGroup) {
                                    enteringConditionalGroup = false;
                                    insideRule = indentLevel > nestedLevel
                                } else {
                                    insideRule = indentLevel >= nestedLevel
                                }
                            }
                        } else if (ch === "}") {
                            outdent();
                            print["}"](ch);
                            insideRule = false;
                            insidePropertyValue = false;
                            if (nestedLevel) {
                                nestedLevel--
                            }
                            if (newline_between_rules && indentLevel === 0) {
                                print.newLine(true)
                            }
                        } else if (ch === ":") {
                            eatWhitespace();
                            if ((insideRule || enteringConditionalGroup) && !(lookBack("&") || foundNestedPseudoClass())) {
                                insidePropertyValue = true;
                                output.push(":");
                                print.singleSpace()
                            } else {
                                if (peek() === ":") {
                                    next();
                                    output.push("::")
                                } else {
                                    output.push(":")
                                }
                            }
                        } else if (ch === '"' || ch === "'") {
                            print.preserveSingleSpace();
                            output.push(eatString(ch))
                        } else if (ch === ";") {
                            insidePropertyValue = false;
                            output.push(ch);
                            print.newLine()
                        } else if (ch === "(") {
                            if (lookBack("url")) {
                                output.push(ch);
                                eatWhitespace();
                                if (next()) {
                                    if (ch !== ")" && ch !== '"' && ch !== "'") {
                                        output.push(eatString(")"))
                                    } else {
                                        pos--
                                    }
                                }
                            } else {
                                parenLevel++;
                                print.preserveSingleSpace();
                                output.push(ch);
                                eatWhitespace()
                            }
                        } else if (ch === ")") {
                            output.push(ch);
                            parenLevel--
                        } else if (ch === ",") {
                            output.push(ch);
                            eatWhitespace();
                            if (selectorSeparatorNewline && !insidePropertyValue && parenLevel < 1) {
                                print.newLine()
                            } else {
                                print.singleSpace()
                            }
                        } else if (ch === "]") {
                            output.push(ch)
                        } else if (ch === "[") {
                            print.preserveSingleSpace();
                            output.push(ch)
                        } else if (ch === "=") {
                            eatWhitespace();
                            ch = "=";
                            output.push(ch)
                        } else {
                            print.preserveSingleSpace();
                            output.push(ch)
                        }
                    }
                    var sweetCode = "";
                    if (basebaseIndentString) {
                        sweetCode += basebaseIndentString
                    }
                    sweetCode += output.join("").replace(/[\r\n\t ]+$/, "");
                    if (end_with_newline) {
                        sweetCode += "\n"
                    }
                    if (eol != "\n") {
                        sweetCode = sweetCode.replace(/[\n]/g, eol)
                    }
                    return sweetCode
                }
                css_beautify.NESTED_AT_RULE = {
                    "@page": true,
                    "@font-face": true,
                    "@keyframes": true,
                    "@media": true,
                    "@supports": true,
                    "@document": true
                };
                css_beautify.CONDITIONAL_GROUP_RULE = {
                    "@media": true,
                    "@supports": true,
                    "@document": true
                };
                if (typeof define === "function" && define.amd) {
                    define([], function() {
                        return {
                            css_beautify: css_beautify
                        }
                    })
                } else if (typeof exports !== "undefined") {
                    exports.css_beautify = css_beautify
                } else if (typeof window !== "undefined") {
                    window.css_beautify = css_beautify
                } else if (typeof global !== "undefined") {
                    global.css_beautify = css_beautify
                }
            })()
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {}],
    419: [function(require, module, exports) {
        (function(global) {
            (function() {
                function trim(s) {
                    return s.replace(/^\s+|\s+$/g, "")
                }

                function ltrim(s) {
                    return s.replace(/^\s+/g, "")
                }

                function rtrim(s) {
                    return s.replace(/\s+$/g, "")
                }

                function style_html(html_source, options, js_beautify, css_beautify) {
                    var multi_parser, indent_inner_html, indent_size, indent_character, wrap_line_length, brace_style, unformatted, preserve_newlines, max_preserve_newlines, indent_handlebars, wrap_attributes, wrap_attributes_indent_size, end_with_newline, extra_liners, eol;
                    options = options || {};
                    if ((options.wrap_line_length === undefined || parseInt(options.wrap_line_length, 10) === 0) && (options.max_char !== undefined && parseInt(options.max_char, 10) !== 0)) {
                        options.wrap_line_length = options.max_char
                    }
                    indent_inner_html = options.indent_inner_html === undefined ? false : options.indent_inner_html;
                    indent_size = options.indent_size === undefined ? 4 : parseInt(options.indent_size, 10);
                    indent_character = options.indent_char === undefined ? " " : options.indent_char;
                    brace_style = options.brace_style === undefined ? "collapse" : options.brace_style;
                    wrap_line_length = parseInt(options.wrap_line_length, 10) === 0 ? 32786 : parseInt(options.wrap_line_length || 250, 10);
                    unformatted = options.unformatted || ["a", "span", "img", "bdo", "em", "strong", "dfn", "code", "samp", "kbd", "var", "cite", "abbr", "acronym", "q", "sub", "sup", "tt", "i", "b", "big", "small", "u", "s", "strike", "font", "ins", "del", "pre", "address", "dt", "h1", "h2", "h3", "h4", "h5", "h6"];
                    preserve_newlines = options.preserve_newlines === undefined ? true : options.preserve_newlines;
                    max_preserve_newlines = preserve_newlines ? isNaN(parseInt(options.max_preserve_newlines, 10)) ? 32786 : parseInt(options.max_preserve_newlines, 10) : 0;
                    indent_handlebars = options.indent_handlebars === undefined ? false : options.indent_handlebars;
                    wrap_attributes = options.wrap_attributes === undefined ? "auto" : options.wrap_attributes;
                    wrap_attributes_indent_size = options.wrap_attributes_indent_size === undefined ? indent_size : parseInt(options.wrap_attributes_indent_size, 10) || indent_size;
                    end_with_newline = options.end_with_newline === undefined ? false : options.end_with_newline;
                    extra_liners = typeof options.extra_liners == "object" && options.extra_liners ? options.extra_liners.concat() : typeof options.extra_liners === "string" ? options.extra_liners.split(",") : "head,body,/html".split(",");
                    eol = options.eol ? options.eol : "\n";
                    if (options.indent_with_tabs) {
                        indent_character = "	";
                        indent_size = 1
                    }
                    eol = eol.replace(/\\r/, "\r").replace(/\\n/, "\n");

                    function Parser() {
                        this.pos = 0;
                        this.token = "";
                        this.current_mode = "CONTENT";
                        this.tags = {
                            parent: "parent1",
                            parentcount: 1,
                            parent1: ""
                        };
                        this.tag_type = "";
                        this.token_text = this.last_token = this.last_text = this.token_type = "";
                        this.newlines = 0;
                        this.indent_content = indent_inner_html;
                        this.Utils = {
                            whitespace: "\n\r	 ".split(""),
                            single_token: "br,input,link,meta,source,!doctype,basefont,base,area,hr,wbr,param,img,isindex,embed".split(","),
                            extra_liners: extra_liners,
                            in_array: function(what, arr) {
                                for (var i = 0; i < arr.length; i++) {
                                    if (what === arr[i]) {
                                        return true
                                    }
                                }
                                return false
                            }
                        };
                        this.is_whitespace = function(text) {
                            for (var n = 0; n < text.length; text++) {
                                if (!this.Utils.in_array(text.charAt(n), this.Utils.whitespace)) {
                                    return false
                                }
                            }
                            return true
                        };
                        this.traverse_whitespace = function() {
                            var input_char = "";
                            input_char = this.input.charAt(this.pos);
                            if (this.Utils.in_array(input_char, this.Utils.whitespace)) {
                                this.newlines = 0;
                                while (this.Utils.in_array(input_char, this.Utils.whitespace)) {
                                    if (preserve_newlines && input_char === "\n" && this.newlines <= max_preserve_newlines) {
                                        this.newlines += 1
                                    }
                                    this.pos++;
                                    input_char = this.input.charAt(this.pos)
                                }
                                return true
                            }
                            return false
                        };
                        this.space_or_wrap = function(content) {
                            if (this.line_char_count >= this.wrap_line_length) {
                                this.print_newline(false, content);
                                this.print_indentation(content)
                            } else {
                                this.line_char_count++;
                                content.push(" ")
                            }
                        };
                        this.get_content = function() {
                            var input_char = "",
                                content = [],
                                space = false;
                            while (this.input.charAt(this.pos) !== "<") {
                                if (this.pos >= this.input.length) {
                                    return content.length ? content.join("") : ["", "TK_EOF"]
                                }
                                if (this.traverse_whitespace()) {
                                    this.space_or_wrap(content);
                                    continue
                                }
                                if (indent_handlebars) {
                                    var peek3 = this.input.substr(this.pos, 3);
                                    if (peek3 === "{{#" || peek3 === "{{/") {
                                        break
                                    } else if (peek3 === "{{!") {
                                        return [this.get_tag(), "TK_TAG_HANDLEBARS_COMMENT"]
                                    } else if (this.input.substr(this.pos, 2) === "{{") {
                                        if (this.get_tag(true) === "{{else}}") {
                                            break
                                        }
                                    }
                                }
                                input_char = this.input.charAt(this.pos);
                                this.pos++;
                                this.line_char_count++;
                                content.push(input_char)
                            }
                            return content.length ? content.join("") : ""
                        };
                        this.get_contents_to = function(name) {
                            if (this.pos === this.input.length) {
                                return ["", "TK_EOF"]
                            }
                            var input_char = "";
                            var content = "";
                            var reg_match = new RegExp("</" + name + "\\s*>", "igm");
                            reg_match.lastIndex = this.pos;
                            var reg_array = reg_match.exec(this.input);
                            var end_script = reg_array ? reg_array.index : this.input.length;
                            if (this.pos < end_script) {
                                content = this.input.substring(this.pos, end_script);
                                this.pos = end_script
                            }
                            return content
                        };
                        this.record_tag = function(tag) {
                            if (this.tags[tag + "count"]) {
                                this.tags[tag + "count"]++;
                                this.tags[tag + this.tags[tag + "count"]] = this.indent_level
                            } else {
                                this.tags[tag + "count"] = 1;
                                this.tags[tag + this.tags[tag + "count"]] = this.indent_level
                            }
                            this.tags[tag + this.tags[tag + "count"] + "parent"] = this.tags.parent;
                            this.tags.parent = tag + this.tags[tag + "count"]
                        };
                        this.retrieve_tag = function(tag) {
                            if (this.tags[tag + "count"]) {
                                var temp_parent = this.tags.parent;
                                while (temp_parent) {
                                    if (tag + this.tags[tag + "count"] === temp_parent) {
                                        break
                                    }
                                    temp_parent = this.tags[temp_parent + "parent"]
                                }
                                if (temp_parent) {
                                    this.indent_level = this.tags[tag + this.tags[tag + "count"]];
                                    this.tags.parent = this.tags[temp_parent + "parent"]
                                }
                                delete this.tags[tag + this.tags[tag + "count"] + "parent"];
                                delete this.tags[tag + this.tags[tag + "count"]];
                                if (this.tags[tag + "count"] === 1) {
                                    delete this.tags[tag + "count"]
                                } else {
                                    this.tags[tag + "count"]--
                                }
                            }
                        };
                        this.indent_to_tag = function(tag) {
                            if (!this.tags[tag + "count"]) {
                                return
                            }
                            var temp_parent = this.tags.parent;
                            while (temp_parent) {
                                if (tag + this.tags[tag + "count"] === temp_parent) {
                                    break
                                }
                                temp_parent = this.tags[temp_parent + "parent"]
                            }
                            if (temp_parent) {
                                this.indent_level = this.tags[tag + this.tags[tag + "count"]]
                            }
                        };
                        this.get_tag = function(peek) {
                            var input_char = "",
                                content = [],
                                comment = "",
                                space = false,
                                first_attr = true,
                                tag_start, tag_end, tag_start_char, orig_pos = this.pos,
                                orig_line_char_count = this.line_char_count;
                            peek = peek !== undefined ? peek : false;
                            do {
                                if (this.pos >= this.input.length) {
                                    if (peek) {
                                        this.pos = orig_pos;
                                        this.line_char_count = orig_line_char_count
                                    }
                                    return content.length ? content.join("") : ["", "TK_EOF"]
                                }
                                input_char = this.input.charAt(this.pos);
                                this.pos++;
                                if (this.Utils.in_array(input_char, this.Utils.whitespace)) {
                                    space = true;
                                    continue
                                }
                                if (input_char === "'" || input_char === '"') {
                                    input_char += this.get_unformatted(input_char);
                                    space = true
                                }
                                if (input_char === "=") {
                                    space = false
                                }
                                if (content.length && content[content.length - 1] !== "=" && input_char !== ">" && space) {
                                    this.space_or_wrap(content);
                                    space = false;
                                    if (!first_attr && wrap_attributes === "force" && input_char !== "/") {
                                        this.print_newline(true, content);
                                        this.print_indentation(content);
                                        for (var count = 0; count < wrap_attributes_indent_size; count++) {
                                            content.push(indent_character)
                                        }
                                    }
                                    for (var i = 0; i < content.length; i++) {
                                        if (content[i] === " ") {
                                            first_attr = false;
                                            break
                                        }
                                    }
                                }
                                if (indent_handlebars && tag_start_char === "<") {
                                    if (input_char + this.input.charAt(this.pos) === "{{") {
                                        input_char += this.get_unformatted("}}");
                                        if (content.length && content[content.length - 1] !== " " && content[content.length - 1] !== "<") {
                                            input_char = " " + input_char
                                        }
                                        space = true
                                    }
                                }
                                if (input_char === "<" && !tag_start_char) {
                                    tag_start = this.pos - 1;
                                    tag_start_char = "<"
                                }
                                if (indent_handlebars && !tag_start_char) {
                                    if (content.length >= 2 && content[content.length - 1] === "{" && content[content.length - 2] === "{") {
                                        if (input_char === "#" || input_char === "/" || input_char === "!") {
                                            tag_start = this.pos - 3
                                        } else {
                                            tag_start = this.pos - 2
                                        }
                                        tag_start_char = "{"
                                    }
                                }
                                this.line_char_count++;
                                content.push(input_char);
                                if (content[1] && (content[1] === "!" || content[1] === "?" || content[1] === "%")) {
                                    content = [this.get_comment(tag_start)];
                                    break
                                }
                                if (indent_handlebars && content[1] && content[1] === "{" && content[2] && content[2] === "!") {
                                    content = [this.get_comment(tag_start)];
                                    break
                                }
                                if (indent_handlebars && tag_start_char === "{" && content.length > 2 && content[content.length - 2] === "}" && content[content.length - 1] === "}") {
                                    break
                                }
                            } while (input_char !== ">");
                            var tag_complete = content.join("");
                            var tag_index;
                            var tag_offset;
                            if (tag_complete.indexOf(" ") !== -1) {
                                tag_index = tag_complete.indexOf(" ")
                            } else if (tag_complete.charAt(0) === "{") {
                                tag_index = tag_complete.indexOf("}")
                            } else {
                                tag_index = tag_complete.indexOf(">")
                            }
                            if (tag_complete.charAt(0) === "<" || !indent_handlebars) {
                                tag_offset = 1
                            } else {
                                tag_offset = tag_complete.charAt(2) === "#" ? 3 : 2
                            }
                            var tag_check = tag_complete.substring(tag_offset, tag_index).toLowerCase();
                            if (tag_complete.charAt(tag_complete.length - 2) === "/" || this.Utils.in_array(tag_check, this.Utils.single_token)) {
                                if (!peek) {
                                    this.tag_type = "SINGLE"
                                }
                            } else if (indent_handlebars && tag_complete.charAt(0) === "{" && tag_check === "else") {
                                if (!peek) {
                                    this.indent_to_tag("if");
                                    this.tag_type = "HANDLEBARS_ELSE";
                                    this.indent_content = true;
                                    this.traverse_whitespace()
                                }
                            } else if (this.is_unformatted(tag_check, unformatted)) {
                                comment = this.get_unformatted("</" + tag_check + ">", tag_complete);
                                content.push(comment);
                                tag_end = this.pos - 1;
                                this.tag_type = "SINGLE"
                            } else if (tag_check === "script" && (tag_complete.search("type") === -1 || tag_complete.search("type") > -1 && tag_complete.search(/\b(text|application)\/(x-)?(javascript|ecmascript|jscript|livescript)/) > -1)) {
                                if (!peek) {
                                    this.record_tag(tag_check);
                                    this.tag_type = "SCRIPT"
                                }
                            } else if (tag_check === "style" && (tag_complete.search("type") === -1 || tag_complete.search("type") > -1 && tag_complete.search("text/css") > -1)) {
                                if (!peek) {
                                    this.record_tag(tag_check);
                                    this.tag_type = "STYLE"
                                }
                            } else if (tag_check.charAt(0) === "!") {
                                if (!peek) {
                                    this.tag_type = "SINGLE";
                                    this.traverse_whitespace()
                                }
                            } else if (!peek) {
                                if (tag_check.charAt(0) === "/") {
                                    this.retrieve_tag(tag_check.substring(1));
                                    this.tag_type = "END"
                                } else {
                                    this.record_tag(tag_check);
                                    if (tag_check.toLowerCase() !== "html") {
                                        this.indent_content = true
                                    }
                                    this.tag_type = "START"
                                }
                                if (this.traverse_whitespace()) {
                                    this.space_or_wrap(content)
                                }
                                if (this.Utils.in_array(tag_check, this.Utils.extra_liners)) {
                                    this.print_newline(false, this.output);
                                    if (this.output.length && this.output[this.output.length - 2] !== "\n") {
                                        this.print_newline(true, this.output)
                                    }
                                }
                            }
                            if (peek) {
                                this.pos = orig_pos;
                                this.line_char_count = orig_line_char_count
                            }
                            return content.join("")
                        };
                        this.get_comment = function(start_pos) {
                            var comment = "",
                                delimiter = ">",
                                matched = false;
                            this.pos = start_pos;
                            input_char = this.input.charAt(this.pos);
                            this.pos++;
                            while (this.pos <= this.input.length) {
                                comment += input_char;
                                if (comment.charAt(comment.length - 1) === delimiter.charAt(delimiter.length - 1) && comment.indexOf(delimiter) !== -1) {
                                    break
                                }
                                if (!matched && comment.length < 10) {
                                    if (comment.indexOf("<![if") === 0) {
                                        delimiter = "<![endif]>";
                                        matched = true
                                    } else if (comment.indexOf("<![cdata[") === 0) {
                                        delimiter = "]]>";
                                        matched = true
                                    } else if (comment.indexOf("<![") === 0) {
                                        delimiter = "]>";
                                        matched = true
                                    } else if (comment.indexOf("<!--") === 0) {
                                        delimiter = "-->";
                                        matched = true
                                    } else if (comment.indexOf("{{!") === 0) {
                                        delimiter = "}}";
                                        matched = true
                                    } else if (comment.indexOf("<?") === 0) {
                                        delimiter = "?>";
                                        matched = true
                                    } else if (comment.indexOf("<%") === 0) {
                                        delimiter = "%>";
                                        matched = true
                                    }
                                }
                                input_char = this.input.charAt(this.pos);
                                this.pos++
                            }
                            return comment
                        };
                        this.get_unformatted = function(delimiter, orig_tag) {
                            if (orig_tag && orig_tag.toLowerCase().indexOf(delimiter) !== -1) {
                                return ""
                            }
                            var input_char = "";
                            var content = "";
                            var min_index = 0;
                            var space = true;
                            do {
                                if (this.pos >= this.input.length) {
                                    return content
                                }
                                input_char = this.input.charAt(this.pos);
                                this.pos++;
                                if (this.Utils.in_array(input_char, this.Utils.whitespace)) {
                                    if (!space) {
                                        this.line_char_count--;
                                        continue
                                    }
                                    if (input_char === "\n" || input_char === "\r") {
                                        content += "\n";
                                        this.line_char_count = 0;
                                        continue
                                    }
                                }
                                content += input_char;
                                this.line_char_count++;
                                space = true;
                                if (indent_handlebars && input_char === "{" && content.length && content.charAt(content.length - 2) === "{") {
                                    content += this.get_unformatted("}}");
                                    min_index = content.length
                                }
                            } while (content.toLowerCase().indexOf(delimiter, min_index) === -1);
                            return content
                        };
                        this.get_token = function() {
                            var token;
                            if (this.last_token === "TK_TAG_SCRIPT" || this.last_token === "TK_TAG_STYLE") {
                                var type = this.last_token.substr(7);
                                token = this.get_contents_to(type);
                                if (typeof token !== "string") {
                                    return token
                                }
                                return [token, "TK_" + type]
                            }
                            if (this.current_mode === "CONTENT") {
                                token = this.get_content();
                                if (typeof token !== "string") {
                                    return token
                                } else {
                                    return [token, "TK_CONTENT"]
                                }
                            }
                            if (this.current_mode === "TAG") {
                                token = this.get_tag();
                                if (typeof token !== "string") {
                                    return token
                                } else {
                                    var tag_name_type = "TK_TAG_" + this.tag_type;
                                    return [token, tag_name_type]
                                }
                            }
                        };
                        this.get_full_indent = function(level) {
                            level = this.indent_level + level || 0;
                            if (level < 1) {
                                return ""
                            }
                            return Array(level + 1).join(this.indent_string)
                        };
                        this.is_unformatted = function(tag_check, unformatted) {
                            if (!this.Utils.in_array(tag_check, unformatted)) {
                                return false
                            }
                            if (tag_check.toLowerCase() !== "a" || !this.Utils.in_array("a", unformatted)) {
                                return true
                            }
                            var next_tag = this.get_tag(true);
                            var tag = (next_tag || "").match(/^\s*<\s*\/?([a-z]*)\s*[^>]*>\s*$/);
                            if (!tag || this.Utils.in_array(tag, unformatted)) {
                                return true
                            } else {
                                return false
                            }
                        };
                        this.printer = function(js_source, indent_character, indent_size, wrap_line_length, brace_style) {
                            this.input = js_source || "";
                            this.input = this.input.replace(/\r\n|[\r\u2028\u2029]/g, "\n");
                            this.output = [];
                            this.indent_character = indent_character;
                            this.indent_string = "";
                            this.indent_size = indent_size;
                            this.brace_style = brace_style;
                            this.indent_level = 0;
                            this.wrap_line_length = wrap_line_length;
                            this.line_char_count = 0;
                            for (var i = 0; i < this.indent_size; i++) {
                                this.indent_string += this.indent_character
                            }
                            this.print_newline = function(force, arr) {
                                this.line_char_count = 0;
                                if (!arr || !arr.length) {
                                    return
                                }
                                if (force || arr[arr.length - 1] !== "\n") {
                                    if (arr[arr.length - 1] !== "\n") {
                                        arr[arr.length - 1] = rtrim(arr[arr.length - 1])
                                    }
                                    arr.push("\n")
                                }
                            };
                            this.print_indentation = function(arr) {
                                for (var i = 0; i < this.indent_level; i++) {
                                    arr.push(this.indent_string);
                                    this.line_char_count += this.indent_string.length
                                }
                            };
                            this.print_token = function(text) {
                                if (this.is_whitespace(text) && !this.output.length) {
                                    return
                                }
                                if (text || text !== "") {
                                    if (this.output.length && this.output[this.output.length - 1] === "\n") {
                                        this.print_indentation(this.output);
                                        text = ltrim(text)
                                    }
                                }
                                this.print_token_raw(text)
                            };
                            this.print_token_raw = function(text) {
                                if (this.newlines > 0) {
                                    text = rtrim(text)
                                }
                                if (text && text !== "") {
                                    if (text.length > 1 && text.charAt(text.length - 1) === "\n") {
                                        this.output.push(text.slice(0, -1));
                                        this.print_newline(false, this.output)
                                    } else {
                                        this.output.push(text)
                                    }
                                }
                                for (var n = 0; n < this.newlines; n++) {
                                    this.print_newline(n > 0, this.output)
                                }
                                this.newlines = 0
                            };
                            this.indent = function() {
                                this.indent_level++
                            };
                            this.unindent = function() {
                                if (this.indent_level > 0) {
                                    this.indent_level--
                                }
                            }
                        };
                        return this
                    }
                    multi_parser = new Parser;
                    multi_parser.printer(html_source, indent_character, indent_size, wrap_line_length, brace_style);
                    while (true) {
                        var t = multi_parser.get_token();
                        multi_parser.token_text = t[0];
                        multi_parser.token_type = t[1];
                        if (multi_parser.token_type === "TK_EOF") {
                            break
                        }
                        switch (multi_parser.token_type) {
                            case "TK_TAG_START":
                                multi_parser.print_newline(false, multi_parser.output);
                                multi_parser.print_token(multi_parser.token_text);
                                if (multi_parser.indent_content) {
                                    multi_parser.indent();
                                    multi_parser.indent_content = false
                                }
                                multi_parser.current_mode = "CONTENT";
                                break;
                            case "TK_TAG_STYLE":
                            case "TK_TAG_SCRIPT":
                                multi_parser.print_newline(false, multi_parser.output);
                                multi_parser.print_token(multi_parser.token_text);
                                multi_parser.current_mode = "CONTENT";
                                break;
                            case "TK_TAG_END":
                                if (multi_parser.last_token === "TK_CONTENT" && multi_parser.last_text === "") {
                                    var tag_name = multi_parser.token_text.match(/\w+/)[0];
                                    var tag_extracted_from_last_output = null;
                                    if (multi_parser.output.length) {
                                        tag_extracted_from_last_output = multi_parser.output[multi_parser.output.length - 1].match(/(?:<|{{#)\s*(\w+)/)
                                    }
                                    if (tag_extracted_from_last_output === null || tag_extracted_from_last_output[1] !== tag_name && !multi_parser.Utils.in_array(tag_extracted_from_last_output[1], unformatted)) {
                                        multi_parser.print_newline(false, multi_parser.output)
                                    }
                                }
                                multi_parser.print_token(multi_parser.token_text);
                                multi_parser.current_mode = "CONTENT";
                                break;
                            case "TK_TAG_SINGLE":
                                var tag_check = multi_parser.token_text.match(/^\s*<([a-z-]+)/i);
                                if (!tag_check || !multi_parser.Utils.in_array(tag_check[1], unformatted)) {
                                    multi_parser.print_newline(false, multi_parser.output)
                                }
                                multi_parser.print_token(multi_parser.token_text);
                                multi_parser.current_mode = "CONTENT";
                                break;
                            case "TK_TAG_HANDLEBARS_ELSE":
                                multi_parser.print_token(multi_parser.token_text);
                                if (multi_parser.indent_content) {
                                    multi_parser.indent();
                                    multi_parser.indent_content = false
                                }
                                multi_parser.current_mode = "CONTENT";
                                break;
                            case "TK_TAG_HANDLEBARS_COMMENT":
                                multi_parser.print_token(multi_parser.token_text);
                                multi_parser.current_mode = "TAG";
                                break;
                            case "TK_CONTENT":
                                multi_parser.print_token(multi_parser.token_text);
                                multi_parser.current_mode = "TAG";
                                break;
                            case "TK_STYLE":
                            case "TK_SCRIPT":
                                if (multi_parser.token_text !== "") {
                                    multi_parser.print_newline(false, multi_parser.output);
                                    var text = multi_parser.token_text,
                                        _beautifier, script_indent_level = 1;
                                    if (multi_parser.token_type === "TK_SCRIPT") {
                                        _beautifier = typeof js_beautify === "function" && js_beautify
                                    } else if (multi_parser.token_type === "TK_STYLE") {
                                        _beautifier = typeof css_beautify === "function" && css_beautify
                                    }
                                    if (options.indent_scripts === "keep") {
                                        script_indent_level = 0
                                    } else if (options.indent_scripts === "separate") {
                                        script_indent_level = -multi_parser.indent_level
                                    }
                                    var indentation = multi_parser.get_full_indent(script_indent_level);
                                    if (_beautifier) {
                                        var Child_options = function() {
                                            this.eol = "\n"
                                        };
                                        Child_options.prototype = options;
                                        var child_options = new Child_options;
                                        text = _beautifier(text.replace(/^\s*/, indentation), child_options)
                                    } else {
                                        var white = text.match(/^\s*/)[0];
                                        var _level = white.match(/[^\n\r]*$/)[0].split(multi_parser.indent_string).length - 1;
                                        var reindent = multi_parser.get_full_indent(script_indent_level - _level);
                                        text = text.replace(/^\s*/, indentation).replace(/\r\n|\r|\n/g, "\n" + reindent).replace(/\s+$/, "")
                                    }
                                    if (text) {
                                        multi_parser.print_token_raw(text);
                                        multi_parser.print_newline(true, multi_parser.output)
                                    }
                                }
                                multi_parser.current_mode = "TAG";
                                break;
                            default:
                                if (multi_parser.token_text !== "") {
                                    multi_parser.print_token(multi_parser.token_text)
                                }
                                break
                        }
                        multi_parser.last_token = multi_parser.token_type;
                        multi_parser.last_text = multi_parser.token_text
                    }
                    var sweet_code = multi_parser.output.join("").replace(/[\r\n\t ]+$/, "");
                    if (end_with_newline) {
                        sweet_code += "\n"
                    }
                    if (eol != "\n") {
                        sweet_code = sweet_code.replace(/[\n]/g, eol)
                    }
                    return sweet_code
                }
                if (typeof define === "function" && define.amd) {
                    define(["require", "./beautify", "./beautify-css"], function(requireamd) {
                        var js_beautify = requireamd("./beautify");
                        var css_beautify = requireamd("./beautify-css");
                        return {
                            html_beautify: function(html_source, options) {
                                return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify)
                            }
                        }
                    })
                } else if (typeof exports !== "undefined") {
                    var js_beautify = require("./beautify.js");
                    var css_beautify = require("./beautify-css.js");
                    exports.html_beautify = function(html_source, options) {
                        return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify)
                    }
                } else if (typeof window !== "undefined") {
                    window.html_beautify = function(html_source, options) {
                        return style_html(html_source, options, window.js_beautify, window.css_beautify)
                    }
                } else if (typeof global !== "undefined") {
                    global.html_beautify = function(html_source, options) {
                        return style_html(html_source, options, global.js_beautify, global.css_beautify)
                    }
                }
            })()
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {
        "./beautify-css.js": 418,
        "./beautify.js": 420
    }],
    420: [function(require, module, exports) {
        (function(global) {
            (function() {
                var acorn = {};
                (function(exports) {
                    var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
                    var nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
                    var nonASCIIidentifierChars = "̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ؚؠ-ىٲ-ۓۧ-ۨۻ-ۼܰ-݊ࠀ-ࠔࠛ-ࠣࠥ-ࠧࠩ-࠭ࡀ-ࡗࣤ-ࣾऀ-ःऺ-़ा-ॏ॑-ॗॢ-ॣ०-९ঁ-ঃ়া-ৄেৈৗয়-ৠਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢ-ૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୟ-ୠ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఁ-ఃె-ైొ-్ౕౖౢ-ౣ౦-౯ಂಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢ-ೣ೦-೯ംഃെ-ൈൗൢ-ൣ൦-൯ංඃ්ා-ුූෘ-ෟෲෳิ-ฺเ-ๅ๐-๙ິ-ູ່-ໍ໐-໙༘༙༠-༩༹༵༷ཁ-ཇཱ-྄྆-྇ྍ-ྗྙ-ྼ࿆က-ဩ၀-၉ၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟ᜎ-ᜐᜠ-ᜰᝀ-ᝐᝲᝳក-ឲ៝០-៩᠋-᠍᠐-᠙ᤠ-ᤫᤰ-᤻ᥑ-ᥭᦰ-ᧀᧈ-ᧉ᧐-᧙ᨀ-ᨕᨠ-ᩓ᩠-᩿᩼-᪉᪐-᪙ᭆ-ᭋ᭐-᭙᭫-᭳᮰-᮹᯦-᯳ᰀ-ᰢ᱀-᱉ᱛ-ᱽ᳐-᳒ᴀ-ᶾḁ-ἕ‌‍‿⁀⁔⃐-⃥⃜⃡-⃰ⶁ-ⶖⷠ-ⷿ〡-〨゙゚Ꙁ-ꙭꙴ-꙽ꚟ꛰-꛱ꟸ-ꠀ꠆ꠋꠣ-ꠧꢀ-ꢁꢴ-꣄꣐-꣙ꣳ-ꣷ꤀-꤉ꤦ-꤭ꤰ-ꥅꦀ-ꦃ꦳-꧀ꨀ-ꨧꩀ-ꩁꩌ-ꩍ꩐-꩙ꩻꫠ-ꫩꫲ-ꫳꯀ-ꯡ꯬꯭꯰-꯹ﬠ-ﬨ︀-️︠-︦︳︴﹍-﹏０-９＿";
                    var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
                    var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
                    var newline = exports.newline = /[\n\r\u2028\u2029]/;
                    var lineBreak = exports.lineBreak = /\r\n|[\n\r\u2028\u2029]/g;
                    var isIdentifierStart = exports.isIdentifierStart = function(code) {
                        if (code < 65) return code === 36;
                        if (code < 91) return true;
                        if (code < 97) return code === 95;
                        if (code < 123) return true;
                        return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code))
                    };
                    var isIdentifierChar = exports.isIdentifierChar = function(code) {
                        if (code < 48) return code === 36;
                        if (code < 58) return true;
                        if (code < 65) return false;
                        if (code < 91) return true;
                        if (code < 97) return code === 95;
                        if (code < 123) return true;
                        return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code))
                    }
                })(acorn);

                function in_array(what, arr) {
                    for (var i = 0; i < arr.length; i += 1) {
                        if (arr[i] === what) {
                            return true
                        }
                    }
                    return false
                }

                function trim(s) {
                    return s.replace(/^\s+|\s+$/g, "")
                }

                function ltrim(s) {
                    return s.replace(/^\s+/g, "")
                }

                function rtrim(s) {
                    return s.replace(/\s+$/g, "")
                }

                function js_beautify(js_source_text, options) {
                    "use strict";
                    var beautifier = new Beautifier(js_source_text, options);
                    return beautifier.beautify()
                }
                var MODE = {
                    BlockStatement: "BlockStatement",
                    Statement: "Statement",
                    ObjectLiteral: "ObjectLiteral",
                    ArrayLiteral: "ArrayLiteral",
                    ForInitializer: "ForInitializer",
                    Conditional: "Conditional",
                    Expression: "Expression"
                };

                function Beautifier(js_source_text, options) {
                    "use strict";
                    var output;
                    var tokens = [],
                        token_pos;
                    var Tokenizer;
                    var current_token;
                    var last_type, last_last_text, indent_string;
                    var flags, previous_flags, flag_store;
                    var prefix;
                    var handlers, opt;
                    var baseIndentString = "";
                    handlers = {
                        TK_START_EXPR: handle_start_expr,
                        TK_END_EXPR: handle_end_expr,
                        TK_START_BLOCK: handle_start_block,
                        TK_END_BLOCK: handle_end_block,
                        TK_WORD: handle_word,
                        TK_RESERVED: handle_word,
                        TK_SEMICOLON: handle_semicolon,
                        TK_STRING: handle_string,
                        TK_EQUALS: handle_equals,
                        TK_OPERATOR: handle_operator,
                        TK_COMMA: handle_comma,
                        TK_BLOCK_COMMENT: handle_block_comment,
                        TK_COMMENT: handle_comment,
                        TK_DOT: handle_dot,
                        TK_UNKNOWN: handle_unknown,
                        TK_EOF: handle_eof
                    };

                    function create_flags(flags_base, mode) {
                        var next_indent_level = 0;
                        if (flags_base) {
                            next_indent_level = flags_base.indentation_level;
                            if (!output.just_added_newline() && flags_base.line_indent_level > next_indent_level) {
                                next_indent_level = flags_base.line_indent_level
                            }
                        }
                        var next_flags = {
                            mode: mode,
                            parent: flags_base,
                            last_text: flags_base ? flags_base.last_text : "",
                            last_word: flags_base ? flags_base.last_word : "",
                            declaration_statement: false,
                            declaration_assignment: false,
                            multiline_frame: false,
                            if_block: false,
                            else_block: false,
                            do_block: false,
                            do_while: false,
                            in_case_statement: false,
                            in_case: false,
                            case_body: false,
                            indentation_level: next_indent_level,
                            line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,
                            start_line_index: output.get_line_number(),
                            ternary_depth: 0
                        };
                        return next_flags
                    }
                    options = options ? options : {};
                    opt = {};
                    if (options.braces_on_own_line !== undefined) {
                        opt.brace_style = options.braces_on_own_line ? "expand" : "collapse"
                    }
                    opt.brace_style = options.brace_style ? options.brace_style : opt.brace_style ? opt.brace_style : "collapse";
                    if (opt.brace_style === "expand-strict") {
                        opt.brace_style = "expand"
                    }
                    opt.indent_size = options.indent_size ? parseInt(options.indent_size, 10) : 4;
                    opt.indent_char = options.indent_char ? options.indent_char : " ";
                    opt.eol = options.eol ? options.eol : "\n";
                    opt.preserve_newlines = options.preserve_newlines === undefined ? true : options.preserve_newlines;
                    opt.break_chained_methods = options.break_chained_methods === undefined ? false : options.break_chained_methods;
                    opt.max_preserve_newlines = options.max_preserve_newlines === undefined ? 0 : parseInt(options.max_preserve_newlines, 10);
                    opt.space_in_paren = options.space_in_paren === undefined ? false : options.space_in_paren;
                    opt.space_in_empty_paren = options.space_in_empty_paren === undefined ? false : options.space_in_empty_paren;
                    opt.jslint_happy = options.jslint_happy === undefined ? false : options.jslint_happy;
                    opt.space_after_anon_function = options.space_after_anon_function === undefined ? false : options.space_after_anon_function;
                    opt.keep_array_indentation = options.keep_array_indentation === undefined ? false : options.keep_array_indentation;
                    opt.space_before_conditional = options.space_before_conditional === undefined ? true : options.space_before_conditional;
                    opt.unescape_strings = options.unescape_strings === undefined ? false : options.unescape_strings;
                    opt.wrap_line_length = options.wrap_line_length === undefined ? 0 : parseInt(options.wrap_line_length, 10);
                    opt.e4x = options.e4x === undefined ? false : options.e4x;
                    opt.end_with_newline = options.end_with_newline === undefined ? false : options.end_with_newline;
                    opt.comma_first = options.comma_first === undefined ? false : options.comma_first;
                    opt.test_output_raw = options.test_output_raw === undefined ? false : options.test_output_raw;
                    if (opt.jslint_happy) {
                        opt.space_after_anon_function = true
                    }
                    if (options.indent_with_tabs) {
                        opt.indent_char = "	";
                        opt.indent_size = 1
                    }
                    opt.eol = opt.eol.replace(/\\r/, "\r").replace(/\\n/, "\n");
                    indent_string = "";
                    while (opt.indent_size > 0) {
                        indent_string += opt.indent_char;
                        opt.indent_size -= 1
                    }
                    var preindent_index = 0;
                    if (js_source_text && js_source_text.length) {
                        while (js_source_text.charAt(preindent_index) === " " || js_source_text.charAt(preindent_index) === "	") {
                            baseIndentString += js_source_text.charAt(preindent_index);
                            preindent_index += 1
                        }
                        js_source_text = js_source_text.substring(preindent_index)
                    }
                    last_type = "TK_START_BLOCK";
                    last_last_text = "";
                    output = new Output(indent_string, baseIndentString);
                    output.raw = opt.test_output_raw;
                    flag_store = [];
                    set_mode(MODE.BlockStatement);
                    this.beautify = function() {
                        var local_token, sweet_code;
                        Tokenizer = new tokenizer(js_source_text, opt, indent_string);
                        tokens = Tokenizer.tokenize();
                        token_pos = 0;
                        while (local_token = get_token()) {
                            for (var i = 0; i < local_token.comments_before.length; i++) {
                                handle_token(local_token.comments_before[i])
                            }
                            handle_token(local_token);
                            last_last_text = flags.last_text;
                            last_type = local_token.type;
                            flags.last_text = local_token.text;
                            token_pos += 1
                        }
                        sweet_code = output.get_code();
                        if (opt.end_with_newline) {
                            sweet_code += "\n"
                        }
                        if (opt.eol != "\n") {
                            sweet_code = sweet_code.replace(/[\n]/g, opt.eol)
                        }
                        return sweet_code
                    };

                    function handle_token(local_token) {
                        var newlines = local_token.newlines;
                        var keep_whitespace = opt.keep_array_indentation && is_array(flags.mode);
                        if (keep_whitespace) {
                            for (i = 0; i < newlines; i += 1) {
                                print_newline(i > 0)
                            }
                        } else {
                            if (opt.max_preserve_newlines && newlines > opt.max_preserve_newlines) {
                                newlines = opt.max_preserve_newlines
                            }
                            if (opt.preserve_newlines) {
                                if (local_token.newlines > 1) {
                                    print_newline();
                                    for (var i = 1; i < newlines; i += 1) {
                                        print_newline(true)
                                    }
                                }
                            }
                        }
                        current_token = local_token;
                        handlers[current_token.type]()
                    }

                    function split_newlines(s) {
                        s = s.replace(/\x0d/g, "");
                        var out = [],
                            idx = s.indexOf("\n");
                        while (idx !== -1) {
                            out.push(s.substring(0, idx));
                            s = s.substring(idx + 1);
                            idx = s.indexOf("\n")
                        }
                        if (s.length) {
                            out.push(s)
                        }
                        return out
                    }

                    function allow_wrap_or_preserved_newline(force_linewrap) {
                        force_linewrap = force_linewrap === undefined ? false : force_linewrap;
                        if (output.just_added_newline()) {
                            return
                        }
                        if (opt.preserve_newlines && current_token.wanted_newline || force_linewrap) {
                            print_newline(false, true)
                        } else if (opt.wrap_line_length) {
                            var proposed_line_length = output.current_line.get_character_count() + current_token.text.length + (output.space_before_token ? 1 : 0);
                            if (proposed_line_length >= opt.wrap_line_length) {
                                print_newline(false, true)
                            }
                        }
                    }

                    function print_newline(force_newline, preserve_statement_flags) {
                        if (!preserve_statement_flags) {
                            if (flags.last_text !== ";" && flags.last_text !== "," && flags.last_text !== "=" && last_type !== "TK_OPERATOR") {
                                while (flags.mode === MODE.Statement && !flags.if_block && !flags.do_block) {
                                    restore_mode()
                                }
                            }
                        }
                        if (output.add_new_line(force_newline)) {
                            flags.multiline_frame = true
                        }
                    }

                    function print_token_line_indentation() {
                        if (output.just_added_newline()) {
                            if (opt.keep_array_indentation && is_array(flags.mode) && current_token.wanted_newline) {
                                output.current_line.push(current_token.whitespace_before);
                                output.space_before_token = false
                            } else if (output.set_indent(flags.indentation_level)) {
                                flags.line_indent_level = flags.indentation_level
                            }
                        }
                    }

                    function print_token(printable_token) {
                        if (output.raw) {
                            output.add_raw_token(current_token);
                            return
                        }
                        if (opt.comma_first && last_type === "TK_COMMA" && output.just_added_newline()) {
                            if (output.previous_line.last() === ",") {
                                output.previous_line.pop();
                                print_token_line_indentation();
                                output.add_token(",");
                                output.space_before_token = true
                            }
                        }
                        printable_token = printable_token || current_token.text;
                        print_token_line_indentation();
                        output.add_token(printable_token)
                    }

                    function indent() {
                        flags.indentation_level += 1
                    }

                    function deindent() {
                        if (flags.indentation_level > 0 && (!flags.parent || flags.indentation_level > flags.parent.indentation_level)) flags.indentation_level -= 1
                    }

                    function set_mode(mode) {
                        if (flags) {
                            flag_store.push(flags);
                            previous_flags = flags
                        } else {
                            previous_flags = create_flags(null, mode)
                        }
                        flags = create_flags(previous_flags, mode)
                    }

                    function is_array(mode) {
                        return mode === MODE.ArrayLiteral
                    }

                    function is_expression(mode) {
                        return in_array(mode, [MODE.Expression, MODE.ForInitializer, MODE.Conditional])
                    }

                    function restore_mode() {
                        if (flag_store.length > 0) {
                            previous_flags = flags;
                            flags = flag_store.pop();
                            if (previous_flags.mode === MODE.Statement) {
                                output.remove_redundant_indentation(previous_flags)
                            }
                        }
                    }

                    function start_of_object_property() {
                        return flags.parent.mode === MODE.ObjectLiteral && flags.mode === MODE.Statement && (flags.last_text === ":" && flags.ternary_depth === 0 || last_type === "TK_RESERVED" && in_array(flags.last_text, ["get", "set"]))
                    }

                    function start_of_statement() {
                        if (last_type === "TK_RESERVED" && in_array(flags.last_text, ["var", "let", "const"]) && current_token.type === "TK_WORD" || last_type === "TK_RESERVED" && flags.last_text === "do" || last_type === "TK_RESERVED" && flags.last_text === "return" && !current_token.wanted_newline || last_type === "TK_RESERVED" && flags.last_text === "else" && !(current_token.type === "TK_RESERVED" && current_token.text === "if") || last_type === "TK_END_EXPR" && (previous_flags.mode === MODE.ForInitializer || previous_flags.mode === MODE.Conditional) || last_type === "TK_WORD" && flags.mode === MODE.BlockStatement && !flags.in_case && !(current_token.text === "--" || current_token.text === "++") && last_last_text !== "function" && current_token.type !== "TK_WORD" && current_token.type !== "TK_RESERVED" || flags.mode === MODE.ObjectLiteral && (flags.last_text === ":" && flags.ternary_depth === 0 || last_type === "TK_RESERVED" && in_array(flags.last_text, ["get", "set"]))) {
                            set_mode(MODE.Statement);
                            indent();
                            if (last_type === "TK_RESERVED" && in_array(flags.last_text, ["var", "let", "const"]) && current_token.type === "TK_WORD") {
                                flags.declaration_statement = true
                            }
                            if (!start_of_object_property()) {
                                allow_wrap_or_preserved_newline(current_token.type === "TK_RESERVED" && in_array(current_token.text, ["do", "for", "if", "while"]))
                            }
                            return true
                        }
                        return false
                    }

                    function all_lines_start_with(lines, c) {
                        for (var i = 0; i < lines.length; i++) {
                            var line = trim(lines[i]);
                            if (line.charAt(0) !== c) {
                                return false
                            }
                        }
                        return true
                    }

                    function each_line_matches_indent(lines, indent) {
                        var i = 0,
                            len = lines.length,
                            line;
                        for (; i < len; i++) {
                            line = lines[i];
                            if (line && line.indexOf(indent) !== 0) {
                                return false
                            }
                        }
                        return true
                    }

                    function is_special_word(word) {
                        return in_array(word, ["case", "return", "do", "if", "throw", "else"])
                    }

                    function get_token(offset) {
                        var index = token_pos + (offset || 0);
                        return index < 0 || index >= tokens.length ? null : tokens[index]
                    }

                    function handle_start_expr() {
                        if (start_of_statement()) {}
                        var next_mode = MODE.Expression;
                        if (current_token.text === "[") {
                            if (last_type === "TK_WORD" || flags.last_text === ")") {
                                if (last_type === "TK_RESERVED" && in_array(flags.last_text, Tokenizer.line_starters)) {
                                    output.space_before_token = true
                                }
                                set_mode(next_mode);
                                print_token();
                                indent();
                                if (opt.space_in_paren) {
                                    output.space_before_token = true
                                }
                                return
                            }
                            next_mode = MODE.ArrayLiteral;
                            if (is_array(flags.mode)) {
                                if (flags.last_text === "[" || flags.last_text === "," && (last_last_text === "]" || last_last_text === "}")) {
                                    if (!opt.keep_array_indentation) {
                                        print_newline()
                                    }
                                }
                            }
                        } else {
                            if (last_type === "TK_RESERVED" && flags.last_text === "for") {
                                next_mode = MODE.ForInitializer
                            } else if (last_type === "TK_RESERVED" && in_array(flags.last_text, ["if", "while"])) {
                                next_mode = MODE.Conditional
                            } else {}
                        }
                        if (flags.last_text === ";" || last_type === "TK_START_BLOCK") {
                            print_newline()
                        } else if (last_type === "TK_END_EXPR" || last_type === "TK_START_EXPR" || last_type === "TK_END_BLOCK" || flags.last_text === ".") {
                            allow_wrap_or_preserved_newline(current_token.wanted_newline)
                        } else if (!(last_type === "TK_RESERVED" && current_token.text === "(") && last_type !== "TK_WORD" && last_type !== "TK_OPERATOR") {
                            output.space_before_token = true
                        } else if (last_type === "TK_RESERVED" && (flags.last_word === "function" || flags.last_word === "typeof") || flags.last_text === "*" && last_last_text === "function") {
                            if (opt.space_after_anon_function) {
                                output.space_before_token = true
                            }
                        } else if (last_type === "TK_RESERVED" && (in_array(flags.last_text, Tokenizer.line_starters) || flags.last_text === "catch")) {
                            if (opt.space_before_conditional) {
                                output.space_before_token = true
                            }
                        }
                        if (current_token.text === "(" && last_type === "TK_RESERVED" && flags.last_word === "await") {
                            output.space_before_token = true
                        }
                        if (current_token.text === "(") {
                            if (last_type === "TK_EQUALS" || last_type === "TK_OPERATOR") {
                                if (!start_of_object_property()) {
                                    allow_wrap_or_preserved_newline()
                                }
                            }
                        }
                        set_mode(next_mode);
                        print_token();
                        if (opt.space_in_paren) {
                            output.space_before_token = true
                        }
                        indent()
                    }

                    function handle_end_expr() {
                        while (flags.mode === MODE.Statement) {
                            restore_mode()
                        }
                        if (flags.multiline_frame) {
                            allow_wrap_or_preserved_newline(current_token.text === "]" && is_array(flags.mode) && !opt.keep_array_indentation)
                        }
                        if (opt.space_in_paren) {
                            if (last_type === "TK_START_EXPR" && !opt.space_in_empty_paren) {
                                output.trim();
                                output.space_before_token = false
                            } else {
                                output.space_before_token = true
                            }
                        }
                        if (current_token.text === "]" && opt.keep_array_indentation) {
                            print_token();
                            restore_mode()
                        } else {
                            restore_mode();
                            print_token()
                        }
                        output.remove_redundant_indentation(previous_flags);
                        if (flags.do_while && previous_flags.mode === MODE.Conditional) {
                            previous_flags.mode = MODE.Expression;
                            flags.do_block = false;
                            flags.do_while = false
                        }
                    }

                    function handle_start_block() {
                        var next_token = get_token(1);
                        var second_token = get_token(2);
                        if (second_token && (second_token.text === ":" && in_array(next_token.type, ["TK_STRING", "TK_WORD", "TK_RESERVED"]) || in_array(next_token.text, ["get", "set"]) && in_array(second_token.type, ["TK_WORD", "TK_RESERVED"]))) {
                            if (!in_array(last_last_text, ["class", "interface"])) {
                                set_mode(MODE.ObjectLiteral)
                            } else {
                                set_mode(MODE.BlockStatement)
                            }
                        } else {
                            set_mode(MODE.BlockStatement)
                        }
                        var empty_braces = !next_token.comments_before.length && next_token.text === "}";
                        var empty_anonymous_function = empty_braces && flags.last_word === "function" && last_type === "TK_END_EXPR";
                        if (opt.brace_style === "expand" || opt.brace_style === "none" && current_token.wanted_newline) {
                            if (last_type !== "TK_OPERATOR" && (empty_anonymous_function || last_type === "TK_EQUALS" || last_type === "TK_RESERVED" && is_special_word(flags.last_text) && flags.last_text !== "else")) {
                                output.space_before_token = true
                            } else {
                                print_newline(false, true)
                            }
                        } else {
                            if (last_type !== "TK_OPERATOR" && last_type !== "TK_START_EXPR") {
                                if (last_type === "TK_START_BLOCK") {
                                    print_newline()
                                } else {
                                    output.space_before_token = true
                                }
                            } else {
                                if (is_array(previous_flags.mode) && flags.last_text === ",") {
                                    if (last_last_text === "}") {
                                        output.space_before_token = true
                                    } else {
                                        print_newline()
                                    }
                                }
                            }
                        }
                        print_token();
                        indent()
                    }

                    function handle_end_block() {
                        while (flags.mode === MODE.Statement) {
                            restore_mode()
                        }
                        var empty_braces = last_type === "TK_START_BLOCK";
                        if (opt.brace_style === "expand") {
                            if (!empty_braces) {
                                print_newline()
                            }
                        } else {
                            if (!empty_braces) {
                                if (is_array(flags.mode) && opt.keep_array_indentation) {
                                    opt.keep_array_indentation = false;
                                    print_newline();
                                    opt.keep_array_indentation = true
                                } else {
                                    print_newline()
                                }
                            }
                        }
                        restore_mode();
                        print_token()
                    }

                    function handle_word() {
                        if (current_token.type === "TK_RESERVED" && flags.mode !== MODE.ObjectLiteral && in_array(current_token.text, ["set", "get"])) {
                            current_token.type = "TK_WORD"
                        }
                        if (current_token.type === "TK_RESERVED" && flags.mode === MODE.ObjectLiteral) {
                            var next_token = get_token(1);
                            if (next_token.text == ":") {
                                current_token.type = "TK_WORD"
                            }
                        }
                        if (start_of_statement()) {} else if (current_token.wanted_newline && !is_expression(flags.mode) && (last_type !== "TK_OPERATOR" || (flags.last_text === "--" || flags.last_text === "++")) && last_type !== "TK_EQUALS" && (opt.preserve_newlines || !(last_type === "TK_RESERVED" && in_array(flags.last_text, ["var", "let", "const", "set", "get"])))) {
                            print_newline()
                        }
                        if (flags.do_block && !flags.do_while) {
                            if (current_token.type === "TK_RESERVED" && current_token.text === "while") {
                                output.space_before_token = true;
                                print_token();
                                output.space_before_token = true;
                                flags.do_while = true;
                                return
                            } else {
                                print_newline();
                                flags.do_block = false
                            }
                        }
                        if (flags.if_block) {
                            if (!flags.else_block && (current_token.type === "TK_RESERVED" && current_token.text === "else")) {
                                flags.else_block = true
                            } else {
                                while (flags.mode === MODE.Statement) {
                                    restore_mode()
                                }
                                flags.if_block = false;
                                flags.else_block = false
                            }
                        }
                        if (current_token.type === "TK_RESERVED" && (current_token.text === "case" || current_token.text === "default" && flags.in_case_statement)) {
                            print_newline();
                            if (flags.case_body || opt.jslint_happy) {
                                deindent();
                                flags.case_body = false
                            }
                            print_token();
                            flags.in_case = true;
                            flags.in_case_statement = true;
                            return
                        }
                        if (current_token.type === "TK_RESERVED" && current_token.text === "function") {
                            if (in_array(flags.last_text, ["}", ";"]) || output.just_added_newline() && !in_array(flags.last_text, ["[", "{", ":", "=", ","])) {
                                if (!output.just_added_blankline() && !current_token.comments_before.length) {
                                    print_newline();
                                    print_newline(true)
                                }
                            }
                            if (last_type === "TK_RESERVED" || last_type === "TK_WORD") {
                                if (last_type === "TK_RESERVED" && in_array(flags.last_text, ["get", "set", "new", "return", "export", "async"])) {
                                    output.space_before_token = true
                                } else if (last_type === "TK_RESERVED" && flags.last_text === "default" && last_last_text === "export") {
                                    output.space_before_token = true
                                } else {
                                    print_newline()
                                }
                            } else if (last_type === "TK_OPERATOR" || flags.last_text === "=") {
                                output.space_before_token = true
                            } else if (!flags.multiline_frame && (is_expression(flags.mode) || is_array(flags.mode))) {} else {
                                print_newline()
                            }
                        }
                        if (last_type === "TK_COMMA" || last_type === "TK_START_EXPR" || last_type === "TK_EQUALS" || last_type === "TK_OPERATOR") {
                            if (!start_of_object_property()) {
                                allow_wrap_or_preserved_newline()
                            }
                        }
                        if (current_token.type === "TK_RESERVED" && in_array(current_token.text, ["function", "get", "set"])) {
                            print_token();
                            flags.last_word = current_token.text;
                            return
                        }
                        prefix = "NONE";
                        if (last_type === "TK_END_BLOCK") {
                            if (!(current_token.type === "TK_RESERVED" && in_array(current_token.text, ["else", "catch", "finally"]))) {
                                prefix = "NEWLINE"
                            } else {
                                if (opt.brace_style === "expand" || opt.brace_style === "end-expand" || opt.brace_style === "none" && current_token.wanted_newline) {
                                    prefix = "NEWLINE"
                                } else {
                                    prefix = "SPACE";
                                    output.space_before_token = true
                                }
                            }
                        } else if (last_type === "TK_SEMICOLON" && flags.mode === MODE.BlockStatement) {
                            prefix = "NEWLINE"
                        } else if (last_type === "TK_SEMICOLON" && is_expression(flags.mode)) {
                            prefix = "SPACE"
                        } else if (last_type === "TK_STRING") {
                            prefix = "NEWLINE"
                        } else if (last_type === "TK_RESERVED" || last_type === "TK_WORD" || flags.last_text === "*" && last_last_text === "function") {
                            prefix = "SPACE"
                        } else if (last_type === "TK_START_BLOCK") {
                            prefix = "NEWLINE"
                        } else if (last_type === "TK_END_EXPR") {
                            output.space_before_token = true;
                            prefix = "NEWLINE"
                        }
                        if (current_token.type === "TK_RESERVED" && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ")") {
                            if (flags.last_text === "else" || flags.last_text === "export") {
                                prefix = "SPACE"
                            } else {
                                prefix = "NEWLINE"
                            }
                        }
                        if (current_token.type === "TK_RESERVED" && in_array(current_token.text, ["else", "catch", "finally"])) {
                            if (last_type !== "TK_END_BLOCK" || opt.brace_style === "expand" || opt.brace_style === "end-expand" || opt.brace_style === "none" && current_token.wanted_newline) {
                                print_newline()
                            } else {
                                output.trim(true);
                                var line = output.current_line;
                                if (line.last() !== "}") {
                                    print_newline()
                                }
                                output.space_before_token = true
                            }
                        } else if (prefix === "NEWLINE") {
                            if (last_type === "TK_RESERVED" && is_special_word(flags.last_text)) {
                                output.space_before_token = true
                            } else if (last_type !== "TK_END_EXPR") {
                                if ((last_type !== "TK_START_EXPR" || !(current_token.type === "TK_RESERVED" && in_array(current_token.text, ["var", "let", "const"]))) && flags.last_text !== ":") {
                                    if (current_token.type === "TK_RESERVED" && current_token.text === "if" && flags.last_text === "else") {
                                        output.space_before_token = true
                                    } else {
                                        print_newline()
                                    }
                                }
                            } else if (current_token.type === "TK_RESERVED" && in_array(current_token.text, Tokenizer.line_starters) && flags.last_text !== ")") {
                                print_newline()
                            }
                        } else if (flags.multiline_frame && is_array(flags.mode) && flags.last_text === "," && last_last_text === "}") {
                            print_newline()
                        } else if (prefix === "SPACE") {
                            output.space_before_token = true
                        }
                        print_token();
                        flags.last_word = current_token.text;
                        if (current_token.type === "TK_RESERVED" && current_token.text === "do") {
                            flags.do_block = true
                        }
                        if (current_token.type === "TK_RESERVED" && current_token.text === "if") {
                            flags.if_block = true
                        }
                    }

                    function handle_semicolon() {
                        if (start_of_statement()) {
                            output.space_before_token = false
                        }
                        while (flags.mode === MODE.Statement && !flags.if_block && !flags.do_block) {
                            restore_mode()
                        }
                        print_token()
                    }

                    function handle_string() {
                        if (start_of_statement()) {
                            output.space_before_token = true
                        } else if (last_type === "TK_RESERVED" || last_type === "TK_WORD") {
                            output.space_before_token = true
                        } else if (last_type === "TK_COMMA" || last_type === "TK_START_EXPR" || last_type === "TK_EQUALS" || last_type === "TK_OPERATOR") {
                            if (!start_of_object_property()) {
                                allow_wrap_or_preserved_newline()
                            }
                        } else {
                            print_newline()
                        }
                        print_token()
                    }

                    function handle_equals() {
                        if (start_of_statement()) {}
                        if (flags.declaration_statement) {
                            flags.declaration_assignment = true
                        }
                        output.space_before_token = true;
                        print_token();
                        output.space_before_token = true
                    }

                    function handle_comma() {
                        if (flags.declaration_statement) {
                            if (is_expression(flags.parent.mode)) {
                                flags.declaration_assignment = false
                            }
                            print_token();
                            if (flags.declaration_assignment) {
                                flags.declaration_assignment = false;
                                print_newline(false, true)
                            } else {
                                output.space_before_token = true;
                                if (opt.comma_first) {
                                    allow_wrap_or_preserved_newline()
                                }
                            }
                            return
                        }
                        print_token();
                        if (flags.mode === MODE.ObjectLiteral || flags.mode === MODE.Statement && flags.parent.mode === MODE.ObjectLiteral) {
                            if (flags.mode === MODE.Statement) {
                                restore_mode()
                            }
                            print_newline()
                        } else {
                            output.space_before_token = true;
                            if (opt.comma_first) {
                                allow_wrap_or_preserved_newline()
                            }
                        }
                    }

                    function handle_operator() {
                        if (start_of_statement()) {}
                        if (last_type === "TK_RESERVED" && is_special_word(flags.last_text)) {
                            output.space_before_token = true;
                            print_token();
                            return
                        }
                        if (current_token.text === "*" && last_type === "TK_DOT") {
                            print_token();
                            return
                        }
                        if (current_token.text === ":" && flags.in_case) {
                            flags.case_body = true;
                            indent();
                            print_token();
                            print_newline();
                            flags.in_case = false;
                            return
                        }
                        if (current_token.text === "::") {
                            print_token();
                            return
                        }
                        if (last_type === "TK_OPERATOR") {
                            allow_wrap_or_preserved_newline()
                        }
                        var space_before = true;
                        var space_after = true;
                        if (in_array(current_token.text, ["--", "++", "!", "~"]) || in_array(current_token.text, ["-", "+"]) && (in_array(last_type, ["TK_START_BLOCK", "TK_START_EXPR", "TK_EQUALS", "TK_OPERATOR"]) || in_array(flags.last_text, Tokenizer.line_starters) || flags.last_text === ",")) {
                            space_before = false;
                            space_after = false;
                            if (current_token.wanted_newline && (current_token.text === "--" || current_token.text === "++")) {
                                print_newline(false, true)
                            }
                            if (flags.last_text === ";" && is_expression(flags.mode)) {
                                space_before = true
                            }
                            if (last_type === "TK_RESERVED") {
                                space_before = true
                            } else if (last_type === "TK_END_EXPR") {
                                space_before = !(flags.last_text === "]" && (current_token.text === "--" || current_token.text === "++"))
                            } else if (last_type === "TK_OPERATOR") {
                                space_before = in_array(current_token.text, ["--", "-", "++", "+"]) && in_array(flags.last_text, ["--", "-", "++", "+"]);
                                if (in_array(current_token.text, ["+", "-"]) && in_array(flags.last_text, ["--", "++"])) {
                                    space_after = true
                                }
                            }
                            if ((flags.mode === MODE.BlockStatement || flags.mode === MODE.Statement) && (flags.last_text === "{" || flags.last_text === ";")) {
                                print_newline()
                            }
                        } else if (current_token.text === ":") {
                            if (flags.ternary_depth === 0) {
                                space_before = false
                            } else {
                                flags.ternary_depth -= 1
                            }
                        } else if (current_token.text === "?") {
                            flags.ternary_depth += 1
                        } else if (current_token.text === "*" && last_type === "TK_RESERVED" && flags.last_text === "function") {
                            space_before = false;
                            space_after = false
                        }
                        output.space_before_token = output.space_before_token || space_before;
                        print_token();
                        output.space_before_token = space_after
                    }

                    function handle_block_comment() {
                        if (output.raw) {
                            output.add_raw_token(current_token);
                            if (current_token.directives && current_token.directives["preserve"] === "end") {
                                if (!opt.test_output_raw) {
                                    output.raw = false
                                }
                            }
                            return
                        }
                        if (current_token.directives) {
                            print_newline(false, true);
                            print_token();
                            if (current_token.directives["preserve"] === "start") {
                                output.raw = true
                            }
                            print_newline(false, true);
                            return
                        }
                        if (!acorn.newline.test(current_token.text) && !current_token.wanted_newline) {
                            output.space_before_token = true;
                            print_token();
                            output.space_before_token = true;
                            return
                        }
                        var lines = split_newlines(current_token.text);
                        var j;
                        var javadoc = false;
                        var starless = false;
                        var lastIndent = current_token.whitespace_before;
                        var lastIndentLength = lastIndent.length;
                        print_newline(false, true);
                        if (lines.length > 1) {
                            if (all_lines_start_with(lines.slice(1), "*")) {
                                javadoc = true
                            } else if (each_line_matches_indent(lines.slice(1), lastIndent)) {
                                starless = true
                            }
                        }
                        print_token(lines[0]);
                        for (j = 1; j < lines.length; j++) {
                            print_newline(false, true);
                            if (javadoc) {
                                print_token(" " + ltrim(lines[j]))
                            } else if (starless && lines[j].length > lastIndentLength) {
                                print_token(lines[j].substring(lastIndentLength))
                            } else {
                                output.add_token(lines[j])
                            }
                        }
                        print_newline(false, true)
                    }

                    function handle_comment() {
                        if (current_token.wanted_newline) {
                            print_newline(false, true)
                        } else {
                            output.trim(true)
                        }
                        output.space_before_token = true;
                        print_token();
                        print_newline(false, true)
                    }

                    function handle_dot() {
                        if (start_of_statement()) {}
                        if (last_type === "TK_RESERVED" && is_special_word(flags.last_text)) {
                            output.space_before_token = true
                        } else {
                            allow_wrap_or_preserved_newline(flags.last_text === ")" && opt.break_chained_methods)
                        }
                        print_token()
                    }

                    function handle_unknown() {
                        print_token();
                        if (current_token.text[current_token.text.length - 1] === "\n") {
                            print_newline()
                        }
                    }

                    function handle_eof() {
                        while (flags.mode === MODE.Statement) {
                            restore_mode()
                        }
                    }
                }

                function OutputLine(parent) {
                    var _character_count = 0;
                    var _indent_count = -1;
                    var _items = [];
                    var _empty = true;
                    this.set_indent = function(level) {
                        _character_count = parent.baseIndentLength + level * parent.indent_length;
                        _indent_count = level
                    };
                    this.get_character_count = function() {
                        return _character_count
                    };
                    this.is_empty = function() {
                        return _empty
                    };
                    this.last = function() {
                        if (!this._empty) {
                            return _items[_items.length - 1]
                        } else {
                            return null
                        }
                    };
                    this.push = function(input) {
                        _items.push(input);
                        _character_count += input.length;
                        _empty = false
                    };
                    this.pop = function() {
                        var item = null;
                        if (!_empty) {
                            item = _items.pop();
                            _character_count -= item.length;
                            _empty = _items.length === 0
                        }
                        return item
                    };
                    this.remove_indent = function() {
                        if (_indent_count > 0) {
                            _indent_count -= 1;
                            _character_count -= parent.indent_length
                        }
                    };
                    this.trim = function() {
                        while (this.last() === " ") {
                            var item = _items.pop();
                            _character_count -= 1
                        }
                        _empty = _items.length === 0
                    };
                    this.toString = function() {
                        var result = "";
                        if (!this._empty) {
                            if (_indent_count >= 0) {
                                result = parent.indent_cache[_indent_count]
                            }
                            result += _items.join("")
                        }
                        return result
                    }
                }

                function Output(indent_string, baseIndentString) {
                    baseIndentString = baseIndentString || "";
                    this.indent_cache = [baseIndentString];
                    this.baseIndentLength = baseIndentString.length;
                    this.indent_length = indent_string.length;
                    this.raw = false;
                    var lines = [];
                    this.baseIndentString = baseIndentString;
                    this.indent_string = indent_string;
                    this.previous_line = null;
                    this.current_line = null;
                    this.space_before_token = false;
                    this.add_outputline = function() {
                        this.previous_line = this.current_line;
                        this.current_line = new OutputLine(this);
                        lines.push(this.current_line)
                    };
                    this.add_outputline();
                    this.get_line_number = function() {
                        return lines.length
                    };
                    this.add_new_line = function(force_newline) {
                        if (this.get_line_number() === 1 && this.just_added_newline()) {
                            return false
                        }
                        if (force_newline || !this.just_added_newline()) {
                            if (!this.raw) {
                                this.add_outputline()
                            }
                            return true
                        }
                        return false
                    };
                    this.get_code = function() {
                        var sweet_code = lines.join("\n").replace(/[\r\n\t ]+$/, "");
                        return sweet_code
                    };
                    this.set_indent = function(level) {
                        if (lines.length > 1) {
                            while (level >= this.indent_cache.length) {
                                this.indent_cache.push(this.indent_cache[this.indent_cache.length - 1] + this.indent_string)
                            }
                            this.current_line.set_indent(level);
                            return true
                        }
                        this.current_line.set_indent(0);
                        return false
                    };
                    this.add_raw_token = function(token) {
                        for (var x = 0; x < token.newlines; x++) {
                            this.add_outputline()
                        }
                        this.current_line.push(token.whitespace_before);
                        this.current_line.push(token.text);
                        this.space_before_token = false
                    };
                    this.add_token = function(printable_token) {
                        this.add_space_before_token();
                        this.current_line.push(printable_token)
                    };
                    this.add_space_before_token = function() {
                        if (this.space_before_token && !this.just_added_newline()) {
                            this.current_line.push(" ")
                        }
                        this.space_before_token = false
                    };
                    this.remove_redundant_indentation = function(frame) {
                        if (frame.multiline_frame || frame.mode === MODE.ForInitializer || frame.mode === MODE.Conditional) {
                            return
                        }
                        var index = frame.start_line_index;
                        var line;
                        var output_length = lines.length;
                        while (index < output_length) {
                            lines[index].remove_indent();
                            index++
                        }
                    };
                    this.trim = function(eat_newlines) {
                        eat_newlines = eat_newlines === undefined ? false : eat_newlines;
                        this.current_line.trim(indent_string, baseIndentString);
                        while (eat_newlines && lines.length > 1 && this.current_line.is_empty()) {
                            lines.pop();
                            this.current_line = lines[lines.length - 1];
                            this.current_line.trim()
                        }
                        this.previous_line = lines.length > 1 ? lines[lines.length - 2] : null
                    };
                    this.just_added_newline = function() {
                        return this.current_line.is_empty()
                    };
                    this.just_added_blankline = function() {
                        if (this.just_added_newline()) {
                            if (lines.length === 1) {
                                return true
                            }
                            var line = lines[lines.length - 2];
                            return line.is_empty()
                        }
                        return false
                    }
                }
                var Token = function(type, text, newlines, whitespace_before, mode, parent) {
                    this.type = type;
                    this.text = text;
                    this.comments_before = [];
                    this.newlines = newlines || 0;
                    this.wanted_newline = newlines > 0;
                    this.whitespace_before = whitespace_before || "";
                    this.parent = null;
                    this.directives = null
                };

                function tokenizer(input, opts, indent_string) {
                    var whitespace = "\n\r	 ".split("");
                    var digit = /[0-9]/;
                    var digit_hex = /[0123456789abcdefABCDEF]/;
                    var punct = ("+ - * / % & ++ -- = += -= *= /= %= == === != !== > < >= <= >> << >>> >>>= >>= <<= && &= | || ! ~ , : ? ^ ^= |= :: =>" + " <%= <% %> <?= <? ?>").split(" ");
                    this.line_starters = "continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export".split(",");
                    var reserved_words = this.line_starters.concat(["do", "in", "else", "get", "set", "new", "catch", "finally", "typeof", "yield", "async", "await"]);
                    var block_comment_pattern = /([\s\S]*?)((?:\*\/)|$)/g;
                    var comment_pattern = /([^\n\r\u2028\u2029]*)/g;
                    var directives_block_pattern = /\/\* beautify( \w+[:]\w+)+ \*\//g;
                    var directive_pattern = / (\w+)[:](\w+)/g;
                    var directives_end_ignore_pattern = /([\s\S]*?)((?:\/\*\sbeautify\signore:end\s\*\/)|$)/g;
                    var template_pattern = /((<\?php|<\?=)[\s\S]*?\?>)|(<%[\s\S]*?%>)/g;
                    var n_newlines, whitespace_before_token, in_html_comment, tokens, parser_pos;
                    var input_length;
                    this.tokenize = function() {
                        input_length = input.length;
                        parser_pos = 0;
                        in_html_comment = false;
                        tokens = [];
                        var next, last;
                        var token_values;
                        var open = null;
                        var open_stack = [];
                        var comments = [];
                        while (!(last && last.type === "TK_EOF")) {
                            token_values = tokenize_next();
                            next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token);
                            while (next.type === "TK_COMMENT" || next.type === "TK_BLOCK_COMMENT" || next.type === "TK_UNKNOWN") {
                                if (next.type === "TK_BLOCK_COMMENT") {
                                    next.directives = token_values[2]
                                }
                                comments.push(next);
                                token_values = tokenize_next();
                                next = new Token(token_values[1], token_values[0], n_newlines, whitespace_before_token)
                            }
                            if (comments.length) {
                                next.comments_before = comments;
                                comments = []
                            }
                            if (next.type === "TK_START_BLOCK" || next.type === "TK_START_EXPR") {
                                next.parent = last;
                                open_stack.push(open);
                                open = next
                            } else if ((next.type === "TK_END_BLOCK" || next.type === "TK_END_EXPR") && (open && (next.text === "]" && open.text === "[" || next.text === ")" && open.text === "(" || next.text === "}" && open.text === "{"))) {
                                next.parent = open.parent;
                                open = open_stack.pop()
                            }
                            tokens.push(next);
                            last = next
                        }
                        return tokens
                    };

                    function get_directives(text) {
                        if (!text.match(directives_block_pattern)) {
                            return null
                        }
                        var directives = {};
                        directive_pattern.lastIndex = 0;
                        var directive_match = directive_pattern.exec(text);
                        while (directive_match) {
                            directives[directive_match[1]] = directive_match[2];
                            directive_match = directive_pattern.exec(text)
                        }
                        return directives
                    }

                    function tokenize_next() {
                        var i, resulting_string;
                        var whitespace_on_this_line = [];
                        n_newlines = 0;
                        whitespace_before_token = "";
                        if (parser_pos >= input_length) {
                            return ["", "TK_EOF"]
                        }
                        var last_token;
                        if (tokens.length) {
                            last_token = tokens[tokens.length - 1]
                        } else {
                            last_token = new Token("TK_START_BLOCK", "{")
                        }
                        var c = input.charAt(parser_pos);
                        parser_pos += 1;
                        while (in_array(c, whitespace)) {
                            if (acorn.newline.test(c)) {
                                if (!(c === "\n" && input.charAt(parser_pos - 2) === "\r")) {
                                    n_newlines += 1;
                                    whitespace_on_this_line = []
                                }
                            } else {
                                whitespace_on_this_line.push(c)
                            }
                            if (parser_pos >= input_length) {
                                return ["", "TK_EOF"]
                            }
                            c = input.charAt(parser_pos);
                            parser_pos += 1
                        }
                        if (whitespace_on_this_line.length) {
                            whitespace_before_token = whitespace_on_this_line.join("")
                        }
                        if (digit.test(c)) {
                            var allow_decimal = true;
                            var allow_e = true;
                            var local_digit = digit;
                            if (c === "0" && parser_pos < input_length && /[Xx]/.test(input.charAt(parser_pos))) {
                                allow_decimal = false;
                                allow_e = false;
                                c += input.charAt(parser_pos);
                                parser_pos += 1;
                                local_digit = digit_hex
                            } else {
                                c = "";
                                parser_pos -= 1
                            }
                            while (parser_pos < input_length && local_digit.test(input.charAt(parser_pos))) {
                                c += input.charAt(parser_pos);
                                parser_pos += 1;
                                if (allow_decimal && parser_pos < input_length && input.charAt(parser_pos) === ".") {
                                    c += input.charAt(parser_pos);
                                    parser_pos += 1;
                                    allow_decimal = false
                                }
                                if (allow_e && parser_pos < input_length && /[Ee]/.test(input.charAt(parser_pos))) {
                                    c += input.charAt(parser_pos);
                                    parser_pos += 1;
                                    if (parser_pos < input_length && /[+-]/.test(input.charAt(parser_pos))) {
                                        c += input.charAt(parser_pos);
                                        parser_pos += 1
                                    }
                                    allow_e = false;
                                    allow_decimal = false
                                }
                            }
                            return [c, "TK_WORD"]
                        }
                        if (acorn.isIdentifierStart(input.charCodeAt(parser_pos - 1))) {
                            if (parser_pos < input_length) {
                                while (acorn.isIdentifierChar(input.charCodeAt(parser_pos))) {
                                    c += input.charAt(parser_pos);
                                    parser_pos += 1;
                                    if (parser_pos === input_length) {
                                        break
                                    }
                                }
                            }
                            if (!(last_token.type === "TK_DOT" || last_token.type === "TK_RESERVED" && in_array(last_token.text, ["set", "get"])) && in_array(c, reserved_words)) {
                                if (c === "in") {
                                    return [c, "TK_OPERATOR"]
                                }
                                return [c, "TK_RESERVED"]
                            }
                            return [c, "TK_WORD"]
                        }
                        if (c === "(" || c === "[") {
                            return [c, "TK_START_EXPR"]
                        }
                        if (c === ")" || c === "]") {
                            return [c, "TK_END_EXPR"]
                        }
                        if (c === "{") {
                            return [c, "TK_START_BLOCK"]
                        }
                        if (c === "}") {
                            return [c, "TK_END_BLOCK"]
                        }
                        if (c === ";") {
                            return [c, "TK_SEMICOLON"]
                        }
                        if (c === "/") {
                            var comment = "";
                            if (input.charAt(parser_pos) === "*") {
                                parser_pos += 1;
                                block_comment_pattern.lastIndex = parser_pos;
                                var comment_match = block_comment_pattern.exec(input);
                                comment = "/*" + comment_match[0];
                                parser_pos += comment_match[0].length;
                                var directives = get_directives(comment);
                                if (directives && directives["ignore"] === "start") {
                                    directives_end_ignore_pattern.lastIndex = parser_pos;
                                    comment_match = directives_end_ignore_pattern.exec(input);
                                    comment += comment_match[0];
                                    parser_pos += comment_match[0].length
                                }
                                comment = comment.replace(acorn.lineBreak, "\n");
                                return [comment, "TK_BLOCK_COMMENT", directives]
                            }
                            if (input.charAt(parser_pos) === "/") {
                                parser_pos += 1;
                                comment_pattern.lastIndex = parser_pos;
                                var comment_match = comment_pattern.exec(input);
                                comment = "//" + comment_match[0];
                                parser_pos += comment_match[0].length;
                                return [comment, "TK_COMMENT"]
                            }
                        }
                        if (c === "`" || c === "'" || c === '"' || (c === "/" || opts.e4x && c === "<" && input.slice(parser_pos - 1).match(/^<([-a-zA-Z:0-9_.]+|{[^{}]*}|!\[CDATA\[[\s\S]*?\]\])(\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{.*?}))*\s*(\/?)\s*>/)) && (last_token.type === "TK_RESERVED" && in_array(last_token.text, ["return", "case", "throw", "else", "do", "typeof", "yield"]) || last_token.type === "TK_END_EXPR" && last_token.text === ")" && last_token.parent && last_token.parent.type === "TK_RESERVED" && in_array(last_token.parent.text, ["if", "while", "for"]) || in_array(last_token.type, ["TK_COMMENT", "TK_START_EXPR", "TK_START_BLOCK", "TK_END_BLOCK", "TK_OPERATOR", "TK_EQUALS", "TK_EOF", "TK_SEMICOLON", "TK_COMMA"]))) {
                            var sep = c,
                                esc = false,
                                has_char_escapes = false;
                            resulting_string = c;
                            if (sep === "/") {
                                var in_char_class = false;
                                while (parser_pos < input_length && ((esc || in_char_class || input.charAt(parser_pos) !== sep) && !acorn.newline.test(input.charAt(parser_pos)))) {
                                    resulting_string += input.charAt(parser_pos);
                                    if (!esc) {
                                        esc = input.charAt(parser_pos) === "\\";
                                        if (input.charAt(parser_pos) === "[") {
                                            in_char_class = true
                                        } else if (input.charAt(parser_pos) === "]") {
                                            in_char_class = false
                                        }
                                    } else {
                                        esc = false
                                    }
                                    parser_pos += 1
                                }
                            } else if (opts.e4x && sep === "<") {
                                var xmlRegExp = /<(\/?)([-a-zA-Z:0-9_.]+|{[^{}]*}|!\[CDATA\[[\s\S]*?\]\])(\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{.*?}))*\s*(\/?)\s*>/g;
                                var xmlStr = input.slice(parser_pos - 1);
                                var match = xmlRegExp.exec(xmlStr);
                                if (match && match.index === 0) {
                                    var rootTag = match[2];
                                    var depth = 0;
                                    while (match) {
                                        var isEndTag = !!match[1];
                                        var tagName = match[2];
                                        var isSingletonTag = !!match[match.length - 1] || tagName.slice(0, 8) === "![CDATA[";
                                        if (tagName === rootTag && !isSingletonTag) {
                                            if (isEndTag) {
                                                --depth
                                            } else {
                                                ++depth
                                            }
                                        }
                                        if (depth <= 0) {
                                            break
                                        }
                                        match = xmlRegExp.exec(xmlStr)
                                    }
                                    var xmlLength = match ? match.index + match[0].length : xmlStr.length;
                                    xmlStr = xmlStr.slice(0, xmlLength);
                                    parser_pos += xmlLength - 1;
                                    xmlStr = xmlStr.replace(acorn.lineBreak, "\n");
                                    return [xmlStr, "TK_STRING"]
                                }
                            } else {
                                while (parser_pos < input_length && (esc || input.charAt(parser_pos) !== sep && (sep === "`" || !acorn.newline.test(input.charAt(parser_pos))))) {
                                    if ((esc || sep === "`") && acorn.newline.test(input.charAt(parser_pos))) {
                                        if (input.charAt(parser_pos) === "\r" && input.charAt(parser_pos + 1) === "\n") {
                                            parser_pos += 1
                                        }
                                        resulting_string += "\n"
                                    } else {
                                        resulting_string += input.charAt(parser_pos)
                                    }
                                    if (esc) {
                                        if (input.charAt(parser_pos) === "x" || input.charAt(parser_pos) === "u") {
                                            has_char_escapes = true
                                        }
                                        esc = false
                                    } else {
                                        esc = input.charAt(parser_pos) === "\\"
                                    }
                                    parser_pos += 1
                                }
                            }
                            if (has_char_escapes && opts.unescape_strings) {
                                resulting_string = unescape_string(resulting_string)
                            }
                            if (parser_pos < input_length && input.charAt(parser_pos) === sep) {
                                resulting_string += sep;
                                parser_pos += 1;
                                if (sep === "/") {
                                    while (parser_pos < input_length && acorn.isIdentifierStart(input.charCodeAt(parser_pos))) {
                                        resulting_string += input.charAt(parser_pos);
                                        parser_pos += 1
                                    }
                                }
                            }
                            return [resulting_string, "TK_STRING"]
                        }
                        if (c === "#") {
                            if (tokens.length === 0 && input.charAt(parser_pos) === "!") {
                                resulting_string = c;
                                while (parser_pos < input_length && c !== "\n") {
                                    c = input.charAt(parser_pos);
                                    resulting_string += c;
                                    parser_pos += 1
                                }
                                return [trim(resulting_string) + "\n", "TK_UNKNOWN"]
                            }
                            var sharp = "#";
                            if (parser_pos < input_length && digit.test(input.charAt(parser_pos))) {
                                do {
                                    c = input.charAt(parser_pos);
                                    sharp += c;
                                    parser_pos += 1
                                } while (parser_pos < input_length && c !== "#" && c !== "=");
                                if (c === "#") {} else if (input.charAt(parser_pos) === "[" && input.charAt(parser_pos + 1) === "]") {
                                    sharp += "[]";
                                    parser_pos += 2
                                } else if (input.charAt(parser_pos) === "{" && input.charAt(parser_pos + 1) === "}") {
                                    sharp += "{}";
                                    parser_pos += 2
                                }
                                return [sharp, "TK_WORD"]
                            }
                        }
                        if (c === "<" && (input.charAt(parser_pos) === "?" || input.charAt(parser_pos) === "%")) {
                            template_pattern.lastIndex = parser_pos - 1;
                            var template_match = template_pattern.exec(input);
                            if (template_match) {
                                c = template_match[0];
                                parser_pos += c.length - 1;
                                c = c.replace(acorn.lineBreak, "\n");
                                return [c, "TK_STRING"]
                            }
                        }
                        if (c === "<" && input.substring(parser_pos - 1, parser_pos + 3) === "<!--") {
                            parser_pos += 3;
                            c = "<!--";
                            while (!acorn.newline.test(input.charAt(parser_pos)) && parser_pos < input_length) {
                                c += input.charAt(parser_pos);
                                parser_pos++
                            }
                            in_html_comment = true;
                            return [c, "TK_COMMENT"]
                        }
                        if (c === "-" && in_html_comment && input.substring(parser_pos - 1, parser_pos + 2) === "-->") {
                            in_html_comment = false;
                            parser_pos += 2;
                            return ["-->", "TK_COMMENT"]
                        }
                        if (c === ".") {
                            return [c, "TK_DOT"]
                        }
                        if (in_array(c, punct)) {
                            while (parser_pos < input_length && in_array(c + input.charAt(parser_pos), punct)) {
                                c += input.charAt(parser_pos);
                                parser_pos += 1;
                                if (parser_pos >= input_length) {
                                    break
                                }
                            }
                            if (c === ",") {
                                return [c, "TK_COMMA"]
                            } else if (c === "=") {
                                return [c, "TK_EQUALS"]
                            } else {
                                return [c, "TK_OPERATOR"]
                            }
                        }
                        return [c, "TK_UNKNOWN"]
                    }

                    function unescape_string(s) {
                        var esc = false,
                            out = "",
                            pos = 0,
                            s_hex = "",
                            escaped = 0,
                            c;
                        while (esc || pos < s.length) {
                            c = s.charAt(pos);
                            pos++;
                            if (esc) {
                                esc = false;
                                if (c === "x") {
                                    s_hex = s.substr(pos, 2);
                                    pos += 2
                                } else if (c === "u") {
                                    s_hex = s.substr(pos, 4);
                                    pos += 4
                                } else {
                                    out += "\\" + c;
                                    continue
                                }
                                if (!s_hex.match(/^[0123456789abcdefABCDEF]+$/)) {
                                    return s
                                }
                                escaped = parseInt(s_hex, 16);
                                if (escaped >= 0 && escaped < 32) {
                                    if (c === "x") {
                                        out += "\\x" + s_hex
                                    } else {
                                        out += "\\u" + s_hex
                                    }
                                    continue
                                } else if (escaped === 34 || escaped === 39 || escaped === 92) {
                                    out += "\\" + String.fromCharCode(escaped)
                                } else if (c === "x" && escaped > 126 && escaped <= 255) {
                                    return s
                                } else {
                                    out += String.fromCharCode(escaped)
                                }
                            } else if (c === "\\") {
                                esc = true
                            } else {
                                out += c
                            }
                        }
                        return out
                    }
                }
                if (typeof define === "function" && define.amd) {
                    define([], function() {
                        return {
                            js_beautify: js_beautify
                        }
                    })
                } else if (typeof exports !== "undefined") {
                    exports.js_beautify = js_beautify
                } else if (typeof window !== "undefined") {
                    window.js_beautify = js_beautify
                } else if (typeof global !== "undefined") {
                    global.js_beautify = js_beautify
                }
            })()
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {}],
    421: [function(require, module, exports) {
        var SPECIFICITY = function() {
            var calculate, calculateSingle;
            calculate = function(input) {
                var selectors, selector, i, len, results = [];
                selectors = input.split(",");
                for (i = 0, len = selectors.length; i < len; i += 1) {
                    selector = selectors[i];
                    if (selector.length > 0) {
                        results.push(calculateSingle(selector))
                    }
                }
                return results
            };
            calculateSingle = function(input) {
                var selector = input,
                    findMatch, typeCount = {
                        a: 0,
                        b: 0,
                        c: 0
                    },
                    parts = [],
                    attributeRegex = /(\[[^\]]+\])/g,
                    idRegex = /(#[^\s\+>~\.\[:]+)/g,
                    classRegex = /(\.[^\s\+>~\.\[:]+)/g,
                    pseudoElementRegex = /(::[^\s\+>~\.\[:]+|:first-line|:first-letter|:before|:after)/gi,
                    pseudoClassWithBracketsRegex = /(:[\w-]+\([^\)]*\))/gi,
                    pseudoClassRegex = /(:[^\s\+>~\.\[:]+)/g,
                    elementRegex = /([^\s\+>~\.\[:]+)/g;
                findMatch = function(regex, type) {
                    var matches, i, len, match, index, length;
                    if (regex.test(selector)) {
                        matches = selector.match(regex);
                        for (i = 0, len = matches.length; i < len; i += 1) {
                            typeCount[type] += 1;
                            match = matches[i];
                            index = selector.indexOf(match);
                            length = match.length;
                            parts.push({
                                selector: match,
                                type: type,
                                index: index,
                                length: length
                            });
                            selector = selector.replace(match, Array(length + 1).join(" "))
                        }
                    }
                };
                (function() {
                    var regex = /:not\(([^\)]*)\)/g;
                    if (regex.test(selector)) {
                        selector = selector.replace(regex, "     $1 ")
                    }
                })();
                (function() {
                    var regex = /{[^]*/gm,
                        matches, i, len, match;
                    if (regex.test(selector)) {
                        matches = selector.match(regex);
                        for (i = 0, len = matches.length; i < len; i += 1) {
                            match = matches[i];
                            selector = selector.replace(match, Array(match.length + 1).join(" "))
                        }
                    }
                })();
                findMatch(attributeRegex, "b");
                findMatch(idRegex, "a");
                findMatch(classRegex, "b");
                findMatch(pseudoElementRegex, "c");
                findMatch(pseudoClassWithBracketsRegex, "b");
                findMatch(pseudoClassRegex, "b");
                selector = selector.replace(/[\*\s\+>~]/g, " ");
                selector = selector.replace(/[#\.]/g, " ");
                findMatch(elementRegex, "c");
                parts.sort(function(a, b) {
                    return a.index - b.index
                });
                return {
                    selector: input,
                    specificity: "0," + typeCount.a.toString() + "," + typeCount.b.toString() + "," + typeCount.c.toString(),
                    parts: parts
                }
            };
            return {
                calculate: calculate
            }
        }();
        if (typeof exports !== "undefined") {
            exports.calculate = SPECIFICITY.calculate
        }
    }, {}],
    422: [function(require, module, exports) {
        "use strict";
        var filenameReservedRegex = require("filename-reserved-regex");
        module.exports = function(str) {
            return str.length <= 255 && !filenameReservedRegex().test(str)
        }
    }, {
        "filename-reserved-regex": 423
    }],
    423: [function(require, module, exports) {
        "use strict";
        module.exports = function() {
            return /[<>:"\/\\|?*]/g
        }
    }, {}],
    424: [function(require, module, exports) {
        function isValidRatio(ratio) {
            var re = /\d+\/\d+/;
            return !!ratio.match(re)
        }

        function isValidInteger(integer) {
            var re = /\d+/;
            return !!integer.match(re)
        }

        function isValidLength(length) {
            var re = /\d+(?:ex|em|ch|rem|vh|vw|vmin|vmax|px|mm|cm|in|pt|pc)?$/;
            return !!length.match(re)
        }

        function isValidOrientation(orientation) {
            return orientation === "landscape" || orientation === "portrait"
        }

        function isValidScan(scan) {
            return scan === "progressive" || scan === "interlace"
        }

        function isValidResolution(resolution) {
            var re = /(?:\+|-)?(?:\d+|\d*\.\d+)(?:e\d+)?(?:dpi|dpcm|dppx)$/;
            return !!resolution.match(re)
        }

        function isValidValue(value) {
            return value != null && typeof value !== "boolean" && value !== ""
        }
        var _mediaFeatureValidator = {
            width: isValidLength,
            "min-width": isValidLength,
            "max-width": isValidLength,
            height: isValidLength,
            "min-height": isValidLength,
            "max-height": isValidLength,
            "device-width": isValidLength,
            "min-device-width": isValidLength,
            "max-device-width": isValidLength,
            "device-height": isValidLength,
            "min-device-height": isValidLength,
            "max-device-height": isValidLength,
            "aspect-ratio": isValidRatio,
            "min-aspect-ratio": isValidRatio,
            "max-aspect-ratio": isValidRatio,
            "device-aspect-ratio": isValidRatio,
            "min-device-aspect-ratio": isValidRatio,
            "max-device-aspect-ratio": isValidRatio,
            color: isValidValue,
            "min-color": isValidValue,
            "max-color": isValidValue,
            "color-index": isValidInteger,
            "min-color-index": isValidInteger,
            "max-color-index": isValidInteger,
            monochrome: isValidInteger,
            "min-monochrome": isValidInteger,
            "max-monochrome": isValidInteger,
            resolution: isValidResolution,
            "min-resolution": isValidResolution,
            "max-resolution": isValidResolution,
            scan: isValidScan,
            grid: isValidInteger,
            orientation: isValidOrientation
        };
        var _validMediaFeatures = {
            width: true,
            "min-width": true,
            "max-width": true,
            height: true,
            "min-height": true,
            "max-height": true,
            "device-width": true,
            "min-device-width": true,
            "max-device-width": true,
            "device-height": true,
            "min-device-height": true,
            "max-device-height": true,
            "aspect-ratio": true,
            "min-aspect-ratio": true,
            "max-aspect-ratio": true,
            "device-aspect-ratio": true,
            "min-device-aspect-ratio": true,
            "max-device-aspect-ratio": true,
            color: true,
            "min-color": true,
            "max-color": true,
            "color-index": true,
            "min-color-index": true,
            "max-color-index": true,
            monochrome: true,
            "min-monochrome": true,
            "max-monochrome": true,
            resolution: true,
            "min-resolution": true,
            "max-resolution": true,
            scan: true,
            grid: true,
            orientation: true
        };
        var _validMediaTypes = {
            all: true,
            aural: true,
            braille: true,
            handheld: true,
            print: true,
            projection: true,
            screen: true,
            tty: true,
            tv: true,
            embossed: true
        };
        var _validQualifiers = {
            not: true,
            only: true
        };

        function isValidFeature(feature) {
            return !!_validMediaFeatures[feature]
        }

        function isValidQualifier(qualifier) {
            return !!_validQualifiers[qualifier]
        }

        function isValidMediaType(mediaType) {
            return !!_validMediaTypes[mediaType]
        }

        function isValidQualifiedMediaType(mediaType) {
            var terms = mediaType.trim().split(/\s+/);
            switch (terms.length) {
                case 1:
                    return isValidMediaType(terms[0]);
                case 2:
                    return isValidQualifier(terms[0]) && isValidMediaType(terms[1]);
                default:
                    return false
            }
        }

        function isValidExpression(expression) {
            if (expression.length < 2) {
                return false
            }
            if (expression[0] !== "(" || expression[expression.length - 1] !== ")") {
                return false
            }
            expression = expression.substring(1, expression.length - 1);
            var featureAndValue = expression.split(/\s*:\s*/);
            switch (featureAndValue.length) {
                case 1:
                    var feature = featureAndValue[0].trim();
                    return isValidFeature(feature);
                case 2:
                    var feature = featureAndValue[0].trim();
                    var value = featureAndValue[1].trim();
                    return isValidFeature(feature) && _mediaFeatureValidator[feature](value);
                default:
                    return false
            }
        }

        function isValidMediaQuery(query) {
            var andSplitter = /\s+and\s+/;
            var queryTerms = query.split(andSplitter);
            return (isValidQualifiedMediaType(queryTerms[0]) || isValidExpression(queryTerms[0])) && queryTerms.slice(1).every(isValidExpression)
        }

        function isValidMediaQueryList(mediaQuery) {
            mediaQuery = mediaQuery.toLowerCase();
            if (mediaQuery.substring(0, 6) !== "@media") {
                return false
            }
            var commaSplitter = /\s*,\s*/;
            var queryList = mediaQuery.substring(7, mediaQuery.length).split(commaSplitter);
            return queryList.every(isValidMediaQuery)
        }
        module.exports = isValidMediaQueryList
    }, {}],
    425: [function(require, module, exports) {
        module.exports = {
            name: "bootstrap-studio-app",
            version: "1.0.8",
            description: "",
            main: ".static.js",
            scripts: {
                test: 'echo "Error: no test specified" && exit 1',
                watch: "watchify main.js -t babelify -o ./static.js -v -d",
                "fetch-themes": "babel-node scripts/fetch-themes.js",
                build: "browserify main.js -t babelify | uglifyjs > ./static.js"
            },
            "private": true,
            dependencies: {
                clone: "^1.0.2",
                css: "^2.2.1",
                "deep-equal": "^1.0.0",
                "escape-html": "^1.0.1",
                fuzzaldrin: "^2.1.0",
                "js-beautify": "^1.5.10",
                specificity: "^0.1.4",
                "uglify-js": "^2.4.24",
                "valid-filename": "^1.1.0",
                "valid-media-queries": "0.0.3"
            },
            devDependencies: {
                babel: "^5.8.3",
                babelify: "^6.0.2",
                browserify: "^8.1.3",
                watchify: "^2.3.0"
            },
            author: "Zine EOOD <hi@zine.bg>",
            license: "Proprietary"
        }
    }, {}],
    426: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Pane = require("./Pane");
        var smartEditableElement = require("../helpers/smartEditableElement");
        var mimeTypes = require("../config/mime-types");
        var parsePath = require("../helpers/parsePath");
        var Image = require("../components/Image");
        var AssetsPane = function(_Pane) {
            _inherits(AssetsPane, _Pane);

            function AssetsPane(elem) {
                _classCallCheck(this, AssetsPane);
                _get(Object.getPrototypeOf(AssetsPane.prototype), "constructor", this).call(this);
                this.element = elem;
                this.domToImage = new WeakMap;
                this.domToFont = new WeakMap;
                this.activeTab = "images";
                this.tabs = elem.find(".tabs");
                this.tabs.on("click", ".tab", this.tabClick.bind(this));
                this.imagesTabTarget = this.element.find(".tab-target.images");
                this.fontsTabTarget = this.element.find(".tab-target.fonts");
                smartEditableElement({
                    element: this.imagesTabTarget,
                    onCommit: this.imageSave.bind(this),
                    onDelete: this.imageDelete.bind(this)
                });
                this.mouseDownImage = false;
                this.imagesTabTarget.on("mousedown", ".image-item", this.mousedownItem.bind(this));
                this.imagesTabTarget.on("click", ".import", this.importImageAction.bind(this));
                this.fontsTabTarget.on("click", ".import", this.importFontAction.bind(this));
                this.fontsTabTarget.on("click", ".delete", this.fontDeleteClick.bind(this));
                app.on("context-activated", this.contextActivated.bind(this));
                app.on("image-assets-changed", this.updateImages.bind(this));
                app.on("font-assets-changed", this.updateFonts.bind(this))
            }
            _createClass(AssetsPane, [{
                key: "contextActivated",
                value: function contextActivated() {
                    this.scheduleUpdate()
                }
            }, {
                key: "mousedownItem",
                value: function mousedownItem(e) {
                    var target = $(e.target);
                    if (!target.is("span.name, .image-item")) return;
                    var imageItem = target.closest(".image-item");
                    var data = this.domToImage.get(imageItem[0]);
                    if (!data) return;
                    var offset = imageItem.offset();
                    var img = new Image;
                    img.initialize();
                    img.properties.src = data.name;
                    app.dragStart({
                        component: img,
                        origin: {
                            top: offset.top,
                            left: offset.left,
                            width: imageItem.outerWidth(),
                            height: imageItem.outerHeight()
                        },
                        dropActionUndo: function dropActionUndo() {
                            var parent = img.parent;
                            img.remove();
                            parent.update()
                        }
                    })
                }
            }, {
                key: "importFontAction",
                value: function importFontAction() {
                    var that = this;
                    app.fontImportDialog.open({
                        onSave: function onSave(name, url) {
                            app.context.addFontAssets({
                                name: name,
                                url: url
                            });
                            app.trigger("font-assets-changed")
                        }
                    })
                }
            }, {
                key: "imageSave",
                value: function imageSave(item, newName) {
                    var obj = this.domToImage.get(item[0]);
                    var oldName = obj.name;
                    var result = app.context.renameImageAsset(oldName, newName);
                    if (result == -2) {
                        return
                    }
                    if (result < 1) {
                        return false
                    }
                    app.trigger("image-assets-changed");
                    var that = this;
                    app.context.history.add({
                        name: "Rename Image Asset",
                        undo: function undo() {
                            app.context.renameImageAsset(newName, oldName);
                            app.trigger("image-assets-changed")
                        },
                        redo: function redo() {
                            app.context.renameImageAsset(oldName, newName);
                            app.trigger("image-assets-changed")
                        }
                    })
                }
            }, {
                key: "imageDelete",
                value: function imageDelete(item) {
                    var obj = this.domToImage.get(item[0]);
                    var index = app.context.findIndexForImageAsset(obj);
                    if (index == -1) {
                        return
                    }
                    app.context.removeImageAssetFromIndex(index);
                    app.trigger("image-assets-changed");
                    var that = this;
                    app.context.history.add({
                        name: "Remove Image Asset",
                        undo: function undo() {
                            app.context.addImageAssetToIndex(obj, index);
                            app.trigger("image-assets-changed")
                        },
                        redo: function redo() {
                            app.context.removeImageAssetFromIndex(index);
                            app.trigger("image-assets-changed")
                        }
                    })
                }
            }, {
                key: "imagesImport",
                value: function imagesImport(items) {
                    var oldImages = app.context.assets.images.slice();
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;
                    try {
                        for (var _iterator = items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var item = _step.value;
                            app.context.addImageAsset(item)
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator["return"]) {
                                _iterator["return"]()
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError
                            }
                        }
                    }
                    var newImages = app.context.assets.images.slice();
                    app.trigger("image-assets-changed");
                    var that = this;
                    app.context.history.add({
                        name: "Image Import",
                        undo: function undo() {
                            app.context.assets.images = oldImages;
                            app.trigger("image-assets-changed")
                        },
                        redo: function redo() {
                            app.context.assets.images = newImages;
                            app.trigger("image-assets-changed")
                        }
                    })
                }
            }, {
                key: "importImageAction",
                value: function importImageAction() {
                    var that = this;
                    electron.showFileOpenDialog({
                        filters: [{
                            name: "Image Files",
                            extensions: ["jpg", "jpeg", "png", "gif", "svg"]
                        }],
                        defaultPath: electron.readSetting("lastImageImportPath") || electron.readSetting("lastDesignPath"),
                        properties: ["openFile", "multiSelections"]
                    }, function(paths) {
                        if (!paths) return;
                        electron.saveSetting("lastImageImportPath", paths[0]);
                        that.importImagesByPaths(paths)
                    })
                }
            }, {
                key: "importImagesByPaths",
                value: function importImagesByPaths(paths) {
                    if (!Array.isArray(paths)) return;
                    var that = this;
                    var images = [];
                    var operations = [];
                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;
                    try {
                        for (var _iterator2 = paths[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                            var path = _step2.value;
                            var parsed = parsePath(path);
                            var ext = parsed.extname.toLowerCase().replace(".", "");
                            var type = mimeTypes[ext];
                            if (!type) {
                                continue
                            }
                            operations.push(electron.readFile(path, "base64"));
                            images.push(app.context.createImageAsset({
                                name: parsed.basename,
                                extension: ext
                            }))
                        }
                    } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
                                _iterator2["return"]()
                            }
                        } finally {
                            if (_didIteratorError2) {
                                throw _iteratorError2
                            }
                        }
                    }
                    Promise.all(operations).then(function(operations) {
                        for (var i = 0; i < images.length; i++) {
                            images[i].data = "data:" + mimeTypes[images[i].extension] + ";base64," + operations[i]
                        }
                        if (images.length) {
                            that.imagesImport(images)
                        }
                    })["catch"](function(err) {
                        app.alertDialog.open({
                            title: "Can't Import Image",
                            message: "An error occured while importing."
                        });
                        console.error(err)
                    })
                }
            }, {
                key: "fontDeleteClick",
                value: function fontDeleteClick(e) {
                    var target = $(e.target);
                    var item = target.closest(".font-item");
                    var obj = this.domToFont.get(item[0]);
                    var index = app.context.findIndexForFontAsset(obj);
                    if (index == -1) {
                        return
                    }
                    app.context.removeFontAssetFromIndex(index);
                    app.trigger("font-assets-changed");
                    var that = this;
                    app.context.history.add({
                        name: "Remove Font Asset",
                        undo: function undo() {
                            app.context.addFontAssetToIndex(obj, index);
                            app.trigger("font-assets-changed")
                        },
                        redo: function redo() {
                            app.context.removeFontAssetFromIndex(index);
                            app.trigger("font-assets-changed")
                        }
                    })
                }
            }, {
                key: "tabClick",
                value: function tabClick(e) {
                    var elem = $(e.target);
                    if (elem.is(".active")) return;
                    this.activeTab = elem.data("tab");
                    this.update()
                }
            }, {
                key: "update",
                value: function update() {
                    this.tabs.find(".active").removeClass("active");
                    this.tabs.find(".tab." + this.activeTab).addClass("active");
                    this.element.find(".tab-target").removeClass("active");
                    this.element.find(".tab-target." + this.activeTab).addClass("active");
                    if (this.activeTab == "images") {
                        this.updateImages()
                    } else {
                        this.updateFonts()
                    }
                    return this.element
                }
            }, {
                key: "updateImages",
                value: function updateImages() {
                    var build = document.createDocumentFragment();
                    var images = app.context.assets.images;
                    for (var i = 0; i < images.length; i++) {
                        var tmp = $('<div class="image-item smart-editable gray-item">\n				<span class="name"></span>\n				<input type="text" value="" />\n				<span class="delete">&times;</span>\n				<span class="edit"><i class="material-icon">mode_edit</i></span>\n				<span class="save"><i class="material-icon">check</i></span>\n			</div>');
                        tmp.find(".name").text(images[i].name);
                        this.domToImage.set(tmp[0], images[i]);
                        build.appendChild(tmp[0])
                    }
                    this.imagesTabTarget.html(build);
                    if (!images.length) {
                        this.imagesTabTarget.html('<div class="message">No images used</div>')
                    }
                    this.imagesTabTarget.append($('<a class="import darkgray button">Import image</a>'))
                }
            }, {
                key: "updateFonts",
                value: function updateFonts() {
                    var build = document.createDocumentFragment();
                    var fonts = app.context.getFonts();
                    for (var i = 0; i < fonts.length; i++) {
                        var tmp = $('<div class="font-item gray-item">\n				<span class="name"></span>\n				<span class="url"></span>\n			</div>');
                        tmp.find(".name").text(fonts[i].name);
                        if (fonts[i].theme) {
                            tmp.prepend('<span class="lock" title="Theme font. Can\'t be removed."><i class="material-icon">lock_outline</i></span>');
                            tmp.find(".url").text(fonts[i].url)
                        } else {
                            tmp.prepend('<span class="delete">&times;</span>');
                            tmp.find(".url").text(fonts[i].url)
                        }
                        this.domToFont.set(tmp[0], fonts[i]);
                        build.appendChild(tmp[0])
                    }
                    this.fontsTabTarget.html(build);
                    if (!fonts.length) {
                        this.fontsTabTarget.html('<div class="message">No fonts used</div>')
                    }
                    this.fontsTabTarget.append($('<a class="import darkgray button">Import font</a>'))
                }
            }]);
            return AssetsPane
        }(Pane);
        module.exports = AssetsPane
    }, {
        "../components/Image": 61,
        "../config/mime-types": 135,
        "../helpers/parsePath": 183,
        "../helpers/smartEditableElement": 189,
        "./Pane": 440
    }],
    427: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var OptionItem = require("./OptionItem");
        var BreadcrumbsOption = function(_OptionItem) {
            _inherits(BreadcrumbsOption, _OptionItem);

            function BreadcrumbsOption(options) {
                _classCallCheck(this, BreadcrumbsOption);
                _get(Object.getPrototypeOf(BreadcrumbsOption.prototype), "constructor", this).call(this, options);
                this.component = options.component;
                this.element = $('<div class="breadcrumbs-option">');
                this.list = []
            }
            _createClass(BreadcrumbsOption, [{
                key: "destructor",
                value: function destructor() {
                    app.context.previousBreadcrumbList = this.list
                }
            }, {
                key: "bindEventListeners",
                value: function bindEventListeners() {
                    this.element.off("mouseup").on("mouseup", "a", this.click.bind(this));
                    this.element.off("mouseenter").on("mouseenter", "a", this.mouseenter.bind(this));
                    this.element.off("mouseleave").on("mouseleave", "a", this.mouseleave.bind(this))
                }
            }, {
                key: "mouseenter",
                value: function mouseenter(e) {
                    var index = this.element.find("a").index(e.target);
                    app.canvas.highlight(this.list[index])
                }
            }, {
                key: "mouseleave",
                value: function mouseleave() {
                    app.canvas.removeHighlight()
                }
            }, {
                key: "click",
                value: function click(e) {
                    var index = this.element.find("a").index(e.target);
                    if (e.button == 2) {
                        this.list[index].showContextMenu();
                        e.stopPropagation();
                        return
                    }
                    if (this.list[index].isFocused()) {
                        return
                    }
                    this.list[index].focus()
                }
            }, {
                key: "update",
                value: function update() {
                    _get(Object.getPrototypeOf(BreadcrumbsOption.prototype), "update", this).call(this);
                    var component = this.component;
                    var list = [];
                    while (component) {
                        list.unshift(component);
                        component = component.parent
                    }
                    var previousList = app.context.previousBreadcrumbList || [];
                    var index = previousList.indexOf(this.component);
                    if (index != -1) {
                        var added = 0;
                        var toAdd = 3;
                        if (list.length == 1) toAdd = 4;
                        for (var i = index + 1; i < previousList.length && added++ < toAdd; i++) {
                            if (!previousList[i].isVisible()) {
                                break
                            }
                            list.push(previousList[i])
                        }
                    }
                    this.list = list = list.slice(-5);
                    var html = "";
                    for (var i = 0; i < list.length; i++) {
                        html += "<a" + (list[i] == this.component ? ' class="active"' : "") + ">" + list[i].getFullName() + "</a>"
                    }
                    this.element.html(html);
                    this.bindEventListeners();
                    var active = this.element.find("a.active");
                    if (active.length) {
                        setTimeout(function() {
                            active[0].scrollIntoViewIfNeeded()
                        }, 20)
                    }
                    return this.element
                }
            }]);
            return BreadcrumbsOption
        }(OptionItem);
        module.exports = BreadcrumbsOption
    }, {
        "./OptionItem": 437
    }],
    428: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var OptionItem = require("./OptionItem");
        var ButtonOption = function(_OptionItem) {
            _inherits(ButtonOption, _OptionItem);

            function ButtonOption(options) {
                _classCallCheck(this, ButtonOption);
                _get(Object.getPrototypeOf(ButtonOption.prototype), "constructor", this).call(this, options);
                if (!this._options.onClick) {
                    this._options.onClick = function() {}
                }
                this.element = $('<button class="button">');
                if (!this._options.style) {
                    this._options.style = "darkgray"
                }
                this.element.addClass(this._options.style);
                if (this._options.icon) {
                    this.element.html('<i class="material-icon">' + this._options.icon + "</i>");
                    if (this._options.text) {
                        this.element.attr("title", this._options.text)
                    }
                } else if (this._options.text) {
                    this.element.text(this._options.text)
                }
            }
            _createClass(ButtonOption, [{
                key: "bindEventListeners",
                value: function bindEventListeners() {
                    this.element.off("click").on("click", this.click.bind(this))
                }
            }, {
                key: "click",
                value: function click(e) {
                    this._options.onClick(e)
                }
            }, {
                key: "update",
                value: function update() {
                    _get(Object.getPrototypeOf(ButtonOption.prototype), "update", this).call(this);
                    this.bindEventListeners();
                    if (this._options.layout == "row-right") {
                        return $('<label class="row-right">').append(this.element)
                    }
                    return this.element
                }
            }]);
            return ButtonOption
        }(OptionItem);
        module.exports = ButtonOption
    }, {
        "./OptionItem": 437
    }],
    429: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var OptionItem = require("./OptionItem");
        var CheckBoxOption = function(_OptionItem) {
            _inherits(CheckBoxOption, _OptionItem);

            function CheckBoxOption(options) {
                _classCallCheck(this, CheckBoxOption);
                _get(Object.getPrototypeOf(CheckBoxOption.prototype), "constructor", this).call(this, options);
                this.element = $('<label class="for-checkbox"><span>' + this._options.label + '</span> <input type="checkbox" /></label>')
            }
            _createClass(CheckBoxOption, [{
                key: "bindEventListeners",
                value: function bindEventListeners() {
                    this.element.find("input").off("change").on("change", this.changeHandler.bind(this))
                }
            }, {
                key: "val",
                value: function val() {
                    return this.element.find("input").prop("checked")
                }
            }, {
                key: "update",
                value: function update() {
                    _get(Object.getPrototypeOf(CheckBoxOption.prototype), "update", this).call(this);
                    this.element.find("input").prop("checked", !!this.getValue());
                    this.bindEventListeners();
                    return this.element
                }
            }]);
            return CheckBoxOption
        }(OptionItem);
        module.exports = CheckBoxOption
    }, {
        "./OptionItem": 437
    }],
    430: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var OptionItem = require("./OptionItem");
        var ButtonOption = require("../panes/ButtonOption");
        var LinkOption = require("../panes/LinkOption");
        var getSmartProp = require("../helpers/getSmartProp");
        var setSmartProp = require("../helpers/setSmartProp");
        var ComponentListOption = function(_OptionItem) {
            _inherits(ComponentListOption, _OptionItem);

            function ComponentListOption(options) {
                _classCallCheck(this, ComponentListOption);
                _get(Object.getPrototypeOf(ComponentListOption.prototype), "constructor", this).call(this, options);
                this.component = options.component;
                this.formFields = [];
                this.element = $('<div class="component-list-option">' + "<ul></ul>" + '<div class="form-holder"></div> <a class="add-button button darkgray">Add</a>' + "</div>");
                this.isDragging = false;
                this.domNodeToComponent = new WeakMap;
                this.offsetTop = 0;
                this.addForm = options.addForm;
                this.editForm = options.editForm;
                this.onFormSave = options.onFormSave;
                this.itemRepresentation = options.itemRepresentation || function() {}
            }
            _createClass(ComponentListOption, [{
                key: "bindEventListeners",
                value: function bindEventListeners() {
                    this.element.off();
                    this.element.on("mousedown", "li .handle", this.handleMousedown.bind(this));
                    this.element.on("click", "li .edit", this.editClick.bind(this));
                    this.element.on("click", "li .delete", this.deleteClick.bind(this));
                    this.element.on("click", "li span", this.spanClick.bind(this));
                    this.element.on("click", ".add-button", this.showAddForm.bind(this));
                    this.element.on("mouseup", this.mouseup.bind(this));
                    this.element.on("mouseleave", this.mouseleave.bind(this));
                    this.element.on("mousemove", this.mousemove.bind(this))
                }
            }, {
                key: "shouldShow",
                value: function shouldShow(type, item) {
                    if (!(type in this._options.actions)) {
                        return false
                    }
                    if (typeof this._options.actions[type] == "boolean") {
                        return this._options.actions[type]
                    }
                    if (typeof this._options.actions[type].condition == "function") {
                        return this._options.actions[type].condition(item)
                    }
                    return false
                }
            }, {
                key: "hasAction",
                value: function hasAction(type) {
                    return type in this._options.actions && typeof this._options.actions[type].action == "function"
                }
            }, {
                key: "executeAction",
                value: function executeAction(type, param) {
                    return this._options.actions[type].action(param)
                }
            }, {
                key: "getItems",
                value: function getItems() {
                    return getSmartProp(this._options.items)
                }
            }, {
                key: "setItems",
                value: function setItems(val) {
                    return setSmartProp(this._options.items, val)
                }
            }, {
                key: "showAddForm",
                value: function showAddForm() {
                    var formHolder = this.element.find(".form-holder");
                    formHolder.empty().show();
                    var that = this;
                    this.formFields = this.addForm();
                    var button = new ButtonOption({
                        text: "Create",
                        onClick: function onClick() {
                            var item = that.onFormSave(that.formFields);
                            var oldItems = that.getItems();
                            var newItems = oldItems.slice();
                            newItems.push(item);
                            that.setItems(newItems);
                            that.component.update();
                            app.context.history.add({
                                name: "Create New " + that.component.getName() + " Entry",
                                undo: function undo() {
                                    that.setItems(oldItems);
                                    that.component.update()
                                },
                                redo: function redo() {
                                    that.setItems(newItems);
                                    that.component.update()
                                }
                            })
                        }
                    });
                    var link = new LinkOption({
                        text: "Cancel",
                        onClick: function onClick() {
                            that.hideForm();
                            that.removeHighlight()
                        }
                    });
                    this.formFields.forEach(function(f) {
                        return formHolder.append(f.update())
                    });
                    formHolder.append(button.update());
                    formHolder.append(link.update())
                }
            }, {
                key: "showEditForm",
                value: function showEditForm(component) {
                    var formHolder = this.element.find(".form-holder");
                    formHolder.empty().show();
                    var that = this;
                    this.formFields = this.editForm(component);
                    var button = new ButtonOption({
                        text: "Save Item",
                        onClick: function onClick() {
                            var items = that.getItems().slice();
                            var index = items.indexOf(component);
                            var oldItem = component;
                            var newItem = that.onFormSave(that.formFields);
                            items[index] = newItem;
                            that.setItems(items);
                            that.component.update();
                            app.context.history.add({
                                name: "Edit " + that.component.getName() + " Entry",
                                undo: function undo() {
                                    items[index] = oldItem;
                                    that.setItems(items);
                                    that.component.update()
                                },
                                redo: function redo() {
                                    items[index] = newItem;
                                    that.setItems(items);
                                    that.component.update()
                                }
                            })
                        }
                    });
                    var link = new LinkOption({
                        text: "Cancel",
                        onClick: function onClick() {
                            that.hideForm();
                            that.removeHighlight()
                        }
                    });
                    this.formFields.forEach(function(f) {
                        return formHolder.append(f.update())
                    });
                    formHolder.append(button.update());
                    formHolder.append(link.update())
                }
            }, {
                key: "hideForm",
                value: function hideForm() {
                    var formHolder = this.element.find(".form-holder");
                    this.formFields = [];
                    formHolder.empty().hide()
                }
            }, {
                key: "removeHighlight",
                value: function removeHighlight() {
                    this.element.find(".highlighted").removeClass("highlighted")
                }
            }, {
                key: "mouseleave",
                value: function mouseleave() {
                    this.mouseup()
                }
            }, {
                key: "mouseup",
                value: function mouseup(e) {
                    if (!this.isDragging) return;
                    var node = this.draggedNode;
                    var ul = this.draggedNode.parentNode;
                    this.isDragging = false;
                    this.draggedNodeTop = null;
                    this.draggedNodeIndex = null;
                    this.draggedNode.classList.add("animated");
                    this.draggedNode.parentNode.classList.remove("drag-enabled");
                    this.draggedNode.style["transform"] = "";
                    this.draggedNode = null;
                    var newItems = [];
                    var oldItems = this.getItems().slice();
                    for (var i = 0; i < ul.children.length; i++) {
                        newItems.push(this.domNodeToComponent.get(ul.children[i]))
                    }
                    if (!newItems.every(function(item, index) {
                            return oldItems[index] == item
                        })) {
                        var option = this;
                        this.setItems(newItems);
                        this.component.update();
                        app.context.history.add({
                            name: "Reorder " + this.component.getName() + " Items",
                            undo: function undo() {
                                option.setItems(oldItems);
                                option.component.update()
                            },
                            redo: function redo() {
                                option.setItems(newItems);
                                option.component.update()
                            }
                        })
                    }
                    setTimeout(function() {
                        node.classList.remove("animated");
                        node.classList.remove("dragged")
                    }, 150)
                }
            }, {
                key: "editClick",
                value: function editClick(e) {
                    var component = this.domNodeToComponent.get(e.currentTarget.parentNode);
                    if (this.hasAction("edit")) {
                        return this.executeAction("edit", component)
                    } else if (this.editForm) {
                        this.element.find(".highlighted").removeClass("highlighted");
                        e.currentTarget.parentNode.classList.add("highlighted");
                        this.showEditForm(component)
                    }
                }
            }, {
                key: "deleteClick",
                value: function deleteClick(e) {
                    var component = this.domNodeToComponent.get(e.currentTarget.parentNode);
                    if (this.hasAction("delete")) {
                        return this.executeAction("delete", component)
                    }
                    this.hideForm();
                    var items = this.getItems().slice();
                    var oldItems = items.slice();
                    var index = items.indexOf(component);
                    if (index == -1) {
                        return
                    }
                    items.splice(index, 1);
                    this.setItems(items);
                    this.component.update();
                    var option = this;
                    app.context.history.add({
                        name: "Delete " + this.component.getName() + " Item",
                        undo: function undo() {
                            option.setItems(oldItems);
                            option.component.update()
                        },
                        redo: function redo() {
                            option.setItems(items);
                            option.component.update()
                        }
                    })
                }
            }, {
                key: "spanClick",
                value: function spanClick(e) {
                    if (!this.editForm) {
                        return false
                    }
                    this.hideForm();
                    var component = this.domNodeToComponent.get(e.currentTarget.parentNode);
                    this.element.find(".highlighted").removeClass("highlighted");
                    e.currentTarget.parentNode.classList.add("highlighted");
                    this.showEditForm(component)
                }
            }, {
                key: "handleMousedown",
                value: function handleMousedown(e) {
                    this.hideForm();
                    var component = this.domNodeToComponent.get(e.currentTarget.parentNode);
                    this.isDragging = true;
                    this.draggedNode = e.currentTarget.parentNode;
                    this.draggedNodeIndex = Array.from(this.draggedNode.parentNode.children).indexOf(this.draggedNode);
                    this.draggedNode.classList.add("dragged");
                    this.offsetTop = e.pageY - this.draggedNode.getBoundingClientRect().top;
                    this.draggedNode.parentNode.classList.add("drag-enabled");
                    this.draggedNodeTop = null;
                    this.removeHighlight()
                }
            }, {
                key: "mousemove",
                value: function mousemove(e) {
                    if (!this.isDragging) return;
                    if (!this.draggedNodeTop) {
                        this.draggedNodeTop = this.draggedNode.getBoundingClientRect().top
                    }
                    this.draggedNode.style["transform"] = "translateY(" + (e.pageY - (this.draggedNodeTop + this.offsetTop)) + "px)";
                    var elem = document.elementFromPoint(e.pageX, e.pageY);
                    var over = elem.closest("li");
                    var moved = false;
                    if (!over) return;
                    var overIndex = Array.from(over.parentNode.children).indexOf(over);
                    var box = over.getBoundingClientRect();
                    if (box.top + box.height / 2 > e.pageY) {
                        if (this.draggedNodeIndex == overIndex - 1) return;
                        over.insertAdjacentElement("beforeBegin", this.draggedNode);
                        this.draggedNodeIndex = overIndex;
                        moved = true
                    } else if (box.bottom - box.height / 2 < e.pageY) {
                        if (this.draggedNodeIndex == overIndex + 1) return;
                        over.insertAdjacentElement("afterEnd", this.draggedNode);
                        this.draggedNodeIndex = overIndex;
                        moved = true
                    }
                    if (moved) {
                        this.draggedNodeTop = box.top;
                        this.draggedNode.style["transform"] = "translateY(" + (e.pageY - (this.draggedNodeTop + this.offsetTop)) + "px)"
                    }
                }
            }, {
                key: "update",
                value: function update() {
                    _get(Object.getPrototypeOf(ComponentListOption.prototype), "update", this).call(this);
                    var li, ul = $("<ul>"),
                        items = this.getItems();
                    for (var i = 0; i < items.length; i++) {
                        li = $('<li class="gray-item"><i class="handle"></i><span class="name"></span></li>');
                        li.find("span").text(this.itemRepresentation(items[i]));
                        if (this.shouldShow("delete", items[i])) {
                            li.append('<b class="delete">&times;</b>')
                        }
                        if (this.shouldShow("edit", items[i])) {
                            li.append('<b class="edit"><i class="material-icon">mode_edit</i></b>')
                        }
                        this.domNodeToComponent.set(li[0], items[i]);
                        ul.append(li)
                    }
                    this.element.find("ul").replaceWith(ul);
                    this.element.find(".form-holder").empty();
                    this.bindEventListeners();
                    return this.element
                }
            }]);
            return ComponentListOption
        }(OptionItem);
        module.exports = ComponentListOption
    }, {
        "../helpers/getSmartProp": 170,
        "../helpers/setSmartProp": 188,
        "../panes/ButtonOption": 428,
        "../panes/LinkOption": 436,
        "./OptionItem": 437
    }],
    431: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Pane = require("./Pane.js");
        var components = require("../components/");
        var filter = require("fuzzaldrin").filter;
        var Component = require("../components/Component");
        var Package = require("../base/Package");
        var executeDropCall = require("../helpers/executeDropCall");
        var smartEditableElement = require("../helpers/smartEditableElement");
        var enforceFileExtension = require("../helpers/enforceFileExtension");
        var buildBSComponentFormat = require("../helpers/buildBSComponentFormat");
        var parsePath = require("../helpers/parsePath");
        var ComponentPane = function(_Pane) {
            _inherits(ComponentPane, _Pane);

            function ComponentPane(elem) {
                _classCallCheck(this, ComponentPane);
                _get(Object.getPrototypeOf(ComponentPane.prototype), "constructor", this).call(this);
                this.element = elem;
                this.tabs = elem.find(".tabs");
                this.tabs.on("click", ".tab", this.tabClick.bind(this));
                this.searchString = "";
                this.searchInput = this.element.find(".studio input");
                this.searchInput.on("input", this.onSearch.bind(this));
                this.nothingFoundMessage = this.element.find(".nothing-found");
                var tmpSet = new Set;
                var keys = ["studio"];
                for (var i = 0; i < keys.length; i++) {
                    var tmp = components[keys[i]];
                    for (var c in tmp)
                        if (tmp.hasOwnProperty(c)) {
                            tmp[c].forEach(function(c) {
                                return tmpSet.add(c)
                            })
                        }
                }
                this.searchIndex = Array.from(tmpSet).map(function(item) {
                    return {
                        name: item.getName(),
                        func: item
                    }
                });
                this.suggestedHolder = this.element.find(".suggested");
                this.suggestedHolder.find(".category-name").on("click", this.suggestedToggle.bind(this));
                this.activeTab = "studio";
                this.suggestedComponents = [];
                this.smartEditable = smartEditableElement({
                    element: elem,
                    onCommit: this.componentEdit.bind(this),
                    onDelete: this.componentDelete.bind(this)
                });
                var self = this;
                this.element.on("mousedown", ".item", this.mousedown.bind(this));
                this.element.on("click", ".item .menu", this.packageMenuClick.bind(this));
                this.element.on("mousedown", ".item .menu", false);
                this.element.on("click", ".no-components .button", function(e) {
                    app.openURLInBrowser(e.target.href);
                    e.preventDefault()
                });
                app.on("context-activated", function() {
                    self.suggestedComponents = [];
                    self.update()
                });
                app.on("component-focused", function(component) {
                    self.suggestedComponents = component.constructor.suggestedComponents || [];
                    self.scheduleSuggestedUpdate()
                });
                app.on("component-blurred", function() {
                    self.suggestedComponents = [];
                    self.scheduleSuggestedUpdate()
                });
                app.on("package-changed package-created package-deleted", function() {
                    if (self.activeTab == "user") {
                        self.updatePackageList()
                    } else {
                        self.showTabBadge("user")
                    }
                })
            }
            _createClass(ComponentPane, [{
                key: "packageMenuClick",
                value: function packageMenuClick(e) {
                    var elem = $(e.currentTarget);
                    var offset = elem.offset();
                    var editable = elem.closest(".smart-editable");
                    var self = this;
                    var pkg = editable.data("item");
                    app.contextMenu.show(offset.left, offset.top + elem.height(), [{
                        name: "Edit",
                        action: function action() {
                            self.smartEditable.startEditing(editable)
                        }
                    }, {
                        name: "Export",
                        action: function action() {
                            electron.showFileSaveDialog({
                                title: "Export Component",
                                defaultPath: (electron.readSetting("lastDesignPath") ? electron.readSetting("lastDesignPath") + electron.pathSeparator : "") + pkg.name + ".bscomp",
                                filters: [{
                                    name: "Bootstrap Studio Component (.bscomp)",
                                    extensions: ["bscomp"]
                                }]
                            }, function(path) {
                                if (!path) return;
                                path = enforceFileExtension(path, "bscomp");
                                electron.saveSetting("lastDesignPath", parsePath(path).dirname);
                                var content = buildBSComponentFormat(pkg);
                                electron.writeFile(path, content, "gzip")["catch"](function(e) {
                                    app.alertDialog.open({
                                        title: "Can't Write",
                                        message: "An error occured and the file couldn't be written."
                                    });
                                    console.error(e)
                                })
                            })
                        }
                    }, {
                        name: "Delete",
                        action: function action() {
                            self.smartEditable["delete"](editable)
                        }
                    }])
                }
            }, {
                key: "showTabBadge",
                value: function showTabBadge(tab) {
                    this.element.find(".tabs ." + tab).addClass("has-badge")
                }
            }, {
                key: "hideBadges",
                value: function hideBadges() {
                    this.element.find(".has-badge").removeClass("has-badge")
                }
            }, {
                key: "componentEdit",
                value: function componentEdit(elem, newName) {
                    if (!newName.trim().length) {
                        return false
                    }
                    var item = elem.data("item");
                    var that = this;
                    var oldName = item.name;
                    app.renamePackage(item, newName);
                    app.context.history.add({
                        name: "Rename Component",
                        undo: function undo() {
                            app.renamePackage(item, oldName)
                        },
                        redo: function redo() {
                            app.renamePackage(item, newName)
                        }
                    })
                }
            }, {
                key: "componentDelete",
                value: function componentDelete(elem) {
                    var item = elem.data("item");
                    var that = this;
                    app.removePackage(item);
                    app.context.history.add({
                        name: "Delete Component",
                        undo: function undo() {
                            app.addPackage(item)
                        },
                        redo: function redo() {
                            app.removePackage(item)
                        }
                    })
                }
            }, {
                key: "tabClick",
                value: function tabClick(e) {
                    var elem = $(e.target);
                    if (elem.is(".active")) return;
                    this.activeTab = elem.data("tab");
                    this.updateTabs()
                }
            }, {
                key: "scheduleSuggestedUpdate",
                value: function scheduleSuggestedUpdate() {
                    clearTimeout(this._suggestedUpdateTimeout);
                    var that = this;
                    this._suggestedUpdateTimeout = setTimeout(function() {
                        that.updateSuggested()
                    }, 30)
                }
            }, {
                key: "onSearch",
                value: function onSearch(e) {
                    this.searchString = e.currentTarget.value;
                    clearTimeout(this._searchTimeout);
                    this._searchTimeout = setTimeout(this.updateComponentList.bind(this), 100)
                }
            }, {
                key: "mousedown",
                value: function mousedown(e) {
                    var toolButton = $(e.currentTarget),
                        offset = toolButton.offset();
                    if (toolButton.hasClass("editing")) return;
                    e.preventDefault();
                    var item = toolButton.data("item");
                    var dragProperties = {
                        component: null,
                        origin: {
                            top: offset.top,
                            left: offset.left,
                            width: toolButton.outerWidth(),
                            height: toolButton.outerHeight()
                        }
                    };
                    dragProperties.dropHistory = "Add New Component To Design";
                    if (item instanceof Function) {
                        var elem = new item;
                        elem.initialize();
                        dragProperties.component = elem;
                        dragProperties.dropActionUndo = function() {
                            var parent = dragProperties.component.parent;
                            dragProperties.component.remove();
                            parent.update()
                        }
                    } else if (item instanceof Package) {
                        dragProperties.component = item.createTree();
                        var op = item.addAssetsToContextOperation(app.context);
                        dragProperties.dropAction = function(dropCall) {
                            executeDropCall(dropCall);
                            op["do"]();
                            app.assetsPane.update();
                            app.canvas.refreshCSS();
                            app.canvas.update()
                        };
                        dragProperties.dropActionUndo = function() {
                            var parent = dragProperties.component.parent;
                            dragProperties.component.remove();
                            op.undo();
                            app.assetsPane.update();
                            app.canvas.refreshCSS();
                            parent.update()
                        }
                    }
                    app.dragStart(dragProperties)
                }
            }, {
                key: "update",
                value: function update() {
                    this.updateSuggested();
                    this.updateTabs();
                    return this.element
                }
            }, {
                key: "updateTabs",
                value: function updateTabs() {
                    this.tabs.find(".active").removeClass("active");
                    this.tabs.find(".tab." + this.activeTab).addClass("active");
                    this.element.find(".tab-target").removeClass("active");
                    this.element.find(".tab-target." + this.activeTab).addClass("active");
                    if (this.activeTab == "user") {
                        this.updatePackageList()
                    } else {
                        this.updateComponentList()
                    }
                    this.hideBadges()
                }
            }, {
                key: "suggestedToggle",
                value: function suggestedToggle() {
                    this.suggestedHolder.toggleClass("collapsed")
                }
            }, {
                key: "updateSuggested",
                value: function updateSuggested() {
                    var elem = this.element.find(".suggested-list").empty();
                    var build = [];
                    for (var i = 0; i < this.suggestedComponents.length; i++) {
                        build.push(createComponentItem(components.all[this.suggestedComponents[i]]))
                    }
                    elem.html(build);
                    this.suggestedHolder.toggle(build.length > 0)
                }
            }, {
                key: "updateComponentList",
                value: function updateComponentList() {
                    var found = this.searchIndex;
                    var searchString = this.searchString.trim(),
                        searching = searchString.length > 0;
                    var container = this.element.find(".tab-target.studio .list").empty();
                    var build = [],
                        categoryDiv;
                    var list = components.studio;
                    this.nothingFoundMessage.hide();
                    if (searching) {
                        found = filter(found, searchString, {
                            key: "name"
                        });
                        if (!found.length) {
                            this.nothingFoundMessage.show();
                            return
                        }
                        container.html(found.map(function(f) {
                            return createComponentItem(f.func)
                        }));
                        return
                    }
                    for (var c in list)
                        if (list.hasOwnProperty(c)) {
                            categoryDiv = $('<div class="component-category"><span class="category-name">' + c + "</span></div>");
                            for (var i = 0; i < list[c].length; i++) {
                                categoryDiv.append(createComponentItem(list[c][i]))
                            }
                            build.push(categoryDiv)
                        }
                    container.html(build)
                }
            }, {
                key: "updatePackageList",
                value: function updatePackageList() {
                    var container = this.element.find(".tab-target.user .list");
                    var message = this.element.find(".tab-target.user .no-components").hide();
                    var build = [];
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;
                    try {
                        for (var _iterator = app.packages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var pkg = _step.value;
                            build.push(createPackageItem(pkg))
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator["return"]) {
                                _iterator["return"]()
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError
                            }
                        }
                    }
                    container.html(build);
                    if (!build.length) {
                        message.show()
                    }
                }
            }]);
            return ComponentPane
        }(Pane);

        function createComponentItem(item) {
            var tmp = $('<div class="item gray-item"><span class="badge"></span><span class="name"></span></div>');
            tmp.find(".badge").text(item.getName().slice(0, 1).toLowerCase());
            tmp.find(".name").text(item.getName());
            tmp.data("item", item);
            return tmp
        }

        function createPackageItem(item) {
            var tmp = $('<div class="item gray-item smart-editable">' + '<span class="badge"><i class="material-icon star">star</i></span>' + '<span class="name"></span>' + '<input type="text" value="" />' + '<span class="menu"><span></span></span>' + '<span class="save"><i class="material-icon check">check</i></span>' + "</div>");
            tmp.find(".name").text(item.name);
            tmp.data("item", item);
            return tmp
        }
        module.exports = ComponentPane
    }, {
        "../base/Package": 16,
        "../components/": 130,
        "../components/Component": 38,
        "../helpers/buildBSComponentFormat": 152,
        "../helpers/enforceFileExtension": 162,
        "../helpers/executeDropCall": 165,
        "../helpers/parsePath": 183,
        "../helpers/smartEditableElement": 189,
        "./Pane.js": 440,
        fuzzaldrin: 414
    }],
    432: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var OptionItem = require("./OptionItem");
        var GroupOption = function(_OptionItem) {
            _inherits(GroupOption, _OptionItem);

            function GroupOption(options) {
                _classCallCheck(this, GroupOption);
                _get(Object.getPrototypeOf(GroupOption.prototype), "constructor", this).call(this, options);
                this.label = options.label;
                this.element = $('<div class="option-group"><p class="option-group-label">' + '<span class="title"></span><span class="collapse"></span></p>' + '<div class="content"></div></div>');
                this.content = this.element.find(".content");
                if (options.id) {
                    this.element.addClass(options.id);
                    if (!app.optionsPaneCollapsedState.has(options.id)) {
                        app.optionsPaneCollapsedState.set(options.id, options.collapsed || false)
                    }
                }
                this.children = [];
                if (Array.isArray(options.children)) {
                    for (var i = 0; i < options.children.length; i++) {
                        this.add(options.children[i])
                    }
                }
            }
            _createClass(GroupOption, [{
                key: "bindEventListeners",
                value: function bindEventListeners() {
                    this.element.off("click").on("click", ".option-group-label", this.toggleCollapse.bind(this))
                }
            }, {
                key: "toggleCollapse",
                value: function toggleCollapse() {
                    this.element.toggleClass("collapsed");
                    if (this._options.id) {
                        app.optionsPaneCollapsedState.set(this._options.id, this.element.hasClass("collapsed"))
                    }
                }
            }, {
                key: "destructor",
                value: function destructor() {
                    for (var i = 0; i < this.children.length; i++) {
                        this.children[i].item.destructor && this.children[i].item.destructor()
                    }
                }
            }, {
                key: "add",
                value: function add(child) {
                    var weight = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];
                    var index = this.children.length;
                    for (var i = 0; i < this.children.length; i++) {
                        if (weight < this.children[i].weight) {
                            index = i;
                            break
                        }
                    }
                    this.children.splice(index, 0, {
                        item: child,
                        weight: weight
                    })
                }
            }, {
                key: "empty",
                value: function empty() {
                    this.children = [];
                    this.content.empty()
                }
            }, {
                key: "update",
                value: function update() {
                    _get(Object.getPrototypeOf(GroupOption.prototype), "update", this).call(this);
                    this.content.empty();
                    this.element.find(".title").text(this.label);
                    var build = [];
                    var hasVisibleChildren = false;
                    for (var i = 0; i < this.children.length; i++) {
                        if (this.children[i].item == "") {
                            build.push($('<div class="spacer">'));
                            continue
                        }
                        build.push(this.children[i].item.update());
                        if (this.children[i].item.isVisible()) {
                            hasVisibleChildren = true
                        }
                    }
                    this.content.append(build);
                    this.element.toggleClass("no-label", !this.label);
                    this.element.toggleClass("collapsed", !!app.optionsPaneCollapsedState.get(this._options.id));
                    this.element.toggle(hasVisibleChildren);
                    this.bindEventListeners();
                    return this.element
                }
            }]);
            return GroupOption
        }(OptionItem);
        module.exports = GroupOption
    }, {
        "./OptionItem": 437
    }],
    433: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var OptionItem = require("./OptionItem");
        var IconPreviewOption = function(_OptionItem) {
            _inherits(IconPreviewOption, _OptionItem);

            function IconPreviewOption(options) {
                _classCallCheck(this, IconPreviewOption);
                _get(Object.getPrototypeOf(IconPreviewOption.prototype), "constructor", this).call(this, options);
                this.iconClass = this.getValue();
                this.element = $('<div class="icon-preview-option">\n			<div class="icon"></div>\n		</div>')
            }
            _createClass(IconPreviewOption, [{
                key: "bindEventListeners",
                value: function bindEventListeners() {
                    this.element.find(".icon").off("click").on("click", this.onIconClick.bind(this))
                }
            }, {
                key: "val",
                value: function val() {
                    return this.iconClass
                }
            }, {
                key: "onIconClick",
                value: function onIconClick() {
                    var that = this;
                    app.iconsDialog.open({
                        selected: this.iconClass,
                        onSave: function onSave(value) {
                            that.iconClass = value;
                            that.changeHandler();
                            that.update()
                        }
                    })
                }
            }, {
                key: "update",
                value: function update() {
                    _get(Object.getPrototypeOf(IconPreviewOption.prototype), "update", this).call(this);
                    this.iconClass = this.getValue();
                    var iconElement = this.element.find(".icon");
                    iconElement.html('<i class="' + this.iconClass + '"></i>\n			<span class="title">' + this.iconClass + "</span>");
                    this.bindEventListeners();
                    return this.element
                }
            }]);
            return IconPreviewOption
        }(OptionItem);
        module.exports = IconPreviewOption
    }, {
        "./OptionItem": 437
    }],
    434: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var validFilename = require("valid-filename");
        var dataURLToBlob = require("../helpers/dataURLToBlob");
        var ImageAsset = function() {
            function ImageAsset(name, extension) {
                var data = arguments.length <= 2 || arguments[2] === undefined ? "" : arguments[2];
                _classCallCheck(this, ImageAsset);
                this.name = name;
                this.extension = extension;
                this.data = data;
                this._normalizedName = ImageAsset.normalizeName(name);
                this._blobURL = null
            }
            _createClass(ImageAsset, [{
                key: "destructor",
                value: function destructor() {
                    if (this._blobURL) {
                        this.revokeBlobURL();
                        this._blobURL = null
                    }
                }
            }, {
                key: "createBlobURL",
                value: function createBlobURL() {
                    return window.URL.createObjectURL(dataURLToBlob(this.data))
                }
            }, {
                key: "revokeBlobURL",
                value: function revokeBlobURL() {
                    window.URL.revokeObjectURL(this._blobURL)
                }
            }, {
                key: "nameEquals",
                value: function nameEquals(name) {
                    return this._normalizedName == ImageAsset.normalizeName(name)
                }
            }, {
                key: "renameTo",
                value: function renameTo(name) {
                    this.name = name;
                    this._normalizedName = ImageAsset.normalizeName(name)
                }
            }, {
                key: "serialize",
                value: function serialize() {
                    return {
                        name: this.name,
                        extension: this.extension,
                        data: this.data
                    }
                }
            }, {
                key: "unserialize",
                value: function unserialize(obj) {
                    this.name = obj.name;
                    this.extension = obj.extension;
                    this.data = obj.data
                }
            }, {
                key: "blobURL",
                get: function get() {
                    if (!this._blobURL) {
                        this._blobURL = this.createBlobURL()
                    }
                    return this._blobURL
                }
            }], [{
                key: "normalizeName",
                value: function normalizeName(name) {
                    return name.toLowerCase()
                }
            }, {
                key: "isNameValid",
                value: function isNameValid(name) {
                    return validFilename(name)
                }
            }]);
            return ImageAsset
        }();
        module.exports = ImageAsset
    }, {
        "../helpers/dataURLToBlob": 158,
        "valid-filename": 422
    }],
    435: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var OptionItem = require("./OptionItem");
        var InfoOption = function(_OptionItem) {
            _inherits(InfoOption, _OptionItem);

            function InfoOption(options) {
                _classCallCheck(this, InfoOption);
                _get(Object.getPrototypeOf(InfoOption.prototype), "constructor", this).call(this, options);
                this.element = $('<div class="info-option">' + '<span class="x"><i>X</i><b></b></span>' + '<span class="y"><i>Y</i><b></b></span>' + '<span class="width"><i>W</i><b></b></span>' + '<span class="height"><i>H</i><b></b></span>' + "</div>");
                this.xField = this.element.find(".x b");
                this.yField = this.element.find(".y b");
                this.wField = this.element.find(".width b");
                this.hField = this.element.find(".height b");
                app.on("component-dimensions-updated.info-option", this.componentDimensionsUpdated.bind(this))
            }
            _createClass(InfoOption, [{
                key: "destructor",
                value: function destructor() {
                    app.off(".info-option")
                }
            }, {
                key: "componentDimensionsUpdated",
                value: function componentDimensionsUpdated(component) {
                    if (component == this._options.component) {
                        this.updateInfo()
                    }
                }
            }, {
                key: "bindEventListeners",
                value: function bindEventListeners() {
                    this.element.off("click").on("click", "span", this.clickB.bind(this))
                }
            }, {
                key: "clickB",
                value: function clickB(e) {
                    e.preventDefault();
                    var selection = window.getSelection();
                    var range = document.createRange();
                    range.selectNodeContents(e.currentTarget.querySelector("b"));
                    selection.removeAllRanges();
                    selection.addRange(range)
                }
            }, {
                key: "updateInfo",
                value: function updateInfo() {
                    this.xField.text(Math.round(this._options.component.x));
                    this.yField.text(Math.round(this._options.component.y));
                    this.wField.text(Math.round(this._options.component.width));
                    this.hField.text(Math.round(this._options.component.height))
                }
            }, {
                key: "update",
                value: function update() {
                    _get(Object.getPrototypeOf(InfoOption.prototype), "update", this).call(this);
                    this.updateInfo();
                    this.bindEventListeners();
                    return this.element
                }
            }]);
            return InfoOption
        }(OptionItem);
        module.exports = InfoOption
    }, {
        "./OptionItem": 437
    }],
    436: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var OptionItem = require("./OptionItem");
        var LinkOption = function(_OptionItem) {
            _inherits(LinkOption, _OptionItem);

            function LinkOption(options) {
                _classCallCheck(this, LinkOption);
                _get(Object.getPrototypeOf(LinkOption.prototype), "constructor", this).call(this, options);
                if (!this._options.onClick) {
                    this._options.onClick = function() {}
                }
                this.element = $("<a>");
                this.element.text(this._options.text)
            }
            _createClass(LinkOption, [{
                key: "bindEventListeners",
                value: function bindEventListeners() {
                    this.element.off("click").on("click", this.click.bind(this))
                }
            }, {
                key: "click",
                value: function click() {
                    this._options.onClick()
                }
            }, {
                key: "update",
                value: function update() {
                    _get(Object.getPrototypeOf(LinkOption.prototype), "update", this).call(this);
                    this.bindEventListeners();
                    return this.element
                }
            }]);
            return LinkOption
        }(OptionItem);
        module.exports = LinkOption
    }, {
        "./OptionItem": 437
    }],
    437: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var getSmartProp = require("../helpers/getSmartProp");
        var setSmartProp = require("../helpers/setSmartProp");
        var OptionItem = function() {
            function OptionItem(options) {
                _classCallCheck(this, OptionItem);
                this._options = options;
                this.element = null;
                if (this._options.id) {
                    this.id = this._options.id
                }
                this._isCurrentlyVisible = true
            }
            _createClass(OptionItem, [{
                key: "show",
                value: function show() {
                    this._isCurrentlyVisible = true;
                    this.element[0].style.display = ""
                }
            }, {
                key: "hide",
                value: function hide() {
                    this._isCurrentlyVisible = false;
                    this.element[0].style.display = "none"
                }
            }, {
                key: "isVisible",
                value: function isVisible() {
                    return this._isCurrentlyVisible
                }
            }, {
                key: "update",
                value: function update() {
                    if (getSmartProp(this._options.visible, true)) {
                        this.show()
                    } else {
                        this.hide()
                    }
                }
            }, {
                key: "getOption",
                value: function getOption(prop) {
                    return this._options[prop]
                }
            }, {
                key: "setOption",
                value: function setOption(prop, value) {
                    this._options[prop] = value
                }
            }, {
                key: "val",
                value: function val() {}
            }, {
                key: "changeHandler",
                value: function changeHandler() {
                    var oldValue = this.getValue();
                    var newValue = this.val();
                    var self = this;
                    if (this._options.validation) {
                        this._options.validation(newValue)
                    }
                    this.setValue(newValue);
                    if (this._options.component && oldValue != newValue) {
                        this._options.component.update();
                        if (this._options.history) {
                            app.context.history.add({
                                name: this._options.history,
                                undo: function undo() {
                                    self.setValue(oldValue);
                                    self._options.component.update()
                                },
                                redo: function redo() {
                                    self.setValue(newValue);
                                    self._options.component.update()
                                }
                            })
                        }
                    }
                    if (this._options.onChange) {
                        this._options.onChange(newValue, oldValue)
                    }
                }
            }, {
                key: "getValue",
                value: function getValue() {
                    return getSmartProp(this._options.value)
                }
            }, {
                key: "setValue",
                value: function setValue(val) {
                    return setSmartProp(this._options.value, val)
                }
            }, {
                key: "visible",
                get: function get() {
                    return this._options.visible
                },
                set: function set(val) {
                    return this._options.visible = val
                }
            }]);
            return OptionItem
        }();
        module.exports = OptionItem
    }, {
        "../helpers/getSmartProp": 170,
        "../helpers/setSmartProp": 188
    }],
    438: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x2, _x3, _x4) {
            var _again = true;
            _function: while (_again) {
                var object = _x2,
                    property = _x3,
                    receiver = _x4;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x2 = parent;
                        _x3 = property;
                        _x4 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var OptionItem = require("./OptionItem.js");
        var Pane = require("./Pane.js");
        var OptionsPane = function(_Pane) {
            _inherits(OptionsPane, _Pane);

            function OptionsPane(element) {
                _classCallCheck(this, OptionsPane);
                _get(Object.getPrototypeOf(OptionsPane.prototype), "constructor", this).call(this);
                this.element = element;
                this.contentElement = element.find(".content");
                this.children = [];
                this._updateTimeout = null;
                this.noComponentSelected = element.find(".no-selected");
                app.on("context-activated", this.contextActivated.bind(this));
                app.on("component-updated", this.componentUpdated.bind(this))
            }
            _createClass(OptionsPane, [{
                key: "componentUpdated",
                value: function componentUpdated() {
                    if (app.isInlineEditingActive()) {
                        return
                    }
                    this.scheduleUpdate()
                }
            }, {
                key: "contextActivated",
                value: function contextActivated() {
                    if (!app.context.focusedComponent) {
                        this.empty()
                    }
                }
            }, {
                key: "getById",
                value: function getById(id) {
                    return walk(this);

                    function walk(item) {
                        var found = false;
                        for (var i = 0; i < item.children.length; i++) {
                            if (item.children[i].item.id == id) {
                                found = item.children[i].item;
                                break
                            }
                            if (item.children[i].item.children) {
                                found = walk(item.children[i].item);
                                if (found) break
                            }
                        }
                        return found
                    }
                }
            }, {
                key: "add",
                value: function add(obj) {
                    var weight = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];
                    if (!obj instanceof OptionItem) {
                        throw new Error("You should pass an OptionItem to this function.")
                    }
                    var index = this.children.length;
                    for (var i = 0; i < this.children.length; i++) {
                        if (weight < this.children[i].weight) {
                            index = i;
                            break
                        }
                    }
                    this.children.splice(index, 0, {
                        item: obj,
                        weight: weight
                    });
                    this.scheduleUpdate()
                }
            }, {
                key: "empty",
                value: function empty() {
                    for (var i = 0; i < this.children.length; i++) {
                        if (this.children[i].item.destructor) {
                            this.children[i].item.destructor()
                        }
                    }
                    this.children = [];
                    this.scheduleUpdate()
                }
            }, {
                key: "update",
                value: function update() {
                    var activeElement = document.activeElement;
                    var toRestoreFocus = -1;
                    if (activeElement.closest("#options-pane") !== null && activeElement.nodeName == "INPUT") {
                        toRestoreFocus = $("#options-pane input").index(activeElement)
                    }
                    this.contentElement.empty().hide();
                    var breadcrumbHolder = this.element.find(".breadcrumb-holder");
                    breadcrumbHolder.empty().hide();
                    if (this.children.length > 0) {
                        breadcrumbHolder.html(this.children[0].item.update()).show();
                        this.contentElement.append(this.children.slice(1).map(function(c) {
                            return c.item.update()
                        })).show();
                        this.noComponentSelected.hide()
                    } else {
                        this.noComponentSelected.show()
                    }
                    if (toRestoreFocus > -1) {
                        $("#options-pane input").eq(toRestoreFocus).focus()
                    }
                    return this.element
                }
            }]);
            return OptionsPane
        }(Pane);
        module.exports = OptionsPane
    }, {
        "./OptionItem.js": 437,
        "./Pane.js": 440
    }],
    439: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Pane = require("./Pane.js");
        var Component = require("../components/Component");
        var InlineWrapper = require("../components/InlineWrapper");
        var ComponentWithChildren = require("../components/ComponentWithChildren");
        var canParentTakeChild = require("../helpers/canParentTakeChild");
        var dragScroll = require("../helpers/dragScroll");
        var OverviewPane = function(_Pane) {
            _inherits(OverviewPane, _Pane);

            function OverviewPane(elem) {
                _classCallCheck(this, OverviewPane);
                _get(Object.getPrototypeOf(OverviewPane.prototype), "constructor", this).call(this);
                this.element = elem;
                this.content = elem.find(".content");
                this.domNodeToComponent = null;
                this.componentToDomNode = null;
                this.expandedMap = new WeakMap;
                this.element.on("mousedown", "b", this.mousedownItem.bind(this));
                app.on("mousemove", this.mousemove.bind(this));
                app.on("mouseup", this.mouseup.bind(this));
                this.element.on("click", "span", this.expandContract.bind(this));
                this.element.on("mouseenter", "b", this.enterItem.bind(this));
                this.element.on("mouseleave", "b", this.leaveItem.bind(this));
                this.element.on("mouseenter", function() {
                    app.aboveOverview = true
                }).on("mouseleave", function() {
                    app.aboveOverview = false
                });
                app.on("component-focused", this.markAsFocused.bind(this));
                app.on("component-updated", this.componentUpdated.bind(this));
                app.on("component-blurred", this.markAsNotFocused.bind(this));
                app.on("package-deleted package-created", this.scheduleUpdate.bind(this))
            }
            _createClass(OverviewPane, [{
                key: "componentUpdated",
                value: function componentUpdated() {
                    if (app.isInlineEditingActive()) {
                        return
                    }
                    this.scheduleUpdate()
                }
            }, {
                key: "enterItem",
                value: function enterItem(e) {
                    var component = this.domNodeToComponent.get(e.target.parentNode);
                    app.canvas.highlight(component)
                }
            }, {
                key: "leaveItem",
                value: function leaveItem(e) {
                    app.canvas.removeHighlight()
                }
            }, {
                key: "mousedownItem",
                value: function mousedownItem(e) {
                    this.isMousedown = true;
                    this.mousedownStartPosition = app.mousePosition.clone();
                    this.clickedComponent = this.domNodeToComponent.get(e.target.parentNode)
                }
            }, {
                key: "mousemove",
                value: function mousemove(e) {
                    if (app.isDragging) {
                        dragScroll.scroll(this.content[0], this.dimensions, this.contentDimensions, app.mousePosition, {
                            topOffset: 70
                        })
                    } else {
                        dragScroll.reset(this.content[0])
                    }
                    if (!app.aboveOverview) return;
                    var target = e.target.nodeName == "SPAN" ? e.target : e.target.parentNode;
                    if (app.isDragging) {
                        var overComponent = this.domNodeToComponent.get(target);
                        if (this.expandCountdown) {
                            clearTimeout(this.expandCountdown);
                            this.expandCountdown = null
                        }
                        if (!overComponent) {
                            this.cleanup();
                            return
                        }
                        if (overComponent == app.draggedComponent) {
                            this.cleanup();
                            return
                        }
                        if (overComponent.isChildOf(app.draggedComponent)) {
                            this.cleanup();
                            return
                        }
                        var isExpanded = this.expandedMap.get(overComponent) || false;
                        var rect = target.getBoundingClientRect();
                        var place = "middle",
                            highlight = false,
                            line = false;
                        if (rect.top + 6 > e.pageY) {
                            place = "top"
                        } else if (rect.bottom - 6 < e.pageY) {
                            place = "bottom"
                        }
                        if (place == "middle") {
                            if (overComponent instanceof ComponentWithChildren) {
                                if (canParentTakeChild(overComponent, app.draggedComponent)) {
                                    highlight = true;
                                    app.dropCall = {
                                        object: overComponent,
                                        method: "insertLast",
                                        arguments: [app.draggedComponent]
                                    }
                                }
                                var that = this;
                                if (overComponent.children && !isExpanded) {
                                    this.expandCountdown = setTimeout(function() {
                                        that.expand(overComponent)
                                    }, 400)
                                }
                            }
                        }
                        if (place == "top") {
                            if (canParentTakeChild(overComponent.parent, app.draggedComponent)) {
                                line = true;
                                app.dropCall = {
                                    object: overComponent.parent,
                                    method: "insertBefore",
                                    arguments: [app.draggedComponent, overComponent]
                                }
                            }
                        }
                        if (place == "bottom") {
                            if (isExpanded) {
                                if (canParentTakeChild(overComponent, app.draggedComponent)) {
                                    line = true;
                                    app.dropCall = {
                                        object: overComponent,
                                        method: "insertAt",
                                        arguments: [app.draggedComponent, 0]
                                    }
                                }
                            } else if (canParentTakeChild(overComponent.parent, app.draggedComponent)) {
                                line = true;
                                app.dropCall = {
                                    object: overComponent.parent,
                                    method: "insertAfter",
                                    arguments: [app.draggedComponent, overComponent]
                                }
                            }
                        }
                        if (line) {
                            var coord = place == "top" ? rect.top : rect.bottom;
                            if (this.lineIsShown) {
                                if (this.lineIsShown == coord) {
                                    return
                                }
                                this.removeLine()
                            }
                            this.lineIsShown = coord;
                            if (place == "top") {
                                $("<line>").insertBefore(target)
                            } else {
                                $("<line>").insertAfter(target)
                            }
                        } else {
                            this.removeLine()
                        }
                        if (highlight) {
                            if (this.highlightIsShown) {
                                if (this.highlightIsShown == overComponent) {
                                    return
                                }
                                this.removeHighlight()
                            }
                            this.highlightIsShown = overComponent;
                            $(target).find("b").addClass("highlighted")
                        } else {
                            this.removeHighlight()
                        }
                        return
                    }
                    if (this.clickedComponent && !this.clickedComponent.flags.canBeMoved) {
                        return
                    }
                    if (this.isMousedown && app.mousePosition.distanceTo(this.mousedownStartPosition) >= 2) {
                        var jqt = $(target).find("b");
                        var offset = jqt.offset(),
                            width = jqt.outerWidth(),
                            height = jqt.outerHeight();
                        app.dragStart({
                            component: this.clickedComponent,
                            origin: {
                                top: offset.top,
                                left: offset.left,
                                width: width,
                                height: height
                            }
                        });
                        if (this.clickedComponent.children) {
                            this.contract(this.clickedComponent)
                        }
                    }
                }
            }, {
                key: "cleanup",
                value: function cleanup() {
                    this.removeLine();
                    this.removeHighlight()
                }
            }, {
                key: "mouseup",
                value: function mouseup(e) {
                    this.isMousedown = false;
                    this.removeLine();
                    this.removeHighlight();
                    if (app.isDragging) {
                        this.clickedComponent = null;
                        return
                    }
                    var clicked = this.clickedComponent;
                    this.clickedComponent = null;
                    if (!app.aboveOverview) return;
                    var element = $(e.target);
                    if (element.is("b")) {
                        if (e.button == 2) {
                            if (clicked) {
                                clicked.showContextMenu()
                            }
                            return
                        }
                        if (element.hasClass("focused")) {
                            return
                        }
                        if (clicked) {
                            clicked.focus()
                        }
                    }
                }
            }, {
                key: "removeLine",
                value: function removeLine() {
                    this.lineIsShown = false;
                    this.element.find("line").remove()
                }
            }, {
                key: "removeHighlight",
                value: function removeHighlight() {
                    this.highlightIsShown = false;
                    this.element.find(".highlighted").removeClass("highlighted")
                }
            }, {
                key: "expandContract",
                value: function expandContract(e) {
                    if ($(e.target).is("b")) return;
                    var component = this.domNodeToComponent.get(e.currentTarget);
                    var status = this.expandedMap.get(component) || false;
                    if (status) {
                        this.contract(component)
                    } else {
                        this.expand(component)
                    }
                    e.preventDefault();
                    e.stopImmediatePropagation()
                }
            }, {
                key: "expand",
                value: function expand(component) {
                    var span = $(this.componentToDomNode.get(component));
                    span.next("div").slideDown("fast");
                    span.find("i").addClass("down");
                    this.expandedMap.set(component, true)
                }
            }, {
                key: "contract",
                value: function contract(component) {
                    var span = $(this.componentToDomNode.get(component));
                    span.next("div").slideUp("fast");
                    span.find("i").removeClass("down");
                    this.expandedMap.set(component, false)
                }
            }, {
                key: "markAsFocused",
                value: function markAsFocused(component) {
                    this.element.find(".focused").removeClass("focused");
                    var node = this.componentToDomNode.get(component),
                        span = $(node);
                    if (!node) {
                        return
                    }
                    span.find("b").addClass("focused");
                    var parents = span.parentsUntil("#overview-pane").show();
                    var spans = parents.prev();
                    for (var i = 0; i < spans.length; i++) {
                        if (this.domNodeToComponent.has(spans[i])) {
                            this.expandedMap.set(this.domNodeToComponent.get(spans[i]), true)
                        }
                    }
                    spans.find("i").addClass("down");
                    node.scrollIntoViewIfNeeded()
                }
            }, {
                key: "markAsNotFocused",
                value: function markAsNotFocused(component) {
                    $(this.componentToDomNode.get(component)).find("b").removeClass("focused")
                }
            }, {
                key: "markAsDragged",
                value: function markAsDragged(component) {
                    if (!this.componentToDomNode.has(component)) return;
                    this.componentToDomNode.get(component).classList.add("dragged")
                }
            }, {
                key: "markAsNotDragged",
                value: function markAsNotDragged(component) {
                    if (!this.componentToDomNode.has(component)) return;
                    this.componentToDomNode.get(component).classList.remove("dragged")
                }
            }, {
                key: "update",
                value: function update() {
                    if (!app.context) return;
                    var root = document.createDocumentFragment();
                    var cache = this.domNodeToComponent = new WeakMap;
                    var reverseCache = this.componentToDomNode = new WeakMap;
                    walk(app.canvas.html, root);

                    function walk(component, tip) {
                        var hasChildren = false;
                        var tmp = document.createElement("span");
                        var b = document.createElement("b");
                        b.appendChild(document.createTextNode(component.getFullName()));
                        cache.set(tmp, component);
                        reverseCache.set(component, tmp);
                        tmp.appendChild(b);
                        tip.appendChild(tmp);
                        if (component.isLocked()) {
                            var l = document.createElement("u");
                            l.className = "material-icon lock";
                            l.title = "Element is Locked";
                            l.textContent = "lock_outline";
                            tmp.appendChild(l)
                        }
                        if (component.isInstanceOfPackage()) {
                            var l = document.createElement("u");
                            l.className = "material-icon star";
                            l.title = "User Component";
                            l.textContent = "star";
                            tmp.appendChild(l)
                        }
                        if (component.children && component.children.length) {
                            var div = document.createElement("div");
                            for (var i = 0; i < component.children.length; i++) {
                                if (component.children[i] instanceof Component) {
                                    walk(component.children[i], div);
                                    hasChildren = true
                                }
                                if (component.children[i] instanceof InlineWrapper) {
                                    walk(component.children[i].component, div);
                                    hasChildren = true
                                }
                            }
                            tip.appendChild(div)
                        }
                        if (hasChildren) {
                            tmp.insertBefore(document.createElement("i"), b)
                        }
                    }
                    var is = root.querySelectorAll("i");
                    var component = null;
                    var state;
                    for (var i = 0; i < is.length; i++) {
                        component = cache.get(is[i].parentNode);
                        if (this.expandedMap.has(component)) {
                            state = this.expandedMap.get(component)
                        } else if (i < 2) {
                            state = true;
                            this.expandedMap.set(component, true)
                        } else {
                            state = false;
                            this.expandedMap.set(component, false)
                        }
                        if (state) {
                            is[i].classList.add("down");
                            is[i].parentNode.nextSibling.style.display = "block"
                        } else {
                            is[i].classList.remove("down");
                            is[i].parentNode.nextSibling.style.display = "none"
                        }
                    }
                    this.content.empty();
                    this.content.append(root);
                    if (app.context.focusedComponent) {
                        this.markAsFocused(app.context.focusedComponent)
                    }
                    return this.element
                }
            }]);
            return OverviewPane
        }(Pane);
        module.exports = OverviewPane
    }, {
        "../components/Component": 38,
        "../components/ComponentWithChildren": 39,
        "../components/InlineWrapper": 63,
        "../helpers/canParentTakeChild": 154,
        "../helpers/dragScroll": 160,
        "./Pane.js": 440
    }],
    440: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var Pane = function() {
            function Pane() {
                _classCallCheck(this, Pane);
                this.element = null;
                app.on("resize pane-resize", this.updateDimensions.bind(this));
                this.dimensions = {};
                this.contentDimensions = {};
                this._updateFunc = function() {
                    this.update()
                }.bind(this)
            }
            _createClass(Pane, [{
                key: "updateDimensions",
                value: function updateDimensions() {
                    this.dimensions = this.element[0].getBoundingClientRect();
                    if (this.content) {
                        this.contentDimensions = this.content[0].getBoundingClientRect()
                    }
                }
            }, {
                key: "scheduleUpdate",
                value: function scheduleUpdate() {
                    var time = arguments.length <= 0 || arguments[0] === undefined ? 20 : arguments[0];
                    clearTimeout(this._updateTimer);
                    this._updateTimer = setTimeout(this._updateFunc, time)
                }
            }]);
            return Pane
        }();
        module.exports = Pane
    }, {}],
    441: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var OptionItem = require("./OptionItem");
        var SelectOption = function(_OptionItem) {
            _inherits(SelectOption, _OptionItem);

            function SelectOption(options) {
                _classCallCheck(this, SelectOption);
                _get(Object.getPrototypeOf(SelectOption.prototype), "constructor", this).call(this, options);
                this.element = $("<label><span>" + this._options.label + "</span><select></select></label>")
            }
            _createClass(SelectOption, [{
                key: "bindEventListeners",
                value: function bindEventListeners() {
                    this.element.find("select").off("change").on("change", this.changeHandler.bind(this))
                }
            }, {
                key: "val",
                value: function val() {
                    return this.element.find("select").val()
                }
            }, {
                key: "update",
                value: function update() {
                    _get(Object.getPrototypeOf(SelectOption.prototype), "update", this).call(this);
                    var opts = this._options;
                    var children = opts.options.map(function(o) {
                        return '<option value="' + o.value + '">' + o.label + "</option>"
                    }).join("");
                    var select = this.element.find("select");
                    select.empty();
                    select.append(children);
                    select.val(this.getValue());
                    this.bindEventListeners();
                    return this.element
                }
            }]);
            return SelectOption
        }(OptionItem);
        module.exports = SelectOption
    }, {
        "./OptionItem": 437
    }],
    442: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x8, _x9, _x10) {
            var _again = true;
            _function: while (_again) {
                var object = _x8,
                    property = _x9,
                    receiver = _x10;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x8 = parent;
                        _x9 = property;
                        _x10 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];
                return arr2
            } else {
                return Array.from(arr)
            }
        }

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var Pane = require("./Pane.js");
        var parseDOMTree = require("../helpers/parseDOMTree");
        var prettyDOMNodeName = require("../helpers/prettyDOMNodeName");
        var normalizeCSSSelector = require("../helpers/normalizeCSSSelector");
        var getHTMLForNode = require("../helpers/getHTMLForNode");
        var componentTreeToArray = require("../helpers/componentTreeToArray");
        var escapeHTML = require("escape-html");
        var ButtonOption = require("../panes/ButtonOption");
        var TextBoxOption = require("../panes/TextBoxOption");
        var GroupOption = require("../panes/GroupOption");
        var LinkOption = require("../panes/LinkOption");
        var CSSRule = require("../base/CSSRule");
        var CSSBlock = require("../base/CSSBlock");
        var cssProperties = require("../config/css-properties");
        var SuggestionTooltip = require("./SuggestionTooltip");
        var dragScroll = require("../helpers/dragScroll");
        var parseCSS = require("../helpers/parseCSS");
        var StylesPane = function(_Pane) {
            _inherits(StylesPane, _Pane);

            function StylesPane(element) {
                _classCallCheck(this, StylesPane);
                _get(Object.getPrototypeOf(StylesPane.prototype), "constructor", this).call(this);
                this.element = element;
                this.targetElement = null;
                this.htmlColumn = element.find(".html-column");
                this.cssColumn = element.find(".css-column");
                this.userCSSContent = element.find(".css-column .user-css .content");
                this.domTree = element.find(".dom-tree");
                this.cssBlocks = [];
                this.treeElementToDOM = new WeakMap;
                this.domToTreeElement = new WeakMap;
                this.componentToTreeElement = new WeakMap;
                this.expandedElementsMap = new WeakMap;
                this.blockMatchedSelectors = new WeakMap;
                this.blockFocusoutTimeoutMap = new WeakMap;
                this.domToCSSItem = new WeakMap;
                this.cssItemToDOM = new WeakMap;
                this.attributesGroup = new GroupOption({
                    id: "attributes"
                });
                this.attributesPanel = this.element.find(".attribute-panel");
                this.attributesPanel.append(this.attributesGroup.update());
                this.cssActiveTab = "active-css";
                this.cssTabs = this.cssColumn.find(".tabs");
                this.cssTabs.on("click", ".tab", this.tabClick.bind(this));
                this.element.on("click", ".tabs", this.tabsClick.bind(this));
                app.on("context-activated", this.contextActivated.bind(this));
                app.on("component-updated", this.componentUpdated.bind(this));
                app.on("component-focused", this.componentFocused.bind(this));
                app.on("component-blurred", this.blurComponent.bind(this));
                app.on("context-css-changed", this.contextCSSChanged.bind(this));
                var dom = this.element;
                dom.on("mousedown", ".dom-tree b", this.mouseDownItem.bind(this));
                dom.on("mousedown", ".dom-tree div > .close-tag", this.mouseDownItem.bind(this));
                dom.on("mousedown", ".dom-tree i", this.arrowClick.bind(this));
                dom.on("mouseenter", ".dom-tree b", this.enterItem.bind(this));
                dom.on("mouseenter", ".dom-tree div > .close-tag", this.enterItem.bind(this));
                dom.on("mouseleave", ".dom-tree b", this.leaveItem.bind(this));
                dom.on("mouseleave", ".dom-tree div > .close-tag", this.leaveItem.bind(this));
                dom.on("keydown", "[contenteditable]", this.onEditableKeydown.bind(this));
                dom.on("input", "[contenteditable]", this.onEditableInput.bind(this));
                dom.on("focusin", "[contenteditable]", this.onEditableFocus.bind(this));
                dom.on("focusout", "[contenteditable]", this.onEditableFocusout.bind(this));
                dom.on("mousedown", ".css-block.temp", this.clickTempBlock.bind(this));
                dom.on("mousedown", ".css-block:not(.system) .css-property", this.clickCSSProperty.bind(this));
                dom.on("mousedown", ".css-block:not(.system) .css-value", this.clickCSSValue.bind(this));
                dom.on("mousedown", ".css-block:not(.system) .selector", this.clickSelector.bind(this));
                dom.on("mousedown", ".css-block:not(.system) .media", this.clickMediaQuery.bind(this));
                dom.on("click", ".css-block:not(.system) .opening-brace", this.clickOpeningBrace.bind(this));
                dom.on("click", ".css-block:not(.system) .closing-brace", this.clickClosingBrace.bind(this));
                dom.on("click", ".css-block:not(.system) .rules li", this.clickCSSRule.bind(this));
                dom.on("click", ".menu", this.showContextMenu.bind(this));
                dom.on("change", "input[type=checkbox]", this.checkBoxChange.bind(this));
                dom.on("click", ".user-css .message", this.clickNoStylesMessage.bind(this));
                dom.on("click", ".create-style", this.clickCreateStyleButton.bind(this));
                dom.on("click", ".user-css div.spacer", this.clickSpacer.bind(this));
                dom.on("mouseenter", ".user-css div.spacer:not(:last-child)", this.enterSpacer.bind(this));
                dom.on("mouseleave", ".user-css div.spacer:not(:last-child)", this.leaveSpacer.bind(this));
                dom.on("click", ".user-css", this.clickUserCSSContent.bind(this));
                this.blockSizes = [];
                this.lastSpacerIsHighlighted = false;
                this.isDragging = false;
                this.isMousedown = false;
                this.aboveUserStylesContent = false;
                this.mouseDownStartCoordinates = null;
                this.overIndex = -1;
                this.draggedBlockIndex = null;
                this.styleDragGhost = $("#style-drag");
                this.userStylesContent = this.cssColumn.find(".user-css .content");
                this.userStylesContentNode = this.userStylesContent[0];
                dom.on("mousedown", ".css-block .handle", this.mousedownHandle.bind(this));
                dom.on("mouseenter", ".user-css .content", this.mouseenterUserStylesContent.bind(this));
                dom.on("mouseleave", ".user-css .content", this.mouseleaveUserStylesContent.bind(this));
                app.on("mouseup", this.mouseup.bind(this));
                app.on("mousemove", this.mousemove.bind(this))
            }
            _createClass(StylesPane, [{
                key: "mouseenterUserStylesContent",
                value: function mouseenterUserStylesContent() {
                    this.aboveUserStylesContent = true
                }
            }, {
                key: "mouseleaveUserStylesContent",
                value: function mouseleaveUserStylesContent() {
                    this.aboveUserStylesContent = false
                }
            }, {
                key: "clickUserCSSContent",
                value: function clickUserCSSContent(e) {
                    if (e.target != this.userCSSContent[0]) return;
                    this.userCSSContent.find("div.spacer.highlight").click()
                }
            }, {
                key: "mousedownHandle",
                value: function mousedownHandle(e) {
                    var blockNode = e.target.closest(".css-block");
                    var block = this.domToCSSItem.get(blockNode);
                    if (!block) return;
                    this.draggedBlockIndex = this.cssBlocks.indexOf(block);
                    this.isMousedown = true;
                    this.mouseDownStartCoordinates = app.mousePosition.clone();
                    if (this.focus) {
                        var focusBlock = this.focus.block;
                        this.resetFocus();
                        this.refreshBlock(focusBlock)
                    }
                    e.preventDefault();
                    e.stopImmediatePropagation()
                }
            }, {
                key: "startDrag",
                value: function startDrag() {
                    var block = this.cssBlocks[this.draggedBlockIndex];
                    this.styleDragGhost.text(block.selector).show();
                    this.isDragging = true;
                    this.cssItemToDOM.get(block).classList.add("is-dragged");
                    this.scanCSSBlockSizes();
                    this.dragMove()
                }
            }, {
                key: "stopDrag",
                value: function stopDrag() {
                    dragScroll.reset(this.userStylesContentNode);
                    this.styleDragGhost.hide();
                    this.draggedBlockIndex = null;
                    this.isDragging = false;
                    this.isMousedown = false;
                    this.mouseDownStartCoordinates = null;
                    this.overIndex = -1;
                    this.userStylesContent.find("div.spacer.highlight").removeClass("highlight");
                    this.cssColumn.find(".is-dragged").removeClass("is-dragged")
                }
            }, {
                key: "dragMove",
                value: function dragMove() {
                    var rect = this.userStylesContentNode.getBoundingClientRect();
                    var y = app.mousePosition.y;
                    var distanceFromTop = y - rect.top;
                    var distanceFromCSSList = distanceFromTop + this.userStylesContentNode.scrollTop;
                    var index = this.getBlockIndexByY(distanceFromCSSList);
                    if (index > -1 && (index == this.draggedBlockIndex || index - 1 == this.draggedBlockIndex)) {
                        index = -1
                    }
                    if (this.overIndex != index) {
                        if (index >= 0) {
                            this.userStylesContent.find("div.spacer").eq(index).addClass("highlight")
                        } else {
                            this.userStylesContent.find("div.spacer.highlight").removeClass("highlight")
                        }
                        this.overIndex = index
                    }
                    this.styleDragGhost[0].style.transform = "translate3D(" + app.mousePosition.x + "px," + app.mousePosition.y + "px, 0)";
                    dragScroll.scroll(this.userStylesContentNode, rect, rect, app.mousePosition, {
                        topOffset: 50,
                        bottomOffset: 50,
                        speedUpScrolling: true
                    })
                }
            }, {
                key: "dragEnd",
                value: function dragEnd() {
                    if (!this.isDragging) return;
                    if (this.overIndex > -1) {
                        var block = this.cssBlocks[this.draggedBlockIndex];
                        this.moveBlock(block, this.overIndex)
                    }
                    this.stopDrag()
                }
            }, {
                key: "getBlockIndexByY",
                value: function getBlockIndexByY(y) {
                    var sum = 0;
                    for (var i = 0; i < this.blockSizes.length; i++) {
                        if (y < sum + 30) {
                            return i
                        }
                        sum += this.blockSizes[i].height + 10;
                        if (y < sum - 20) {
                            return -1
                        }
                    }
                    return this.blockSizes.length
                }
            }, {
                key: "betweenBlocks",
                value: function betweenBlocks(y) {
                    var sum = 0;
                    for (var i = 0; i < this.blockSizes.length; i++) {
                        if (y < sum + 10) {
                            return i
                        }
                        sum += this.blockSizes[i].height + 10;
                        if (y < sum) {
                            return -1
                        }
                    }
                    return this.blockSizes.length
                }
            }, {
                key: "getLinePosition",
                value: function getLinePosition(index) {
                    var sum = 0;
                    for (var i = 0; i < index; i++) {
                        sum += this.blockSizes[i].height + 10
                    }
                    return sum + 5
                }
            }, {
                key: "mousemove",
                value: function mousemove(e) {
                    if (!this.aboveUserStylesContent) {
                        if (this.lastSpacerIsHighlighted) {
                            this.unhighlightLastSpacer()
                        }
                        if (this.isDragging) {
                            this.stopDrag()
                        }
                        return
                    }
                    if (this.isDragging) {
                        this.dragMove();
                        return
                    }
                    if (this.isMousedown) {
                        if (this.mouseDownStartCoordinates && this.mouseDownStartCoordinates.distanceTo(app.mousePosition) > 3) {
                            this.startDrag()
                        }
                        return
                    }
                    if (!this.focus && this.isMouseAfterLastBlock()) {
                        this.highlightLastSpacer()
                    } else {
                        this.unhighlightLastSpacer()
                    }
                }
            }, {
                key: "isMouseAfterLastBlock",
                value: function isMouseAfterLastBlock() {
                    var block = this.cssBlocks[this.cssBlocks.length - 1];
                    if (!block) return;
                    var blockDOM = this.cssItemToDOM.get(block);
                    if (!blockDOM) return;
                    var rect = blockDOM.getBoundingClientRect();
                    return app.mousePosition.y > rect.bottom
                }
            }, {
                key: "highlightLastSpacer",
                value: function highlightLastSpacer() {
                    if (this.lastSpacerIsHighlighted) return;
                    var last = this.userCSSContent[0].querySelector("div.spacer:last-child");
                    if (last) {
                        last.classList.add("highlight")
                    }
                    this.lastSpacerIsHighlighted = true
                }
            }, {
                key: "unhighlightLastSpacer",
                value: function unhighlightLastSpacer(e) {
                    if (!this.lastSpacerIsHighlighted) return;
                    var last = this.userCSSContent[0].querySelector("div.spacer:last-child");
                    if (last) {
                        last.classList.remove("highlight")
                    }
                    this.lastSpacerIsHighlighted = false
                }
            }, {
                key: "enterSpacer",
                value: function enterSpacer(e) {
                    if (this.focus || this.isDragging) return;
                    e.target.classList.add("highlight")
                }
            }, {
                key: "leaveSpacer",
                value: function leaveSpacer(e) {
                    if (this.isDragging) return;
                    e.target.classList.remove("highlight")
                }
            }, {
                key: "clickSpacer",
                value: function clickSpacer(e) {
                    if (this.focus) return;
                    var allSpacers = this.cssColumn.find(".user-css div.spacer");
                    var index = allSpacers.index(e.target);
                    var block = new CSSBlock("");
                    this.focusNewBlockSelector(block, index);
                    this.updateCSSColumn()
                }
            }, {
                key: "mouseup",
                value: function mouseup(e) {
                    this.dragEnd()
                }
            }, {
                key: "tabClick",
                value: function tabClick(e) {
                    var elem = $(e.target);
                    if (elem.is(".active")) return;
                    this.cssActiveTab = elem.data("tab");
                    this.updateTabs()
                }
            }, {
                key: "tabsClick",
                value: function tabsClick(e) {
                    var elem = $(e.target);
                    if (this.element.hasClass("expanded")) {
                        if (!elem.is(".tabs")) return;
                        this.heightBeforeContract = Math.max(this.element.height(), 100);
                        this.element.height(25);
                        this.element.removeClass("expanded")
                    } else {
                        this.element.height(this.heightBeforeContract || win.height() / 2);
                        this.element.addClass("expanded")
                    }
                }
            }, {
                key: "scanCSSBlockSizes",
                value: function scanCSSBlockSizes() {
                    if (this.cssActiveTab != "user-css") return;
                    var blockNodes = this.cssColumn.find(".user-css .css-block").toArray();
                    this.blockSizes = blockNodes.map(function(node) {
                        var rect = node.getBoundingClientRect();
                        return {
                            height: rect.height,
                            block: this.domToCSSItem.get(node)
                        }
                    }.bind(this))
                }
            }, {
                key: "contextCSSChanged",
                value: function contextCSSChanged(context, block) {
                    if (this.ignoreUpdatedEvent) return;
                    if (block) {
                        this.refreshBlock(block)
                    } else {
                        this.scheduleCSSColumnUpdate()
                    }
                }
            }, {
                key: "componentFocused",
                value: function componentFocused(component) {
                    this.hideAttributesForm();
                    if (!this.ignoreComponentFocus) {
                        this.toggleTreeElementFocus(component.element[0], true)
                    }
                }
            }, {
                key: "blurComponent",
                value: function blurComponent(component) {
                    this.toggleTreeElementFocus(component.element[0], false)
                }
            }, {
                key: "componentUpdated",
                value: function componentUpdated() {
                    if (app.isInlineEditingActive()) {
                        return
                    }
                    this.scheduleUpdate()
                }
            }, {
                key: "contextActivated",
                value: function contextActivated() {
                    this.targetElement = null;
                    this.scheduleUpdate()
                }
            }, {
                key: "updateDOMTree",
                value: function updateDOMTree() {
                    var root = document.createDocumentFragment();
                    var map = this.treeElementToDOM;
                    var reverseMap = this.domToTreeElement;
                    var treeMap = this.componentToTreeElement;
                    var scrollTop = this.domTree[0].scrollTop;
                    var parsed = parseDOMTree(app.context.html.element[0], app.context, {
                        removeSystemElements: true
                    });
                    walk(parsed, root);

                    function walk(item, tip) {
                        var tmp = document.createElement("span");
                        var b = document.createElement("b");
                        var em = document.createElement("em");
                        b.appendChild(createOpenTag(item));
                        b.appendChild(em);
                        b.appendChild(createCloseTag(item));
                        map.set(tmp, item.element);
                        reverseMap.set(item.element, tmp);
                        if (app.context.domToComponent.has(item.element)) {
                            treeMap.set(app.context.domToComponent.get(item.element), tmp)
                        }
                        tmp.appendChild(b);
                        tip.appendChild(tmp);
                        if (item.children.length == 1 && typeof item.children[0] == "string") {
                            em.appendChild(document.createTextNode(item.children[0]))
                        } else if (item.children.length) {
                            em.appendChild(document.createTextNode("..."));
                            var div = document.createElement("div");
                            for (var i = 0; i < item.children.length; i++) {
                                if (typeof item.children[i] == "string") {
                                    stringToTextNode(item.children[i], div);
                                    continue
                                }
                                walk(item.children[i], div)
                            }
                            var expandedClosingTag = createCloseTag(item);
                            map.set(expandedClosingTag, item.element);
                            div.appendChild(expandedClosingTag);
                            tip.appendChild(div);
                            tmp.insertBefore(document.createElement("i"), b)
                        }
                    }

                    function stringToTextNode(str, node) {
                        if (!str || !str.trim().length) return;
                        var tmpSpan = document.createElement("span");
                        var tmpB = document.createElement("b");
                        tmpB.appendChild(document.createTextNode('"' + str + '"'));
                        tmpSpan.appendChild(tmpB);
                        node.appendChild(tmpSpan)
                    }

                    function createOpenTag(item) {
                        var strong = document.createElement("strong");
                        strong.classList.add("open-tag");
                        strong.appendChild(document.createTextNode("<" + item.tag));
                        var attr = Array.from(item.attributes);
                        var isID = false;
                        for (var i = 0; i < attr.length; i++) {
                            if (attr[i].name == "id") {
                                var tmp = attr[0];
                                attr[0] = attr[i];
                                attr[i] = tmp;
                                isID = true;
                                break
                            }
                        }
                        for (var i = 0; i < attr.length; i++) {
                            if (attr[i].name == "class") {
                                if (isID) {
                                    var tmp = attr[1];
                                    attr[1] = attr[i];
                                    attr[i] = tmp
                                } else {
                                    var tmp = attr[0];
                                    attr[0] = attr[i];
                                    attr[i] = tmp
                                }
                                break
                            }
                        }
                        for (var i = 0; i < attr.length; i++) {
                            var tmp = document.createElement("attr-name");
                            if (attr[i].value) {
                                tmp.appendChild(document.createTextNode(" " + attr[i].name + "="));
                                strong.appendChild(tmp);
                                tmp = document.createElement("attr-value");
                                tmp.appendChild(document.createTextNode('"' + attr[i].value + '"'));
                                strong.appendChild(tmp)
                            } else {
                                tmp.appendChild(document.createTextNode(" " + attr[i].name));
                                strong.appendChild(tmp)
                            }
                        }
                        if (item.selfclosing) {
                            strong.appendChild(document.createTextNode(" /"))
                        }
                        strong.appendChild(document.createTextNode(">"));
                        return strong
                    }

                    function createCloseTag(item) {
                        if (item.selfclosing) {
                            return document.createDocumentFragment()
                        }
                        var strong = document.createElement("strong");
                        strong.classList.add("close-tag");
                        strong.appendChild(document.createTextNode("</" + item.tag + ">"));
                        return strong
                    }
                    this.domTree.html(root);
                    var components = componentTreeToArray(app.context.html);
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;
                    try {
                        for (var _iterator = components[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var comp = _step.value;
                            if (this.expandedElementsMap.has(comp)) {
                                for (var path in this.expandedElementsMap.get(comp)) {
                                    var span = this.domToTreeElement.get(comp.findChildElementByPath(path));
                                    if (!span) continue;
                                    this.expandContract(span, this.expandedElementsMap.get(comp)[path])
                                }
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator["return"]) {
                                _iterator["return"]()
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError
                            }
                        }
                    }
                    if (app.context.focusedComponent) {
                        this.toggleTreeElementFocus(app.context.focusedComponent.element[0], true)
                    }
                    this.hideAttributesForm();
                    this.domTree[0].scrollTop = scrollTop
                }
            }, {
                key: "enterItem",
                value: function enterItem(e) {
                    var element = this.treeElementToDOM.get(e.currentTarget) || this.treeElementToDOM.get(e.currentTarget.parentNode);
                    if (element) {
                        app.canvas.highlightDOMElement(element)
                    }
                }
            }, {
                key: "leaveItem",
                value: function leaveItem(e) {
                    app.canvas.removeDOMHighlight()
                }
            }, {
                key: "copyNodeAsHTML",
                value: function copyNodeAsHTML(node) {
                    var html = getHTMLForNode(node, app.context);
                    electron.clipboardSet(html, html)
                }
            }, {
                key: "showAttributesForm",
                value: function showAttributesForm(node) {
                    this.unmarkTreeElements("highlighted");
                    this.markTreeElement(node, "highlighted");
                    var component = app.context.findComponentForElement(node);
                    var path = component.getPathForChildElement(node);
                    this.attributesGroup.empty();
                    var idField = new TextBoxOption({
                        label: "ID",
                        value: component.overrides.ids[path],
                        onEnter: saveAttributes,
                        onEscape: cancelAttributeEditing,
                        validation: function validation(value) {
                            var status = component.isIDValid(value, path);
                            if (status == -1) {
                                throw new Error("The ID should be longer than 2 characters.")
                            }
                            if (status == -2) {
                                throw new Error("This ID is invalid. Please only use letters, numbers, underscore and hyphen.")
                            }
                            if (status == -3) {
                                throw new Error("Such an ID already exists. Please choose another.")
                            }
                        }
                    });
                    var classField = new TextBoxOption({
                        label: "Class Names",
                        value: component.overrides.css[path],
                        onEnter: saveAttributes,
                        onEscape: cancelAttributeEditing
                    });
                    this.attributesGroup.add(idField);
                    this.attributesGroup.add(classField);
                    var controlGroup = new GroupOption({
                        id: "control-group"
                    });
                    controlGroup.add(new ButtonOption({
                        text: "Save",
                        onClick: saveAttributes
                    }));
                    var that = this;

                    function saveAttributes() {
                        var oldID = component.overrides.ids[path];
                        var oldClass = component.overrides.css[path];
                        var newID = oldID;
                        var newClass = classField.val();
                        if (component.isIDValid(idField.val()) == 1) {
                            newID = idField.val()
                        }
                        if (newID == oldID && newClass == oldClass) {
                            that.hideAttributesForm();
                            return
                        }
                        component.overrides.ids[path] = newID;
                        component.overrides.css[path] = newClass;
                        app.context.history.add({
                            name: "Change Element Attributes",
                            undo: function undo() {
                                component.overrides.ids[path] = oldID;
                                component.overrides.css[path] = oldClass;
                                component.update()
                            },
                            redo: function redo() {
                                component.overrides.ids[path] = newID;
                                component.overrides.css[path] = newClass;
                                component.update()
                            }
                        });
                        component.update()
                    }

                    function cancelAttributeEditing() {
                        that.hideAttributesForm()
                    }
                    controlGroup.add(new LinkOption({
                        text: "Cancel",
                        onClick: function onClick() {
                            that.hideAttributesForm()
                        }
                    }));
                    this.attributesGroup.add(controlGroup);
                    this.attributesGroup.update();
                    this.attributesPanel.show();
                    this.element.find(".attributes input:first").focus()
                }
            }, {
                key: "hideAttributesForm",
                value: function hideAttributesForm() {
                    this.attributesGroup.empty();
                    this.unmarkTreeElements("highlighted");
                    this.attributesGroup.update();
                    this.attributesPanel.hide()
                }
            }, {
                key: "mouseDownItem",
                value: function mouseDownItem(e) {
                    if (e.target.nodeType == "I") {
                        return
                    }
                    var element = this.treeElementToDOM.get(e.currentTarget) || this.treeElementToDOM.get(e.currentTarget.parentNode);
                    if (!element) return false;
                    var component = app.context.findComponentForElement(element);
                    if (e.button == 2) {
                        var items = [];
                        if (!component.isChildElementBlacklisted(element)) {
                            items.push({
                                name: "Edit Class & ID",
                                action: this.showAttributesForm.bind(this, element)
                            })
                        }
                        items.push({
                            name: "Copy As HTML",
                            action: this.copyNodeAsHTML.bind(this, element)
                        });
                        app.contextMenu.show(e.pageX, e.pageY, items);
                        e.preventDefault();
                        e.stopImmediatePropagation();
                        return
                    }
                    this.toggleTreeElementFocus(element);
                    if (component) {
                        var that = this;
                        this.ignoreComponentFocus = true;
                        component.focus();
                        setTimeout(function() {
                            that.ignoreComponentFocus = false
                        }, 50)
                    }
                }
            }, {
                key: "toggleTreeElementFocus",
                value: function toggleTreeElementFocus(element, status) {
                    this.unmarkTreeElements("focused");
                    if (status == undefined) {
                        status = element != this.targetElement
                    }
                    if (status) {
                        this.markTreeElement(element, "focused");
                        this.targetElement = element;
                        this.expandAllToElement(element);
                        this.scrollTreeElementIntoView(element)
                    } else {
                        this.targetElement = null
                    }
                    this.scheduleCSSColumnUpdate()
                }
            }, {
                key: "scrollTreeElementIntoView",
                value: function scrollTreeElementIntoView(element) {
                    var span = this.domToTreeElement.get(element);
                    if (!span) return;
                    span.scrollIntoViewIfNeeded()
                }
            }, {
                key: "markTreeElement",
                value: function markTreeElement(element, cls) {
                    var span = this.domToTreeElement.get(element);
                    if (!span) return;
                    span.lastChild.classList.add(cls);
                    if (span.nextSibling && span.nextSibling.matches("div")) {
                        span.nextSibling.lastChild.classList.add(cls)
                    }
                }
            }, {
                key: "unmarkTreeElements",
                value: function unmarkTreeElements(cls) {
                    this.domTree.find("." + cls).removeClass(cls)
                }
            }, {
                key: "expandAllToElement",
                value: function expandAllToElement(element) {
                    var updateExpandedMap = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
                    var span = this.domToTreeElement.get(element);
                    var parents = $(span).parents("div").show();
                    var spans = parents.prev("span");
                    spans.children("i").addClass("down");
                    spans.children("b").addClass("expanded");
                    if (updateExpandedMap) {
                        var that = this;
                        spans.each(function() {
                            that.updateExpandedState(this, true)
                        })
                    }
                }
            }, {
                key: "arrowClick",
                value: function arrowClick(e) {
                    var span = e.target.parentNode;
                    this.expandContract(span);
                    this.updateExpandedState(span, span.lastChild.classList.contains("expanded"))
                }
            }, {
                key: "updateExpandedState",
                value: function updateExpandedState(element) {
                    var newState = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
                    var domElem = this.treeElementToDOM.get(element);
                    if (!domElem) return;
                    var comp = app.context.findComponentForElement(domElem);
                    if (!comp) return;
                    var path = comp.getPathForChildElement(domElem);
                    if (!path) return;
                    if (!this.expandedElementsMap.has(comp)) {
                        this.expandedElementsMap.set(comp, {})
                    }
                    this.expandedElementsMap.get(comp)[path] = newState
                }
            }, {
                key: "expandContract",
                value: function expandContract(treeElement) {
                    var state = arguments.length <= 1 || arguments[1] === undefined ? "toggle" : arguments[1];
                    var span = $(treeElement);
                    var i = span.children("i");
                    var b = span.children("b");
                    if (!span.next("div").length) {
                        return
                    }
                    if (state == "toggle") {
                        span.next("div").slideToggle(100);
                        i.toggleClass("down");
                        b.toggleClass("expanded")
                    } else {
                        span.next("div")[state ? "show" : "hide"]();
                        i.toggleClass("down", state);
                        b.toggleClass("expanded", state)
                    }
                }
            }, {
                key: "clickCreateStyleButton",
                value: function clickCreateStyleButton(e) {
                    var block = new CSSBlock(prettyDOMNodeName(this.targetElement));
                    this.focusNewBlockSelector(block, app.context.css.length);
                    this.updateCSSColumn()
                }
            }, {
                key: "clickNoStylesMessage",
                value: function clickNoStylesMessage(e) {
                    var block = new CSSBlock("");
                    this.focusNewBlockSelector(block, 0);
                    this.updateCSSColumn()
                }
            }, {
                key: "clickCSSProperty",
                value: function clickCSSProperty(e) {
                    e.stopImmediatePropagation();
                    var li = e.currentTarget.parentNode;
                    var rule = this.domToCSSItem.get(li);
                    if (this.isCSSPropertyFocused(rule)) return;
                    e.preventDefault();
                    var block = this.domToCSSItem.get(li.closest(".css-block"));
                    if (!rule || !block) return;
                    this.focusCSSProperty(block, rule);
                    this.refreshBlock(block)
                }
            }, {
                key: "clickCSSValue",
                value: function clickCSSValue(e) {
                    e.stopImmediatePropagation();
                    var li = e.currentTarget.parentNode;
                    var rule = this.domToCSSItem.get(li);
                    if (this.isCSSValueFocused(rule)) return;
                    e.preventDefault();
                    var block = this.domToCSSItem.get(li.closest(".css-block"));
                    if (!rule || !block) return;
                    this.focusCSSValue(block, rule);
                    this.refreshBlock(block)
                }
            }, {
                key: "clickSelector",
                value: function clickSelector(e) {
                    e.stopImmediatePropagation();
                    var block = this.domToCSSItem.get(e.currentTarget.closest(".css-block"));
                    if (!block) return;
                    if (this.isSelectorFocused(block)) return;
                    e.preventDefault();
                    this.focusBlockSelector(block);
                    this.refreshBlock(block)
                }
            }, {
                key: "clickMediaQuery",
                value: function clickMediaQuery(e) {
                    e.stopImmediatePropagation();
                    var block = this.domToCSSItem.get(e.currentTarget.closest(".css-block"));
                    if (!block) return;
                    if (this.isMediaQueryFocused(block)) return;
                    e.preventDefault();
                    this.focusBlockMediaQuery(block);
                    this.refreshBlock(block)
                }
            }, {
                key: "clickTempBlock",
                value: function clickTempBlock(e) {
                    if (this.focus.type != "new-selector") return;
                    if (e.target.closest(".selector")) return;
                    e.stopImmediatePropagation();
                    e.preventDefault();
                    this.handleNext(e.currentTarget.querySelector(".selector").textContent)
                }
            }, {
                key: "clickOpeningBrace",
                value: function clickOpeningBrace(e) {
                    if (!e.target.matches(".opening-brace")) return;
                    e.stopImmediatePropagation();
                    e.preventDefault();
                    var block = this.domToCSSItem.get(e.currentTarget.closest(".css-block"));
                    if (!block) return;
                    this.focusNewCSSProperty(block, new CSSRule, 0);
                    this.refreshBlock(block)
                }
            }, {
                key: "clickClosingBrace",
                value: function clickClosingBrace(e) {
                    e.stopImmediatePropagation();
                    e.preventDefault();
                    var block = this.domToCSSItem.get(e.currentTarget.closest(".css-block"));
                    if (!block) return;
                    var rule = new CSSRule;
                    this.focusNewCSSProperty(block, rule, block.rules.length);
                    this.refreshBlock(block)
                }
            }, {
                key: "clickCSSRule",
                value: function clickCSSRule(e) {
                    if (!e.target.matches("li")) return;
                    e.stopImmediatePropagation();
                    e.preventDefault();
                    var li = e.currentTarget;
                    var rule = this.domToCSSItem.get(li);
                    var block = this.domToCSSItem.get(li.closest(".css-block"));
                    if (!rule || !block) return;
                    var index = block.rules.indexOf(rule);
                    if (index == -1) return;
                    this.focusNewCSSProperty(block, new CSSRule, index + 1);
                    this.refreshBlock(block)
                }
            }, {
                key: "checkBoxChange",
                value: function checkBoxChange(e) {
                    e.stopImmediatePropagation();
                    var li = e.target.closest("li");
                    var rule = this.domToCSSItem.get(li);
                    var block = this.domToCSSItem.get(li.closest(".css-block"));
                    this.toggleRule(block, rule);
                    this.refreshRule(rule)
                }
            }, {
                key: "onEditableKeydown",
                value: function onEditableKeydown(e) {
                    if (e.which == 38 || e.which == 40) {
                        var direction = e.which == 38 ? 1 : -1;
                        if (/^-?[\d\.]+.*$/.test(e.target.textContent)) {
                            this.saveCaretPosition();
                            e.target.textContent = e.target.textContent.replace(/^(-?\d[\d\.]*)(.*)$/, function(string, num, rest) {
                                var numb = Number(num) + direction;
                                if (e.shiftKey) {
                                    numb = Number(num) + direction * 10
                                } else if (e.altKey) {
                                    numb = (Number(num) * 10 + direction) / 10
                                }
                                if (numb != Math.round(numb)) {
                                    return numb.toFixed(1) + rest
                                }
                                return numb + rest
                            });
                            this.restoreCaretPosition(e.target.firstChild)
                        }
                        e.preventDefault()
                    }
                    if (e.which == 13) {
                        e.preventDefault();
                        this.handleNext(e.target.textContent)
                    }
                    if (e.which == 9) {
                        e.preventDefault();
                        if (e.shiftKey) {
                            this.handlePrevious(e.target.textContent)
                        } else {
                            this.handleNext(e.target.textContent)
                        }
                    }
                    if (e.which == 27) {
                        var focus = this.focus;
                        if (this.focus.type == "new-selector") {
                            this.resetFocus();
                            this.updateCSSColumn()
                        } else {
                            var block = focus.block;
                            this.resetFocus();
                            this.refreshBlock(block)
                        }
                    }
                    if (e.which == 8 && this.focus.type == "new-value" && e.target.textContent == "") {
                        e.preventDefault();
                        this.handlePrevious("")
                    }
                }
            }, {
                key: "onEditableInput",
                value: function onEditableInput(e) {
                    var focus = this.focus || {};
                    var block = focus.block,
                        rule = focus.rule,
                        type = focus.type;
                    this.saveCaretPosition();
                    e.target.textContent = e.target.textContent;
                    this.restoreCaretPosition(e.target.firstChild);
                    if (type == "selector" || type == "new-selector") {
                        if (e.target.textContent.match(/\{.*\}$/)) {
                            var cssBlocks = null;
                            try {
                                cssBlocks = parseCSS(e.target.textContent)
                            } catch (e) {
                                this.resetFocus();
                                this.refreshBlock(block);
                                return
                            }
                            if (cssBlocks.length) {
                                e.target.textContent = "";
                                var that = this;
                                setTimeout(function() {
                                    that.insertBlocks(cssBlocks, focus.index);
                                    if (that.cssActiveTab == "user-css") {
                                        var lastBlock = cssBlocks[cssBlocks.length - 1];
                                        that.focusCSSValue(lastBlock, lastBlock.rules[lastBlock.rules.length - 1])
                                    } else {
                                        that.resetFocus()
                                    }
                                    that.updateCSSColumn()
                                }, 20)
                            }
                        }
                        if (e.target.textContent.match(/\{\s*$/)) {
                            return this.handleNext(e.target.textContent.trim().slice(0, -1))
                        }
                    }
                    if (type == "property" || type == "new-property") {
                        if (e.target.textContent.match(/\:\s*$/)) {
                            return this.handleNext(e.target.textContent.trim().slice(0, -1))
                        }
                        var rules = quickParseRules(e.target.textContent);
                        if (rules.length) {
                            e.target.textContent = "";
                            var that = this;
                            setTimeout(function() {
                                var index = focus.index;
                                if (type == "property") {
                                    index = block.rules.indexOf(rule);
                                    that.deleteRule(block, rule)
                                }
                                that.insertRules(block, rules, index);
                                that.focusNewCSSProperty(block, new CSSRule, index + rules.length);
                                that.refreshBlock(block)
                            }, 20)
                        }
                    }
                    if (type == "value" || type == "new-value") {
                        if (e.target.textContent.match(/\;\s*$/)) {
                            return this.handleNext(e.target.textContent.trim().slice(0, -1))
                        }
                    }
                }
            }, {
                key: "onEditableFocus",
                value: function onEditableFocus(e) {
                    var block = this.domToCSSItem.get(e.target.closest(".css-block"));
                    if (!block) return;
                    if (this.blockFocusoutTimeoutMap.has(block)) {
                        clearTimeout(this.blockFocusoutTimeoutMap.get(block))
                    }
                    var focus = this.focus || {},
                        rule = focus.rule;
                    if (focus.type == "property" || focus.type == "new-property") {
                        this.activeTooltip = new SuggestionTooltip($(e.target), {
                            condition: /^([\w-]+)$/i,
                            items: cssProperties.validProperties
                        })
                    }
                    if (focus.type == "value" || focus.type == "new-value") {
                        if (cssProperties.validProperties.indexOf(rule.property) == -1) {
                            return
                        }
                        var cssPropertySuggestions = ["initial", "inherit"];
                        if (cssProperties.propertyValues.hasOwnProperty(rule.property.toLowerCase())) {
                            cssPropertySuggestions = cssPropertySuggestions.concat(cssProperties.propertyValues[rule.property.toLowerCase()]);
                            if (rule.property.toLowerCase() == "font-family") {
                                Array.prototype.unshift.apply(cssPropertySuggestions, app.context.getFonts().map(function(f) {
                                    return "'" + f.name + "'"
                                }))
                            }
                        }
                        this.activeTooltip = new SuggestionTooltip($(e.target), [{
                            condition: /^([\w-]*)$/i,
                            items: cssPropertySuggestions
                        }, {
                            condition: /url\(['"]?([\w-\.]*)$/i,
                            items: function items() {
                                return app.context.assets.images.map(function(i) {
                                    return i.name
                                })
                            }
                        }]);
                        if (e.target.textContent.trim().length == 0) {
                            this.activeTooltip.update()
                        }
                    }
                }
            }, {
                key: "onEditableFocusout",
                value: function onEditableFocusout(e) {
                    var block = this.domToCSSItem.get(e.target.closest(".css-block"));
                    if (!block) return;
                    var that = this;
                    if (this.blockFocusoutTimeoutMap.has(block)) {
                        clearTimeout(this.blockFocusoutTimeoutMap.get(block))
                    }
                    this.blockFocusoutTimeoutMap.set(block, setTimeout(function() {
                        if (that.focus && that.focus.block == block) {
                            that.resetFocus()
                        }
                        that.updateCSSColumn()
                    }, 50));
                    if (this.activeTooltip) {
                        this.activeTooltip.destroy();
                        this.activeTooltip = null
                    }
                }
            }, {
                key: "isRuleFocused",
                value: function isRuleFocused(rule) {
                    return this.focus && this.focus.rule == rule
                }
            }, {
                key: "isCSSPropertyFocused",
                value: function isCSSPropertyFocused(rule) {
                    return this.isRuleFocused(rule) && (this.focus.type == "property" || this.focus.type == "new-property")
                }
            }, {
                key: "isCSSValueFocused",
                value: function isCSSValueFocused(rule) {
                    return this.isRuleFocused(rule) && (this.focus.type == "value" || this.focus.type == "new-value")
                }
            }, {
                key: "isBlockFocused",
                value: function isBlockFocused(block) {
                    return this.focus && this.focus.block == block
                }
            }, {
                key: "isSelectorFocused",
                value: function isSelectorFocused(block) {
                    return this.isBlockFocused(block) && (this.focus.type == "selector" || this.focus.type == "new-selector")
                }
            }, {
                key: "isMediaQueryFocused",
                value: function isMediaQueryFocused(block) {
                    return this.isBlockFocused(block) && this.focus.type == "mediaquery"
                }
            }, {
                key: "focusBlockSelector",
                value: function focusBlockSelector(block) {
                    var index = app.context.css.indexOf(block);
                    this.focus = {
                        block: block,
                        type: "selector",
                        index: index
                    }
                }
            }, {
                key: "focusNewBlockSelector",
                value: function focusNewBlockSelector(block, index) {
                    this.focus = {
                        block: block,
                        type: "new-selector",
                        index: index
                    }
                }
            }, {
                key: "focusBlockMediaQuery",
                value: function focusBlockMediaQuery(block) {
                    this.focus = {
                        block: block,
                        type: "mediaquery"
                    }
                }
            }, {
                key: "focusCSSProperty",
                value: function focusCSSProperty(block, rule) {
                    this.focus = {
                        block: block,
                        rule: rule,
                        type: "property"
                    }
                }
            }, {
                key: "focusCSSValue",
                value: function focusCSSValue(block, rule) {
                    this.focus = {
                        block: block,
                        rule: rule,
                        type: "value"
                    }
                }
            }, {
                key: "focusNewCSSProperty",
                value: function focusNewCSSProperty(block, rule, index) {
                    this.focus = {
                        block: block,
                        rule: rule,
                        type: "new-property",
                        index: index
                    }
                }
            }, {
                key: "focusNewCSSValue",
                value: function focusNewCSSValue(block, rule, index) {
                    this.focus = {
                        block: block,
                        rule: rule,
                        type: "new-value",
                        index: index
                    }
                }
            }, {
                key: "resetFocus",
                value: function resetFocus() {
                    this.focus = null
                }
            }, {
                key: "handleNext",
                value: function handleNext() {
                    var val = arguments.length <= 0 || arguments[0] === undefined ? "" : arguments[0];
                    val = val.trim();
                    var block = this.focus.block,
                        rule = this.focus.rule;
                    switch (this.focus.type) {
                        case "selector":
                            if (val.length) {
                                this.updateSelector(block, val);
                                if (block.rules.length) {
                                    this.focusCSSProperty(block, block.rules[0])
                                } else {
                                    var rule = new CSSRule;
                                    this.focusNewCSSProperty(block, rule, 0)
                                }
                                this.refreshBlock(block)
                            } else {
                                var nextBlock = this.getNextBlock(block);
                                this.deleteBlock(block);
                                if (nextBlock) {
                                    this.focusBlockSelector(nextBlock)
                                } else {
                                    this.resetFocus()
                                }
                                this.updateCSSColumn()
                            }
                            break;
                        case "new-selector":
                            if (val.length) {
                                block.selector = val;
                                this.insertBlock(block, this.focus.index);
                                this.focusNewCSSProperty(block, new CSSRule, 0);
                                this.refreshBlock(block)
                            } else {
                                this.resetFocus();
                                this.updateCSSColumn()
                            }
                            break;
                        case "mediaquery":
                            if (val.length) {
                                this.updateMediaQuery(block, val)
                            } else {
                                this.updateMediaQuery(block, false)
                            }
                            this.resetFocus();
                            this.refreshBlock(block);
                            break;
                        case "property":
                            if (val.length) {
                                this.updateRule(block, rule, val, rule.value);
                                this.focusCSSValue(block, rule)
                            } else {
                                var nextRule = this.getNextRule(block, rule);
                                var previousRule = this.getPreviousRule(block, rule);
                                this.deleteRule(block, rule);
                                if (nextRule) {
                                    this.focusCSSProperty(block, nextRule)
                                } else if (previousRule) {
                                    this.focusCSSProperty(block, previousRule)
                                } else {
                                    this.resetFocus()
                                }
                            }
                            this.refreshBlock(block);
                            break;
                        case "new-property":
                            if (val.length) {
                                rule.property = val;
                                this.focusNewCSSValue(block, rule, this.focus.index)
                            } else {
                                var nextRule = null;
                                if (this.focus.index == 0) {
                                    nextRule = block.rules[0]
                                } else {
                                    nextRule = this.getNextRule(block, this.focus.index - 1)
                                }
                                var nextBlock = this.getNextBlock(block);
                                if (nextRule) {
                                    this.focusCSSProperty(block, nextRule)
                                } else if (nextBlock) {
                                    this.focusBlockSelector(nextBlock);
                                    this.refreshBlock(nextBlock)
                                } else {
                                    this.resetFocus()
                                }
                            }
                            this.refreshBlock(block);
                            break;
                        case "value":
                            var ruleIndex = block.rules.indexOf(rule);
                            if (val.length) {
                                this.updateRule(block, rule, rule.property, val);
                                ruleIndex++
                            } else {
                                this.deleteRule(block, rule)
                            }
                            var nextRule = this.getNextRule(block, rule);
                            if (nextRule) {
                                this.focusCSSProperty(block, nextRule)
                            } else {
                                this.focusNewCSSProperty(block, new CSSRule, ruleIndex)
                            }
                            this.refreshBlock(block);
                            break;
                        case "new-value":
                            if (val.length) {
                                rule.value = val;
                                this.insertRule(block, rule, this.focus.index)
                            } else {
                                this.updateRule(block, rule, rule.property, val)
                            }
                            var nextRule = this.getNextRule(block, rule);
                            if (nextRule) {
                                this.focusCSSProperty(block, nextRule)
                            } else {
                                var rule = new CSSRule;
                                this.focusNewCSSProperty(block, rule, this.focus.index + 1)
                            }
                            this.refreshBlock(block);
                            break
                    }
                }
            }, {
                key: "handlePrevious",
                value: function handlePrevious() {
                    var val = arguments.length <= 0 || arguments[0] === undefined ? "" : arguments[0];
                    val = val.trim();
                    var block = this.focus.block,
                        rule = this.focus.rule;
                    switch (this.focus.type) {
                        case "selector":
                            var previousBlock = this.getPreviousBlock(block);
                            if (val.length) {
                                this.updateSelector(block, val)
                            } else {
                                this.deleteBlock(block)
                            }
                            if (previousBlock) {
                                if (previousBlock.rules.length) {
                                    this.focusCSSValue(previousBlock, previousBlock.rules[previousBlock.rules.length - 1])
                                } else {
                                    this.focusBlockSelector(previousBlock)
                                }
                                this.refreshBlock(previousBlock)
                            } else {
                                this.resetFocus()
                            }
                            if (val.length) {
                                this.refreshBlock(block)
                            } else {
                                this.updateCSSColumn()
                            }
                            break;
                        case "new-selector":
                            if (val.length) {
                                block.selector = val;
                                this.insertBlock(block, this.focus.index);
                                this.resetFocus();
                                this.refreshBlock(block)
                            } else {
                                this.resetFocus();
                                this.updateCSSColumn()
                            }
                            break;
                        case "mediaquery":
                            if (val.length) {
                                this.updateMediaQuery(block, val)
                            } else {
                                this.updateMediaQuery(block, false)
                            }
                            this.resetFocus();
                            this.refreshBlock(block);
                            break;
                        case "property":
                            var previousRule = this.getPreviousRule(block, rule);
                            if (val.length) {
                                this.updateRule(block, rule, val, rule.value)
                            } else {
                                this.deleteRule(block, rule)
                            }
                            if (previousRule) {
                                this.focusCSSValue(block, previousRule)
                            } else {
                                this.focusBlockSelector(block)
                            }
                            this.refreshBlock(block);
                            break;
                        case "new-property":
                            if (val.length) {
                                rule.property = val;
                                if (rule.value.trim().length) {
                                    this.insertRule(block, rule, this.focus.index)
                                }
                            }
                            var previousRule = this.getPreviousRule(block, this.focus.index);
                            if (previousRule) {
                                this.focusCSSValue(block, previousRule)
                            } else {
                                this.focusBlockSelector(block)
                            }
                            this.refreshBlock(block);
                            break;
                        case "value":
                            if (val.length) {
                                this.updateRule(block, rule, rule.property, val);
                                this.focusCSSProperty(block, rule)
                            } else {
                                var previousRule = this.getPreviousRule(block, rule);
                                if (previousRule) {
                                    this.focusCSSValue(block, previousRule)
                                } else {
                                    this.focusBlockSelector(block)
                                }
                                this.deleteRule(block, rule)
                            }
                            this.refreshBlock(block);
                            break;
                        case "new-value":
                            rule.value = val;
                            this.focusNewCSSProperty(block, rule, this.focus.index);
                            this.refreshBlock(block);
                            break
                    }
                }
            }, {
                key: "getNextRule",
                value: function getNextRule(block, current) {
                    var index = current;
                    if (current instanceof CSSRule) {
                        index = block.rules.indexOf(current)
                    }
                    if (index < 0) return null;
                    if (block.rules[index + 1]) return block.rules[index + 1];
                    return null
                }
            }, {
                key: "getPreviousRule",
                value: function getPreviousRule(block, current) {
                    var index = current;
                    if (current instanceof CSSRule) {
                        index = block.rules.indexOf(current)
                    }
                    if (index > 0) return block.rules[index - 1];
                    return null
                }
            }, {
                key: "getNextBlock",
                value: function getNextBlock(block) {
                    var index = this.cssBlocks.indexOf(block);
                    if (index == -1) return null;
                    var nextBlock = this.cssBlocks[index + 1];
                    if (!nextBlock) return null;
                    if (nextBlock.system) return null;
                    return nextBlock
                }
            }, {
                key: "getPreviousBlock",
                value: function getPreviousBlock(block) {
                    var index = this.cssBlocks.indexOf(block);
                    if (index < 1) return null;
                    var previousBlock = this.cssBlocks[index - 1];
                    if (previousBlock.system) return null;
                    return previousBlock
                }
            }, {
                key: "insertRules",
                value: function insertRules(block, rules, index) {
                    var history = arguments.length <= 3 || arguments[3] === undefined ? "Add CSS Rules" : arguments[3];
                    var oldRules = block.rules.slice();
                    block.addAtIndex(rules, index);
                    var newRules = block.rules.slice();
                    this.ignoreUpdatedEvent = true;
                    app.trigger("context-css-changed", app.context, block);
                    this.ignoreUpdatedEvent = false;
                    app.context.history.add({
                        name: history,
                        undo: function undo() {
                            block.rules = oldRules;
                            app.trigger("context-css-changed", app.context, block)
                        },
                        redo: function redo() {
                            block.rules = newRules;
                            app.trigger("context-css-changed", app.context, block)
                        }
                    })
                }
            }, {
                key: "insertRule",
                value: function insertRule(block, rule, index) {
                    this.insertRules(block, rule, index, "Add CSS Rule")
                }
            }, {
                key: "updateRule",
                value: function updateRule(block, rule, newProperty, newValue) {
                    var oldProperty = rule.property;
                    var oldValue = rule.value;
                    if (newProperty == oldProperty && newValue == oldValue) return;
                    rule.property = newProperty;
                    rule.value = newValue;
                    this.ignoreUpdatedEvent = true;
                    app.trigger("context-css-changed", app.context, block);
                    this.ignoreUpdatedEvent = false;
                    app.context.history.add({
                        name: "Change CSS Rule",
                        undo: function undo() {
                            rule.property = oldProperty;
                            rule.value = oldValue;
                            app.trigger("context-css-changed", app.context, block)
                        },
                        redo: function redo() {
                            rule.property = newProperty;
                            rule.value = newValue;
                            app.trigger("context-css-changed", app.context, block)
                        }
                    })
                }
            }, {
                key: "deleteRule",
                value: function deleteRule(block, rule) {
                    var oldRules = block.rules.slice();
                    block.removeRule(rule);
                    var newRules = block.rules.slice();
                    this.ignoreUpdatedEvent = true;
                    app.trigger("context-css-changed", app.context, block);
                    this.ignoreUpdatedEvent = false;
                    app.context.history.add({
                        name: "Delete CSS Rule",
                        undo: function undo() {
                            block.rules = oldRules;
                            app.trigger("context-css-changed", app.context, block)
                        },
                        redo: function redo() {
                            block.rules = newRules;
                            app.trigger("context-css-changed", app.context, block)
                        }
                    })
                }
            }, {
                key: "insertBlock",
                value: function insertBlock(block, index) {
                    app.context.addCSSBlockAtIndex(block, index);
                    if (this.cssActiveTab == "active-css") {
                        this.cssBlocks.unshift(block)
                    }
                    this.ignoreUpdatedEvent = true;
                    app.trigger("context-css-changed", app.context);
                    this.ignoreUpdatedEvent = false;
                    app.context.history.add({
                        name: "Create CSS Block",
                        undo: function undo() {
                            app.context.deleteCSSBlock(block);
                            app.trigger("context-css-changed", app.context)
                        },
                        redo: function redo() {
                            app.context.addCSSBlockAtIndex(block, index);
                            app.trigger("context-css-changed", app.context)
                        }
                    })
                }
            }, {
                key: "insertBlocks",
                value: function insertBlocks(blocks, index) {
                    var oldCSS = app.context.css.slice();
                    app.context.addCSSBlocksAtIndex(blocks, index);
                    var newCSS = app.context.css.slice();
                    this.ignoreUpdatedEvent = true;
                    app.trigger("context-css-changed", app.context);
                    this.ignoreUpdatedEvent = false;
                    app.context.history.add({
                        name: "Create CSS Block",
                        undo: function undo() {
                            app.context.css = oldCSS;
                            app.trigger("context-css-changed", app.context)
                        },
                        redo: function redo() {
                            app.context.css = newCSS;
                            app.trigger("context-css-changed", app.context)
                        }
                    })
                }
            }, {
                key: "deleteBlock",
                value: function deleteBlock(block) {
                    var index = app.context.findIndexForCSSBlock(block);
                    app.context.deleteCSSBlock(block);
                    this.ignoreUpdatedEvent = true;
                    app.trigger("context-css-changed", app.context);
                    this.ignoreUpdatedEvent = false;
                    app.context.history.add({
                        name: "Delete CSS Block",
                        undo: function undo() {
                            app.context.addCSSBlockAtIndex(block, index);
                            app.trigger("context-css-changed", app.context)
                        },
                        redo: function redo() {
                            app.context.deleteCSSBlock(block);
                            app.trigger("context-css-changed", app.context)
                        }
                    })
                }
            }, {
                key: "moveBlock",
                value: function moveBlock(block, newIndex) {
                    var oldIndex = app.context.findIndexForCSSBlock(block);
                    if (newIndex > oldIndex) {
                        newIndex--
                    }
                    app.context.css.splice(oldIndex, 1);
                    app.context.css.splice(newIndex, 0, block);
                    app.trigger("context-css-changed", app.context);
                    app.context.history.add({
                        name: "Delete CSS Block",
                        undo: function undo() {
                            app.context.css.splice(newIndex, 1);
                            app.context.css.splice(oldIndex, 0, block);
                            app.trigger("context-css-changed", app.context)
                        },
                        redo: function redo() {
                            app.context.css.splice(oldIndex, 1);
                            app.context.css.splice(newIndex, 0, block);
                            app.trigger("context-css-changed", app.context)
                        }
                    })
                }
            }, {
                key: "updateSelector",
                value: function updateSelector(block, newSelector) {
                    var oldSelector = block.selector;
                    if (newSelector == oldSelector) return;
                    block.selector = newSelector;
                    this.refreshBlockMatchedSelectors(block);
                    var that = this;
                    this.ignoreUpdatedEvent = true;
                    app.trigger("context-css-changed", app.context, block);
                    this.ignoreUpdatedEvent = false;
                    app.context.history.add({
                        name: "Update CSS Selector",
                        undo: function undo() {
                            block.selector = oldSelector;
                            that.refreshBlockMatchedSelectors(block);
                            app.trigger("context-css-changed", app.context, block)
                        },
                        redo: function redo() {
                            block.selector = newSelector;
                            that.refreshBlockMatchedSelectors(block);
                            app.trigger("context-css-changed", app.context, block)
                        }
                    })
                }
            }, {
                key: "refreshBlockMatchedSelectors",
                value: function refreshBlockMatchedSelectors(block) {
                    if (this.cssActiveTab != "active-css") return;
                    if (!this.targetElement) return;
                    var result = block.calculateSpecificityFor(this.targetElement);
                    this.blockMatchedSelectors.set(block, result.selectors || [])
                }
            }, {
                key: "updateMediaQuery",
                value: function updateMediaQuery(block, newMediaQuery) {
                    var oldMediaQuery = block.mediaQuery;
                    if (newMediaQuery == oldMediaQuery) return;
                    block.mediaQuery = newMediaQuery;
                    this.ignoreUpdatedEvent = true;
                    app.trigger("context-css-changed", app.context, block);
                    this.ignoreUpdatedEvent = false;
                    app.context.history.add({
                        name: "Update Media Query",
                        undo: function undo() {
                            block.mediaQuery = oldMediaQuery;
                            app.trigger("context-css-changed", app.context, block)
                        },
                        redo: function redo() {
                            block.mediaQuery = newMediaQuery;
                            app.trigger("context-css-changed", app.context, block)
                        }
                    })
                }
            }, {
                key: "toggleRule",
                value: function toggleRule(block, rule) {
                    var status = arguments.length <= 2 || arguments[2] === undefined ? "toggle" : arguments[2];
                    var oldStatus = rule.enabled;
                    var newStatus = !oldStatus;
                    if (status != "toggle") {
                        newStatus = status
                    }
                    if (newStatus == oldStatus) return;
                    rule.enabled = newStatus;
                    this.ignoreUpdatedEvent = true;
                    app.trigger("context-css-changed", app.context, block);
                    this.ignoreUpdatedEvent = false;
                    app.context.history.add({
                        name: "Toggle CSS Rule",
                        undo: function undo() {
                            rule.enabled = oldStatus;
                            app.trigger("context-css-changed", app.context, block)
                        },
                        redo: function redo() {
                            rule.enabled = newStatus;
                            app.trigger("context-css-changed", app.context, block)
                        }
                    })
                }
            }, {
                key: "refreshBlock",
                value: function refreshBlock(block) {
                    var node = this.cssItemToDOM.get(block);
                    if (!node) return;
                    if (app.context.findIndexForCSSBlock(block) == -1) {
                        if (node.parentNode) node.parentNode.removeChild(node);
                        return
                    }
                    var newNode = this.renderBlock(block);
                    $(node).replaceWith(newNode);
                    this.focusContentEditable(newNode)
                }
            }, {
                key: "refreshRule",
                value: function refreshRule(rule) {
                    var node = this.cssItemToDOM.get(rule);
                    if (!node) return;
                    var newNode = this.renderRule(rule);
                    $(node).replaceWith(newNode);
                    this.focusContentEditable(newNode)
                }
            }, {
                key: "focusContentEditable",
                value: function focusContentEditable(node) {
                    var elem = node.querySelector("[contenteditable]");
                    if (!elem) return;
                    elem.focus();
                    this.selectContents(elem);
                    elem.scrollIntoViewIfNeeded()
                }
            }, {
                key: "renderGroup",
                value: function renderGroup(group) {
                    if (!group.blocks.length) {
                        return document.createDocumentFragment()
                    }
                    var elem = document.createElement("div");
                    elem.classList.add("css-group");
                    if (group.inherited) {
                        var tmp = document.createElement("div");
                        tmp.classList.add("inherit-label");
                        tmp.textContent = "Inherited from " + group.inheritedFrom;
                        elem.appendChild(tmp)
                    }
                    if (group.pseudo) {
                        var tmp = document.createElement("div");
                        tmp.classList.add("inherit-label");
                        tmp.textContent = ":before and :after elements";
                        elem.appendChild(tmp)
                    }
                    var blocks = group.blocks.map(this.renderBlock.bind(this));
                    for (var i = 0; i < blocks.length; i++) {
                        elem.appendChild(blocks[i])
                    }
                    this.domToCSSItem.set(elem, group);
                    return elem
                }
            }, {
                key: "renderBlock",
                value: function renderBlock(block) {
                    var elem = document.createElement("div");
                    elem.classList.add("css-block");
                    var focus = this.focus || {};
                    var thisIsTempBlock = focus.block == block && focus.type == "new-selector";
                    if (thisIsTempBlock) {
                        elem.classList.add("temp")
                    }
                    var selector = document.createElement("span");
                    if (this.cssActiveTab == "active-css" && this.blockMatchedSelectors.has(block)) {
                        selector.innerHTML = formatSelector(block.selector, this.blockMatchedSelectors.get(block))
                    } else {
                        if (block.selector.length) {
                            selector.innerHTML = "<b>" + escapeHTML(block.selector) + "</b>"
                        } else {
                            selector.textContent = ""
                        }
                    }
                    if (this.cssActiveTab == "user-css" && !thisIsTempBlock) {
                        var handle = document.createElement("span");
                        handle.classList.add("handle");
                        elem.appendChild(handle)
                    }
                    selector.classList.add("selector");
                    if (focus.block == block && (focus.type == "selector" || focus.type == "new-selector")) {
                        selector.contentEditable = true;
                        selector.spellcheck = false
                    }
                    if (block.system) {
                        elem.classList.add("system")
                    }
                    var media;
                    if (block.mediaQuery == false) {
                        media = document.createDocumentFragment()
                    } else {
                        media = document.createElement("p");
                        media.classList.add("media");
                        media.textContent = "@media ";
                        var mSpan = document.createElement("span");
                        mSpan.textContent = block.mediaQuery;
                        media.appendChild(mSpan);
                        if (focus.block == block && focus.type == "mediaquery") {
                            mSpan.contentEditable = true;
                            mSpan.spellcheck = false
                        } else {
                            if (!block.isMediaQueryValid()) {
                                media.classList.add("error")
                            }
                        }
                    }
                    var menu = document.createElement("div");
                    menu.classList.add("menu");
                    menu.innerHTML = "<span></span>";
                    var openingBrace = document.createElement("p");
                    openingBrace.classList.add("opening-brace");
                    openingBrace.appendChild(selector);
                    openingBrace.appendChild(document.createTextNode(" {"));
                    var closingBrace = document.createElement("p");
                    closingBrace.classList.add("closing-brace");
                    closingBrace.textContent = "}";
                    var origin = document.createElement("div");
                    origin.classList.add("origin");
                    origin.textContent = block.origin;
                    if (block.system) {
                        origin.innerHTML = '<i class="material-icon">lock_outline</i> ' + origin.innerHTML;
                        origin.title = "Locked. Duplicate to edit."
                    }
                    var ul = document.createElement("ul");
                    ul.classList.add("rules");
                    var rules = block.rules.map(this.renderRule.bind(this));
                    for (var i = 0; i < rules.length; i++) {
                        ul.appendChild(rules[i])
                    }
                    if (!thisIsTempBlock) {
                        elem.appendChild(menu)
                    }
                    elem.appendChild(media);
                    elem.appendChild(openingBrace);
                    elem.appendChild(ul);
                    elem.appendChild(closingBrace);
                    elem.appendChild(origin);
                    if (focus.block == block && (focus.type == "new-value" || focus.type == "new-property")) {
                        var newRule = this.renderRule(focus.rule);
                        newRule.classList.add("placeholder");
                        ul.insertBefore(newRule, ul.children[focus.index])
                    }
                    this.domToCSSItem.set(elem, block);
                    this.cssItemToDOM.set(block, elem);
                    return elem
                }
            }, {
                key: "renderRule",
                value: function renderRule(rule) {
                    var focus = this.focus || {};
                    var li = document.createElement("li");
                    var checkbox = document.createElement("input");
                    checkbox.type = "checkbox";
                    checkbox.tabIndex = -1;
                    checkbox.checked = true;
                    var propertySpan = document.createElement("span");
                    propertySpan.textContent = rule.property;
                    propertySpan.classList.add("css-property");
                    var valueSpan = document.createElement("span");
                    valueSpan.textContent = rule.value;
                    valueSpan.classList.add("css-value");
                    var spacer = document.createElement("i");
                    spacer.textContent = ": ";
                    spacer.classList.add("spacer");
                    var semi = document.createElement("span");
                    semi.textContent = ";";
                    if (this.isRuleFocused(rule)) {
                        if (focus.type == "property" || focus.type == "new-property") {
                            propertySpan.contentEditable = true;
                            propertySpan.spellcheck = false
                        } else {
                            valueSpan.contentEditable = true;
                            valueSpan.spellcheck = false
                        }
                    } else {
                        if (rule.system) {
                            li.classList.add("system")
                        }
                        if (!rule.enabled) {
                            li.classList.add("disabled");
                            checkbox.checked = false
                        }
                        if (!rule.isValid()) {
                            li.classList.add("error")
                        }
                    }
                    li.appendChild(checkbox);
                    li.appendChild(propertySpan);
                    li.appendChild(spacer);
                    li.appendChild(valueSpan);
                    li.appendChild(semi);
                    this.domToCSSItem.set(li, rule);
                    this.cssItemToDOM.set(rule, li);
                    return li
                }
            }, {
                key: "saveCaretPosition",
                value: function saveCaretPosition() {
                    this.sel = window.getSelection();
                    this.cursor_offset = this.sel.baseOffset
                }
            }, {
                key: "restoreCaretPosition",
                value: function restoreCaretPosition(element) {
                    if (!element) return;
                    var range = window.getSelection().getRangeAt(0);
                    this.cursor_offset = Math.min(this.cursor_offset, element.textContent.length);
                    range.setStart(element, this.cursor_offset);
                    range.collapse(true);
                    this.sel.removeAllRanges();
                    this.sel.addRange(range)
                }
            }, {
                key: "selectContents",
                value: function selectContents(element) {
                    var selection = window.getSelection();
                    var range = document.createRange();
                    range.selectNodeContents(element);
                    selection.removeAllRanges();
                    selection.addRange(range)
                }
            }, {
                key: "duplicateBlockMenuAction",
                value: function duplicateBlockMenuAction(block) {
                    var index = app.context.findIndexForCSSBlock(block);
                    var clone;
                    if (block.system) {
                        clone = block.cloneAsUserBlock()
                    } else {
                        clone = block.clone()
                    }
                    clone.removePackageAssociation();
                    app.context.css.splice(index + 1, 0, clone);
                    app.trigger("context-css-changed", app.context);
                    app.context.history.add({
                        name: "Duplicate CSS Block",
                        undo: function undo() {
                            app.context.css.splice(index + 1, 1);
                            app.trigger("context-css-changed", app.context)
                        },
                        redo: function redo() {
                            app.context.css.splice(index + 1, 0, clone);
                            app.trigger("context-css-changed", app.context)
                        }
                    })
                }
            }, {
                key: "toggleMediaQueryMenuAction",
                value: function toggleMediaQueryMenuAction(block) {
                    var query = false,
                        oldQuery = block.mediaQuery;
                    var maxWidth = app.canvas.getBreakpointsForSize().max,
                        minWidth = app.canvas.getBreakpointsForSize().min;
                    if (block.mediaQuery) {
                        query = false
                    } else if (maxWidth == Infinity) {
                        query = "(min-width:" + minWidth + "px)"
                    } else {
                        query = "(max-width:" + maxWidth + "px)"
                    }
                    block.mediaQuery = query;
                    this.refreshBlock(block);
                    this.ignoreUpdatedEvent = true;
                    app.trigger("context-css-changed", app.context);
                    this.ignoreUpdatedEvent = false;
                    app.context.history.add({
                        name: "Toggle CSS Media Query",
                        undo: function undo() {
                            block.mediaQuery = oldQuery;
                            app.trigger("context-css-changed", app.context)
                        },
                        redo: function redo() {
                            block.mediaQuery = query;
                            app.trigger("context-css-changed", app.context)
                        }
                    })
                }
            }, {
                key: "deleteBlockMenuAction",
                value: function deleteBlockMenuAction(block) {
                    this.deleteBlock(block);
                    this.updateCSSColumn()
                }
            }, {
                key: "showContextMenu",
                value: function showContextMenu(e) {
                    var menu = $(e.target).closest(".menu");
                    var block = this.domToCSSItem.get(menu.closest(".css-block")[0]);
                    var top = menu.offset().top;
                    var left = menu.offset().left + menu.width();
                    var options = [{
                        name: "Duplicate",
                        action: this.duplicateBlockMenuAction.bind(this, block)
                    }];
                    if (block.system == false) {
                        var mq = "Add Media Query";
                        if (block.mediaQuery !== false) {
                            mq = "Remove Media Query"
                        }
                        options.push({
                            name: mq,
                            action: this.toggleMediaQueryMenuAction.bind(this, block)
                        }, {
                            name: "Delete",
                            action: this.deleteBlockMenuAction.bind(this, block)
                        })
                    }
                    app.contextMenu.show(left, top, options, {
                        forcePosition: "top-right"
                    })
                }
            }, {
                key: "updateTabs",
                value: function updateTabs() {
                    this.cssTabs.find(".active").removeClass("active");
                    this.cssTabs.find(".tab." + this.cssActiveTab).addClass("active");
                    this.cssColumn.find(".tab-target").removeClass("active");
                    this.cssColumn.find(".tab-target." + this.cssActiveTab).addClass("active");
                    this.scheduleCSSColumnUpdate()
                }
            }, {
                key: "scheduleCSSColumnUpdate",
                value: function scheduleCSSColumnUpdate() {
                    clearTimeout(this._cssColumnUpdateTimer);
                    this._cssColumnUpdateTimer = setTimeout(this.updateCSSColumn.bind(this), 50)
                }
            }, {
                key: "updateCSSColumn",
                value: function updateCSSColumn() {
                    if (this.cssActiveTab == "active-css") {
                        this.updateActiveStyles()
                    } else {
                        this.updateUserStyles()
                    }
                }
            }, {
                key: "updateUserStyles",
                value: function updateUserStyles() {
                    var content = this.userStylesContent,
                        message = this.cssColumn.find(".user-css .message");
                    this.lastSpacerIsHighlighted = false;
                    this.cssBlocks = app.context.css;
                    var allBlocks = this.cssBlocks;
                    if (this.focus && this.focus.type == "new-selector") {
                        allBlocks = allBlocks.slice();
                        allBlocks.splice(this.focus.index, 0, this.focus.block)
                    }
                    if (allBlocks.length) {
                        content.show();
                        message.hide()
                    } else {
                        content.hide().empty();
                        message.show();
                        return
                    }
                    var blocks = allBlocks.map(this.renderBlock.bind(this));
                    var fragment = document.createDocumentFragment();
                    var spacer;
                    for (var i = 0; i < blocks.length; i++) {
                        spacer = document.createElement("div");
                        spacer.setAttribute("class", "spacer");
                        fragment.appendChild(spacer);
                        fragment.appendChild(blocks[i])
                    }
                    spacer = document.createElement("div");
                    spacer.setAttribute("class", "spacer");
                    fragment.appendChild(spacer);
                    content.html(fragment);
                    this.focusContentEditable(content[0])
                }
            }, {
                key: "updateActiveStyles",
                value: function updateActiveStyles() {
                    var content = this.cssColumn.find(".active-css .content"),
                        message = this.cssColumn.find(".active-css .message");
                    if (this.targetElement) {
                        content.show();
                        message.hide()
                    } else {
                        content.hide().empty();
                        message.show();
                        return
                    }
                    var allBlocks = new Set,
                        result, pseudoBlocks = [],
                        cssItem, blockWeight = new WeakMap,
                        onlyPseudo, pseudoRegex = /:before|:after/;
                    var element = this.targetElement;
                    this.cssGroups = [];
                    this.cssBlocks = [];
                    if (!element) {
                        return this.element
                    }
                    if (!app.canvas.contains(this.targetElement)) {
                        return this.element
                    }
                    var combinedCSS = app.context.getAllCSS();
                    while (element.nodeType != Node.DOCUMENT_NODE) {
                        cssItem = {
                            blocks: [],
                            inherited: this.targetElement != element,
                            inheritedFrom: prettyDOMNodeName(element)
                        };
                        for (var i = 0; i < combinedCSS.length; i++) {
                            if (allBlocks.has(combinedCSS[i])) continue;
                            if (!combinedCSS[i].matchesElement(element)) continue;
                            result = combinedCSS[i].calculateSpecificityFor(element);
                            if (result) {
                                if (cssItem.inherited && !combinedCSS[i].isInheritable()) {
                                    continue
                                }
                                combinedCSS[i].cleanEmptyRules();
                                blockWeight.set(combinedCSS[i], result.specificity);
                                allBlocks.add(combinedCSS[i]);
                                this.blockMatchedSelectors.set(combinedCSS[i], result.selectors);
                                onlyPseudo = true;
                                for (var j = 0; j < result.selectors.length; j++) {
                                    if (!pseudoRegex.test(result.selectors[j].selector)) {
                                        onlyPseudo = false;
                                        break
                                    }
                                }
                                if (onlyPseudo) {
                                    pseudoBlocks.push(combinedCSS[i])
                                } else {
                                    cssItem.blocks.push(combinedCSS[i])
                                }
                            }
                        }
                        if (cssItem.blocks.length) {
                            var _cssBlocks;
                            cssItem.blocks.sort(function(a, b) {
                                if (a.isUserEmpty()) return -1;
                                if (b.isUserEmpty()) return 1;
                                if (blockWeight.get(b) == blockWeight.get(a)) {
                                    if (a.system && !b.system) return 1;
                                    if (!a.system && b.system) return -1;
                                    return 0
                                }
                                return blockWeight.get(b) - blockWeight.get(a)
                            });
                            this.cssGroups.push(cssItem);
                            (_cssBlocks = this.cssBlocks).push.apply(_cssBlocks, _toConsumableArray(cssItem.blocks))
                        }
                        element = element.parentNode
                    }
                    if (this.focus && this.focus.type == "new-selector") {
                        if (this.cssGroups.length) {
                            this.cssGroups[0].blocks.unshift(this.focus.block)
                        }
                    }
                    if (pseudoBlocks.length) {
                        this.cssGroups.push({
                            blocks: pseudoBlocks,
                            pseudo: true
                        })
                    }
                    var groups = this.cssGroups.map(this.renderGroup.bind(this));
                    var fragment = document.createDocumentFragment();
                    for (var i = 0; i < groups.length; i++) {
                        fragment.appendChild(groups[i])
                    }
                    content.html('<a class="create-style">Create Style</a>');
                    content.append(fragment);
                    this.focusContentEditable(content[0])
                }
            }, {
                key: "update",
                value: function update() {
                    this.updateDOMTree();
                    this.scheduleCSSColumnUpdate();
                    return this.element
                }
            }]);
            return StylesPane
        }(Pane);

        function formatSelector(selector, matches) {
            selector = selector.replace(/([^,]+),? ?/g, function(full, select) {
                select = normalizeCSSSelector(select);
                for (var i = 0; i < matches.length; i++) {
                    if (matches[i].selector == select) {
                        return "_b_" + full + "_/b_"
                    }
                }
                return full
            });
            return escapeHTML(selector).replace(/_b_/g, "<b>").replace(/_\/b_/g, "</b>")
        }

        function quickParseRules(value) {
            if (!/[^:]+:[^;]+;?/.test(value)) return [];
            var rules = value.match(/[^:]+:[^;]+;?/g).map(function(rule) {
                var tmp = rule.match(/([^:]+):([^;]+);?/);
                return new CSSRule(tmp[1].trim(), tmp[2].trim())
            }).filter(function(rule) {
                return !CSSRule.isPropertyForbidden(rule.property)
            });
            return rules
        }
        module.exports = StylesPane
    }, {
        "../base/CSSBlock": 9,
        "../base/CSSRule": 10,
        "../config/css-properties": 132,
        "../helpers/componentTreeToArray": 156,
        "../helpers/dragScroll": 160,
        "../helpers/getHTMLForNode": 169,
        "../helpers/normalizeCSSSelector": 178,
        "../helpers/parseCSS": 181,
        "../helpers/parseDOMTree": 182,
        "../helpers/prettyDOMNodeName": 184,
        "../panes/ButtonOption": 428,
        "../panes/GroupOption": 432,
        "../panes/LinkOption": 436,
        "../panes/TextBoxOption": 444,
        "./Pane.js": 440,
        "./SuggestionTooltip": 443,
        "escape-html": 412
    }],
    443: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }
        var escapeRegexString = require("../helpers/escapeRegexString");
        var escapeHTML = require("escape-html");
        var SuggestionTooltip = function() {
            function SuggestionTooltip(textBox, suggestions) {
                _classCallCheck(this, SuggestionTooltip);
                if (!Array.isArray(suggestions)) {
                    suggestions = [suggestions]
                }
                this.textBox = textBox;
                this.suggestions = suggestions;
                this.filteredSuggestions = [];
                this.element = $('<div class="suggestion-tooltip">');
                this.element.hide().appendTo(document.body);
                this.chosenOption = -1;
                this.visible = false;
                textBox.on("keydown.tooltip", this.keyDown.bind(this));
                doc.on("scroll.tooltip resize.tooltip", this.hide.bind(this));
                this.element.on("mousedown", this.mouseDown.bind(this));
                this.activeSuggestionGroup = null
            }
            _createClass(SuggestionTooltip, [{
                key: "mouseDown",
                value: function mouseDown(e) {
                    var index = this.element.find(".result").index(e.target);
                    if (index == -1) return false;
                    this.insertSuggestion(this.filteredSuggestions[index]);
                    this.destroy();
                    this.textBox.focus();
                    e.preventDefault();
                    e.stopPropagation()
                }
            }, {
                key: "keyDown",
                value: function keyDown(e) {
                    var preventDefault = true;
                    var update = false;
                    if (e.which == 38) {
                        if (this.visible) {
                            this.chosenOption--;
                            if (this.chosenOption < 0) {
                                this.chosenOption = this.filteredSuggestions.length - 1
                            }
                            update = true
                        }
                    } else if (e.which == 40) {
                        if (this.visible) {
                            this.chosenOption++;
                            if (this.chosenOption >= this.filteredSuggestions.length) {
                                this.chosenOption = 0
                            }
                            update = true
                        }
                    } else if (e.which == 13 || e.which == 9) {
                        if (!this.isOptionChosen()) return;
                        if (e.which == 9 && e.shiftKey) {
                            return
                        }
                        if (e.which == 9) {
                            preventDefault = false
                        }
                        if (this.visible) {
                            if (this.activeSuggestionGroup) {
                                this.insertSuggestion(this.filteredSuggestions[this.chosenOption])
                            }
                            this.hide();
                            if (preventDefault) {
                                e.preventDefault();
                                e.stopImmediatePropagation();
                                return false
                            }
                            return
                        }
                    } else if (e.which == 27) {
                        if (this.visible) {
                            this.hide();
                            e.preventDefault();
                            e.stopImmediatePropagation();
                            return false
                        }
                    } else if (e.which == 37 || e.which == 39 || e.which == 36 || e.which == 35) {
                        preventDefault = false
                    } else {
                        preventDefault = false;
                        this.chosenOption = 0;
                        update = true
                    }
                    if (update) {
                        setTimeout(function() {
                            this.update()
                        }.bind(this), 20)
                    }
                    if (this.visible && preventDefault) {
                        e.preventDefault();
                        e.stopImmediatePropagation();
                        return false
                    }
                }
            }, {
                key: "insertSuggestion",
                value: function insertSuggestion(str) {
                    var content = this.textBox.text().trim();
                    var suggestion = str;
                    var append = this.activeSuggestionGroup.appendAfterInsert || "";
                    var tmp = content.match(this.activeSuggestionGroup.condition);
                    if (tmp && tmp[1] && tmp[1].trim().length) {
                        var regex = new RegExp(escapeRegexString(tmp[1]) + "$");
                        this.textBox.text(content.replace(regex, suggestion) + append)
                    } else {
                        this.textBox.text(content + suggestion + append)
                    }
                    var range = document.createRange();
                    range.selectNodeContents(this.textBox[0]);
                    range.collapse(false);
                    var selection = window.getSelection();
                    selection.removeAllRanges();
                    selection.addRange(range)
                }
            }, {
                key: "isOptionChosen",
                value: function isOptionChosen() {
                    return this.chosenOption >= 0 && this.chosenOption < this.filteredSuggestions.length
                }
            }, {
                key: "update",
                value: function update() {
                    if (!this.visible && this.textBox.text().length == 0) {
                        this.chosenOption = -1
                    }
                    this.element.empty();
                    this.filteredSuggestions = [];
                    var textBoxContent = this.textBox.text().trim(),
                        tmp = [],
                        searchString = "",
                        searchRegex = /^/;
                    for (var i = 0; i < this.suggestions.length; i++) {
                        tmp = textBoxContent.match(this.suggestions[i].condition);
                        if (tmp) {
                            if (tmp[1]) {
                                searchRegex = new RegExp("^" + escapeRegexString(tmp[1]), "i");
                                searchString = tmp[1]
                            }
                            if (typeof this.suggestions[i].items == "function") {
                                this.filteredSuggestions = this.suggestions[i].items()
                            } else {
                                this.filteredSuggestions = this.suggestions[i].items
                            }
                            this.activeSuggestionGroup = this.suggestions[i];
                            break
                        }
                    }
                    this.filteredSuggestions = this.filteredSuggestions.filter(function(p) {
                        return searchRegex.test(p)
                    }).slice(0, 10);
                    if (this.filteredSuggestions.length == 1 && this.filteredSuggestions[0] == searchString) {
                        this.filteredSuggestions = []
                    }
                    var html = this.filteredSuggestions.map(function(r) {
                        return '<div class="result"> ' + escapeHTML(r).replace(searchRegex, "<span>$&</span>") + " </div>"
                    });
                    this.element.html(html);
                    if (this.filteredSuggestions.length) {
                        this.show()
                    } else {
                        this.hide()
                    }
                    if (this.isOptionChosen()) {
                        this.element.find("div").eq(this.chosenOption).addClass("selected")
                    }
                    var textBox = this.textBox[0],
                        li = textBox.parentNode;
                    if (!textBox || !textBox.parentNode) {
                        return
                    }
                    var winHeight = win.height(),
                        winWidth = win.width();
                    var rect = textBox.getBoundingClientRect();
                    if (winHeight - rect.bottom >= rect.top) {
                        this.element.css({
                            top: rect.bottom + 5,
                            bottom: "auto"
                        })
                    } else {
                        this.element.css({
                            top: "auto",
                            bottom: winHeight - rect.top + 10
                        })
                    }
                    if (this.element.width() + rect.left >= winWidth) {
                        this.element.css({
                            left: "auto",
                            right: 20
                        })
                    } else {
                        this.element.css({
                            left: rect.left,
                            right: "auto"
                        })
                    }
                    return this.element
                }
            }, {
                key: "show",
                value: function show() {
                    if (!this.visible) {
                        this.visible = true;
                        this.element.show()
                    }
                }
            }, {
                key: "hide",
                value: function hide() {
                    if (this.visible) {
                        this.visible = false;
                        this.element.hide()
                    }
                }
            }, {
                key: "destroy",
                value: function destroy() {
                    doc.off(".tooltip");
                    this.textBox.off(".tooltip");
                    this.element.remove()
                }
            }]);
            return SuggestionTooltip
        }();
        module.exports = SuggestionTooltip
    }, {
        "../helpers/escapeRegexString": 164,
        "escape-html": 412
    }],
    444: [function(require, module, exports) {
        "use strict";
        var _createClass = function() {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor)
                }
            }
            return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor
            }
        }();
        var _get = function get(_x, _x2, _x3) {
            var _again = true;
            _function: while (_again) {
                var object = _x,
                    property = _x2,
                    receiver = _x3;
                desc = parent = getter = undefined;
                _again = false;
                if (object === null) object = Function.prototype;
                var desc = Object.getOwnPropertyDescriptor(object, property);
                if (desc === undefined) {
                    var parent = Object.getPrototypeOf(object);
                    if (parent === null) {
                        return undefined
                    } else {
                        _x = parent;
                        _x2 = property;
                        _x3 = receiver;
                        _again = true;
                        continue _function
                    }
                } else if ("value" in desc) {
                    return desc.value
                } else {
                    var getter = desc.get;
                    if (getter === undefined) {
                        return undefined
                    }
                    return getter.call(receiver)
                }
            }
        };

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function")
            }
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass)
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass
        }
        var OptionItem = require("./OptionItem");
        var TextBoxOption = function(_OptionItem) {
            _inherits(TextBoxOption, _OptionItem);

            function TextBoxOption(options) {
                _classCallCheck(this, TextBoxOption);
                _get(Object.getPrototypeOf(TextBoxOption.prototype), "constructor", this).call(this, options);
                this.element = $('<label class="option textboxoption"><span>' + this._options.label + '</span> <input type="text" value="" />' + "<error-tooltip-icon><tooltip></tooltip></error-tooltip-icon></label>")
            }
            _createClass(TextBoxOption, [{
                key: "bindEventListeners",
                value: function bindEventListeners() {
                    var input = this.element.find("input");
                    input.off(".tboption");
                    input.on("focusout.tboption", this.focusout.bind(this));
                    input.on("focusin.tboption", this.focusin.bind(this));
                    input.on("keydown.tboption", this.keydown.bind(this))
                }
            }, {
                key: "val",
                value: function val(v) {
                    if (v !== undefined) {
                        this.element.find("input").val(v);
                        return
                    }
                    return this.element.find("input").val()
                }
            }, {
                key: "keydown",
                value: function keydown(e) {
                    if (e.which == 13) {
                        if (this._options.onEnter) {
                            this._options.onEnter()
                        }
                        app.focusTarget.focus()
                    }
                    if (e.which == 27) {
                        if (this._options.onEscape) {
                            this._options.onEscape()
                        }
                    }
                }
            }, {
                key: "focusin",
                value: function focusin() {
                    this.hideError()
                }
            }, {
                key: "focusout",
                value: function focusout() {
                    try {
                        this.changeHandler()
                    } catch (e) {
                        this.showError(e.message);
                        return false
                    }
                }
            }, {
                key: "update",
                value: function update() {
                    _get(Object.getPrototypeOf(TextBoxOption.prototype), "update", this).call(this);
                    this.element.find("input[type=text]").val(this.getValue());
                    this.bindEventListeners();
                    return this.element
                }
            }, {
                key: "showError",
                value: function showError(message) {
                    var tooltipIcon = this.element.find("error-tooltip-icon");
                    var tooltip = this.element.find("tooltip");
                    tooltip.text(message);
                    tooltipIcon.show()
                }
            }, {
                key: "hideError",
                value: function hideError() {
                    this.element.find("error-tooltip-icon").hide()
                }
            }]);
            return TextBoxOption
        }(OptionItem);
        module.exports = TextBoxOption
    }, {
        "./OptionItem": 437
    }]
}, {}, [194]);
